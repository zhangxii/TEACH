[
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumSetSize(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumSetSize(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumSetSize(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumSetSize(self, nums1: List[int], nums2: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumSetSize(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumSetSize(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maximumSetSize = function(nums1, nums2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumSetSize(nums1: number[], nums2: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function maximumSetSize($nums1, $nums2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumSetSize(_ nums1: [Int], _ nums2: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumSetSize(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumSetSize(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumSetSize(nums1 []int, nums2 []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef maximum_set_size(nums1, nums2)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumSetSize(nums1: Array[Int], nums2: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_set_size(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-set-size nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_set_size(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmaximum_set_size(Nums1, Nums2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_set_size(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def maximum_set_size(nums1, nums2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of even length <code>n</code>.</p>\n\n<p>You must remove <code>n / 2</code> elements from <code>nums1</code> and <code>n / 2</code> elements from <code>nums2</code>. After the removals, you insert the remaining elements of <code>nums1</code> and <code>nums2</code> into a set <code>s</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible size of the set</em> <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,1,2], nums2 = [1,1,1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 = [2,2] and nums2 = [1,1]. Therefore, s = {1,2}.\nIt can be shown that 2 is the maximum possible size of the set s after the removals.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,4,5,6], nums2 = [2,3,2,3,2,3]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 = [1,4,5] and nums2 = [2,3,2]. Therefore, s = {1,2,3,4,5}.\nIt can be shown that 5 is the maximum possible size of the set s after the removals.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,1,2,2,3,3], nums2 = [4,4,5,5,6,6]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 = [1,2,3] and nums2 = [4,5,6]. Therefore, s = {1,2,3,4,5,6}.\nIt can be shown that 6 is the maximum possible size of the set s after the removals.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,1,2]\n[1,1,1,1]\n[1,2,3,4,5,6]\n[2,3,2,3,2,3]\n[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
        "formTitle": "[3002]Maximum Size of a Set After Removals",
        "frequency": 0.0,
        "frontendQuestionId": "3002",
        "hints": [
            "Removing <code>n / 2</code> elements from each array is the same as keeping <code>n / 2<code> elements in each array.",
            "Think of a greedy algorithm.",
            "For each array, we will greedily keep the elements that are only in that array. Once we run out of such elements, we will keep the elements that are common to both arrays."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumSetSize",
            "params": [
                {
                    "name": "nums1",
                    "type": "integer[]"
                },
                {
                    "name": "nums2",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3228",
        "similarQuestions": [
            "[{\"title\": \"Intersection of Two Arrays\", \"titleSlug\": \"intersection-of-two-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u4e24\\u4e2a\\u6570\\u7ec4\\u7684\\u4ea4\\u96c6\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,2,1,2]\n[1,1,1,1]",
        "title": "Maximum Size of a Set After Removals",
        "titleSlug": "maximum-size-of-a-set-after-removals",
        "infer_hints": [
            "For each pair of numbers, you have two choices: remove it from nums1 or nums2.",
            "We need to make sure that the number of elements we remove from nums1 and nums2 are the same.",
            "Sort both arrays in ascending order.",
            "Use dynamic programming.",
            "Use a dynamic programming approach.",
            "Can you apply the binary search algorithm on the answer?",
            "You can do the greedy algorithm.",
            "Use dynamic programming.",
            "Sort the arrays in increasing order.",
            "We want to keep as many distinct elements as possible.",
            "We can use dynamic programming to solve this problem.",
            "We can use a 2D prefix sum array to solve this problem.",
            "Try to use a priority queue.",
            "How to get the maximum possible size of the set?",
            "Can we just always remove the maximum element from the array?",
            "Can you do it in O(N) time?",
            "For each pair of numbers (a, b), consider the two possibilities: (a, b) or (b, a).",
            "Try to use a data structure that can keep track of the maximum value in a set.",
            "Use a prefix sum to keep track of the numbers removed.",
            "You can use a dynamic programming approach to solve this problem."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxPartitionsAfterOperations(string s, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxPartitionsAfterOperations(String s, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxPartitionsAfterOperations(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxPartitionsAfterOperations(self, s: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxPartitionsAfterOperations(char* s, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxPartitionsAfterOperations(string s, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar maxPartitionsAfterOperations = function(s, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxPartitionsAfterOperations(s: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxPartitionsAfterOperations($s, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxPartitionsAfterOperations(_ s: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxPartitionsAfterOperations(s: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxPartitionsAfterOperations(String s, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxPartitionsAfterOperations(s string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_partitions_after_operations(s, k)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxPartitionsAfterOperations(s: String, k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_partitions_after_operations(s: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-partitions-after-operations s k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_partitions_after_operations(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nmax_partitions_after_operations(S, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_partitions_after_operations(s :: String.t, k :: integer) :: integer\n  def max_partitions_after_operations(s, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>.</p>\n\n<p>First, you are allowed to change <strong>at most</strong> <strong>one</strong> index in <code>s</code> to another lowercase English letter.</p>\n\n<p>After that, do the following partitioning operation until <code>s</code> is <strong>empty</strong>:</p>\n\n<ul>\n\t<li>Choose the <strong>longest</strong> <strong>prefix</strong> of <code>s</code> containing at most <code>k</code> <strong>distinct</strong> characters.</li>\n\t<li><strong>Delete</strong> the prefix from <code>s</code> and increase the number of partitions by one. The remaining characters (if any) in <code>s</code> maintain their initial order.</li>\n</ul>\n\n<p>Return an integer denoting the <strong>maximum</strong> number of resulting partitions after the operations by optimally choosing at most one index to change.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;accca&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The optimal way is to change <code>s[2]</code> to something other than a and c, for example, b. then it becomes <code>&quot;acbca&quot;</code>.</p>\n\n<p>Then we perform the operations:</p>\n\n<ol>\n\t<li>The longest prefix containing at most 2 distinct characters is <code>&quot;ac&quot;</code>, we remove it and <code>s</code> becomes <code>&quot;bca&quot;</code>.</li>\n\t<li>Now The longest prefix containing at most 2 distinct characters is <code>&quot;bc&quot;</code>, so we remove it and <code>s</code> becomes <code>&quot;a&quot;</code>.</li>\n\t<li>Finally, we remove <code>&quot;a&quot;</code> and <code>s</code> becomes empty, so the procedure ends.</li>\n</ol>\n\n<p>Doing the operations, the string is divided into 3 partitions, so the answer is 3.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;aabaab&quot;, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially&nbsp;<code>s</code>&nbsp;contains 2 distinct characters, so whichever character we change, it will contain at most 3 distinct characters, so the longest prefix with at most 3 distinct characters would always be all of it, therefore the answer is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;xxyz&quot;, k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The optimal way is to change&nbsp;<code>s[0]</code>&nbsp;or&nbsp;<code>s[1]</code>&nbsp;to something other than characters in&nbsp;<code>s</code>, for example, to change&nbsp;<code>s[0]</code>&nbsp;to&nbsp;<code>w</code>.</p>\n\n<p>Then&nbsp;<code>s</code>&nbsp;becomes <code>&quot;wxyz&quot;</code>, which consists of 4 distinct characters, so as <code>k</code> is 1, it will divide into 4 partitions.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= 26</code></li>\n</ul>\n",
        "exampleTestcases": "\"accca\"\n2\n\"aabaab\"\n3\n\"xxyz\"\n1",
        "formTitle": "[3003]Maximize the Number of Partitions After Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3003",
        "hints": [
            "For each position, try to brute-force the replacements.",
            "To speed up the brute-force solution, we can precompute the following (without changing any index) using prefix sums and binary search:<ul>\r\n<li><code>pref[i]</code>: The number of resulting partitions from the operations by performing the operations on <code>s[0:i]</code>.</li>\r\n<li><code>suff[i]</code>: The number of resulting partitions from the operations by performing the operations on <code>s[i:n - 1]</code>, where <code>n == s.length</code>.</li>\r\n<li><code>partition_start[i]</code>: The start index of the partition containing the <code>i<sup>th</sup></code> index after performing the operations.</li>\r\n</ul>",
            "Now, for a position <code>i</code>, we can try all possible <code>25</code> replacements:<br />\r\nFor a replacement, using prefix sums and binary search, we need to find the rightmost index, <code>r</code>, such that the number of distinct characters in the range <code>[partition_start[i], r]</code> is at most <code>k</code>.<br />\r\nThere are <code>2</code> cases:<ul>\r\n<li><code>r >= i</code>: the number of resulting partitions in this case is <code>1 + pref[partition_start[i] - 1] + suff[r + 1]</code>.</li>\r\n<li>Otherwise, we need to find the rightmost index <code>r<sub>2</sub></code> such that the number of distinct characters in the range <code>[r:r<sub>2</sub>]</code> is at most <code>k</code>. The answer in this case is <code>2 + pref[partition_start[i] - 1] + suff[r<sub>2</sub> + 1]</code></li>\r\n</ul>",
            "The answer is the maximum among all replacements."
        ],
        "level": 3,
        "metaData": {
            "name": "maxPartitionsAfterOperations",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3233",
        "similarQuestions": [
            "[{\"title\": \"Can Make Palindrome from Substring\", \"titleSlug\": \"can-make-palindrome-from-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6784\\u5efa\\u56de\\u6587\\u4e32\\u68c0\\u6d4b\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "\"accca\"\n2",
        "title": "Maximize the Number of Partitions After Operations",
        "titleSlug": "maximize-the-number-of-partitions-after-operations",
        "infer_hints": [
            "Try to find the longest prefix with at most k distinct characters and partition it.",
            "We can solve this problem by using a sliding window technique.",
            "How many different substrings are there that start with an index <code>i</code> and contain at most <code>k</code> distinct characters?",
            "Use dynamic programming to keep track of the maximum number of partitions we can make with <i>exactly</i> i characters.",
            "Use dynamic programming to solve this problem.",
            "You can use sliding window to solve this problem.",
            "We can use the sliding window concept to solve this problem.",
            "Use a sliding window approach to solve this problem.",
            "Try to find the longest prefix with at most k distinct characters and divide the string into these prefixes.",
            "Sliding window, dynamic programming, prefix sum.",
            "The length of the longest prefix with at most k distinct characters can be at most n.",
            "You need to find the longest prefix with at most k distinct characters and delete it.",
            "Sliding Window.",
            "Use dynamic programming.",
            "What if we keep track of the longest prefix that ends with a character that we have seen before?",
            "If we want to partition s into at most k partitions, what condition should we check to get the next prefix?",
            "For each character in the string, find the longest substring that has at most k different characters.",
            "If we can change only one character, it means that we need to change the character that makes the substring with most characters to be the longest.",
            "Can you use the sliding window technique to solve this problem?",
            "How many partitions are there in the string \"abacaba\"?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long findMaximumNumber(long long k, int x) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long findMaximumNumber(long k, int x) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findMaximumNumber(self, k, x):\n        \"\"\"\n        :type k: int\n        :type x: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long findMaximumNumber(long long k, int x) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long FindMaximumNumber(long k, int x) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} k\n * @param {number} x\n * @return {number}\n */\nvar findMaximumNumber = function(k, x) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findMaximumNumber(k: number, x: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $x\n     * @return Integer\n     */\n    function findMaximumNumber($k, $x) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findMaximumNumber(_ k: Int, _ x: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findMaximumNumber(k: Long, x: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int findMaximumNumber(int k, int x) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findMaximumNumber(k int64, x int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} k\n# @param {Integer} x\n# @return {Integer}\ndef find_maximum_number(k, x)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findMaximumNumber(k: Long, x: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_maximum_number(k: i64, x: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-maximum-number k x)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_maximum_number(K :: integer(), X :: integer()) -> integer().\nfind_maximum_number(K, X) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_maximum_number(k :: integer, x :: integer) :: integer\n  def find_maximum_number(k, x) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer <code>k</code> and an integer <code>x</code>. The price of a number&nbsp;<code>num</code> is calculated by the count of <span data-keyword=\"set-bit\">set bits</span> at positions <code>x</code>, <code>2x</code>, <code>3x</code>, etc., in its binary representation, starting from the least significant bit. The following table contains examples of how price is calculated.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>x</th>\n\t\t\t<th>num</th>\n\t\t\t<th>Binary Representation</th>\n\t\t\t<th>Price</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>13</td>\n\t\t\t<td><u>0</u><u>0</u><u>0</u><u>0</u><u>0</u><strong><u>1</u></strong><strong><u>1</u></strong><u>0</u><strong><u>1</u></strong></td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>13</td>\n\t\t\t<td>0<u>0</u>0<u>0</u>0<strong><u>1</u></strong>1<u>0</u>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>233</td>\n\t\t\t<td>0<strong><u>1</u></strong>1<strong><u>1</u></strong>0<strong><u>1</u></strong>0<u>0</u>1</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>13</td>\n\t\t\t<td><u>0</u>00<u>0</u>01<strong><u>1</u></strong>01</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>362</td>\n\t\t\t<td><strong><u>1</u></strong>01<strong><u>1</u></strong>01<u>0</u>10</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The&nbsp;<strong>accumulated price</strong>&nbsp;of&nbsp;<code>num</code>&nbsp;is the <b>total</b>&nbsp;price of&nbsp;numbers from <code>1</code> to <code>num</code>. <code>num</code>&nbsp;is considered&nbsp;<strong>cheap</strong>&nbsp;if its accumulated price&nbsp;is less than or equal to <code>k</code>.</p>\n\n<p>Return the <b>greatest</b>&nbsp;cheap number.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 9, x = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>As shown in the table below, <code>6</code> is the greatest cheap number.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>x</th>\n\t\t\t<th>num</th>\n\t\t\t<th>Binary Representation</th>\n\t\t\t<th>Price</th>\n\t\t\t<th>Accumulated Price</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td><u>0</u><u>0</u><strong><u>1</u></strong></td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t\t<td><u>0</u><strong><u>1</u></strong><u>0</u></td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t\t<td><u>0</u><strong><u>1</u></strong><strong><u>1</u></strong></td>\n\t\t\t<td>2</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>4</td>\n\t\t\t<td><strong><u>1</u></strong><u>0</u><u>0</u></td>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t\t<td><strong><u>1</u></strong><u>0</u><strong><u>1</u></strong></td>\n\t\t\t<td>2</td>\n\t\t\t<td>7</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>6</td>\n\t\t\t<td><strong><u>1</u></strong><strong><u>1</u></strong><u>0</u></td>\n\t\t\t<td>2</td>\n\t\t\t<td>9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>7</td>\n\t\t\t<td><strong><u>1</u></strong><strong><u>1</u></strong><strong><u>1</u></strong></td>\n\t\t\t<td>3</td>\n\t\t\t<td>12</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 7, x = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">9</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>As shown in the table below, <code>9</code> is the greatest cheap number.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>x</th>\n\t\t\t<th>num</th>\n\t\t\t<th>Binary Representation</th>\n\t\t\t<th>Price</th>\n\t\t\t<th>Accumulated Price</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t\t<td><u>0</u>0<u>0</u>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>2</td>\n\t\t\t<td><u>0</u>0<strong><u>1</u></strong>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td><u>0</u>0<strong><u>1</u></strong>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>4</td>\n\t\t\t<td><u>0</u>1<u>0</u>0</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>5</td>\n\t\t\t<td><u>0</u>1<u>0</u>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>6</td>\n\t\t\t<td><u>0</u>1<strong><u>1</u></strong>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>7</td>\n\t\t\t<td><u>0</u>1<strong><u>1</u></strong>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>8</td>\n\t\t\t<td><strong><u>1</u></strong>0<u>0</u>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>9</td>\n\t\t\t<td><strong><u>1</u></strong>0<u>0</u>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>6</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>10</td>\n\t\t\t<td><strong><u>1</u></strong>0<strong><u>1</u></strong>0</td>\n\t\t\t<td>2</td>\n\t\t\t<td>8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>15</sup></code></li>\n\t<li><code>1 &lt;= x &lt;= 8</code></li>\n</ul>\n",
        "exampleTestcases": "9\n1\n7\n2",
        "formTitle": "[3007]Maximum Number That Sum of the Prices Is Less Than or Equal to K",
        "frequency": 0.0,
        "frontendQuestionId": "3007",
        "hints": [
            "Binary search the answer.",
            "In each step of the binary search you should calculate the number of the set bits in the <code>i<sup>th</sup></code> position. Then calculate the sum of them."
        ],
        "level": 2,
        "metaData": {
            "name": "findMaximumNumber",
            "params": [
                {
                    "name": "k",
                    "type": "long"
                },
                {
                    "name": "x",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3240",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "9\n1",
        "title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
        "titleSlug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
        "infer_hints": [
            "For each position <code>x</code>, you can either take the bit or not.",
            "Use a binary search to find the answer.",
            "The binary representation of numbers can be calculated using bit manipulation.",
            "Use binary search to find the greatest number that the sum of the prices is less than or equal to K.",
            "The accumulated price is less than or equal to K if and only if it is less than or equal to K.",
            "Use binary search.",
            "Can you find the prices of all numbers in the range 1 to 1000?",
            "The total price of numbers up to num is less than or equal to K if and only if the total price of numbers up to num-1 is less than or equal to K.",
            "What if you can't do binary search?",
            "What if we start from the largest possible number and check the conditions backwards?",
            "Use a binary search to find the answer.",
            "How many bits are there in the binary representation of 10^15?",
            "Try all numbers that are possible to be the answer.",
            "Use binary search.",
            "Use binary search.",
            "Use binary search to find the answer.",
            "Can we use a binary search to find the answer?",
            "Think of the problem as a binary search.",
            "The binary representation of the number will be generated by a loop that will go from 1 to the number.",
            "Think of a dynamic programming solution."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxFrequencyElements(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxFrequencyElements(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxFrequencyElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxFrequencyElements(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxFrequencyElements(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxFrequencyElements(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxFrequencyElements = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxFrequencyElements(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxFrequencyElements($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxFrequencyElements(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxFrequencyElements(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxFrequencyElements(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxFrequencyElements(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_frequency_elements(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxFrequencyElements(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_frequency_elements(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-frequency-elements nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_frequency_elements(Nums :: [integer()]) -> integer().\nmax_frequency_elements(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_frequency_elements(nums :: [integer]) :: integer\n  def max_frequency_elements(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers.</p>\n\n<p>Return <em>the <strong>total frequencies</strong> of elements in</em><em> </em><code>nums</code>&nbsp;<em>such that those elements all have the <strong>maximum</strong> frequency</em>.</p>\n\n<p>The <strong>frequency</strong> of an element is the number of occurrences of that element in the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3,1,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,2,3,1,4]\n[1,2,3,4,5]",
        "formTitle": "[3005]Count Elements With Maximum Frequency",
        "frequency": 0.0,
        "frontendQuestionId": "3005",
        "hints": [
            "Find frequencies of all elements of the array.",
            "Find the elements that have the maximum frequencies and count their total occurrences."
        ],
        "level": 1,
        "metaData": {
            "name": "maxFrequencyElements",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3242",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,2,2,3,1,4]",
        "title": "Count Elements With Maximum Frequency",
        "titleSlug": "count-elements-with-maximum-frequency",
        "infer_hints": [
            "Try to find the frequency of each number in the array.",
            "Use a hashmap to store the frequencies of the elements.",
            "Use a HashMap to store the frequencies of all the numbers.",
            "Find the frequency of each element.",
            "You can use a hashmap to store the frequencies of all elements.",
            "What is the frequency of the largest element in the array?",
            "Use a hash map to store the frequencies of all elements.",
            "We need to count the number of elements that have a frequency equal to the maximum frequency.",
            "What is the maximum possible frequency?",
            "If you sort the array in increasing order, then you can count the frequency of the elements easily.",
            "What if we sort the array?",
            "Find the frequency of each number in the array.",
            "We can solve this problem by first finding the frequency of each number in the array, then finding the maximum frequency.",
            "Use an array to store the frequency of each number.",
            "What if we have to return the elements with maximum frequency?",
            "Try to find the frequency of each number in the array.",
            "For each element in the array, count its frequency.",
            "How can you use a hashmap to solve this problem?",
            "Use a HashMap to store the frequency of each element in the array.",
            "What is the frequency of an element in the array?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumArrayLength(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumArrayLength(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumArrayLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumArrayLength(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumArrayLength(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumArrayLength(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumArrayLength = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumArrayLength(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumArrayLength($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumArrayLength(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumArrayLength(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumArrayLength(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumArrayLength(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_array_length(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumArrayLength(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_array_length(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-array-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_array_length(Nums :: [integer()]) -> integer().\nminimum_array_length(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_array_length(nums :: [integer]) :: integer\n  def minimum_array_length(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> containing <strong>positive</strong> integers.</p>\n\n<p>Your task is to <strong>minimize</strong> the length of <code>nums</code> by performing the following operations <strong>any</strong> number of times (including zero):</p>\n\n<ul>\n\t<li>Select <strong>two</strong> <strong>distinct</strong> indices <code>i</code> and <code>j</code> from <code>nums</code>, such that <code>nums[i] &gt; 0</code> and <code>nums[j] &gt; 0</code>.</li>\n\t<li>Insert the result of <code>nums[i] % nums[j]</code> at the end of <code>nums</code>.</li>\n\t<li>Delete the elements at indices <code>i</code> and <code>j</code> from <code>nums</code>.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>minimum</strong> <strong>length</strong> of </em><code>nums</code><em> after performing the operation any number of times.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,3,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> One way to minimize the length of the array is as follows:\nOperation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.\nnums becomes [1,1,3].\nOperation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [1,1,3,1], then delete elements at indices 1 and 2.\nnums becomes [1,1].\nOperation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [1,1,0], then delete elements at indices 1 and 0.\nnums becomes [0].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length. </pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,5,10,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One way to minimize the length of the array is as follows:\nOperation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.\nnums becomes [5,5,5,5]. \nOperation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3. \nnums becomes [5,5,0]. \nOperation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end and it becomes [5,5,0,0], then delete elements at indices 0 and 1.\nnums becomes [0,0].\nThe length of nums cannot be reduced further. Hence, the answer is 2.\nIt can be shown that 2 is the minimum achievable length. </pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> One way to minimize the length of the array is as follows: \nOperation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [2,3,4,3], then delete elements at indices 1 and 2.\nnums becomes [2,3].\nOperation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [2,3,1], then delete elements at indices 1 and 0.\nnums becomes [1].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,4,3,1]\n[5,5,5,10,5]\n[2,3,4]",
        "formTitle": "[3012]Minimize Length of Array Using Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3012",
        "hints": [
            "The problem can be solved by considering different cases.",
            "Let the minimum value in <code>nums</code> be <code>x</code>; we can consider the following cases:",
            "If <code>x</code> occurs once: The minimum length of <code>nums</code> achievable in this case is <code>1</code>, since every other value, <code>y</code>, can be paired with <code>x</code>, resulting in deleting <code>x</code> and <code>y</code>, and inserting <code>x % y == x</code>, since <code>x < y</code>. So, only <code>x</code> remains after the operations.",
            "If there is a value <code>y</code> in <code>nums</code> such that <code>y % x</code> is not equal to <code>0</code>: The minimum achievable length in this case is <code>1</code> as well, because inserting <code>y % x</code> creates a new minimum, since <code>y % x < x</code>, returning to the first case.",
            "If neither of the previous cases holds, and <code>x</code> occurs <code>cnt</code> times: The minimum length of <code>nums</code> achievable in this case is <code>ceil(cnt / 2)</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumArrayLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3244",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "[1,4,3,1]",
        "title": "Minimize Length of Array Using Operations",
        "titleSlug": "minimize-length-of-array-using-operations",
        "infer_hints": [
            "Use dynamic programming.",
            "You can use the Euclidean algorithm to find the greatest common divisor.",
            "What if we sort the array?",
            "Try to use a priority queue and simulate the process.",
            "Think about the array after each operation.",
            "We can use the greedy approach with the help of the concept of \"gcd\".",
            "Think of the process of inserting and deleting as a stack of integers.",
            "Do you need to store the indices of the elements that you insert?",
            "We can perform the operation on the smallest two numbers.",
            "Can we use dynamic programming?",
            "Can we use dynamic programming to solve this problem?",
            "How many operations do we need to perform on the array?",
            "How can we make the length of the array minimum?",
            "Use a heap and simulate the operations.",
            "The idea is to process the array from smallest to largest.",
            "We can use the \"GCD\" of two numbers to find a new number.",
            "For each number x in nums, you need to find the smallest y in nums that y % x == 0.",
            "If the number of elements is odd, it is impossible to make the array empty.",
            "If the number is prime, we cannot perform any operation on it.",
            "What if we take the gcd of the elements?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> beautifulIndices(string s, string a, string b, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def beautifulIndices(self, s, a, b, k):\n        \"\"\"\n        :type s: str\n        :type a: str\n        :type b: str\n        :type k: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* beautifulIndices(char* s, char* a, char* b, int k, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public IList<int> BeautifulIndices(string s, string a, string b, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {string} a\n * @param {string} b\n * @param {number} k\n * @return {number[]}\n */\nvar beautifulIndices = function(s, a, b, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function beautifulIndices(s: string, a: string, b: string, k: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $a\n     * @param String $b\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function beautifulIndices($s, $a, $b, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func beautifulIndices(_ s: String, _ a: String, _ b: String, _ k: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun beautifulIndices(s: String, a: String, b: String, k: Int): List<Int> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> beautifulIndices(String s, String a, String b, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func beautifulIndices(s string, a string, b string, k int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {String} a\n# @param {String} b\n# @param {Integer} k\n# @return {Integer[]}\ndef beautiful_indices(s, a, b, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def beautifulIndices(s: String, a: String, b: String, k: Int): List[Int] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn beautiful_indices(s: String, a: String, b: String, k: i32) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (beautiful-indices s a b k)\n  (-> string? string? string? exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec beautiful_indices(S :: unicode:unicode_binary(), A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), K :: integer()) -> [integer()].\nbeautiful_indices(S, A, B, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec beautiful_indices(s :: String.t, a :: String.t, b :: String.t, k :: integer) :: [integer]\n  def beautiful_indices(s, a, b, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code>, a string <code>a</code>, a string <code>b</code>, and an integer <code>k</code>.</p>\n\n<p>An index <code>i</code> is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt;= s.length - a.length</code></li>\n\t<li><code>s[i..(i + a.length - 1)] == a</code></li>\n\t<li>There exists an index <code>j</code> such that:\n\t<ul>\n\t\t<li><code>0 &lt;= j &lt;= s.length - b.length</code></li>\n\t\t<li><code>s[j..(j + b.length - 1)] == b</code></li>\n\t\t<li><code>|j - i| &lt;= k</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the array that contains beautiful indices in <strong>sorted order from smallest to largest</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;isawsquirrelnearmysquirrelhouseohmy&quot;, a = &quot;my&quot;, b = &quot;squirrel&quot;, k = 15\n<strong>Output:</strong> [16,33]\n<strong>Explanation:</strong> There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == &quot;my&quot; and there exists an index 4 with s[4..11] == &quot;squirrel&quot; and |16 - 4| &lt;= 15.\n- The index 33 is beautiful as s[33..34] == &quot;my&quot; and there exists an index 18 with s[18..25] == &quot;squirrel&quot; and |33 - 18| &lt;= 15.\nThus we return [16,33] as the result.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, a = &quot;a&quot;, b = &quot;a&quot;, k = 4\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == &quot;a&quot; and there exists an index 0 with s[0..0] == &quot;a&quot; and |0 - 0| &lt;= 4.\nThus we return [0] as the result.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10</code></li>\n\t<li><code>s</code>, <code>a</code>, and <code>b</code> contain only lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15\n\"abcd\"\n\"a\"\n\"a\"\n4",
        "formTitle": "[3006]Find Beautiful Indices in the Given Array I",
        "frequency": 0.0,
        "frontendQuestionId": "3006",
        "hints": [
            "For each <code>i</code>, you can iterate over all <code>j</code>s and determine if <code>i</code> is beautiful or not."
        ],
        "level": 2,
        "metaData": {
            "name": "beautifulIndices",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "a",
                    "type": "string"
                },
                {
                    "name": "b",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3245",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
        "title": "Find Beautiful Indices in the Given Array I",
        "titleSlug": "find-beautiful-indices-in-the-given-array-i",
        "infer_hints": [
            "Use a sliding window with two pointers.",
            "You can use a sliding window to check all possible indices.",
            "What if we loop through all indices in the string and check if they are beautiful?",
            "Keep a sliding window of size k to check if you can find another index j in the string s such that |j - i| <= k.",
            "If you can find the indices of all occurrences of a and b, you can easily find the beautiful indices.",
            "If you use a brute force approach, you will have to check every possible index pair. This will take O(n^2) time. How about using a sliding window to keep track of the maximum index j that satisfies the condition |j - i| &lt;= k?",
            "We can use sliding window approach to find all indices i for which s[i..(i + a.length - 1)] == a. Then for each index i, we will try to find a valid j for which |j - i| &lt;= k.",
            "Loop through the array and find the indices that contain a and b.",
            "For every index i, check if it's beautiful.",
            "The beauty of a substring is determined by how many times it appears before and after it.",
            "Can you find the start and end indices of all occurrences of 'a' and 'b' in's'?",
            "Can we use a sliding window to solve this problem?",
            "Loop over all indices i and for each index, find the next index j where s[j..(j + b.length - 1)] == b.",
            "If you want to check if a substring in a string is equal to a certain string, you can use a sliding window.",
            "For each position <code>i</code>, we can check if we can find <code>b</code> starting from any position <code>j</code> such that <code>|i - j| &lt;= k</code>.",
            "Loop over all possible indices and check if they are beautiful.",
            "We can use the sliding window concept to solve this problem.",
            "You can use the sliding window technique.",
            "For each index i, we need to find the index j that satisfies the condition.",
            "We can use two pointers to solve this problem."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int areaOfMaxDiagonal(vector<vector<int>>& dimensions) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int areaOfMaxDiagonal(int[][] dimensions) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def areaOfMaxDiagonal(self, dimensions):\n        \"\"\"\n        :type dimensions: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int areaOfMaxDiagonal(int** dimensions, int dimensionsSize, int* dimensionsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int AreaOfMaxDiagonal(int[][] dimensions) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} dimensions\n * @return {number}\n */\nvar areaOfMaxDiagonal = function(dimensions) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function areaOfMaxDiagonal(dimensions: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $dimensions\n     * @return Integer\n     */\n    function areaOfMaxDiagonal($dimensions) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func areaOfMaxDiagonal(_ dimensions: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun areaOfMaxDiagonal(dimensions: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int areaOfMaxDiagonal(List<List<int>> dimensions) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func areaOfMaxDiagonal(dimensions [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} dimensions\n# @return {Integer}\ndef area_of_max_diagonal(dimensions)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def areaOfMaxDiagonal(dimensions: Array[Array[Int]]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn area_of_max_diagonal(dimensions: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (area-of-max-diagonal dimensions)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec area_of_max_diagonal(Dimensions :: [[integer()]]) -> integer().\narea_of_max_diagonal(Dimensions) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec area_of_max_diagonal(dimensions :: [[integer]]) :: integer\n  def area_of_max_diagonal(dimensions) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D <strong>0-indexed </strong>integer array <code>dimensions</code>.</p>\n\n<p>For all indices <code>i</code>, <code>0 &lt;= i &lt; dimensions.length</code>, <code>dimensions[i][0]</code> represents the length and <code>dimensions[i][1]</code> represents the width of the rectangle<span style=\"font-size: 13.3333px;\"> <code>i</code></span>.</p>\n\n<p>Return <em>the <strong>area</strong> of the rectangle having the <strong>longest</strong> diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the <strong>maximum</strong> area.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dimensions = [[9,3],[8,6]]\n<strong>Output:</strong> 48\n<strong>Explanation:</strong> \nFor index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) &asymp;<!-- notionvc: 882cf44c-3b17-428e-9c65-9940810216f1 --> 9.487.\nFor index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dimensions = [[3,4],[4,3]]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> Length of diagonal is the same for both which is 5, so maximum area = 12.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= dimensions.length &lt;= 100</code></li>\n\t<li><code><font face=\"monospace\">dimensions[i].length == 2</font></code></li>\n\t<li><code><font face=\"monospace\">1 &lt;= dimensions[i][0], dimensions[i][1] &lt;= 100</font></code></li>\n</ul>\n",
        "exampleTestcases": "[[9,3],[8,6]]\n[[3,4],[4,3]]",
        "formTitle": "[3000]Maximum Area of Longest Diagonal Rectangle",
        "frequency": 0.0,
        "frontendQuestionId": "3000",
        "hints": [
            "Diagonal of rectangle is <code>sqrt(length<sup>2</sup> + width<sup>2</sup>)</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "areaOfMaxDiagonal",
            "params": [
                {
                    "name": "dimensions",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3251",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[9,3],[8,6]]",
        "title": "Maximum Area of Longest Diagonal Rectangle",
        "titleSlug": "maximum-area-of-longest-diagonal-rectangle",
        "infer_hints": [
            "Sort the array by the diagonal of the rectangle.",
            "Sort the array by the diagonal.",
            "Try to find the relationship between the lengths and widths of the rectangles.",
            "What if you sort the diagonals in ascending order?",
            "Calculate the longest diagonal for each rectangle and then find the maximum area.",
            "If we sort the rectangles by their diagonal length, we can find the maximum area.",
            "Sort the rectangles by the slope of their diagonals.",
            "Sort the input by the length of the diagonal.",
            "For each diagonal, find out the area of the rectangle it would form.",
            "For each rectangle, calculate the length of its diagonal.",
            "Sort the array by the area of the rectangle.",
            "For each rectangle, we can calculate its diagonal length and its area. We can keep track of the rectangle with the maximum diagonal length and maximum area.",
            "Can we sort the array first by the area of the rectangle?",
            "Use sorting to find the maximum area.",
            "For each rectangle, you need to find the other rectangle with the maximum diagonal.",
            "The diagonal of a rectangle is sqrt(length^2 + width^2)!",
            "Find the longest diagonal of the rectangle, and find the rectangle with the maximum area that can be formed by this diagonal.",
            "Try to keep track of the largest diagonal so far and the rectangle corresponding to that diagonal.",
            "Can you sort the dimensions based on the diagonal length?",
            "The area of the rectangle is given by the product of its length and width."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minimumCost(vector<int>& nums, int k, int dist) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumCost(self, nums, k, dist):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type dist: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumCost(self, nums: List[int], k: int, dist: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minimumCost(int* nums, int numsSize, int k, int dist) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinimumCost(int[] nums, int k, int dist) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} dist\n * @return {number}\n */\nvar minimumCost = function(nums, k, dist) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumCost(nums: number[], k: number, dist: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $dist\n     * @return Integer\n     */\n    function minimumCost($nums, $k, $dist) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumCost(_ nums: [Int], _ k: Int, _ dist: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumCost(nums: IntArray, k: Int, dist: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumCost(List<int> nums, int k, int dist) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumCost(nums []int, k int, dist int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} dist\n# @return {Integer}\ndef minimum_cost(nums, k, dist)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumCost(nums: Array[Int], k: Int, dist: Int): Long = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_cost(nums: Vec<i32>, k: i32, dist: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-cost nums k dist)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_cost(Nums :: [integer()], K :: integer(), Dist :: integer()) -> integer().\nminimum_cost(Nums, K, Dist) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer], k :: integer, dist :: integer) :: integer\n  def minimum_cost(nums, k, dist) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>, and two <strong>positive</strong> integers <code>k</code> and <code>dist</code>.</p>\n\n<p>The <strong>cost</strong> of an array is the value of its <strong>first</strong> element. For example, the cost of <code>[1,2,3]</code> is <code>1</code> while the cost of <code>[3,4,1]</code> is <code>3</code>.</p>\n\n<p>You need to divide <code>nums</code> into <code>k</code> <strong>disjoint contiguous </strong><span data-keyword=\"subarray-nonempty\">subarrays</span>, such that the difference between the starting index of the <strong>second</strong> subarray and the starting index of the <code>kth</code> subarray should be <strong>less than or equal to</strong> <code>dist</code>. In other words, if you divide <code>nums</code> into the subarrays <code>nums[0..(i<sub>1</sub> - 1)], nums[i<sub>1</sub>..(i<sub>2</sub> - 1)], ..., nums[i<sub>k-1</sub>..(n - 1)]</code>, then <code>i<sub>k-1</sub> - i<sub>1</sub> &lt;= dist</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible sum of the cost of these</em> <em>subarrays</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,6,4,2], k = 3, dist = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,1,2,2,2,1], k = 4, dist = 3\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between i<sub>k-1</sub> and i<sub>1</sub> is 5 - 1 = 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,8,18,9], k = 3, dist = 1\n<strong>Output:</strong> 36\n<strong>Explanation:</strong> The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between i<sub>k-1</sub> and i<sub>1</sub> is 3 - 1 = 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>3 &lt;= k &lt;= n</code></li>\n\t<li><code>k - 2 &lt;= dist &lt;= n - 2</code></li>\n</ul>\n",
        "exampleTestcases": "[1,3,2,6,4,2]\n3\n3\n[10,1,2,2,2,1]\n4\n3\n[10,8,18,9]\n3\n1",
        "formTitle": "[3013]Divide an Array Into Subarrays With Minimum Cost II",
        "frequency": 0.0,
        "frontendQuestionId": "3013",
        "hints": [
            "For each <code>i > 0</code>, try each <code>nums[i]</code> as the first element of the second subarray. We need to find the sum of <code>k - 2</code> smallest values in the index range <code>[i + 1, min(i + dist, n - 1)]</code>.",
            "Typically, we use a max heap to maintain the top <code>k - 2</code> smallest values dynamically. Here we also have a sliding window, which is the index range <code>[i + 1, min(i + dist, n - 1)]</code>. We can use another min heap to put unselected values for future use.",
            "Update the two heaps when iteration over <code>i</code>. Ordered/Tree sets are also a good choice since we have to delete elements.",
            "If the max heap鈥檚 size is less than <code>k - 2</code>, use the min heap鈥檚 value to fill it. If the maximum value in the max heap is larger than the smallest value in the min heap, swap them in the two heaps."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumCost",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                },
                {
                    "name": "dist",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3260",
        "similarQuestions": [
            "[{\"title\": \"Minimum Cost to Cut a Stick\", \"titleSlug\": \"minimum-cost-to-cut-a-stick\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5207\\u68cd\\u5b50\\u7684\\u6700\\u5c0f\\u6210\\u672c\", \"isPaidOnly\": false}, {\"title\": \"Minimum Cost to Split an Array\", \"titleSlug\": \"minimum-cost-to-split-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u62c6\\u5206\\u6570\\u7ec4\\u7684\\u6700\\u5c0f\\u4ee3\\u4ef7\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,3,2,6,4,2]\n3\n3",
        "title": "Divide an Array Into Subarrays With Minimum Cost II",
        "titleSlug": "divide-an-array-into-subarrays-with-minimum-cost-ii",
        "infer_hints": [
            "The answer is guaranteed to be less than or equal to 10<sup>18</sup>.",
            "Consider the subarrays as intervals, and try to find the minimum cost to make these intervals disjoint.",
            "Try to find a solution with dynamic programming.",
            "How to split the array?",
            "How can you make sure that the answer is always valid?",
            "Consider each subarray ending at position i. What is the minimum possible sum of the costs of these subarrays?",
            "For every prefix, we need to know the maximum value it has seen so far and the number of times it has occurred.",
            "Use dynamic programming.",
            "Try to use dynamic programming to solve this problem.",
            "Use dynamic programming.",
            "How can you find the maximum number of subarrays that you can divide the array into?",
            "Think about the subarrays as being divided into groups. The cost for each group is the maximum number in the group.",
            "We can binary search the answer.",
            "For each prefix, try to divide it into k subarrays.",
            "Can you solve the problem for one subarray only?",
            "We can use Dynamic Programming.",
            "Try to divide the array into subarrays with maximum cost.",
            "You can use a priority queue to find the minimum number among the next k elements.",
            "Think about how you can use dynamic programming to solve this problem.",
            "Can we use Dynamic Programming (DP) to solve this problem?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOrAfterOperations(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOrAfterOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOrAfterOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOrAfterOperations(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOrAfterOperations(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOrAfterOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOrAfterOperations = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOrAfterOperations(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOrAfterOperations($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOrAfterOperations(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOrAfterOperations(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOrAfterOperations(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOrAfterOperations(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_or_after_operations(nums, k)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOrAfterOperations(nums: Array[Int], k: Int): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_or_after_operations(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-or-after-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_or_after_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_or_after_operations(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_or_after_operations(nums :: [integer], k :: integer) :: integer\n  def min_or_after_operations(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>k</code>.</p>\n\n<p>In one operation, you can pick any index <code>i</code> of <code>nums</code> such that <code>0 &lt;= i &lt; nums.length - 1</code> and replace <code>nums[i]</code> and <code>nums[i + 1]</code> with a single occurrence of <code>nums[i] &amp; nums[i + 1]</code>, where <code>&amp;</code> represents the bitwise <code>AND</code> operator.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible value of the bitwise </em><code>OR</code><em> of the remaining elements of</em> <code>nums</code> <em>after applying <strong>at most</strong></em> <code>k</code> <em>operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,5,3,2,7], k = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Let&#39;s do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] &amp; nums[1]) so that nums becomes equal to [1,3,2,7].\n2. Replace nums[2] and nums[3] with (nums[2] &amp; nums[3]) so that nums becomes equal to [1,3,2].\nThe bitwise-or of the final array is 3.\nIt can be shown that 3 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,3,15,14,2,8], k = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Let&#39;s do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] &amp; nums[1]) so that nums becomes equal to [3,15,14,2,8]. \n2. Replace nums[0] and nums[1] with (nums[0] &amp; nums[1]) so that nums becomes equal to [3,14,2,8].\n3. Replace nums[0] and nums[1] with (nums[0] &amp; nums[1]) so that nums becomes equal to [2,2,8].\n4. Replace nums[1] and nums[2] with (nums[1] &amp; nums[2]) so that nums becomes equal to [2,0].\nThe bitwise-or of the final array is 2.\nIt can be shown that 2 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,7,10,3,9,14,9,4], k = 1\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> Without applying any operations, the bitwise-or of nums is 15.\nIt can be shown that 15 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt; 2<sup>30</sup></code></li>\n\t<li><code>0 &lt;= k &lt; nums.length</code></li>\n</ul>\n",
        "exampleTestcases": "[3,5,3,2,7]\n2\n[7,3,15,14,2,8]\n4\n[10,7,10,3,9,14,9,4]\n1",
        "formTitle": "[3022]Minimize OR of Remaining Elements Using Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3022",
        "hints": [
            "From the most significant bit to the least significant bit, maintain the bits that will not be included in the final answer in a variable <code>mask</code>.",
            "For a fixed bit, add it to <code>mask</code> then check if there exists some sequence of <code>k</code> operations such that <code>mask & answer == 0 </code> where <code>answer</code> is the bitwise-or of the remaining elements of <code>nums</code>. If there is no such sequence of operations, remove the current bit from <code>mask</code>. How can we perform this check?",
            "Let <code>x</code> be the bitwise-and of all elements of <code>nums</code>. If <code>x AND mask != 0</code>, there is no sequence of operations that satisfies the condition in the previous hint. This is because even if we perform this operation <code>n - 1</code> times on the array, we will end up with <code>x</code> as the final element.",
            "Otherwise, there exists at least one such sequence. It is sufficient to check if the number of operations in such a sequence is less than <code>k</code>. Let鈥檚 calculate the minimum number of operations in such a sequence.",
            "Iterate over the array from left to right, if <code>nums[i] & mask != 0</code>, apply the operation on index <code>i</code>.",
            "After iterating over all elements, let <code>x</code> be the bitwise-and of all elements of <code>nums</code>. If <code>x == 0</code>, then we have found the minimum number of operations. Otherwise, It can be proven that we need exactly one more operation so that <code>x == 0</code>.",
            "The condition in the second hint is satisfied if and only if the minimum number of operations is less than or equal to <code>k</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "minOrAfterOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3261",
        "similarQuestions": [
            "[{\"title\": \"Maximum XOR After Operations \", \"titleSlug\": \"maximum-xor-after-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u64cd\\u4f5c\\u540e\\u7684\\u6700\\u5927\\u5f02\\u6216\\u548c\", \"isPaidOnly\": false}, {\"title\": \"Apply Operations on Array to Maximize Sum of Squares\", \"titleSlug\": \"apply-operations-on-array-to-maximize-sum-of-squares\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5bf9\\u6570\\u7ec4\\u6267\\u884c\\u64cd\\u4f5c\\u4f7f\\u5e73\\u65b9\\u548c\\u6700\\u5927\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[3,5,3,2,7]\n2",
        "title": "Minimize OR of Remaining Elements Using Operations",
        "titleSlug": "minimize-or-of-remaining-elements-using-operations",
        "infer_hints": [
            "Use bitwise operation to solve this problem.",
            "Think in terms of bit manipulation.",
            "Use bitwise AND operation instead of OR.",
            "Think of each operation as merging two numbers.",
            "You can try to pair the smallest and second smallest elements and then apply the operation.",
            "For each bit position, let's try to change all the bits in that position to 1.",
            "Use binary search to find the minimum OR value that can be achieved.",
            "We can try to minimize the OR value by replacing two adjacent elements with the bitwise AND operation.",
            "How can we rearrange the array to make the OR operation minimum?",
            "You can perform the operations in any order.",
            "Do you know the bitwise AND operation?",
            "Consider all possible pairs of elements.",
            "Can we use a greedy approach to solve this problem?",
            "Can we solve this problem using a greedy approach?",
            "How many elements can be combined with the i-th element?",
            "If you want to minimize OR, then you should try to minimize the number of different bits.",
            "Use dynamic programming to store the maximum OR value for each prefix of the array.",
            "Can you use dynamic programming to solve this problem?",
            "Consider the operation on ith index and (i+1)th index.",
            "The maximum number of operations we can perform is log(2) * N."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumCost(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumCost(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumCost(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumCost(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumCost(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumCost(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumCost = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumCost(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumCost($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumCost(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumCost(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumCost(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumCost(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_cost(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumCost(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_cost(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-cost nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_cost(Nums :: [integer()]) -> integer().\nminimum_cost(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer]) :: integer\n  def minimum_cost(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of integers <code>nums</code> of length <code>n</code>.</p>\n\n<p>The <strong>cost</strong> of an array is the value of its <strong>first</strong> element. For example, the cost of <code>[1,2,3]</code> is <code>1</code> while the cost of <code>[3,4,1]</code> is <code>3</code>.</p>\n\n<p>You need to divide <code>nums</code> into <code>3</code> <strong>disjoint contiguous </strong><span data-keyword=\"subarray-nonempty\">subarrays</span>.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible <strong>sum</strong> of the cost of these subarrays</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,12]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 = 6.\nThe other possible ways to form 3 subarrays are:\n- [1], [2,3], and [12] at a total cost of 1 + 2 + 12 = 15.\n- [1,2], [3], and [12] at a total cost of 1 + 3 + 12 = 16.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,3]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The best possible way to form 3 subarrays is: [5], [4], and [3] at a total cost of 5 + 4 + 3 = 12.\nIt can be shown that 12 is the minimum cost achievable.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,3,1,1]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The best possible way to form 3 subarrays is: [10,3], [1], and [1] at a total cost of 10 + 1 + 1 = 12.\nIt can be shown that 12 is the minimum cost achievable.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,12]\n[5,4,3]\n[10,3,1,1]",
        "formTitle": "[3010]Divide an Array Into Subarrays With Minimum Cost I",
        "frequency": 0.0,
        "frontendQuestionId": "3010",
        "hints": [],
        "level": 1,
        "metaData": {
            "name": "minimumCost",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3263",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,2,3,12]",
        "title": "Divide an Array Into Subarrays With Minimum Cost I",
        "titleSlug": "divide-an-array-into-subarrays-with-minimum-cost-i",
        "infer_hints": [
            "Try to divide the array into 3 parts.",
            "How many subarrays are there in total?",
            "How many subarrays are there?",
            "How many subarrays must you split into?",
            "Try to find a solution using dynamic programming.",
            "Consider each subarray as a segment.  What can you say about the cost of dividing a segment into two subarrays?",
            "Try all possible divisions.",
            "For each element in the array, what is the minimum cost to divide the array into 3 parts such that the cost of the first part is the current element?",
            "For each index i, find the minimum cost to divide the array into three parts where the first part is [0, i], the second part is [i + 1, j] and the third part is [j + 1, n - 1].",
            "You can divide the array into three parts: [1], [2], and [3].",
            "Consider using dynamic programming.",
            "The best way to split the array into 3 parts is to find the two positions that are the middle ones of the sorted array.",
            "This is a dynamic programming problem.",
            "Use dynamic programming.",
            "How can you use dynamic programming to solve this problem?",
            "We can use dynamic programming to solve this problem.",
            "If we divide the array into 3 parts, we can always find a partition where the minimum cost is minimized.",
            "You can use dynamic programming.",
            "Use dynamic programming to store the minimum cost of each subarray.",
            "The cost of the first subarray is nums[0].  What if we add the first number to the cost of the first subarray?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumPoints(vector<int>& enemyEnergies, int currentEnergy) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumPoints(int[] enemyEnergies, int currentEnergy) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumPoints(self, enemyEnergies, currentEnergy):\n        \"\"\"\n        :type enemyEnergies: List[int]\n        :type currentEnergy: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumPoints(self, enemyEnergies: List[int], currentEnergy: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumPoints(int* enemyEnergies, int enemyEnergiesSize, int currentEnergy) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumPoints(int[] enemyEnergies, int currentEnergy) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} enemyEnergies\n * @param {number} currentEnergy\n * @return {number}\n */\nvar maximumPoints = function(enemyEnergies, currentEnergy) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumPoints(enemyEnergies: number[], currentEnergy: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $enemyEnergies\n     * @param Integer $currentEnergy\n     * @return Integer\n     */\n    function maximumPoints($enemyEnergies, $currentEnergy) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumPoints(_ enemyEnergies: [Int], _ currentEnergy: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumPoints(enemyEnergies: IntArray, currentEnergy: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumPoints(List<int> enemyEnergies, int currentEnergy) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumPoints(enemyEnergies []int, currentEnergy int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} enemy_energies\n# @param {Integer} current_energy\n# @return {Integer}\ndef maximum_points(enemy_energies, current_energy)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumPoints(enemyEnergies: Array[Int], currentEnergy: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_points(enemy_energies: Vec<i32>, current_energy: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-points enemyEnergies currentEnergy)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_points(EnemyEnergies :: [integer()], CurrentEnergy :: integer()) -> integer().\nmaximum_points(EnemyEnergies, CurrentEnergy) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_points(enemy_energies :: [integer], current_energy :: integer) :: integer\n  def maximum_points(enemy_energies, current_energy) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>enemyEnergies</code> denoting the energy values of various enemies.</p>\n\n<p>You are also given an integer <code>currentEnergy</code> denoting the amount of energy you have initially.</p>\n\n<p>You start with 0 points, and all the enemies are unmarked initially.</p>\n\n<p>You can perform <strong>either</strong> of the following operations <strong>zero </strong>or multiple times to gain points:</p>\n\n<ul>\n\t<li>Choose an <strong>unmarked</strong> enemy, <code>i</code>, such that <code>currentEnergy &gt;= enemyEnergies[i]</code>. By choosing this option:\n\n\t<ul>\n\t\t<li>You gain 1 point.</li>\n\t\t<li>Your energy is reduced by the enemy&#39;s energy, i.e. <code>currentEnergy = currentEnergy - enemyEnergies[i]</code>.</li>\n\t</ul>\n\t</li>\n\t<li>If you have <strong>at least</strong> 1 point, you can choose an <strong>unmarked</strong> enemy, <code>i</code>. By choosing this option:\n\t<ul>\n\t\t<li>Your energy increases by the enemy&#39;s energy, i.e. <code>currentEnergy = currentEnergy + enemyEnergies[i]</code>.</li>\n\t\t<li>The <font face=\"monospace\">e</font>nemy <code>i</code> is <strong>marked</strong>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return an integer denoting the <strong>maximum</strong> points you can get in the end by optimally performing operations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">enemyEnergies = [3,2,2], currentEnergy = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following operations can be performed to get 3 points, which is the maximum:</p>\n\n<ul>\n\t<li>First operation on enemy 1: <code>points</code> increases by 1, and <code>currentEnergy</code> decreases by 2. So, <code>points = 1</code>, and <code>currentEnergy = 0</code>.</li>\n\t<li>Second operation on enemy 0: <code>currentEnergy</code> increases by 3, and enemy 0 is marked. So, <code>points = 1</code>, <code>currentEnergy = 3</code>, and marked enemies = <code>[0]</code>.</li>\n\t<li>First operation on enemy 2: <code>points</code> increases by 1, and <code>currentEnergy</code> decreases by 2. So, <code>points = 2</code>, <code>currentEnergy = 1</code>, and marked enemies = <code>[0]</code>.</li>\n\t<li>Second operation on enemy 2: <code>currentEnergy</code> increases by 2, and enemy 2 is marked. So, <code>points = 2</code>, <code>currentEnergy = 3</code>, and marked enemies = <code>[0, 2]</code>.</li>\n\t<li>First operation on enemy 1: <code>points</code> increases by 1, and <code>currentEnergy</code> decreases by 2. So, <code>points = 3</code>, <code>currentEnergy = 1</code>, and marked enemies = <code>[0, 2]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">enemyEnergies = </span>[2]<span class=\"example-io\">, currentEnergy = 10</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>Performing the first operation 5 times on enemy 0 results in the maximum number of points.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= enemyEnergies.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= enemyEnergies[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= currentEnergy &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[3,2,2]\n2\n[2]\n10",
        "formTitle": "[3207]Maximum Points After Enemy Battles",
        "frequency": 0.0,
        "frontendQuestionId": "3207",
        "hints": [
            "The problem can be solved greedily.",
            "Mark all the others except the smallest one first.",
            "Use the smallest one to increase the energy.",
            "Note that the initial energy should be no less than the smallest enemy."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumPoints",
            "params": [
                {
                    "name": "enemyEnergies",
                    "type": "integer[]"
                },
                {
                    "name": "currentEnergy",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3264",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,2,2]\n2",
        "title": "Maximum Points After Enemy Battles",
        "titleSlug": "maximum-points-after-enemy-battles",
        "infer_hints": [
            "Use a priority queue to track the enemies with the highest energy.",
            "Use dynamic programming.",
            "Use prefix sum array and suffix sum array to calculate the maximum score for each enemy.",
            "What if you keep track of the maximum sum of the energy values of the enemies that you can have if you choose to mark the current enemy or not?",
            "Sort the enemies in increasing order of their energy.",
            "How many battles would it take to reduce the energy of an enemy to 0?",
            "Sort the enemyEnergies array and perform the operations greedily.",
            "Do you need to sort the enemies?",
            "What if you were to sort the enemies based on their energy values?",
            "Try to think in terms of dynamic programming.",
            "For each enemy, you have two options. Do you take the enemy or do you ignore it?",
            "You can simulate the game.  Or can you find the maximum energy you can have after performing the operations?",
            "How many points can you gain if you choose to attack an enemy?",
            "Keep track of the maximum enemy energy we have encountered so far.",
            "Try to maximize the current energy after every operation.",
            "Sort the array in non-increasing order.",
            "Use the greedy approach.",
            "Sort the enemyEnergies in ascending order.",
            "You need to track the maximum energy value that you can get by taking some or all the enemies.",
            "How many points can you gain by choosing enemy 0?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumSubarraySum(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumSubarraySum(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumSubarraySum(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumSubarraySum(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumSubarraySum = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumSubarraySum(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumSubarraySum($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumSubarraySum(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumSubarraySum(nums: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumSubarraySum(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumSubarraySum(nums []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_subarray_sum(nums, k)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumSubarraySum(nums: Array[Int], k: Int): Long = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_subarray_sum(nums: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-subarray-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_subarray_sum(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_subarray_sum(nums :: [integer], k :: integer) :: integer\n  def maximum_subarray_sum(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> of length <code>n</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>A <span data-keyword=\"subarray-nonempty\">subarray</span> of <code>nums</code> is called <strong>good</strong> if the <strong>absolute difference</strong> between its first and last element is <strong>exactly</strong> <code>k</code>, in other words, the subarray <code>nums[i..j]</code> is good if <code>|nums[i] - nums[j]| == k</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> sum of a <strong>good</strong> subarray of </em><code>nums</code>. <em>If there are no good subarrays</em><em>, return </em><code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], k = 1\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The absolute difference between the first and last element<!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --> must be 1 for a good subarray. All the good subarrays are: [1,2], [2,3], [3,4], [4,5], and [5,6]. The maximum subarray sum is 11 for the subarray [5,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,3,2,4,5], k = 3\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The absolute difference between the first and last element<!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --> must be 3 for a good subarray. All the good subarrays are: [-1,3,2], and [2,4,5]. The maximum subarray sum is 11 for the subarray [2,4,5].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3,-4], k = 2\n<strong>Output:</strong> -6\n<strong>Explanation:</strong> The absolute difference between the first and last element<!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --> must be 2 for a good subarray. All the good subarrays are: [-1,-2,-3], and [-2,-3,-4]. The maximum subarray sum is -6 for the subarray [-1,-2,-3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4,5,6]\n1\n[-1,3,2,4,5]\n3\n[-1,-2,-3,-4]\n2",
        "formTitle": "[3026]Maximum Good Subarray Sum",
        "frequency": 0.0,
        "frontendQuestionId": "3026",
        "hints": [
            "Save all the prefix sums into a HashMap.",
            "For the index <code>i</code> store the element at index <code>i + 1</code> as the key and the prefix sum till <code>i</code> as the value.",
            "For each prefix sum ending at <code>nums[i]</code>, try finding <code>nums[i] - k</code> and <code>nums[i] + k</code> in the HashMap and update the answer."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumSubarraySum",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3265",
        "similarQuestions": [
            "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5927\\u5b50\\u6570\\u7ec4\\u548c\", \"isPaidOnly\": false}, {\"title\": \"Maximum Sum of Distinct Subarrays With Length K\", \"titleSlug\": \"maximum-sum-of-distinct-subarrays-with-length-k\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u957f\\u5ea6\\u4e3a K \\u5b50\\u6570\\u7ec4\\u4e2d\\u7684\\u6700\\u5927\\u548c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,2,3,4,5,6]\n1",
        "title": "Maximum Good Subarray Sum",
        "titleSlug": "maximum-good-subarray-sum",
        "infer_hints": [
            "Do prefix sum for each element.",
            "We can iterate over all the subarrays.",
            "The answer will be a subarray that ends with the maximum value.",
            "Think of this problem as a DP problem.",
            "You can maintain a prefix sum and a dynamic programming array.",
            "Use dynamic programming.",
            "Do a linear scan, for each element, try to extend the current good subarray.",
            "You can use the prefix sum array to quickly get the sum of any subarray.",
            "We can use prefix and suffix sums.",
            "Can we solve this problem with dynamic programming?",
            "Use prefix sum array and binary search to solve this problem.",
            "How to compute the maximum subarray sum?",
            "Try to find a dynamic programming solution.",
            "How many subarrays have their first and last element's difference equal to k?",
            "For each index i, we want to know the maximum subarray sum that ends at i.",
            "Can we use prefix sum?",
            "Use a monotonic queue to track the maximum prefix sum that ends with the current number.",
            "Try to find a dynamic programming solution.",
            "Use prefix sums to speed up the computation.",
            "Use prefix sum array and binary search to find the answer."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countMatchingSubarrays(vector<int>& nums, vector<int>& pattern) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countMatchingSubarrays(self, nums, pattern):\n        \"\"\"\n        :type nums: List[int]\n        :type pattern: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countMatchingSubarrays(self, nums: List[int], pattern: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countMatchingSubarrays(int* nums, int numsSize, int* pattern, int patternSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} pattern\n * @return {number}\n */\nvar countMatchingSubarrays = function(nums, pattern) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countMatchingSubarrays(nums: number[], pattern: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $pattern\n     * @return Integer\n     */\n    function countMatchingSubarrays($nums, $pattern) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countMatchingSubarrays(_ nums: [Int], _ pattern: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countMatchingSubarrays(nums: IntArray, pattern: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countMatchingSubarrays(List<int> nums, List<int> pattern) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countMatchingSubarrays(nums []int, pattern []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} pattern\n# @return {Integer}\ndef count_matching_subarrays(nums, pattern)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countMatchingSubarrays(nums: Array[Int], pattern: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_matching_subarrays(nums: Vec<i32>, pattern: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-matching-subarrays nums pattern)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_matching_subarrays(Nums :: [integer()], Pattern :: [integer()]) -> integer().\ncount_matching_subarrays(Nums, Pattern) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_matching_subarrays(nums :: [integer], pattern :: [integer]) :: integer\n  def count_matching_subarrays(nums, pattern) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code>, and a <strong>0-indexed</strong> integer array <code>pattern</code> of size <code>m</code> consisting of integers <code>-1</code>, <code>0</code>, and <code>1</code>.</p>\n\n<p>A <span data-keyword=\"subarray\">subarray</span> <code>nums[i..j]</code> of size <code>m + 1</code> is said to match the <code>pattern</code> if the following conditions hold for each element <code>pattern[k]</code>:</p>\n\n<ul>\n\t<li><code>nums[i + k + 1] &gt; nums[i + k]</code> if <code>pattern[k] == 1</code>.</li>\n\t<li><code>nums[i + k + 1] == nums[i + k]</code> if <code>pattern[k] == 0</code>.</li>\n\t<li><code>nums[i + k + 1] &lt; nums[i + k]</code> if <code>pattern[k] == -1</code>.</li>\n</ul>\n\n<p>Return <em>the<strong> count</strong> of subarrays in</em> <code>nums</code> <em>that match the</em> <code>pattern</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], pattern = [1,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == pattern.length &lt; n</code></li>\n\t<li><code>-1 &lt;= pattern[i] &lt;= 1</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4,5,6]\n[1,1]\n[1,4,4,1,3,5,5,3]\n[1,0,-1]",
        "formTitle": "[3034]Number of Subarrays That Match a Pattern I",
        "frequency": 0.0,
        "frontendQuestionId": "3034",
        "hints": [
            "Iterate over all indices <code>i</code> then, using a second loop, check if the subarray starting at index <code>i</code> matches the pattern."
        ],
        "level": 2,
        "metaData": {
            "name": "countMatchingSubarrays",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "pattern",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3269",
        "similarQuestions": [
            "[{\"title\": \"Count the Number of Incremovable Subarrays I\", \"titleSlug\": \"count-the-number-of-incremovable-subarrays-i\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u79fb\\u9664\\u9012\\u589e\\u5b50\\u6570\\u7ec4\\u7684\\u6570\\u76ee I\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,2,3,4,5,6]\n[1,1]",
        "title": "Number of Subarrays That Match a Pattern I",
        "titleSlug": "number-of-subarrays-that-match-a-pattern-i",
        "infer_hints": [
            "If the pattern is [1, 0, -1], then we need to check every subarray that starts with the first element and ends with the last element.",
            "How can we check whether a subarray matches the pattern?",
            "Use a sliding window approach.",
            "How can you use a prefix sum array to solve this problem?",
            "Can you think of how to use prefix sums to solve this problem?",
            "We can pre-compute two things for every number: the number of subarrays ending at this number and the number of subarrays starting at this number.",
            "Consider a sliding window over the array nums.",
            "The problem can be solved by using the Sliding Window and the concept of Prefix Sum.",
            "How many ways can you make the first number of the subarray to be the minimum number in the array?",
            "What if we store the differences between consecutive numbers in an array?",
            "Try to keep track of the number of subarrays that end at the current position.",
            "Use a two pointers approach.",
            "Can you find a way to compute the number of increasing/decreasing subarrays of a certain size that end at a certain number?",
            "How many subarrays have a length of m + 1?",
            "Find a way to use a sliding window approach.",
            "We can use a sliding window approach to find all subarrays.",
            "Use two pointers to find all subarrays.",
            "What if we consider all subarrays of size m + 1?",
            "You can use the concept of prefix sum to solve this problem.",
            "We can use a stack to find all possible subarrays."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minMovesToCaptureTheQueen(self, a, b, c, d, e, f):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :type d: int\n        :type e: int\n        :type f: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minMovesToCaptureTheQueen(self, a: int, b: int, c: int, d: int, e: int, f: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @param {number} e\n * @param {number} f\n * @return {number}\n */\nvar minMovesToCaptureTheQueen = function(a, b, c, d, e, f) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minMovesToCaptureTheQueen(a: number, b: number, c: number, d: number, e: number, f: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @param Integer $d\n     * @param Integer $e\n     * @param Integer $f\n     * @return Integer\n     */\n    function minMovesToCaptureTheQueen($a, $b, $c, $d, $e, $f) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minMovesToCaptureTheQueen(_ a: Int, _ b: Int, _ c: Int, _ d: Int, _ e: Int, _ f: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minMovesToCaptureTheQueen(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minMovesToCaptureTheQueen(a int, b int, c int, d int, e int, f int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @param {Integer} d\n# @param {Integer} e\n# @param {Integer} f\n# @return {Integer}\ndef min_moves_to_capture_the_queen(a, b, c, d, e, f)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minMovesToCaptureTheQueen(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_moves_to_capture_the_queen(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-moves-to-capture-the-queen a b c d e f)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_moves_to_capture_the_queen(A :: integer(), B :: integer(), C :: integer(), D :: integer(), E :: integer(), F :: integer()) -> integer().\nmin_moves_to_capture_the_queen(A, B, C, D, E, F) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_moves_to_capture_the_queen(a :: integer, b :: integer, c :: integer, d :: integer, e :: integer, f :: integer) :: integer\n  def min_moves_to_capture_the_queen(a, b, c, d, e, f) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is a <strong>1-indexed</strong> <code>8 x 8</code> chessboard containing <code>3</code> pieces.</p>\n\n<p>You are given <code>6</code> integers <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>, and <code>f</code> where:</p>\n\n<ul>\n\t<li><code>(a, b)</code> denotes the position of the white rook.</li>\n\t<li><code>(c, d)</code> denotes the position of the white bishop.</li>\n\t<li><code>(e, f)</code> denotes the position of the black queen.</li>\n</ul>\n\n<p>Given that you can only move the white pieces, return <em>the <strong>minimum</strong> number of moves required to capture the black queen</em>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>Rooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.</li>\n\t<li>Bishops can move any number of squares diagonally, but cannot jump over other pieces.</li>\n\t<li>A rook or a bishop can capture the queen if it is located in a square that they can move to.</li>\n\t<li>The queen does not move.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/ex1.png\" style=\"width: 600px; height: 600px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> a = 1, b = 1, c = 8, d = 8, e = 2, f = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3).\nIt is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/ex2.png\" style=\"width: 600px; height: 600px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> a = 5, b = 3, c = 3, d = 4, e = 5, f = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can capture the black queen in a single move by doing one of the following: \n- Move the white rook to (5, 2).\n- Move the white bishop to (5, 2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a, b, c, d, e, f &lt;= 8</code></li>\n\t<li>No two pieces are on the same square.</li>\n</ul>\n",
        "exampleTestcases": "1\n1\n8\n8\n2\n3\n5\n3\n3\n4\n5\n2",
        "formTitle": "[3001]Minimum Moves to Capture The Queen",
        "frequency": 0.0,
        "frontendQuestionId": "3001",
        "hints": [
            "The minimum number of moves can be either <code>1</code> or <code>2</code>.",
            "The answer will be <code>1</code> if the queen is on the path of the rook or bishop and none of them is in between."
        ],
        "level": 2,
        "metaData": {
            "name": "minMovesToCaptureTheQueen",
            "params": [
                {
                    "name": "a",
                    "type": "integer"
                },
                {
                    "name": "b",
                    "type": "integer"
                },
                {
                    "name": "c",
                    "type": "integer"
                },
                {
                    "name": "d",
                    "type": "integer"
                },
                {
                    "name": "e",
                    "type": "integer"
                },
                {
                    "name": "f",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3270",
        "similarQuestions": [
            "[{\"title\": \"Available Captures for Rook\", \"titleSlug\": \"available-captures-for-rook\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u53ef\\u4ee5\\u88ab\\u4e00\\u6b65\\u6355\\u83b7\\u7684\\u68cb\\u5b50\\u6570\", \"isPaidOnly\": false}, {\"title\": \"Queens That Can Attack the King\", \"titleSlug\": \"queens-that-can-attack-the-king\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u53ef\\u4ee5\\u653b\\u51fb\\u56fd\\u738b\\u7684\\u7687\\u540e\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "1\n1\n8\n8\n2\n3",
        "title": "Minimum Moves to Capture The Queen",
        "titleSlug": "minimum-moves-to-capture-the-queen",
        "infer_hints": [
            "The minimum number of moves to capture the queen is the maximum of the distances to the queen.",
            "Calculate the distance to the black queen from each of the two rooks and bishops.",
            "Consider the bishop first.",
            "If both rook and bishop can reach the queen, the minimum number of moves is 2.",
            "Find the minimum number of moves the rook needs to reach the black queen.",
            "Can we do better than O(1) moves?",
            "The white rook can move to any square in the same row or column as the black queen.  This is because the black queen can capture the white rook if it is in a square that the white rook can move to.",
            "How many squares are there in a straight line between two squares?",
            "If the bishop and the rook are on the same line, how many moves does it take to reach the queen?",
            "Consider the white rook and bishop can move in which direction?",
            "If a rook can move to a cell where the bishop can move, then it is possible to capture the queen.",
            "If the bishop and the rook are in the same diagonal, then the answer is 1.",
            "Try to find the distance between the white bishop and the black queen.",
            "If the white rook can capture the black queen, then it is done. Otherwise, calculate the minimum number of moves for the white bishop to capture the black queen.",
            "We can consider the bishop and the rook separately.",
            "Try all possible moves for the white rook and the white bishop and see which one is the minimum.",
            "Use the Manhattan distance to find the distance between the white bishop and black queen.",
            "The minimum number of moves to capture the queen is either the number of moves for the bishop or the number of moves for the rook.",
            "If the white bishop and rook are in the same diagonal, return the distance to the queen.",
            "For a bishop, you can move any number of squares in any diagonal direction."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> countOfPairs(int n, int x, int y) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countOfPairs(self, n, x, y):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :type y: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countOfPairs(self, n: int, x: int, y: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countOfPairs(int n, int x, int y, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] CountOfPairs(int n, int x, int y) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @return {number[]}\n */\nvar countOfPairs = function(n, x, y) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countOfPairs(n: number, x: number, y: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer[]\n     */\n    function countOfPairs($n, $x, $y) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countOfPairs(_ n: Int, _ x: Int, _ y: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countOfPairs(n: Int, x: Int, y: Int): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> countOfPairs(int n, int x, int y) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countOfPairs(n int, x int, y int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer[]}\ndef count_of_pairs(n, x, y)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countOfPairs(n: Int, x: Int, y: Int): Array[Int] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_of_pairs(n: i32, x: i32, y: i32) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-of-pairs n x y)\n  (-> exact-integer? exact-integer? exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_of_pairs(N :: integer(), X :: integer(), Y :: integer()) -> [integer()].\ncount_of_pairs(N, X, Y) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_of_pairs(n :: integer, x :: integer, y :: integer) :: [integer]\n  def count_of_pairs(n, x, y) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given three <strong>positive</strong> integers <code>n</code>, <code>x</code>, and <code>y</code>.</p>\n\n<p>In a city, there exist houses numbered <code>1</code> to <code>n</code> connected by <code>n</code> streets. There is a street connecting the house numbered <code>i</code> with the house numbered <code>i + 1</code> for all <code>1 &lt;= i &lt;= n - 1</code> . An additional street connects the house numbered <code>x</code> with the house numbered <code>y</code>.</p>\n\n<p>For each <code>k</code>, such that <code>1 &lt;= k &lt;= n</code>, you need to find the number of <strong>pairs of houses</strong> <code>(house<sub>1</sub>, house<sub>2</sub>)</code> such that the <strong>minimum</strong> number of streets that need to be traveled to reach <code>house<sub>2</sub></code> from <code>house<sub>1</sub></code> is <code>k</code>.</p>\n\n<p>Return <em>a <strong>1-indexed</strong> array </em><code>result</code><em> of length </em><code>n</code><em> where </em><code>result[k]</code><em> represents the <strong>total</strong> number of pairs of houses such that the <strong>minimum</strong> streets required to reach one house from the other is </em><code>k</code>.</p>\n\n<p><strong>Note</strong> that <code>x</code> and <code>y</code> can be <strong>equal</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example2.png\" style=\"width: 474px; height: 197px;\" />\n<pre>\n<strong>Input:</strong> n = 3, x = 1, y = 3\n<strong>Output:</strong> [6,0,0]\n<strong>Explanation:</strong> Let&#39;s look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example3.png\" style=\"width: 668px; height: 174px;\" />\n<pre>\n<strong>Input:</strong> n = 5, x = 2, y = 4\n<strong>Output:</strong> [10,8,2,0,0]\n<strong>Explanation:</strong> For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k == 3, the pairs are (1, 5), and (5, 1).\n- For k == 4 and k == 5, there are no pairs.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example5.png\" style=\"width: 544px; height: 130px;\" />\n<pre>\n<strong>Input:</strong> n = 4, x = 1, y = 1\n<strong>Output:</strong> [6,4,2,0]\n<strong>Explanation:</strong> For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k == 3, the pairs are (1, 4), and (4, 1).\n- For k == 4, there are no pairs.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= x, y &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "3\n1\n3\n5\n2\n4\n4\n1\n1",
        "formTitle": "[3015]Count the Number of Houses at a Certain Distance I",
        "frequency": 0.0,
        "frontendQuestionId": "3015",
        "hints": [
            "Start from each house, run a BFS to get all the distances from this house to all the other houses."
        ],
        "level": 2,
        "metaData": {
            "name": "countOfPairs",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "x",
                    "type": "integer"
                },
                {
                    "name": "y",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3271",
        "similarQuestions": [
            "[{\"title\": \"Walls and Gates\", \"titleSlug\": \"walls-and-gates\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5899\\u4e0e\\u95e8\", \"isPaidOnly\": true}]"
        ],
        "statusSign": "鉁�",
        "testCase": "3\n1\n3",
        "title": "Count the Number of Houses at a Certain Distance I",
        "titleSlug": "count-the-number-of-houses-at-a-certain-distance-i",
        "infer_hints": [
            "Calculate the distance between each pair of houses.",
            "You can do this in O(n^2) by checking for each pair of houses if the distance between them is exactly k.",
            "Use the distance between houses x and y as the base.  Try to count the number of pairs of houses that are at a certain distance from both x and y.",
            "The number of pairs of houses (house<sub>1</sub>, house<sub>2</sub>) is 0 if house<sub>1</sub> and house<sub>2</sub> are on the same street.",
            "Consider the distance between houses i and j in one direction.",
            "The distance between two houses is at most 2 * k.",
            "We need to consider all possible lengths of the shortest path from a house to another house.",
            "We can find the shortest distance between each pair of houses.",
            "Can you find the distance between any two houses in the city?",
            "For each house i, how many houses are at distance 1, 2, 3,..., n from it?",
            "Calculate the distances from the city to all houses.",
            "If we have a house at position x and another house at position y, then the distance between them is min(|x - y|, n - max(x, y) + min(x, y)).",
            "For each house, calculate the distance from it to all other houses.",
            "If the houses are numbered from 1 to n, then there are n * (n - 1) / 2 pairs of houses.",
            "How many pairs of houses are there with distance 1? How many with distance 2? ",
            "Consider two houses, how many steps can we go between them?",
            "Use prefix sums to calculate the number of houses at each distance from the city.",
            "Calculate the shortest distance from the house to the two additional houses.",
            "You can consider each house as a node in a graph, and each street as an edge. ",
            "If we start from house 1, what are the possible number of steps that we can take to reach house 2?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<vector<int>> resultGrid(vector<vector<int>>& image, int threshold) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[][] resultGrid(int[][] image, int threshold) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def resultGrid(self, image, threshold):\n        \"\"\"\n        :type image: List[List[int]]\n        :type threshold: int\n        :rtype: List[List[int]]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def resultGrid(self, image: List[List[int]], threshold: int) -> List[List[int]]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** resultGrid(int** image, int imageSize, int* imageColSize, int threshold, int* returnSize, int** returnColumnSizes) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[][] ResultGrid(int[][] image, int threshold) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} image\n * @param {number} threshold\n * @return {number[][]}\n */\nvar resultGrid = function(image, threshold) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function resultGrid(image: number[][], threshold: number): number[][] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $image\n     * @param Integer $threshold\n     * @return Integer[][]\n     */\n    function resultGrid($image, $threshold) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func resultGrid(_ image: [[Int]], _ threshold: Int) -> [[Int]] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun resultGrid(image: Array<IntArray>, threshold: Int): Array<IntArray> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<List<int>> resultGrid(List<List<int>> image, int threshold) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func resultGrid(image [][]int, threshold int) [][]int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} image\n# @param {Integer} threshold\n# @return {Integer[][]}\ndef result_grid(image, threshold)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def resultGrid(image: Array[Array[Int]], threshold: Int): Array[Array[Int]] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn result_grid(image: Vec<Vec<i32>>, threshold: i32) -> Vec<Vec<i32>> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (result-grid image threshold)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof (listof exact-integer?)))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec result_grid(Image :: [[integer()]], Threshold :: integer()) -> [[integer()]].\nresult_grid(Image, Threshold) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec result_grid(image :: [[integer]], threshold :: integer) :: [[integer]]\n  def result_grid(image, threshold) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given <code>m x n</code> grid <code>image</code> which represents a grayscale image, where <code>image[i][j]</code> represents a pixel with intensity in the range <code>[0..255]</code>. You are also given a <strong>non-negative</strong> integer <code>threshold</code>.</p>\n\n<p>Two pixels are <strong>adjacent</strong> if they share an edge.</p>\n\n<p>A <strong>region</strong> is a <code>3 x 3</code> subgrid where the <strong>absolute difference</strong> in intensity between any two <strong>adjacent</strong> pixels is <strong>less than or equal to</strong> <code>threshold</code>.</p>\n\n<p>All pixels in a region belong to that region, note that a pixel can belong to <strong>multiple</strong> regions.</p>\n\n<p>You need to calculate a <code>m x n</code> grid <code>result</code>, where <code>result[i][j]</code> is the <strong>average</strong> intensity of the regions to which <code>image[i][j]</code> belongs, <strong>rounded down</strong> to the nearest integer. If <code>image[i][j]</code> belongs to multiple regions, <code>result[i][j]</code> is the <strong>average </strong>of the<strong> rounded-down average </strong>intensities of these regions, <strong>rounded down</strong> to the nearest integer. If <code>image[i][j]</code> does<strong> not</strong> belong to any region, <code>result[i][j]</code> is <strong>equal to</strong> <code>image[i][j]</code>.</p>\n\n<p>Return the grid <code>result</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">image = [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[9,9,9,9],[9,9,9,9],[9,9,9,9]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/example0corrected.png\" style=\"width: 832px; height: 275px;\" /></p>\n\n<p>There are two regions as illustrated above. The average intensity of the first region is 9, while the average intensity of the second region is 9.67 which is rounded down to 9. The average intensity of both of the regions is (9 + 9) / 2 = 9. As all the pixels belong to either region 1, region 2, or both of them, the intensity of every pixel in the result is 9.</p>\n\n<p>Please note that the rounded-down values are used when calculating the average of multiple regions, hence the calculation is done using 9 as the average intensity of region 2, not 9.67.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">image = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold = 12</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[25,25,25],[27,27,27],[27,27,27],[30,30,30]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2023/12/21/example1corrected.png\" /></p>\n\n<p>There are two regions as illustrated above. The average intensity of the first region is 25, while the average intensity of the second region is 30. The average intensity of both of the regions is (25 + 30) / 2 = 27.5 which is rounded down to 27.</p>\n\n<p>All the pixels in row 0 of the image belong to region 1, hence all the pixels in row 0 in the result are 25. Similarly, all the pixels in row 3 in the result are 30. The pixels in rows 1 and 2 of the image belong to region 1 and region 2, hence their assigned value is 27 in the result.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">image = [[5,6,7],[8,9,10],[11,12,13]], threshold = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[5,6,7],[8,9,10],[11,12,13]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is only one <code>3 x 3</code> subgrid, while it does not have the condition on difference of adjacent pixels, for example, the difference between <code>image[0][0]</code> and <code>image[1][0]</code> is <code>|5 - 8| = 3 &gt; threshold = 1</code>. None of them belong to any valid regions, so the <code>result</code> should be the same as <code>image</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n, m &lt;= 500</code></li>\n\t<li><code>0 &lt;= image[i][j] &lt;= 255</code></li>\n\t<li><code>0 &lt;= threshold &lt;= 255</code></li>\n</ul>\n",
        "exampleTestcases": "[[5,6,7,10],[8,9,10,10],[11,12,13,10]]\n3\n[[10,20,30],[15,25,35],[20,30,40],[25,35,45]]\n12\n[[5,6,7],[8,9,10],[11,12,13]]\n1",
        "formTitle": "[3030]Find the Grid of Region Average",
        "frequency": 0.0,
        "frontendQuestionId": "3030",
        "hints": [
            "Try all the <code>3 * 3</code> sub-grids to find all the regions.",
            "Keep two 2-D arrays <code>sum</code> and <code>num</code>, for each position <code>(x, y)</code> in a region, increase <code>sum[x][y]</code> by the average sum of the region and increase <code>num[x][y]</code> by <code>1</code>.",
            "For each position (x, y), <code>sum[x][y] / num[x][y]</code> is the answer. Note when <code>num[x][y] == 0</code>, we use the original value in <code>image</code> instead."
        ],
        "level": 2,
        "metaData": {
            "name": "resultGrid",
            "params": [
                {
                    "name": "image",
                    "type": "integer[][]"
                },
                {
                    "name": "threshold",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3272",
        "similarQuestions": [
            "[{\"title\": \"Range Sum Query 2D - Immutable\", \"titleSlug\": \"range-sum-query-2d-immutable\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u4e8c\\u7ef4\\u533a\\u57df\\u548c\\u68c0\\u7d22 - \\u77e9\\u9635\\u4e0d\\u53ef\\u53d8\", \"isPaidOnly\": false}, {\"title\": \"K Radius Subarray Averages\", \"titleSlug\": \"k-radius-subarray-averages\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u534a\\u5f84\\u4e3a k \\u7684\\u5b50\\u6570\\u7ec4\\u5e73\\u5747\\u503c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[[5,6,7,10],[8,9,10,10],[11,12,13,10]]\n3",
        "title": "Find the Grid of Region Average",
        "titleSlug": "find-the-grid-of-region-average",
        "infer_hints": [
            "For each cell, calculate its average intensity with its neighbors in a 3 x 3 subgrid.",
            "Consider the difference between the average intensity of the 3x3 region and the intensity of the center pixel.",
            "Try to use dynamic programming to record the average intensity of each 3 x 3 subgrid.",
            "Use a DFS to mark each cell that belongs to the region, and calculate the sum and count of the region.",
            "Think about a way to track the average intensity of the regions.",
            "Use dynamic programming to precompute the average intensity of each region.",
            "How many regions are there?",
            "You can perform DFS to check if a pixel belongs to a region.",
            "You can use DFS to find all pixels that belong to the same region.",
            "We can use a depth-first search to find the regions.",
            "If a pixel is part of a region, then its value is the average of the intensities of all the pixels in that region.",
            "Use the union-find algorithm to track which pixels belong to which regions.",
            "The average of a single number is that number itself.",
            "We can solve this problem using a depth-first search (DFS) or a breadth-first search (BFS).",
            "Use a 2D prefix sum to solve this problem in O(n*m) time.",
            "The question is about the average of a 3x3 subgrid.",
            "You can solve this problem using a BFS/DFS to find all regions that belong to the same 3x3 grid.",
            "For each cell in the grid, you need to check its neighbors.",
            "For each pixel, find its neighbors that satisfy the condition of being in the same region.",
            "Calculate the average intensity of each 3x3 grid."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumPushes(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumPushes(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumPushes(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumPushes(self, word: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumPushes(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumPushes(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar minimumPushes = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumPushes(word: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function minimumPushes($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumPushes(_ word: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumPushes(word: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumPushes(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumPushes(word string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Integer}\ndef minimum_pushes(word)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumPushes(word: String): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_pushes(word: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-pushes word)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_pushes(Word :: unicode:unicode_binary()) -> integer().\nminimum_pushes(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_pushes(word :: String.t) :: integer\n  def minimum_pushes(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code> containing <strong>distinct</strong> lowercase English letters.</p>\n\n<p>Telephone keypads have keys mapped with <strong>distinct</strong> collections of lowercase English letters, which can be used to form words by pushing them. For example, the key <code>2</code> is mapped with <code>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code>, we need to push the key one time to type <code>&quot;a&quot;</code>, two times to type <code>&quot;b&quot;</code>, and three times to type <code>&quot;c&quot;</code> <em>.</em></p>\n\n<p>It is allowed to remap the keys numbered <code>2</code> to <code>9</code> to <strong>distinct</strong> collections of letters. The keys can be remapped to <strong>any</strong> amount of letters, but each letter <strong>must</strong> be mapped to <strong>exactly</strong> one key. You need to find the <strong>minimum</strong> number of times the keys will be pushed to type the string <code>word</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of pushes needed to type </em><code>word</code> <em>after remapping the keys</em>.</p>\n\n<p>An example mapping of letters to keys on a telephone keypad is given below. Note that <code>1</code>, <code>*</code>, <code>#</code>, and <code>0</code> do <strong>not</strong> map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png\" style=\"width: 329px; height: 313px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e1.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;abcde&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e2.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;xycdefghij&quot;\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;x&quot; -&gt; one push on key 2\n&quot;y&quot; -&gt; two pushes on key 2\n&quot;c&quot; -&gt; one push on key 3\n&quot;d&quot; -&gt; two pushes on key 3\n&quot;e&quot; -&gt; one push on key 4\n&quot;f&quot; -&gt; one push on key 5\n&quot;g&quot; -&gt; one push on key 6\n&quot;h&quot; -&gt; one push on key 7\n&quot;i&quot; -&gt; one push on key 8\n&quot;j&quot; -&gt; one push on key 9\nTotal cost is 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 = 12.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 26</code></li>\n\t<li><code>word</code> consists of lowercase English letters.</li>\n\t<li>All letters in <code>word</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "\"abcde\"\n\"xycdefghij\"",
        "formTitle": "[3014]Minimum Number of Pushes to Type Word I",
        "frequency": 0.0,
        "frontendQuestionId": "3014",
        "hints": [
            "We have 8 keys in total. We can type 8 characters with one push each, 8 different characters with two pushes each, and so on.",
            "The optimal way is to map letters to keys evenly."
        ],
        "level": 1,
        "metaData": {
            "name": "minimumPushes",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3275",
        "similarQuestions": [
            "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7535\\u8bdd\\u53f7\\u7801\\u7684\\u5b57\\u6bcd\\u7ec4\\u5408\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"abcde\"",
        "title": "Minimum Number of Pushes to Type Word I",
        "titleSlug": "minimum-number-of-pushes-to-type-word-i",
        "infer_hints": [
            "The minimum number of pushes can be calculated by comparing the previous letter and the current letter.",
            "This problem is a typical dynamic programming problem. We can use dynamic programming to solve it.",
            "Think about the minimum number of steps needed to type a character.",
            "Use dynamic programming to keep track of the minimum number of pushes for each substring.",
            "Use a queue to perform BFS.",
            "For each letter, determine which key it needs to be pressed on.",
            "Keep track of the last key pressed for each letter.",
            "We can use dynamic programming to solve this problem.",
            "You can use depth-first search (DFS) to solve this problem.",
            "Find the time it takes to type each letter.",
            "This problem is a variant of the Shortest Path in a Grid problem, with the grid being the keyboard and the source and destination being the initial and final string.",
            "Think about the order of the characters. Can you use dynamic programming to solve this?",
            "We can use a depth-first search to keep track of the current position and the current key.",
            "Use dynamic programming to keep track of the minimum number of pushes for each prefix of the string.",
            "What does it mean to \"push\" a character?",
            "Can we calculate the cost of typing a single letter by comparing it with the previous letter?",
            "What if we try all combinations of keys that could type the word?",
            "Think of the word as a sequence of characters.  The total number of pushes needed is the sum of the number of pushes needed to type each character.",
            "Use dynamic programming.",
            "You need to maintain the current position of each letter on the keyboard and calculate the distance between the current position and the position you want for the next letter."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumPushes(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumPushes(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumPushes(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumPushes(self, word: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumPushes(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumPushes(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar minimumPushes = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumPushes(word: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function minimumPushes($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumPushes(_ word: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumPushes(word: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumPushes(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumPushes(word string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Integer}\ndef minimum_pushes(word)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumPushes(word: String): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_pushes(word: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-pushes word)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_pushes(Word :: unicode:unicode_binary()) -> integer().\nminimum_pushes(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_pushes(word :: String.t) :: integer\n  def minimum_pushes(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code> containing lowercase English letters.</p>\n\n<p>Telephone keypads have keys mapped with <strong>distinct</strong> collections of lowercase English letters, which can be used to form words by pushing them. For example, the key <code>2</code> is mapped with <code>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code>, we need to push the key one time to type <code>&quot;a&quot;</code>, two times to type <code>&quot;b&quot;</code>, and three times to type <code>&quot;c&quot;</code> <em>.</em></p>\n\n<p>It is allowed to remap the keys numbered <code>2</code> to <code>9</code> to <strong>distinct</strong> collections of letters. The keys can be remapped to <strong>any</strong> amount of letters, but each letter <strong>must</strong> be mapped to <strong>exactly</strong> one key. You need to find the <strong>minimum</strong> number of times the keys will be pushed to type the string <code>word</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of pushes needed to type </em><code>word</code> <em>after remapping the keys</em>.</p>\n\n<p>An example mapping of letters to keys on a telephone keypad is given below. Note that <code>1</code>, <code>*</code>, <code>#</code>, and <code>0</code> do <strong>not</strong> map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png\" style=\"width: 329px; height: 313px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e1.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;abcde&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv2e2.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;xyzxyzxyzxyz&quot;\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;x&quot; -&gt; one push on key 2\n&quot;y&quot; -&gt; one push on key 3\n&quot;z&quot; -&gt; one push on key 4\nTotal cost is 1 * 4 + 1 * 4 + 1 * 4 = 12\nIt can be shown that no other mapping can provide a lower cost.\nNote that the key 9 is not mapped to any letter: it is not necessary to map letters to every key, but to map all the letters.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/27/keypadv2.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;aabbccddeeffgghhiiiiii&quot;\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\n&quot;f&quot; -&gt; one push on key 7\n&quot;g&quot; -&gt; one push on key 8\n&quot;h&quot; -&gt; two pushes on key 9\n&quot;i&quot; -&gt; one push on key 9\nTotal cost is 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 2 * 2 + 6 * 1 = 24.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abcde\"\n\"xyzxyzxyzxyz\"\n\"aabbccddeeffgghhiiiiii\"",
        "formTitle": "[3016]Minimum Number of Pushes to Type Word II",
        "frequency": 0.0,
        "frontendQuestionId": "3016",
        "hints": [
            "We have 8 keys in total. We can type 8 characters with one push each, 8 different characters with two pushes each, and so on.",
            "The optimal way is to map letters to keys evenly.",
            "Sort the letters by frequencies in the word in non-increasing order."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumPushes",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3276",
        "similarQuestions": [
            "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7535\\u8bdd\\u53f7\\u7801\\u7684\\u5b57\\u6bcd\\u7ec4\\u5408\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"abcde\"",
        "title": "Minimum Number of Pushes to Type Word II",
        "titleSlug": "minimum-number-of-pushes-to-type-word-ii",
        "infer_hints": [
            "The first step is to find the position of each letter in the keypad.",
            "We need to count the number of different characters we have to press for each key.",
            "We need to keep track of the number of times we press each key to type the string word.",
            "The key is to keep track of the next key that should be pressed for each letter.",
            "You can use dynamic programming.  There are 10 possible characters at each position.  The transition from one state to another is O(1) because there are 10 choices at each position.",
            "How many pushes are needed to type the word if the keypad is remapped to a 2-row keypad?",
            "Use dynamic programming.",
            "Think about the smallest possible string that can be typed with the given keypad.",
            "Think of each character as a node in a graph.",
            "What if you could find the minimum number of pushes needed to type each individual letter?",
            "Use dynamic programming to find the minimum number of pushes.",
            "If we have two adjacent letters <code>word[i]</code> and <code>word[i+1]</code>, we have to push the key for <code>word[i]</code> twice.",
            "What if we just keep track of the last key pressed?",
            "Create an array <code>dp[i]</code> where <code>dp[i]</code> is the minimum cost to type the first <code>i</code> characters.  We can use a sliding window to determine when to switch the keypad.",
            "This problem can be reduced to finding the length of the longest common prefix between all the strings in the dictionary.",
            "For each letter, find the number of keys it is pushed on.",
            "What if we used a greedy approach to try to minimize the number of pushes?",
            "How many times do we have to push each key?",
            "How many pushes are needed to type a character?",
            "Think of a word as a series of keys to press.  If we have the cost to type a word in a single keypad, we can multiply it by the number of keypads and get the total cost."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfPairs(vector<vector<int>>& points) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfPairs(int[][] points) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfPairs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfPairs(self, points: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfPairs(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfPairs(int[][] points) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfPairs = function(points) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfPairs(points: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfPairs($points) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfPairs(_ points: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfPairs(points: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfPairs(List<List<int>> points) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfPairs(points [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_pairs(points)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfPairs(points: Array[Array[Int]]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_pairs(points: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-pairs points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_pairs(Points :: [[integer()]]) -> integer().\nnumber_of_pairs(Points) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_pairs(points :: [[integer]]) :: integer\n  def number_of_pairs(points) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D array <code>points</code> of size <code>n x 2</code> representing integer coordinates of some points on a 2D-plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>We define the <strong>right</strong> direction as positive x-axis (<strong>increasing x-coordinate</strong>) and the <strong>left</strong> direction as negative x-axis (<strong>decreasing x-coordinate</strong>). Similarly, we define the <strong>up</strong> direction as positive y-axis (<strong>increasing y-coordinate</strong>) and the <strong>down</strong> direction as negative y-axis (<strong>decreasing y-coordinate</strong>)</p>\n\n<p>You have to place <code>n</code> people, including Alice and Bob, at these points such that there is <strong>exactly one</strong> person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice&#39;s position as the <strong>upper left corner</strong> and Bob&#39;s position as the <strong>lower right corner</strong> of the fence (<strong>Note</strong> that the fence <strong>might not</strong> enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either <strong>inside</strong> the fence or <strong>on</strong> the fence, Alice will be sad.</p>\n\n<p>Return <em>the number of <strong>pairs of points</strong> where you can place Alice and Bob, such that Alice <strong>does not</strong> become sad on building the fence</em>.</p>\n\n<p><strong>Note</strong> that Alice can only build a fence with Alice&#39;s position as the upper left corner, and Bob&#39;s position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners <code>(1, 1)</code>, <code>(1, 3)</code>, <code>(3, 1)</code>, and <code>(3, 3)</code>, because:</p>\n\n<ul>\n\t<li>With Alice at <code>(3, 3)</code> and Bob at <code>(1, 1)</code>, Alice&#39;s position is not the upper left corner and Bob&#39;s position is not the lower right corner of the fence.</li>\n\t<li>With Alice at <code>(1, 3)</code> and Bob at <code>(1, 1)</code>, Bob&#39;s position is not the lower right corner of the fence.</li>\n</ul>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/example0alicebob-1.png\" style=\"width: 750px; height: 308px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/example1alicebob.png\" style=\"width: 376px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no way to place Alice and Bob such that Alice can build a fence with Alice&#39;s position as the upper left corner and Bob&#39;s position as the lower right corner. Hence we return 0. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/04/example2alicebob.png\" style=\"width: 1321px; height: 363px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[6,2],[4,4],[2,6]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/04/example4alicebob.png\" style=\"width: 1123px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[3,1],[1,3],[1,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= points[i][0], points[i][1] &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>points[i]</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "[[1,1],[2,2],[3,3]]\n[[6,2],[4,4],[2,6]]\n[[3,1],[1,3],[1,1]]",
        "formTitle": "[3027]Find the Number of Ways to Place People II",
        "frequency": 0.0,
        "frontendQuestionId": "3027",
        "hints": [
            "Sort the points by x-coordinate in non-decreasing order and break the tie by sorting the y-coordinate in non-increasing order.",
            "Now consider two points upper-left corner <code>points[i]</code> and lower-right corner <code>points[j]</code>, such that <code>i < j</code> and <code>points[i][0] <= points[j][0]</code> and <code>points[i][1] >= points[j][1]</code>.",
            "Instead of brute force looping, we can save the largest y-coordinate that is no larger than <code>points[i][1]</code> when looping on <code>j</code>, say the value is <code>m</code>. And if <code>m < points[j][1]</code>, the upper-left and lower-right corner pair is valid.",
            "The actual values don鈥檛 matter, we can compress all x-coordinates and y-coordinates to the range <code>[1, n]</code>. Can we use prefix sum now?"
        ],
        "level": 3,
        "metaData": {
            "name": "numberOfPairs",
            "params": [
                {
                    "name": "points",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3277",
        "similarQuestions": [
            "[{\"title\": \"Rectangle Area\", \"titleSlug\": \"rectangle-area\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u77e9\\u5f62\\u9762\\u79ef\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[1,1],[2,2],[3,3]]",
        "title": "Find the Number of Ways to Place People II",
        "titleSlug": "find-the-number-of-ways-to-place-people-ii",
        "infer_hints": [
            "How many ways can Alice place her to the right and Bob to the bottom?",
            "How many ways are there to place Alice and Bob?  We can place Alice in <code>n</code> ways and Bob in <code>n</code> ways.",
            "We need to place Alice and Bob in such a way that the rectangle is as small as possible.  How can we find the smallest rectangle?",
            "The number of ways to place Alice and Bob such that they don't become sad is the number of ways to place Alice and Bob such that they are on the same line.",
            "Count the number of points where you can place Alice and Bob such that Alice is at the upper left corner and Bob is at the lower right corner.",
            "The answer is the number of ways to choose the four corners of the rectangle.",
            "Sort the points by x-coordinate.",
            "How many ways can you place Alice and Bob such that they do not meet?",
            "The number of ways to place Alice and Bob is the product of the number of ways to place Alice and the number of ways to place Bob.",
            "The idea is to find the number of ways to place Alice and Bob such that they are not on the same line.",
            "If we sort the points by their x-coordinates, how many ways are there to place Alice and Bob such that Alice will not be sad if we consider all the points to the right of Alice as one point?",
            "Use dynamic programming.",
            "Sort the coordinates by x-coordinate and y-coordinate separately.",
            "We can find the number of ways to place Alice and Bob such that Alice is at the upper left corner and Bob is at the lower right corner by sorting the points.",
            "You can maintain two prefix arrays for the x-coordinates and y-coordinates of the points respectively.",
            "You can sort the points by x-coordinate.",
            "Sort the array of points by their x-coordinate.",
            "Count the number of points that are on the left or right of Alice and the top or bottom of Bob.",
            "The total number of ways to place Alice and Bob is the product of the number of ways to place Alice and the number of ways to place Bob.",
            "You can use the number of ways to place Alice and Bob on the x-axis as well as the y-axis to find the number of ways to place them on both axes."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfPairs(vector<vector<int>>& points) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfPairs(int[][] points) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfPairs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfPairs(self, points: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfPairs(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfPairs(int[][] points) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfPairs = function(points) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfPairs(points: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfPairs($points) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfPairs(_ points: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfPairs(points: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfPairs(List<List<int>> points) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfPairs(points [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_pairs(points)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfPairs(points: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_pairs(points: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-pairs points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_pairs(Points :: [[integer()]]) -> integer().\nnumber_of_pairs(Points) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_pairs(points :: [[integer]]) :: integer\n  def number_of_pairs(points) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D array <code>points</code> of size <code>n x 2</code> representing integer coordinates of some points on a 2D plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>Count the number of pairs of points <code>(A, B)</code>, where</p>\n\n<ul>\n\t<li><code>A</code> is on the <strong>upper left</strong> side of <code>B</code>, and</li>\n\t<li>there are no other points in the rectangle (or line) they make (<strong>including the border</strong>).</li>\n</ul>\n\n<p>Return the count.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[1,1],[2,2],[3,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/01/04/example1alicebob.png\" style=\"width: 427px; height: 350px;\" /></p>\n\n<p>There is no way to choose <code>A</code> and <code>B</code> so <code>A</code> is on the upper left side of <code>B</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[6,2],[4,4],[2,6]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img height=\"365\" src=\"https://assets.leetcode.com/uploads/2024/06/25/t2.jpg\" width=\"1321\" /></p>\n\n<ul>\n\t<li>The left one is the pair <code>(points[1], points[0])</code>, where <code>points[1]</code> is on the upper left side of <code>points[0]</code> and the rectangle is empty.</li>\n\t<li>The middle one is the pair <code>(points[2], points[1])</code>, same as the left one it is a valid pair.</li>\n\t<li>The right one is the pair <code>(points[2], points[0])</code>, where <code>points[2]</code> is on the upper left side of <code>points[0]</code>, but <code>points[1]</code> is inside the rectangle so it&#39;s not a valid pair.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[3,1],[1,3],[1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/06/25/t3.jpg\" style=\"width: 1269px; height: 350px;\" /></p>\n\n<ul>\n\t<li>The left one is the pair <code>(points[2], points[0])</code>, where <code>points[2]</code> is on the upper left side of <code>points[0]</code> and there are no other points on the line they form. Note that it is a valid state when the two points form a line.</li>\n\t<li>The middle one is the pair <code>(points[1], points[2])</code>, it is a valid pair same as the left one.</li>\n\t<li>The right one is the pair <code>(points[1], points[0])</code>, it is not a valid pair as <code>points[2]</code> is on the border of the rectangle.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 50</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= points[i][0], points[i][1] &lt;= 50</code></li>\n\t<li>All <code>points[i]</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "[[1,1],[2,2],[3,3]]\n[[6,2],[4,4],[2,6]]\n[[3,1],[1,3],[1,1]]",
        "formTitle": "[3025]Find the Number of Ways to Place People I",
        "frequency": 0.0,
        "frontendQuestionId": "3025",
        "hints": [
            "We can enumerate all the upper-left and lower-right corners.",
            "If the upper-left corner is <code>(x1, y1)</code> and lower-right corner is <code>(x2, y2)</code>, check that there is no point <code>(x, y)</code> such that <code>x1 <= x <= x2</code> and <code>y2 <= y <= y1</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfPairs",
            "params": [
                {
                    "name": "points",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3278",
        "similarQuestions": [
            "[{\"title\": \"Rectangle Area\", \"titleSlug\": \"rectangle-area\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u77e9\\u5f62\\u9762\\u79ef\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[1,1],[2,2],[3,3]]",
        "title": "Find the Number of Ways to Place People I",
        "titleSlug": "find-the-number-of-ways-to-place-people-i",
        "infer_hints": [
            "What is the maximum number of ways to place people?",
            "Count how many points are to the left of each point.",
            "Consider each pair of points as two points.",
            "Try to solve the problem in a way that you use only O(1) space.",
            "Use dynamic programming.",
            "Sort the input array and find the number of ways to place the people.",
            "Consider the number of ways to place people on a 2D grid.",
            "We can use the following observation: If we sort the x-coordinates in increasing order, then the number of ways to place the people is the number of ways to place the first person times the number of ways to place the remaining people.",
            "Try to brute force it. You will be able to get TLE.",
            "We can sort the array of coordinates by x, and then iterate over the sorted array.  Now, if we have the coordinates of two points (x1, y1) and (x2, y2), how can we determine if (x1, y1) is on the upper left side of (x2, y2)?",
            "Find the number of valid triangles (A, B, C).",
            "Sort the array in increasing order of the y-coordinate, then use a map to count the number of people on the right side of each point.",
            "Create a map to store the count of the y-coordinates.",
            "Create a map of coordinates to counts of points at those coordinates.",
            "For each pair of points, we need to check if the point on the bottom right is to the right of the point on the top left.",
            "What if we just keep track of the number of ways to place people in the top-left corner?",
            "How many points are on the line (x1, y1) -> (x2, y2)?",
            "Use the properties of the 2D plane to decide whether a point is on the left side of another point.",
            "Think about the relationship between the number of ways to place the people and the number of ways to arrange them.",
            "How many ways can we place 2 people on the 4 points?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long flowerGame(int n, int m) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long flowerGame(int n, int m) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def flowerGame(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def flowerGame(self, n: int, m: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long flowerGame(int n, int m) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long FlowerGame(int n, int m) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar flowerGame = function(n, m) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function flowerGame(n: number, m: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $m\n     * @return Integer\n     */\n    function flowerGame($n, $m) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func flowerGame(_ n: Int, _ m: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun flowerGame(n: Int, m: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int flowerGame(int n, int m) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func flowerGame(n int, m int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} m\n# @return {Integer}\ndef flower_game(n, m)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def flowerGame(n: Int, m: Int): Long = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn flower_game(n: i32, m: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (flower-game n m)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec flower_game(N :: integer(), M :: integer()) -> integer().\nflower_game(N, M) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec flower_game(n :: integer, m :: integer) :: integer\n  def flower_game(n, m) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Alice and Bob are playing a turn-based game on a circular field surrounded by flowers. The circle represents the field, and there are <code>x</code> flowers in the clockwise direction between Alice and Bob, and <code>y</code> flowers in the anti-clockwise direction between them.</p>\n\n<p>The game proceeds as follows:</p>\n\n<ol>\n\t<li>Alice takes the first turn.</li>\n\t<li>In each turn, a player must choose either the clockwise or anti-clockwise direction and pick one flower from that side.</li>\n\t<li>At the end of the turn, if there are no flowers left at all, the <strong>current</strong> player captures their opponent and wins the game.</li>\n</ol>\n\n<p>Given two integers, <code>n</code> and <code>m</code>, the task is to compute the number of possible pairs <code>(x, y)</code> that satisfy the conditions:</p>\n\n<ul>\n\t<li>Alice must win the game according to the described rules.</li>\n\t<li>The number of flowers <code>x</code> in the clockwise direction must be in the range <code>[1,n]</code>.</li>\n\t<li>The number of flowers <code>y</code> in the anti-clockwise direction must be in the range <code>[1,m]</code>.</li>\n</ul>\n\n<p>Return <em>the number of possible pairs</em> <code>(x, y)</code> <em>that satisfy the conditions mentioned in the statement</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, m = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The following pairs satisfy conditions described in the statement: (1,2), (3,2), (2,1).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, m = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No pairs satisfy the conditions described in the statement.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "3\n2\n1\n1",
        "formTitle": "[3021]Alice and Bob Playing Flower Game",
        "frequency": 0.0,
        "frontendQuestionId": "3021",
        "hints": [
            "(x, y) is valid if and only if they have different parities."
        ],
        "level": 2,
        "metaData": {
            "name": "flowerGame",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "m",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3279",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "3\n2",
        "title": "Alice and Bob Playing Flower Game",
        "titleSlug": "alice-and-bob-playing-flower-game",
        "infer_hints": [
            "The answer will be the sum of all gcd(i,j) where i,j is the number of flowers in the clockwise direction.",
            "Use dynamic programming to solve this problem.",
            "The game is won if and only if Alice can pick the flowers on her side in a non-decreasing order.  What does this mean for the number of flowers on her side?",
            "Find all divisors of n and m.",
            "Let's iterate over the possible values of `x`.  For each `x`, we can use the Chinese Remainder Theorem to find the number of solutions.",
            "Consider the game with one flower on the circle.  What is the probability of Alice winning?",
            "The answer is given by the sum of gcd(i,j) over all pairs (i,j).",
            "We can use the Sprague-Grundy theorem.",
            "Find a formula to compute the number of ways to reach the position i.",
            "Alice will win the game if the difference between the remaining flowers is a multiple of 3.",
            "What are the possible states that Alice and Bob can reach after <code>n</code> turns?",
            "Consider all the possible states that Alice and Bob can reach.",
            "Use dynamic programming.",
            "We can solve this problem by iterating over all possible number of flowers Alice can pick and then use binary search to find the number of flowers Bob must pick to ensure Alice wins.",
            "For every pair (x, y), Alice can win if and only if x is a divisor of y.",
            "How many moves does it take for Alice to win the game?",
            "The problem can be solved using dynamic programming.",
            "Think of the game as a graph where the vertices are the possible states of the game.",
            "How many pairs <code>(x, y)</code> exist where Alice wins?",
            "What are the winning strategies for Alice and Bob?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int earliestSecondToMarkIndices(vector<int>& nums, vector<int>& changeIndices) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def earliestSecondToMarkIndices(self, nums, changeIndices):\n        \"\"\"\n        :type nums: List[int]\n        :type changeIndices: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int earliestSecondToMarkIndices(int* nums, int numsSize, int* changeIndices, int changeIndicesSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int EarliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} changeIndices\n * @return {number}\n */\nvar earliestSecondToMarkIndices = function(nums, changeIndices) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function earliestSecondToMarkIndices(nums: number[], changeIndices: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $changeIndices\n     * @return Integer\n     */\n    function earliestSecondToMarkIndices($nums, $changeIndices) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func earliestSecondToMarkIndices(_ nums: [Int], _ changeIndices: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun earliestSecondToMarkIndices(nums: IntArray, changeIndices: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int earliestSecondToMarkIndices(List<int> nums, List<int> changeIndices) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func earliestSecondToMarkIndices(nums []int, changeIndices []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} change_indices\n# @return {Integer}\ndef earliest_second_to_mark_indices(nums, change_indices)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def earliestSecondToMarkIndices(nums: Array[Int], changeIndices: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn earliest_second_to_mark_indices(nums: Vec<i32>, change_indices: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (earliest-second-to-mark-indices nums changeIndices)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec earliest_second_to_mark_indices(Nums :: [integer()], ChangeIndices :: [integer()]) -> integer().\nearliest_second_to_mark_indices(Nums, ChangeIndices) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec earliest_second_to_mark_indices(nums :: [integer], change_indices :: [integer]) :: integer\n  def earliest_second_to_mark_indices(nums, change_indices) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two <strong>1-indexed</strong> integer arrays, <code>nums</code> and, <code>changeIndices</code>, having lengths <code>n</code> and <code>m</code>, respectively.</p>\n\n<p>Initially, all indices in <code>nums</code> are unmarked. Your task is to mark <strong>all</strong> indices in <code>nums</code>.</p>\n\n<p>In each second, <code>s</code>, in order from <code>1</code> to <code>m</code> (<strong>inclusive</strong>), you can perform <strong>one</strong> of the following operations:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[1, n]</code> and <strong>decrement</strong> <code>nums[i]</code> by <code>1</code>.</li>\n\t<li>Set <code>nums[changeIndices[s]]</code> to any <strong>non-negative</strong> value.</li>\n\t<li>Choose an index <code>i</code> in the range <code>[1, n]</code>, where <code>nums[i]</code> is <strong>equal</strong> to <code>0</code>, and <strong>mark</strong> index <code>i</code>.</li>\n\t<li>Do nothing.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>earliest second</strong> in the range </em><code>[1, m]</code><em> when <strong>all</strong> indices in </em><code>nums</code><em> can be marked by choosing operations optimally, or </em><code>-1</code><em> if it is impossible.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,3], changeIndices = [1,3,2,2,2,2,3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Set nums[changeIndices[1]] to 0. nums becomes [0,2,3].\nSecond 2: Set nums[changeIndices[2]] to 0. nums becomes [0,2,0].\nSecond 3: Set nums[changeIndices[3]] to 0. nums becomes [0,0,0].\nSecond 4: Mark index 1, since nums[1] is equal to 0.\nSecond 5: Mark index 2, since nums[2] is equal to 0.\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,2], changeIndices = [1,2,1,2,1,2,1,2]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Mark index 1, since nums[1] is equal to 0.\nSecond 2: Mark index 2, since nums[2] is equal to 0.\nSecond 3: Decrement index 4 by one. nums becomes [0,0,1,1].\nSecond 4: Decrement index 4 by one. nums becomes [0,0,1,0].\nSecond 5: Decrement index 3 by one. nums becomes [0,0,0,0].\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nSecond 7: Mark index 4, since nums[4] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 7th second.\nHence, the answer is 7.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], changeIndices = [1,2,3]\n<strong>Output:</strong> -1\n<strong>Explanation: </strong>In this example, it can be shown that it is impossible to mark all indices, as we don&#39;t have enough seconds. \nHence, the answer is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == changeIndices.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= changeIndices[i] &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "[3,2,3]\n[1,3,2,2,2,2,3]\n[0,0,1,2]\n[1,2,1,2,1,2,1,2]\n[1,2,3]\n[1,2,3]",
        "formTitle": "[3049]Earliest Second to Mark Indices II",
        "frequency": 0.0,
        "frontendQuestionId": "3049",
        "hints": [
            "We need at least <code>n</code> seconds, and at most <code>sum(nums[i]) + n</code> seconds.",
            "We can binary search the earliest second where all indices can be marked.",
            "If there is an operation where we change <code>nums[changeIndices[i]]</code> to a non-negative value, it is best for it to satisfy the following constraints:<ul>\r\n<li><code>nums[changeIndices[i]]</code> should not be equal to <code>0</code>.</li>\r\n<li><code>nums[changeIndices[i]]</code> should be changed to <code>0</code>.</li>\r\n<li>It should be the first position where <code>changeIndices[i]</code> occurs in <code>changeIndices</code>.</li>\r\n<li>There should be another second, <code>j</code>, where <code>changeIndices[i]</code> will be marked. <code>j</code> is in the range <code>[i + 1, m]</code>.</li>\r\n</ul>",
            "Let <code>time_needed = sum(nums[i]) + n</code>. To check if we can mark all indices at some second <code>x</code>, we need to make <code>time_needed <= x</code>, using non-negative change operations as described previously.",
            "Using a non-negative change operation on some <code>nums[changeIndices[i]]</code> that satisfies the constraints described previously reduces <code>time_needed</code> by <code>nums[changeIndices[i]] - 1</code>. So, we need to maximize the sum of <code>(nums[changeIndices[i]] - 1)</code> while ensuring that the non-negative change operations still satisfy the constraints.",
            "Maximizing the sum of <code>(nums[changeIndices[i]] - 1)</code> can be done greedily using a min-priority queue and going in reverse starting from second <code>x</code> to second <code>1</code>, maximizing the sum of the values in the priority queue and ensuring that for every non-negative change operation on <code>nums[changeIndices[i]]</code> chosen, there is another second <code>j</code> in the range <code>[i + 1, x]</code> where <code>changeIndices[i]</code> can be marked.",
            "The answer is the first value of <code>x</code> in the range <code>[1, m]</code> where it is possible to make <code>time_needed <= x</code>, or <code>-1</code> if there is no such second."
        ],
        "level": 3,
        "metaData": {
            "name": "earliestSecondToMarkIndices",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "changeIndices",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3289",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "[3,2,3]\n[1,3,2,2,2,2,3]",
        "title": "Earliest Second to Mark Indices II",
        "titleSlug": "earliest-second-to-mark-indices-ii",
        "infer_hints": [
            "Use the Breadth-First Search (BFS) to check if we can mark all indices in the given time.",
            "If the number of indices to mark is less than the length of the array, we can always mark all indices. Otherwise, we need to mark at least one index at each second.",
            "If you can mark all indices in one second, how many seconds will it take for you to mark all indices in two seconds?",
            "Think about how we can mark each index in the minimum number of seconds.",
            "How can we optimize the operations?",
            "What are the possible states of the array?",
            "Try to model the problem as a graph.",
            "For each index i, let's calculate the earliest second we can reach i after performing operations.",
            "You can simulate the process and use a priority queue to store the indices of the numbers that you can change to zero.",
            "Can we keep track of the minimum number of operations to mark all indices?",
            "For each second, try to maximize the number of indices we can mark.",
            "What is the minimum number of operations to change an array to all zeros?",
            "The earliest second when all indices can be marked by choosing operations optimally is when the number of zeros in the array is at most the number of operations.",
            "You can use a priority queue to store the indices with zero values.",
            "We need to perform the operations in a certain order to ensure we can mark all indices at the earliest.",
            "Use BFS to try all possibilities and remember the minimum time to reach a state.",
            "Consider a brute force approach where you try to mark all indices at every second.",
            "Can we use dynamic programming to solve this problem?",
            "For each index, we can keep track of the minimum time it takes to reach it.",
            "Use a priority queue to track the maximum value and its index."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countMatchingSubarrays(vector<int>& nums, vector<int>& pattern) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countMatchingSubarrays(self, nums, pattern):\n        \"\"\"\n        :type nums: List[int]\n        :type pattern: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countMatchingSubarrays(self, nums: List[int], pattern: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countMatchingSubarrays(int* nums, int numsSize, int* pattern, int patternSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} pattern\n * @return {number}\n */\nvar countMatchingSubarrays = function(nums, pattern) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countMatchingSubarrays(nums: number[], pattern: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $pattern\n     * @return Integer\n     */\n    function countMatchingSubarrays($nums, $pattern) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countMatchingSubarrays(_ nums: [Int], _ pattern: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countMatchingSubarrays(nums: IntArray, pattern: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countMatchingSubarrays(List<int> nums, List<int> pattern) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countMatchingSubarrays(nums []int, pattern []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} pattern\n# @return {Integer}\ndef count_matching_subarrays(nums, pattern)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countMatchingSubarrays(nums: Array[Int], pattern: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_matching_subarrays(nums: Vec<i32>, pattern: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-matching-subarrays nums pattern)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_matching_subarrays(Nums :: [integer()], Pattern :: [integer()]) -> integer().\ncount_matching_subarrays(Nums, Pattern) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_matching_subarrays(nums :: [integer], pattern :: [integer]) :: integer\n  def count_matching_subarrays(nums, pattern) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code>, and a <strong>0-indexed</strong> integer array <code>pattern</code> of size <code>m</code> consisting of integers <code>-1</code>, <code>0</code>, and <code>1</code>.</p>\n\n<p>A <span data-keyword=\"subarray\">subarray</span> <code>nums[i..j]</code> of size <code>m + 1</code> is said to match the <code>pattern</code> if the following conditions hold for each element <code>pattern[k]</code>:</p>\n\n<ul>\n\t<li><code>nums[i + k + 1] &gt; nums[i + k]</code> if <code>pattern[k] == 1</code>.</li>\n\t<li><code>nums[i + k + 1] == nums[i + k]</code> if <code>pattern[k] == 0</code>.</li>\n\t<li><code>nums[i + k + 1] &lt; nums[i + k]</code> if <code>pattern[k] == -1</code>.</li>\n</ul>\n\n<p>Return <em>the<strong> count</strong> of subarrays in</em> <code>nums</code> <em>that match the</em> <code>pattern</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], pattern = [1,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == pattern.length &lt; n</code></li>\n\t<li><code>-1 &lt;= pattern[i] &lt;= 1</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4,5,6]\n[1,1]\n[1,4,4,1,3,5,5,3]\n[1,0,-1]",
        "formTitle": "[3036]Number of Subarrays That Match a Pattern II",
        "frequency": 0.0,
        "frontendQuestionId": "3036",
        "hints": [
            "Create a second array <code>nums2</code> such that <code>nums2[i] = 1</code> if <code>nums[i + 1] > nums[i]</code>, <code>nums2[i] = 0</code> if <code>nums[i + 1] == nums[i]</code>, and <code>nums2[i] = -1</code> if <code>nums[i + 1] < nums[i]</code>.",
            "The problem becomes: 鈥淐ount the number of subarrays in <code>nums2</code> that are equal to <code>pattern</code>.",
            "Use Knuth-Morris-Pratt or Z-Function algorithms."
        ],
        "level": 3,
        "metaData": {
            "name": "countMatchingSubarrays",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "pattern",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3290",
        "similarQuestions": [
            "[{\"title\": \"Match Substring After Replacement\", \"titleSlug\": \"match-substring-after-replacement\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u66ff\\u6362\\u5b57\\u7b26\\u540e\\u5339\\u914d\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,2,3,4,5,6]\n[1,1]",
        "title": "Number of Subarrays That Match a Pattern II",
        "titleSlug": "number-of-subarrays-that-match-a-pattern-ii",
        "infer_hints": [
            "We can use the same concept of the previous approach, but now we can also check for each subarray if it matches the pattern.",
            "We can use a stack to keep track of the position of the elements.",
            "Use a prefix sum array and binary indexed tree to store the number of subarrays for each prefix.",
            "Use the concept of prefix sum.",
            "Consider the number of subarrays that end at a position i.",
            "We can convert pattern to a string of -1, 0, and 1.  Now, the problem is to count the number of subarrays that equal to the pattern.",
            "We can maintain a prefix sum array of the array.  How can we utilize it?",
            "Try to convert the pattern to a valid subarray.",
            "You can use a map to store the counts of each number in the current subarray.",
            "Use the concept of prefix sum and how to apply it to this problem.",
            "Convert the pattern into a difference array.",
            "For each position, we want to count the number of increasing/decreasing subarrays that end at this position.",
            "Create a helper function to convert the pattern into an array of 1s and -1s.",
            "Create an array where each element is the number of increasing and decreasing subarrays in the prefixes of the array.",
            "Find the lengths of the longest increasing and decreasing subarrays starting at each position.",
            "We can use a sliding window to check all possible subarrays.",
            "Consider the pattern array as a string.  How many subarrays match this string?",
            "Can you think of a way to use the prefix sum to solve this problem?",
            "If you can generate the pattern for the subarray, you can find out how many subarrays match this pattern.",
            "What if we preprocess the array and find the number of subarrays that can be made from each element in the array?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool canSortArray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean canSortArray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def canSortArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def canSortArray(self, nums: List[int]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool canSortArray(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool CanSortArray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canSortArray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function canSortArray(nums: number[]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canSortArray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func canSortArray(_ nums: [Int]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun canSortArray(nums: IntArray): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool canSortArray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func canSortArray(nums []int) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_sort_array(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def canSortArray(nums: Array[Int]): Boolean = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn can_sort_array(nums: Vec<i32>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (can-sort-array nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec can_sort_array(Nums :: [integer()]) -> boolean().\ncan_sort_array(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec can_sort_array(nums :: [integer]) :: boolean\n  def can_sort_array(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array of <strong>positive</strong> integers <code>nums</code>.</p>\n\n<p>In one <strong>operation</strong>, you can swap any two <strong>adjacent</strong> elements if they have the <strong>same</strong> number of <span data-keyword=\"set-bit\">set bits</span>. You are allowed to do this operation <strong>any</strong> number of times (<strong>including zero</strong>).</p>\n\n<p>Return <code>true</code> <em>if you can sort the array, else return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [8,4,2,30,15]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Let&#39;s look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation &quot;10&quot;, &quot;100&quot;, and &quot;1000&quot; respectively. The numbers 15 and 30 have four set bits each with binary representation &quot;1111&quot; and &quot;11110&quot;.\nWe can sort the array using 4 operations:\n- Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15].\n- Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15].\n- Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15].\n- Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30].\nThe array has become sorted, hence we return true.\nNote that there may be other sequences of operations which also sort the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The array is already sorted, hence we return true.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,16,8,4,2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It can be shown that it is not possible to sort the input array using any number of operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2<sup>8</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[8,4,2,30,15]\n[1,2,3,4,5]\n[3,16,8,4,2]",
        "formTitle": "[3011]Find if Array Can Be Sorted",
        "frequency": 0.0,
        "frontendQuestionId": "3011",
        "hints": [
            "Split the array into segments. Each segment contains consecutive elements with the same number of set bits.",
            "From left to right, the previous segment鈥檚 largest element should be smaller than the current segment鈥檚 smallest element."
        ],
        "level": 2,
        "metaData": {
            "name": "canSortArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3291",
        "similarQuestions": [
            "[{\"title\": \"Sort Integers by The Number of 1 Bits\", \"titleSlug\": \"sort-integers-by-the-number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6839\\u636e\\u6570\\u5b57\\u4e8c\\u8fdb\\u5236\\u4e0b 1 \\u7684\\u6570\\u76ee\\u6392\\u5e8f\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[8,4,2,30,15]",
        "title": "Find if Array Can Be Sorted",
        "titleSlug": "find-if-array-can-be-sorted",
        "infer_hints": [
            "Do you need to ensure that every element is greater than the previous one?",
            "If an array can be sorted, then there should be no element which is not at its correct position.",
            "Sort the array in increasing order of the number of set bits in the binary representation.",
            "The given array can be sorted by performing some number of operations.",
            "Can you sort the array in ascending order?",
            "The problem can be solved by using some sort of simulation.  Try to simulate the sorting process by using a priority queue.",
            "If you can sort the array, then there must be a number that is smaller than its right-most set bit.",
            "If the array is already sorted or can be sorted by one swap, return true, else return false.",
            "Try to make the array sorted by swapping elements.",
            "How many elements are out of order in the sorted array?",
            "Try to check if the array can be sorted by comparing it with its sorted version.",
            "Use a greedy approach.  How can you sort the array with one swap?",
            "Can we perform a series of swaps to sort the array?",
            "For each number, if it's not in the correct position, we can move it to the correct position.",
            "Sort the array and compare it with the original array.",
            "You need to find a way to count the number of set bits in a number.",
            "If there is a number x in the array, then we can swap it with any of its next smaller number y if and only if x & y == 0.",
            "We can sort the array and compare the original array and the sorted array. If they are equal, return true. If not, we need to check whether the two arrays can be sorted by at most one swap.",
            "Sort the array and compare it with the original array.",
            "Can we use some sort of sorting algorithm?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int earliestSecondToMarkIndices(vector<int>& nums, vector<int>& changeIndices) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def earliestSecondToMarkIndices(self, nums, changeIndices):\n        \"\"\"\n        :type nums: List[int]\n        :type changeIndices: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int earliestSecondToMarkIndices(int* nums, int numsSize, int* changeIndices, int changeIndicesSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int EarliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} changeIndices\n * @return {number}\n */\nvar earliestSecondToMarkIndices = function(nums, changeIndices) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function earliestSecondToMarkIndices(nums: number[], changeIndices: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $changeIndices\n     * @return Integer\n     */\n    function earliestSecondToMarkIndices($nums, $changeIndices) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func earliestSecondToMarkIndices(_ nums: [Int], _ changeIndices: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun earliestSecondToMarkIndices(nums: IntArray, changeIndices: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int earliestSecondToMarkIndices(List<int> nums, List<int> changeIndices) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func earliestSecondToMarkIndices(nums []int, changeIndices []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} change_indices\n# @return {Integer}\ndef earliest_second_to_mark_indices(nums, change_indices)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def earliestSecondToMarkIndices(nums: Array[Int], changeIndices: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn earliest_second_to_mark_indices(nums: Vec<i32>, change_indices: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (earliest-second-to-mark-indices nums changeIndices)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec earliest_second_to_mark_indices(Nums :: [integer()], ChangeIndices :: [integer()]) -> integer().\nearliest_second_to_mark_indices(Nums, ChangeIndices) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec earliest_second_to_mark_indices(nums :: [integer], change_indices :: [integer]) :: integer\n  def earliest_second_to_mark_indices(nums, change_indices) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two <strong>1-indexed</strong> integer arrays, <code>nums</code> and, <code>changeIndices</code>, having lengths <code>n</code> and <code>m</code>, respectively.</p>\n\n<p>Initially, all indices in <code>nums</code> are unmarked. Your task is to mark <strong>all</strong> indices in <code>nums</code>.</p>\n\n<p>In each second, <code>s</code>, in order from <code>1</code> to <code>m</code> (<strong>inclusive</strong>), you can perform <strong>one</strong> of the following operations:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[1, n]</code> and <strong>decrement</strong> <code>nums[i]</code> by <code>1</code>.</li>\n\t<li>If <code>nums[changeIndices[s]]</code> is <strong>equal</strong> to <code>0</code>, <strong>mark</strong> the index <code>changeIndices[s]</code>.</li>\n\t<li>Do nothing.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>earliest second</strong> in the range </em><code>[1, m]</code><em> when <strong>all</strong> indices in </em><code>nums</code><em> can be marked by choosing operations optimally, or </em><code>-1</code><em> if it is impossible.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].\nSecond 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].\nSecond 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].\nSecond 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.\nSecond 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.\nSecond 7: Do nothing.\nSecond 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 8th second.\nHence, the answer is 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3], changeIndices = [1,1,1,2,1,1,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2].\nSecond 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0].\nSecond 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0.\nSecond 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0].\nSecond 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1], changeIndices = [2,2,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> In this example, it is impossible to mark all indices because index 1 isn&#39;t in changeIndices.\nHence, the answer is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == changeIndices.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= changeIndices[i] &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "[2,2,0]\n[2,2,2,2,3,2,2,1]\n[1,3]\n[1,1,1,2,1,1,1]\n[0,1]\n[2,2,2]",
        "formTitle": "[3048]Earliest Second to Mark Indices I",
        "frequency": 0.0,
        "frontendQuestionId": "3048",
        "hints": [
            "Consider using binary search.",
            "Suppose the <code>answer <= x</code>; we can mark each index as late as possible. Namely, mark each index at the last occurrence in the array <code>changeIndices[1..x]</code>.",
            "When marking an index, which is the last occurrence at the second <code>i</code>, we check whether we have a sufficient number of decrement operations to mark all the previous indices whose last occurrences have already been marked, and the current index, i.e., <code>i - sum_of_marked_indices_values - cnt_of_marked_indices >= nums[changeIndices[i]]</code>.",
            "The answer is the earliest second when all indices can be marked after running the binary search or <code>-1</code> if there is no such second."
        ],
        "level": 2,
        "metaData": {
            "name": "earliestSecondToMarkIndices",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "changeIndices",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3292",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "[2,2,0]\n[2,2,2,2,3,2,2,1]",
        "title": "Earliest Second to Mark Indices I",
        "titleSlug": "earliest-second-to-mark-indices-i",
        "infer_hints": [
            "Use a queue to store the current state of the array.",
            "How many seconds it will take to decrement all numbers to 0?",
            "You can use a queue to keep track of the indices to mark.",
            "Think about each second as a state and how the state can change.",
            "Use a heap to keep track of the maximum value in nums at each second.",
            "Use dynamic programming.",
            "Do a simulation of the problem.",
            "The number of seconds to mark index i is the minimum of nums[i] and the number of seconds it takes to mark index i-1.",
            "For each index, find the minimum number of operations needed to make it zero.",
            "Can we simulate the process?",
            "Do you know how to mark all indices at the same time?  Can you use a priority queue or a stack?",
            "For each second, we have two choices.",
            "Consider the state of the array and the indices you need to mark.",
            "What is the maximum value of the prefix sum?",
            "Keep track of the maximum number of operations that can be performed by a single second.",
            "If you can perform an operation at a certain index, what would happen to that index?",
            "Use a queue to keep track of the indices to be processed.",
            "We can keep track of the maximum value of nums and its index. The maximum value determines the best move.",
            "You can use BFS to solve this problem.",
            "The answer is at least 1."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumTimeToInitialState(string word, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumTimeToInitialState(String word, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumTimeToInitialState(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumTimeToInitialState(self, word: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumTimeToInitialState(char* word, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumTimeToInitialState(string word, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumTimeToInitialState = function(word, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumTimeToInitialState(word: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumTimeToInitialState($word, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumTimeToInitialState(_ word: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumTimeToInitialState(word: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumTimeToInitialState(String word, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumTimeToInitialState(word string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_time_to_initial_state(word, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumTimeToInitialState(word: String, k: Int): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_time_to_initial_state(word: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-time-to-initial-state word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_time_to_initial_state(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_time_to_initial_state(Word, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_time_to_initial_state(word :: String.t, k :: integer) :: integer\n  def minimum_time_to_initial_state(word, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>At every second, you must perform the following operations:</p>\n\n<ul>\n\t<li>Remove the first <code>k</code> characters of <code>word</code>.</li>\n\t<li>Add any <code>k</code> characters to the end of <code>word</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that you do not necessarily need to add the same characters that you removed. However, you must perform <strong>both</strong> operations at every second.</p>\n\n<p>Return <em>the <strong>minimum</strong> time greater than zero required for</em> <code>word</code> <em>to revert to its <strong>initial</strong> state</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;aba&quot; from the prefix of word, and add characters &quot;bac&quot; to the end of word. Thus, word becomes equal to &quot;cababac&quot;.\nAt the 2nd second, we remove characters &quot;cab&quot; from the prefix of word, and add &quot;aba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 4\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;abac&quot; from the prefix of word, and add characters &quot;caba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abcbabcd&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to &quot;abcbabcd&quot; and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abacaba\"\n3\n\"abacaba\"\n4\n\"abcbabcd\"\n2",
        "formTitle": "[3031]Minimum Time to Revert Word to Initial State II",
        "frequency": 0.0,
        "frontendQuestionId": "3031",
        "hints": [
            "Find the longest suffix which is also a prefix and whose length is a multiple of <code>K</code> in <code>O(N)</code>.",
            "Use Z-function."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumTimeToInitialState",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3296",
        "similarQuestions": [
            "[{\"title\": \"Longest Happy Prefix\", \"titleSlug\": \"longest-happy-prefix\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u957f\\u5feb\\u4e50\\u524d\\u7f00\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "\"abacaba\"\n3",
        "title": "Minimum Time to Revert Word to Initial State II",
        "titleSlug": "minimum-time-to-revert-word-to-initial-state-ii",
        "infer_hints": [
            "You can do this by using a hashmap to count the number of each letter in the string.",
            "We can simulate the operation.",
            "What is the time complexity of finding the shortest period of a string?",
            "If you're asked for the minimum time to revert the word to its initial state, you can just count the number of times the word is equal to its initial state.",
            "The minimum time is obtained by moving the same characters from the front of word to the back.",
            "How many times does the word revert to its initial state?",
            "We can use a deque to store the current state of the string.",
            "How can we know that the string word can revert to its initial state?",
            "Think about the effect of every operation.",
            "What if we keep removing the first k characters of word and adding the same characters to the end of word, and we keep track of the minimum number of operations we need to perform?",
            "We can use a set to store the characters we have already processed.",
            "If the word is the same string as it was at the start, then the answer is 1.  Otherwise, we need to do one operation per cycle of length 2 * k.",
            "Consider the prefix of word that has a size of k. \r\nIt's either the prefix of word itself or the prefix of word's next version.",
            "The word becomes equal to its initial state in `i` seconds if and only if the string `s[0:i]` and `s[i:2 * i]` are equal.",
            "Try each operation in order, and check whether the current word can be reverted back to the initial state.",
            "Use a queue to track the characters you want to add at each second.",
            "What if the word has the same characters at the start and the end?",
            "We can use a stack to store the characters we removed.  Then we can check if we can revert the word to its initial state by checking if the stack is a palindrome.",
            "For each prefix, we can determine the minimum time to revert it to the initial state.",
            "Can you solve the problem with a brute force approach?  Try to reduce the problem to a smaller sub-problem."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumTimeToInitialState(string word, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumTimeToInitialState(String word, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumTimeToInitialState(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumTimeToInitialState(self, word: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumTimeToInitialState(char* word, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumTimeToInitialState(string word, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumTimeToInitialState = function(word, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumTimeToInitialState(word: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumTimeToInitialState($word, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumTimeToInitialState(_ word: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumTimeToInitialState(word: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumTimeToInitialState(String word, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumTimeToInitialState(word string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_time_to_initial_state(word, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumTimeToInitialState(word: String, k: Int): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_time_to_initial_state(word: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-time-to-initial-state word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_time_to_initial_state(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_time_to_initial_state(Word, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_time_to_initial_state(word :: String.t, k :: integer) :: integer\n  def minimum_time_to_initial_state(word, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>At every second, you must perform the following operations:</p>\n\n<ul>\n\t<li>Remove the first <code>k</code> characters of <code>word</code>.</li>\n\t<li>Add any <code>k</code> characters to the end of <code>word</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that you do not necessarily need to add the same characters that you removed. However, you must perform <strong>both</strong> operations at every second.</p>\n\n<p>Return <em>the <strong>minimum</strong> time greater than zero required for</em> <code>word</code> <em>to revert to its <strong>initial</strong> state</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;aba&quot; from the prefix of word, and add characters &quot;bac&quot; to the end of word. Thus, word becomes equal to &quot;cababac&quot;.\nAt the 2nd second, we remove characters &quot;cab&quot; from the prefix of word, and add &quot;aba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 4\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;abac&quot; from the prefix of word, and add characters &quot;caba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abcbabcd&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to &quot;abcbabcd&quot; and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 50 </code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abacaba\"\n3\n\"abacaba\"\n4\n\"abcbabcd\"\n2",
        "formTitle": "[3029]Minimum Time to Revert Word to Initial State I",
        "frequency": 0.0,
        "frontendQuestionId": "3029",
        "hints": [
            "Find the longest suffix which is also a prefix and the length is multiple of <code>k</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumTimeToInitialState",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3297",
        "similarQuestions": [
            "[{\"title\": \"Longest Happy Prefix\", \"titleSlug\": \"longest-happy-prefix\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u957f\\u5feb\\u4e50\\u524d\\u7f00\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "\"abacaba\"\n3",
        "title": "Minimum Time to Revert Word to Initial State I",
        "titleSlug": "minimum-time-to-revert-word-to-initial-state-i",
        "infer_hints": [
            "Think of the operation as a rotation.  If you rotate a string s by k characters to the right, then the word[i] == word[(i + k) mod len(word)].",
            "Can we do the same thing with suffixes instead of prefixes?",
            "If the word is a palindrome, it can be reverted back to its initial state in 0 seconds.",
            "The answer is 1 if and only if k is a divisor of n, otherwise it's 2.",
            "Use dynamic programming to keep track of the smallest number of operations to get back to the initial string.",
            "Find the length of the period T.",
            "The word needs to be restored to its initial state.",
            "Think of the word as a cycle.",
            "How can we calculate the number of operations needed to revert the word to its initial state?",
            "For each prefix of the string, try to add characters to the end of the prefix such that it equals the original string.",
            "We can simulate the operations. We need to remove the first k characters and add k characters to the end of word. We can do this by appending the first k characters to the end of word and then removing the first k characters. Do this at every second.",
            "Use the \"touches\" array to count the number of times we must touch the characters in word.",
            "You can perform operations by only removing and adding characters from the prefix and suffix of the word.",
            "We need to check all possible operations.",
            "You can do the operations in the reverse order, i.e., add characters to the end and remove characters from the start.",
            "Use a sliding window and a queue.",
            "If you're stuck, try thinking about how the operation changes the string.",
            "What if we instead add characters to the end of word instead of removing them from the beginning?",
            "If word = a + b, where a is a period, then it is equivalent to the problem of finding the minimum number of operations to make a equal to b.",
            "What if the first character of word is not equal to the last character of word?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxSelectedElements(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxSelectedElements(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxSelectedElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxSelectedElements(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxSelectedElements(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxSelectedElements(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSelectedElements = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxSelectedElements(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSelectedElements($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxSelectedElements(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxSelectedElements(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxSelectedElements(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxSelectedElements(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_selected_elements(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxSelectedElements(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_selected_elements(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-selected-elements nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_selected_elements(Nums :: [integer()]) -> integer().\nmax_selected_elements(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_selected_elements(nums :: [integer]) :: integer\n  def max_selected_elements(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of <strong>positive</strong> integers.</p>\n\n<p>Initially, you can increase the value of <strong>any</strong> element in the array by <strong>at most</strong> <code>1</code>.</p>\n\n<p>After that, you need to select <strong>one or more</strong> elements from the final array such that those elements are <strong>consecutive</strong> when sorted in increasing order. For example, the elements <code>[3, 4, 5]</code> are consecutive while <code>[3, 4, 6]</code> and <code>[1, 1, 2, 3]</code> are not.<!-- notionvc: 312f8c5d-40d0-4cd1-96cc-9e96a846735b --></p>\n\n<p>Return <em>the <strong>maximum</strong> number of elements that you can select</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,5,1,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can increase the elements at indices 0 and 3. The resulting array is nums = [3,1,5,2,1].\nWe select the elements [<u><strong>3</strong></u>,<u><strong>1</strong></u>,5,<u><strong>2</strong></u>,1] and we sort them to obtain [1,2,3], which are consecutive.\nIt can be shown that we cannot select more than 3 consecutive elements.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,7,10]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The maximum consecutive elements that we can select is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[2,1,5,1,1]\n[1,4,7,10]",
        "formTitle": "[3041]Maximize Consecutive Elements in an Array After Modification",
        "frequency": 0.0,
        "frontendQuestionId": "3041",
        "hints": [
            "Sort the array and try using dynamic programming.",
            "Let <code>dp[i]</code> be the length of the longest consecutive elements ending at element at index <code>i</code> in the sorted array."
        ],
        "level": 3,
        "metaData": {
            "name": "maxSelectedElements",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3298",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "[2,1,5,1,1]",
        "title": "Maximize Consecutive Elements in an Array After Modification",
        "titleSlug": "maximize-consecutive-elements-in-an-array-after-modification",
        "infer_hints": [
            "You can solve this problem by using the concept of Prefix Sums.",
            "You can increase any element in the array by at most 1. What if you increase all elements to the smallest possible value?",
            "What if we sort the array and then iterate through it?",
            "If you sort the array, you can just check for the longest consecutive sequence.",
            "If we increase the value of any element in the array by at most 1, what would be the maximum number of elements that you can select?",
            "Can we sort the array first?",
            "Can you solve this problem with a greedy approach?",
            "We can perform the operation only on the numbers which are not consecutive.",
            "Sort the array and check if the difference between the consecutive elements is 1.",
            "We need to know the longest streak of increasing numbers we can get after applying at most one operation.",
            "For each number, consider whether we want to extend the subsequence ending at the number before or the number itself.",
            "We can use the concept of longest arithmetic sequence.",
            "You can perform at most 1 operation on the array.",
            "We can keep track of the smallest and largest values in the current window.  If the difference between the largest and smallest values is less than the size of the window, then we can increase all the values in the window by at most 1 to make the values consecutive.",
            "Try to use the smallest number of operations to make the array consecutive.",
            "Can we just use a prefix sum array to store the frequency of each element in the array?",
            "What is the maximum number of consecutive elements that can be selected?",
            "Use prefix sum and hashmap to keep track of the largest prefix that can be extended to the current element.",
            "Find the length of the longest increasing subsequence in the modified array.",
            "You can use a map to store the counts of each element in the array."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumLength(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumLength(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumLength(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumLength(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumLength = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumLength(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumLength($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumLength(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumLength(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumLength(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumLength(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_length(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumLength(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_length(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_length(Nums :: [integer()]) -> integer().\nmaximum_length(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer]) :: integer\n  def maximum_length(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of <strong>positive</strong> integers <code>nums</code>.</p>\n\n<p>You need to select a <span data-keyword=\"subset\">subset</span> of <code>nums</code> which satisfies the following condition:</p>\n\n<ul>\n\t<li>You can place the selected elements in a <strong>0-indexed</strong> array such that it follows the pattern: <code>[x, x<sup>2</sup>, x<sup>4</sup>, ..., x<sup>k/2</sup>, x<sup>k</sup>, x<sup>k/2</sup>, ..., x<sup>4</sup>, x<sup>2</sup>, x]</code> (<strong>Note</strong> that <code>k</code> can be be any <strong>non-negative</strong> power of <code>2</code>). For example, <code>[2, 4, 16, 4, 2]</code> and <code>[3, 9, 3]</code> follow the pattern while <code>[2, 4, 8, 4, 2]</code> does not.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> number of elements in a subset that satisfies these conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,1,2,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can select the subset {4,2,2}, which can be placed in the array as [2,4,2] which follows the pattern and 2<sup>2</sup> == 4. Hence the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can select the subset {1}, which can be placed in the array as [1] which follows the pattern. Hence the answer is 1. Note that we could have also selected the subsets {2}, {3}, or {4}, there may be multiple subsets which provide the same answer. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[5,4,1,2,2]\n[1,3,2,4]",
        "formTitle": "[3020]Find the Maximum Number of Elements in Subset",
        "frequency": 0.0,
        "frontendQuestionId": "3020",
        "hints": [
            "We can select an odd number of <code>1</code>鈥檚.",
            "Put all the values into a HashSet. We can start from each <code>x > 1</code> as the smallest chosen value and we can find the longest subset by checking the new values (which are the square of the previous value) in the set by brute force.",
            "Note when <code>x > 1</code>, <code>x<sup>2</sup></code>, <code>x<sup>4</sup></code>, <code>x<sup>8</sup></code>, 鈥� increases very fast, the longest subset with smallest value x cannot be very long. (The length is <code>O(log(log(10<sup>9</sup>)))</code>.",
            "Hence we can directly check all lengths less than <code>10</code> for all values of <code>x</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3299",
        "similarQuestions": [
            "[{\"title\": \"Longest Consecutive Sequence\", \"titleSlug\": \"longest-consecutive-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u8fde\\u7eed\\u5e8f\\u5217\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[5,4,1,2,2]",
        "title": "Find the Maximum Number of Elements in Subset",
        "titleSlug": "find-the-maximum-number-of-elements-in-subset",
        "infer_hints": [
            "You can use the modulus property x^a mod x^b = x^(a-b).",
            "If you want to form a subset such that the product of its elements is a perfect square, then you can form the subset by choosing the numbers which are a perfect square of a number.",
            "You need to count the numbers that can be the first number of the subsequence.",
            "Use bitwise operation to check the condition.",
            "How many elements can we place at the position x, x^2, x^4,..., x^k/2, x^k?",
            "The subset must be sorted.",
            "We can solve this problem by using a heap data structure.",
            "For each element in the array, we can determine the largest power of 2 that it can be raised to such that it's still less than or equal to it.",
            "Try to use dynamic programming.",
            "Sort the array and then apply dynamic programming.",
            "Try to use dynamic programming to store the count of numbers which can be represented as the x<sup>k</sup> or x<sup>k</sup> + x<sup>k/2</sup> or x<sup>k/2</sup>.",
            "Think of the array as a list of elements and use a stack to keep track of the elements.",
            "For each element, how many of its square and square root values can we find in the given array?",
            "What's the maximum possible length of the array?",
            "What is the smallest number of elements in the subset?",
            "The pattern [x, x<sup>2</sup>, x<sup>4</sup>,..., x<sup>k/2</sup>, x<sup>k</sup>, x<sup>k/2</sup>,..., x<sup>4</sup>, x<sup>2</sup>, x] only holds when x is a square number.",
            "For each number x, let's try to find the smallest y such that x^y is less than or equal to the maximum number in the array.",
            "Use a dynamic programming to solve this problem.",
            "You can use dynamic programming to solve this problem.",
            "You need to store the frequency of each number and for each number, you can compute its number of square-free divisors."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> beautifulIndices(string s, string a, string b, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def beautifulIndices(self, s, a, b, k):\n        \"\"\"\n        :type s: str\n        :type a: str\n        :type b: str\n        :type k: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* beautifulIndices(char* s, char* a, char* b, int k, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public IList<int> BeautifulIndices(string s, string a, string b, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {string} a\n * @param {string} b\n * @param {number} k\n * @return {number[]}\n */\nvar beautifulIndices = function(s, a, b, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function beautifulIndices(s: string, a: string, b: string, k: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $a\n     * @param String $b\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function beautifulIndices($s, $a, $b, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func beautifulIndices(_ s: String, _ a: String, _ b: String, _ k: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun beautifulIndices(s: String, a: String, b: String, k: Int): List<Int> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> beautifulIndices(String s, String a, String b, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func beautifulIndices(s string, a string, b string, k int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {String} a\n# @param {String} b\n# @param {Integer} k\n# @return {Integer[]}\ndef beautiful_indices(s, a, b, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def beautifulIndices(s: String, a: String, b: String, k: Int): List[Int] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn beautiful_indices(s: String, a: String, b: String, k: i32) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (beautiful-indices s a b k)\n  (-> string? string? string? exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec beautiful_indices(S :: unicode:unicode_binary(), A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), K :: integer()) -> [integer()].\nbeautiful_indices(S, A, B, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec beautiful_indices(s :: String.t, a :: String.t, b :: String.t, k :: integer) :: [integer]\n  def beautiful_indices(s, a, b, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code>, a string <code>a</code>, a string <code>b</code>, and an integer <code>k</code>.</p>\n\n<p>An index <code>i</code> is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt;= s.length - a.length</code></li>\n\t<li><code>s[i..(i + a.length - 1)] == a</code></li>\n\t<li>There exists an index <code>j</code> such that:\n\t<ul>\n\t\t<li><code>0 &lt;= j &lt;= s.length - b.length</code></li>\n\t\t<li><code>s[j..(j + b.length - 1)] == b</code></li>\n\t\t<li><code>|j - i| &lt;= k</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the array that contains beautiful indices in <strong>sorted order from smallest to largest</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;isawsquirrelnearmysquirrelhouseohmy&quot;, a = &quot;my&quot;, b = &quot;squirrel&quot;, k = 15\n<strong>Output:</strong> [16,33]\n<strong>Explanation:</strong> There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == &quot;my&quot; and there exists an index 4 with s[4..11] == &quot;squirrel&quot; and |16 - 4| &lt;= 15.\n- The index 33 is beautiful as s[33..34] == &quot;my&quot; and there exists an index 18 with s[18..25] == &quot;squirrel&quot; and |33 - 18| &lt;= 15.\nThus we return [16,33] as the result.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, a = &quot;a&quot;, b = &quot;a&quot;, k = 4\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == &quot;a&quot; and there exists an index 0 with s[0..0] == &quot;a&quot; and |0 - 0| &lt;= 4.\nThus we return [0] as the result.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>s</code>, <code>a</code>, and <code>b</code> contain only lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15\n\"abcd\"\n\"a\"\n\"a\"\n4",
        "formTitle": "[3008]Find Beautiful Indices in the Given Array II",
        "frequency": 0.0,
        "frontendQuestionId": "3008",
        "hints": [
            "Use KMP or string hashing."
        ],
        "level": 3,
        "metaData": {
            "name": "beautifulIndices",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "a",
                    "type": "string"
                },
                {
                    "name": "b",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3303",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
        "title": "Find Beautiful Indices in the Given Array II",
        "titleSlug": "find-beautiful-indices-in-the-given-array-ii",
        "infer_hints": [
            "Create an array to store the positions of a and b.",
            "We can solve this problem in two steps: First, find all indices of 'a' and 'b' in the string. Then, check each index of 'a' and for each of them, try to find the corresponding index of 'b' in the range of [i-k, i+k].",
            "Create an array of indices of the first occurrence of a in s.",
            "If there are multiple occurrences of the substring a, how can you use it?",
            "Find all indices in s where a appears and store them in array posa. Similarly, find all indices where b appears and store them in array posb.",
            "How can we check if the index i is beautiful?",
            "Can you solve this problem using a sliding window?",
            "How can we use the two pointers approach to solve this problem?",
            "How can you optimize the process of checking each index to be beautiful?",
            "Create a sliding window that slides over the string s.",
            "Use two pointers to keep track of the positions of 'a' and 'b'.",
            "For each index <code>i</code>, find the maximum index <code>j</code> such that <code>j - i &lt;= k</code>.",
            "For each index, we can use two pointers to check whether there is an index in the array such that |j - i| <= k.",
            "Instead of using 2 loops, use 1 loop and map the index of each b in s to a set.",
            "We can solve this problem using sliding window.",
            "Consider using a sliding window to check if there exists an index <code>j</code> such that <code>|j - i| &lt;= k</code>.",
            "Use a sliding window with two pointers.",
            "If the string <code>s</code> has an index <code>i</code> such that <code>s[i..(i + a.length - 1)] == a</code>, we call it a start. Similarly, if the string <code>s</code> has an index <code>j</code> such that <code>s[j..(j + b.length - 1)] == b</code>, we call it an end.",
            "Can we use two pointers to solve this problem?",
            "Use a sliding window for each of the strings a and b."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long countPrefixSuffixPairs(vector<string>& words) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long countPrefixSuffixPairs(String[] words) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countPrefixSuffixPairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long countPrefixSuffixPairs(char** words, int wordsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long CountPrefixSuffixPairs(string[] words) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar countPrefixSuffixPairs = function(words) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countPrefixSuffixPairs(words: string[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function countPrefixSuffixPairs($words) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countPrefixSuffixPairs(_ words: [String]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countPrefixSuffixPairs(words: Array<String>): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countPrefixSuffixPairs(List<String> words) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countPrefixSuffixPairs(words []string) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} words\n# @return {Integer}\ndef count_prefix_suffix_pairs(words)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countPrefixSuffixPairs(words: Array[String]): Long = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_prefix_suffix_pairs(words: Vec<String>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-prefix-suffix-pairs words)\n  (-> (listof string?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_prefix_suffix_pairs(Words :: [unicode:unicode_binary()]) -> integer().\ncount_prefix_suffix_pairs(Words) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_prefix_suffix_pairs(words :: [String.t]) :: integer\n  def count_prefix_suffix_pairs(words) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code>.</p>\n\n<p>Let&#39;s define a <strong>boolean</strong> function <code>isPrefixAndSuffix</code> that takes two strings, <code>str1</code> and <code>str2</code>:</p>\n\n<ul>\n\t<li><code>isPrefixAndSuffix(str1, str2)</code> returns <code>true</code> if <code>str1</code> is <strong>both</strong> a <span data-keyword=\"string-prefix\">prefix</span> and a <span data-keyword=\"string-suffix\">suffix</span> of <code>str2</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>For example, <code>isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;)</code> is <code>true</code> because <code>&quot;aba&quot;</code> is a prefix of <code>&quot;ababa&quot;</code> and also a suffix, but <code>isPrefixAndSuffix(&quot;abc&quot;, &quot;abcd&quot;)</code> is <code>false</code>.</p>\n\n<p>Return <em>an integer denoting the <strong>number</strong> of index pairs </em><code>(i<em>, </em>j)</code><em> such that </em><code>i &lt; j</code><em>, and </em><code>isPrefixAndSuffix(words[i], words[j])</code><em> is </em><code>true</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;aba&quot;,&quot;ababa&quot;,&quot;aa&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;a&quot;, &quot;aba&quot;) is true.\ni = 0 and j = 2 because isPrefixAndSuffix(&quot;a&quot;, &quot;ababa&quot;) is true.\ni = 0 and j = 3 because isPrefixAndSuffix(&quot;a&quot;, &quot;aa&quot;) is true.\ni = 1 and j = 2 because isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;) is true.\nTherefore, the answer is 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;pa&quot;,&quot;papa&quot;,&quot;ma&quot;,&quot;mama&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;pa&quot;, &quot;papa&quot;) is true.\ni = 2 and j = 3 because isPrefixAndSuffix(&quot;ma&quot;, &quot;mama&quot;) is true.\nTherefore, the answer is 2.  </pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abab&quot;,&quot;ab&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(&quot;abab&quot;, &quot;ab&quot;) is false.\nTherefore, the answer is 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n\t<li>The sum of the lengths of all <code>words[i]</code> does not exceed <code>5 * 10<sup>5</sup></code>.</li>\n</ul>\n",
        "exampleTestcases": "[\"a\",\"aba\",\"ababa\",\"aa\"]\n[\"pa\",\"papa\",\"ma\",\"mama\"]\n[\"abab\",\"ab\"]",
        "formTitle": "[3045]Count Prefix and Suffix Pairs II",
        "frequency": 0.0,
        "frontendQuestionId": "3045",
        "hints": [
            "We can use a trie to solve it.",
            "Process all <code>words[i]</code> from left to right. The trie stores the pair <code>(words[i][j], words[i][words[i].length - j - 1])</code> as a single character; we process all the words in this way.",
            "During insertion, keep a counter in each trie node, as in a normal trie. If the current node is the end of a word (namely, the pair on that node is <code>(words[i][words[i].length - 1], words[i][0])</code>), increase the node's counter by <code>1</code>.",
            "From left to right, insert each word into the trie, and increase our final result by each node's counter when going down the trie during insertion. This means there was at least one word that is both a prefix and a suffix of the current word before."
        ],
        "level": 3,
        "metaData": {
            "name": "countPrefixSuffixPairs",
            "params": [
                {
                    "name": "words",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3305",
        "similarQuestions": [
            "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5b9e\\u73b0 Trie (\\u524d\\u7f00\\u6811)\", \"isPaidOnly\": false}, {\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6dfb\\u52a0\\u4e0e\\u641c\\u7d22\\u5355\\u8bcd - \\u6570\\u636e\\u7ed3\\u6784\\u8bbe\\u8ba1\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[\"a\",\"aba\",\"ababa\",\"aa\"]",
        "title": "Count Prefix and Suffix Pairs II",
        "titleSlug": "count-prefix-and-suffix-pairs-ii",
        "infer_hints": [
            "Use a trie data structure.",
            "We can precompute the prefix and suffix of each string.",
            "Try storing all prefixes and suffixes of the string in an array and then sort them.  Then for each pair of words, you can use binary search to see if there is a matching prefix and suffix.",
            "Try to find all the prefixes and suffixes of all the words and then check if one word is a prefix and a suffix of another.",
            "Create a new array, where each element will be a string that starts with the first character of words[i] and ends with the last character of words[i]. ",
            "Can you solve this problem in O(n log(n)) time complexity?",
            "For each word, we can store the set of all its prefixes and the set of all its suffixes.",
            "Build a map from all prefixes and suffixes of all words to their counts.",
            "Create an array where each index i will contain the length of the shortest suffix that starts at index i.",
            "Think about how you can efficiently handle the querying of the number of strings that start with a certain prefix and end with a certain suffix.",
            "How can we determine if a string is a prefix and a suffix of another string?  You can use a Trie data structure.",
            "Use a map to count the number of words that end with a certain string.",
            "We can solve this problem using Trie data structure.",
            "Try to split the words[i] into prefix and suffix.",
            "Count the number of words that are a prefix and a suffix of another word.",
            "Try to use a Trie data structure.",
            "Consider the length of the words.  What can we say about the length of the prefix and suffix?",
            "What is the maximum length of the string words[i]?",
            "Use a Trie and hashmap to store all the prefixes and suffixes of the words.",
            "Use a trie to store all the words in the input."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<long long> unmarkedSumArray(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long[] unmarkedSumArray(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def unmarkedSumArray(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def unmarkedSumArray(self, nums: List[int], queries: List[List[int]]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* unmarkedSumArray(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long[] UnmarkedSumArray(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar unmarkedSumArray = function(nums, queries) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function unmarkedSumArray(nums: number[], queries: number[][]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function unmarkedSumArray($nums, $queries) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func unmarkedSumArray(_ nums: [Int], _ queries: [[Int]]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun unmarkedSumArray(nums: IntArray, queries: Array<IntArray>): LongArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> unmarkedSumArray(List<int> nums, List<List<int>> queries) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func unmarkedSumArray(nums []int, queries [][]int) []int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef unmarked_sum_array(nums, queries)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def unmarkedSumArray(nums: Array[Int], queries: Array[Array[Int]]): Array[Long] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn unmarked_sum_array(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i64> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (unmarked-sum-array nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec unmarked_sum_array(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\nunmarked_sum_array(Nums, Queries) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec unmarked_sum_array(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def unmarked_sum_array(nums, queries) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of size <code>n</code> consisting of positive integers.</p>\n\n<p>You are also given a 2D array <code>queries</code> of size <code>m</code> where <code>queries[i] = [index<sub>i</sub>, k<sub>i</sub>]</code>.</p>\n\n<p>Initially all elements of the array are <strong>unmarked</strong>.</p>\n\n<p>You need to apply <code>m</code> queries on the array in order, where on the <code>i<sup>th</sup></code> query you do the following:</p>\n\n<ul>\n\t<li>Mark the element at index <code>index<sub>i</sub></code> if it is not already marked.</li>\n\t<li>Then mark <code>k<sub>i</sub></code> unmarked elements in the array with the <strong>smallest</strong> values. If multiple such elements exist, mark the ones with the smallest indices. And if less than <code>k<sub>i</sub></code> unmarked elements exist, then mark all of them.</li>\n</ul>\n\n<p>Return <em>an array answer of size </em><code>m</code><em> where </em><code>answer[i]</code><em> is the <strong>sum</strong> of unmarked elements in the array after the </em><code>i<sup>th</sup></code><em> query</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,2,2,1,2,3,1], queries = [[1,2],[3,3],[4,2]]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">[8,3,0]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We do the following queries on the array:</p>\n\n<ul>\n\t<li>Mark the element at index <code>1</code>, and <code>2</code> of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are <code>nums = [<strong><u>1</u></strong>,<u><strong>2</strong></u>,2,<u><strong>1</strong></u>,2,3,1]</code>. The sum of unmarked elements is <code>2 + 2 + 3 + 1 = 8</code>.</li>\n\t<li>Mark the element at index <code>3</code>, since it is already marked we skip it. Then we mark <code>3</code> of the smallest unmarked elements with the smallest indices, the marked elements now are <code>nums = [<strong><u>1</u></strong>,<u><strong>2</strong></u>,<u><strong>2</strong></u>,<u><strong>1</strong></u>,<u><strong>2</strong></u>,3,<strong><u>1</u></strong>]</code>. The sum of unmarked elements is <code>3</code>.</li>\n\t<li>Mark the element at index <code>4</code>, since it is already marked we skip it. Then we mark <code>2</code> of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are <code>nums = [<strong><u>1</u></strong>,<u><strong>2</strong></u>,<u><strong>2</strong></u>,<u><strong>1</strong></u>,<u><strong>2</strong></u>,<strong><u>3</u></strong>,<u><strong>1</strong></u>]</code>. The sum of unmarked elements is <code>0</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,4,2,3], queries = [[0,1]]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">[7]</span></p>\n\n<p><strong>Explanation: </strong> We do one query which is mark the element at index <code>0</code> and mark the smallest element among unmarked elements. The marked elements will be <code>nums = [<strong><u>1</u></strong>,4,<u><strong>2</strong></u>,3]</code>, and the sum of unmarked elements is <code>4 + 3 = 7</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>m == queries.length</code></li>\n\t<li><code>1 &lt;= m &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= index<sub>i</sub>, k<sub>i</sub> &lt;= n - 1</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,2,1,2,3,1]\n[[1,2],[3,3],[4,2]]\n[1,4,2,3]\n[[0,1]]",
        "formTitle": "[3080]Mark Elements on Array by Performing Queries",
        "frequency": 0.0,
        "frontendQuestionId": "3080",
        "hints": [
            "Use another array to keep track of marked indices.",
            "Sort the array <code>nums</code> to be able to find the smallest unmarked elements quickly in each query."
        ],
        "level": 2,
        "metaData": {
            "name": "unmarkedSumArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "queries",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3306",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,2,2,1,2,3,1]\n[[1,2],[3,3],[4,2]]",
        "title": "Mark Elements on Array by Performing Queries",
        "titleSlug": "mark-elements-on-array-by-performing-queries",
        "infer_hints": [
            "Try using a priority queue or a multiset to keep track of the unmarked elements.",
            "How can we keep track of the elements that are marked?",
            "For each query, we can find the k smallest unmarked elements and mark them.",
            "How can you efficiently update the marks of the array?",
            "Try to find out the value and index of the smallest unmarked elements and then mark them.",
            "What if we keep track of the sum of unmarked elements and update it as we mark elements?",
            "Create a boolean array of the same size as the array to mark the elements.",
            "You can use a priority queue to store the unmarked elements and their indices.",
            "Use a priority queue and a set to store the indices of the marked and unmarked elements.",
            "For each query, you can maintain a data structure to track the unmarked elements and their indices.",
            "Keep track of the indices of the smallest unmarked elements in the array.",
            "We need to track which elements are marked.",
            "Create a priority queue of unmarked elements and mark them until we reach the k-th unmarked element.",
            "Can you use a heap to solve this problem?",
            "How to keep track of the smallest unmarked elements?",
            "Try to use a heap or priority queue to solve the problem in a more efficient way.",
            "Keep a counter of the unmarked elements.",
            "Use a priority queue to track the smallest unmarked elements in the array.",
            "You can use a priority queue to keep track of the unmarked elements and their indices.",
            "You can use a heap to keep track of the unmarked elements and their indices."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumValueSum(vector<int>& nums, int k, vector<vector<int>>& edges) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumValueSum(int[] nums, int k, int[][] edges) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumValueSum(self, nums, k, edges):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumValueSum(self, nums: List[int], k: int, edges: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumValueSum(int* nums, int numsSize, int k, int** edges, int edgesSize, int* edgesColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumValueSum(int[] nums, int k, int[][] edges) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number[][]} edges\n * @return {number}\n */\nvar maximumValueSum = function(nums, k, edges) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumValueSum(nums: number[], k: number, edges: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function maximumValueSum($nums, $k, $edges) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumValueSum(_ nums: [Int], _ k: Int, _ edges: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumValueSum(nums: IntArray, k: Int, edges: Array<IntArray>): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumValueSum(List<int> nums, int k, List<List<int>> edges) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumValueSum(nums []int, k int, edges [][]int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer[][]} edges\n# @return {Integer}\ndef maximum_value_sum(nums, k, edges)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumValueSum(nums: Array[Int], k: Int, edges: Array[Array[Int]]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_value_sum(nums: Vec<i32>, k: i32, edges: Vec<Vec<i32>>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-value-sum nums k edges)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_value_sum(Nums :: [integer()], K :: integer(), Edges :: [[integer()]]) -> integer().\nmaximum_value_sum(Nums, K, Edges) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_value_sum(nums :: [integer], k :: integer, edges :: [[integer]]) :: integer\n  def maximum_value_sum(nums, k, edges) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There exists an <strong>undirected</strong> tree with <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. You are given a <strong>0-indexed</strong> 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the tree. You are also given a <strong>positive</strong> integer <code>k</code>, and a <strong>0-indexed</strong> array of <strong>non-negative</strong> integers <code>nums</code> of length <code>n</code>, where <code>nums[i]</code> represents the <strong>value</strong> of the node numbered <code>i</code>.</p>\n\n<p>Alice wants the sum of values of tree nodes to be <strong>maximum</strong>, for which Alice can perform the following operation <strong>any</strong> number of times (<strong>including zero</strong>) on the tree:</p>\n\n<ul>\n\t<li>Choose any edge <code>[u, v]</code> connecting the nodes <code>u</code> and <code>v</code>, and update their values as follows:\n\n\t<ul>\n\t\t<li><code>nums[u] = nums[u] XOR k</code></li>\n\t\t<li><code>nums[v] = nums[v] XOR k</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> possible <strong>sum</strong> of the <strong>values</strong> Alice can achieve by performing the operation <strong>any</strong> number of times</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012513.png\" style=\"width: 300px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Alice can achieve the maximum sum of 6 using a single operation:\n- Choose the edge [0,2]. nums[0] and nums[2] become: 1 XOR 3 = 2, and the array nums becomes: [1,2,1] -&gt; [2,2,2].\nThe total sum of values is 2 + 2 + 2 = 6.\nIt can be shown that 6 is the maximum achievable sum of values.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/09/screenshot-2024-01-09-220017.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 300px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> nums = [2,3], k = 7, edges = [[0,1]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Alice can achieve the maximum sum of 9 using a single operation:\n- Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 = 5 and nums[1] become: 3 XOR 7 = 4, and the array nums becomes: [2,3] -&gt; [5,4].\nThe total sum of values is 5 + 4 = 9.\nIt can be shown that 9 is the maximum achievable sum of values.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012641.png\" style=\"width: 600px; height: 233px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The maximum achievable sum is 42 which can be achieved by Alice performing no operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li>The input is generated such that <code>edges</code> represent&nbsp;a valid tree.</li>\n</ul>\n",
        "exampleTestcases": "[1,2,1]\n3\n[[0,1],[0,2]]\n[2,3]\n7\n[[0,1]]\n[7,7,7,7,7,7]\n3\n[[0,1],[0,2],[0,3],[0,4],[0,5]]",
        "formTitle": "[3068]Find the Maximum Sum of Node Values",
        "frequency": 0.0,
        "frontendQuestionId": "3068",
        "hints": [
            "Select any node as the root.",
            "Let <code>dp[x][c]</code> be the maximum sum we can get for the subtree rooted at node <code>x</code>, where <code>c</code> is a boolean representing whether the edge between node <code>x</code> and its parent (if any) is selected or not.",
            "<code>dp[x][c] = max(sum(dp[y][cy]) + v(nums[x], sum(cy) + c))</code>\r\nwhere <code>cy</code> is <code>0</code> or <code>1</code>. \r\nWhen <code>sum(cy) + c</code> is odd, <code>v(nums[x], sum(cy) + c) = nums[x] XOR k</code>. \r\nWhen <code>sum(cy) + c</code> is even, <code>v(nums[x], sum(cy) + c) = nums[x]</code>.",
            "There鈥檚 also an easier solution - does the parity of the number of elements where <code>nums[i] XOR k > nums[i]</code> help?"
        ],
        "level": 3,
        "metaData": {
            "name": "maximumValueSum",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                },
                {
                    "name": "edges",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3307",
        "similarQuestions": [
            "[{\"title\": \"Maximum Score After Applying Operations on a Tree\", \"titleSlug\": \"maximum-score-after-applying-operations-on-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5728\\u6811\\u4e0a\\u6267\\u884c\\u64cd\\u4f5c\\u4ee5\\u540e\\u5f97\\u5230\\u7684\\u6700\\u5927\\u5206\\u6570\", \"isPaidOnly\": false}, {\"title\": \"Find Number of Coins to Place in Tree Nodes\", \"titleSlug\": \"find-number-of-coins-to-place-in-tree-nodes\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6811\\u4e2d\\u6bcf\\u4e2a\\u8282\\u70b9\\u653e\\u7f6e\\u7684\\u91d1\\u5e01\\u6570\\u76ee\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,2,1]\n3\n[[0,1],[0,2]]",
        "title": "Find the Maximum Sum of Node Values",
        "titleSlug": "find-the-maximum-sum-of-node-values",
        "infer_hints": [
            "What is the maximum sum of the values of the nodes of the tree?",
            "What if you do not want to use the bitwise XOR operation?",
            "We can find the XOR of the nodes in the subtree of the node u with the value of the node u.",
            "The total sum of values of the tree is the sum of all the nodes.  We can use dynamic programming.",
            "How to use a bitwise operation to XOR with k?",
            "Consider the maximum sum that can be achieved by XOR-ing k to the nodes in the subtree of a node.",
            "The maximum sum of node values is the sum of all node values.  We can use a dynamic programming to keep track of the maximum sum that can be achieved by taking the nodes on the path to the root.",
            "Can we consider the operation as a graph operation?",
            "Consider all the nodes in the tree.  How can we find the maximum sum of values for a subtree rooted at a node?",
            "Use dynamic programming.",
            "We can compute the XOR of each node with the parent and then use dynamic programming.",
            "We can find the XOR of the subtree rooted at the current node with the XOR of the parent node, and add it to the sum.",
            "Use DFS to get the values of the nodes.",
            "For each node, we can XOR its value with k and XOR it with the other values.",
            "Think of each node as a separate tree.",
            "Consider a subtree.",
            "You can solve this problem using DFS.",
            "What if we have the maximum sum for each subtree rooted at each node?",
            "Can we consider a subtree instead of a node?",
            "Find the maximum sum of the values of all subtrees."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string lastNonEmptyString(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String lastNonEmptyString(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def lastNonEmptyString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def lastNonEmptyString(self, s: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* lastNonEmptyString(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string LastNonEmptyString(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar lastNonEmptyString = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function lastNonEmptyString(s: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function lastNonEmptyString($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func lastNonEmptyString(_ s: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun lastNonEmptyString(s: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String lastNonEmptyString(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func lastNonEmptyString(s string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {String}\ndef last_non_empty_string(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def lastNonEmptyString(s: String): String = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn last_non_empty_string(s: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (last-non-empty-string s)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec last_non_empty_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlast_non_empty_string(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec last_non_empty_string(s :: String.t) :: String.t\n  def last_non_empty_string(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>.</p>\n\n<p>Consider performing the following operation until <code>s</code> becomes <strong>empty</strong>:</p>\n\n<ul>\n\t<li>For <strong>every</strong> alphabet character from <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>, remove the <strong>first</strong> occurrence of that character in <code>s</code> (if it exists).</li>\n</ul>\n\n<p>For example, let initially <code>s = &quot;aabcbbca&quot;</code>. We do the following operations:</p>\n\n<ul>\n\t<li>Remove the underlined characters <code>s = &quot;<u><strong>a</strong></u>a<strong><u>bc</u></strong>bbca&quot;</code>. The resulting string is <code>s = &quot;abbca&quot;</code>.</li>\n\t<li>Remove the underlined characters <code>s = &quot;<u><strong>ab</strong></u>b<u><strong>c</strong></u>a&quot;</code>. The resulting string is <code>s = &quot;ba&quot;</code>.</li>\n\t<li>Remove the underlined characters <code>s = &quot;<u><strong>ba</strong></u>&quot;</code>. The resulting string is <code>s = &quot;&quot;</code>.</li>\n</ul>\n\n<p>Return <em>the value of the string </em><code>s</code><em> right <strong>before</strong> applying the <strong>last</strong> operation</em>. In the example above, answer is <code>&quot;ba&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabcbbca&quot;\n<strong>Output:</strong> &quot;ba&quot;\n<strong>Explanation:</strong> Explained in the statement.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;\n<strong>Output:</strong> &quot;abcd&quot;\n<strong>Explanation:</strong> We do the following operation:\n- Remove the underlined characters s = &quot;<u><strong>abcd</strong></u>&quot;. The resulting string is s = &quot;&quot;.\nThe string just before the last operation is &quot;abcd&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aabcbbca\"\n\"abcd\"",
        "formTitle": "[3039]Apply Operations to Make String Empty",
        "frequency": 0.0,
        "frontendQuestionId": "3039",
        "hints": [
            "Before the last operation, only the most frequent characters in the original string will remain.",
            "Keep only the last occurence of each of the most frequent characters."
        ],
        "level": 2,
        "metaData": {
            "name": "lastNonEmptyString",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3308",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "\"aabcbbca\"",
        "title": "Apply Operations to Make String Empty",
        "titleSlug": "apply-operations-to-make-string-empty",
        "infer_hints": [
            "Can we do a simulation?",
            "How to handle multiple operations at the same time?",
            "If you have the string \"abc\", and you want to remove 'a', you can shift all the characters to the left by one position. \r\n\r\nCan you do it in O(n) time complexity?",
            "Use the operation in reverse order.",
            "Use the concept of stack to store the characters in the string.",
            "How many times does the character 'a' appear in the string?",
            "If the string is empty, return the string.",
            "What does the operation do to a string?",
            "Use a greedy approach.  For each character, remove it if it's present.",
            "You can perform the operation for each alphabet character.",
            "Try using a stack to solve this problem.",
            "Use a stack to process the characters in order.",
            "Do a prefix sum for each character in the string.",
            "For each operation, we only remove the first occurrence of each character. Can we maintain the order of characters in a data structure?",
            "We can use a stack to track the order of characters.",
            "Use stack to store characters and their counts.",
            "For each letter, how many times does it appear in the string?",
            "Try to remove all occurrences of 'a' first, then 'b', and so on.",
            "What if we have to keep the order of the remaining characters?",
            "We need to remove all characters from the string, one by one."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countPrefixSuffixPairs(vector<string>& words) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countPrefixSuffixPairs(String[] words) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countPrefixSuffixPairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countPrefixSuffixPairs(char** words, int wordsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountPrefixSuffixPairs(string[] words) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar countPrefixSuffixPairs = function(words) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countPrefixSuffixPairs(words: string[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function countPrefixSuffixPairs($words) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countPrefixSuffixPairs(_ words: [String]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countPrefixSuffixPairs(words: Array<String>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countPrefixSuffixPairs(List<String> words) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countPrefixSuffixPairs(words []string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} words\n# @return {Integer}\ndef count_prefix_suffix_pairs(words)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countPrefixSuffixPairs(words: Array[String]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_prefix_suffix_pairs(words: Vec<String>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-prefix-suffix-pairs words)\n  (-> (listof string?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_prefix_suffix_pairs(Words :: [unicode:unicode_binary()]) -> integer().\ncount_prefix_suffix_pairs(Words) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_prefix_suffix_pairs(words :: [String.t]) :: integer\n  def count_prefix_suffix_pairs(words) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code>.</p>\n\n<p>Let&#39;s define a <strong>boolean</strong> function <code>isPrefixAndSuffix</code> that takes two strings, <code>str1</code> and <code>str2</code>:</p>\n\n<ul>\n\t<li><code>isPrefixAndSuffix(str1, str2)</code> returns <code>true</code> if <code>str1</code> is <strong>both</strong> a <span data-keyword=\"string-prefix\">prefix</span> and a <span data-keyword=\"string-suffix\">suffix</span> of <code>str2</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>For example, <code>isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;)</code> is <code>true</code> because <code>&quot;aba&quot;</code> is a prefix of <code>&quot;ababa&quot;</code> and also a suffix, but <code>isPrefixAndSuffix(&quot;abc&quot;, &quot;abcd&quot;)</code> is <code>false</code>.</p>\n\n<p>Return <em>an integer denoting the <strong>number</strong> of index pairs </em><code>(i, j)</code><em> such that </em><code>i &lt; j</code><em>, and </em><code>isPrefixAndSuffix(words[i], words[j])</code><em> is </em><code>true</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;aba&quot;,&quot;ababa&quot;,&quot;aa&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;a&quot;, &quot;aba&quot;) is true.\ni = 0 and j = 2 because isPrefixAndSuffix(&quot;a&quot;, &quot;ababa&quot;) is true.\ni = 0 and j = 3 because isPrefixAndSuffix(&quot;a&quot;, &quot;aa&quot;) is true.\ni = 1 and j = 2 because isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;) is true.\nTherefore, the answer is 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;pa&quot;,&quot;papa&quot;,&quot;ma&quot;,&quot;mama&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;pa&quot;, &quot;papa&quot;) is true.\ni = 2 and j = 3 because isPrefixAndSuffix(&quot;ma&quot;, &quot;mama&quot;) is true.\nTherefore, the answer is 2.  </pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abab&quot;,&quot;ab&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(&quot;abab&quot;, &quot;ab&quot;) is false.\nTherefore, the answer is 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "[\"a\",\"aba\",\"ababa\",\"aa\"]\n[\"pa\",\"papa\",\"ma\",\"mama\"]\n[\"abab\",\"ab\"]",
        "formTitle": "[3042]Count Prefix and Suffix Pairs I",
        "frequency": 0.0,
        "frontendQuestionId": "3042",
        "hints": [
            "Iterate through all index pairs <code>(i, j)</code>, such that <code>i < j</code>, and check <code>isPrefixAndSuffix(words[i], words[j])</code>.",
            "The answer is the total number of pairs where <code>isPrefixAndSuffix(words[i], words[j]) == true</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "countPrefixSuffixPairs",
            "params": [
                {
                    "name": "words",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3309",
        "similarQuestions": [
            "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5b9e\\u73b0 Trie (\\u524d\\u7f00\\u6811)\", \"isPaidOnly\": false}, {\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6dfb\\u52a0\\u4e0e\\u641c\\u7d22\\u5355\\u8bcd - \\u6570\\u636e\\u7ed3\\u6784\\u8bbe\\u8ba1\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[\"a\",\"aba\",\"ababa\",\"aa\"]",
        "title": "Count Prefix and Suffix Pairs I",
        "titleSlug": "count-prefix-and-suffix-pairs-i",
        "infer_hints": [
            "The main challenge here is to efficiently check whether a string is a prefix or a suffix.",
            "Use a trie to store all the prefixes and suffixes of the words.",
            "Use a map to count the occurrences of each word in words.",
            "Can we use a data structure to help us with the calculation?",
            "What is the maximum length of a word?",
            "How many pairs (i, j) are there such that words[i] is a prefix of words[j]?",
            "Think about the relationship between prefixes and suffixes.",
            "For each word, try all possible prefixes and suffixes and see if they are in the array.",
            "Consider all pairs of words.",
            "For each word, try all possible prefixes and suffixes.",
            "For each string, find all the possible prefixes and suffixes.",
            "How many pairs of strings (i, j) are there where i < j and words[i] is a prefix of words[j]?",
            "For each word, check if it can be a prefix and/or suffix of any other word.",
            "Use a Trie to store the words.",
            "For each word, we need to count the number of words it is a prefix and suffix of.",
            "For each word, we can check if it is a prefix or a suffix of another word.",
            "For each word, check all possible prefixes and suffixes.",
            "We can store all the words in a hash map and then for each word, we will check for each of its prefixes and suffixes whether they are present in the map or not.",
            "What if we reverse all words?",
            "You can use a set to store the words and then check for every pair if one is a prefix and the other is a suffix."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<long long> countOfPairs(int n, int x, int y) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long[] countOfPairs(int n, int x, int y) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countOfPairs(self, n, x, y):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :type y: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countOfPairs(self, n: int, x: int, y: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* countOfPairs(int n, int x, int y, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long[] CountOfPairs(int n, int x, int y) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @return {number[]}\n */\nvar countOfPairs = function(n, x, y) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countOfPairs(n: number, x: number, y: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer[]\n     */\n    function countOfPairs($n, $x, $y) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countOfPairs(_ n: Int, _ x: Int, _ y: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countOfPairs(n: Int, x: Int, y: Int): LongArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> countOfPairs(int n, int x, int y) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countOfPairs(n int, x int, y int) []int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer[]}\ndef count_of_pairs(n, x, y)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countOfPairs(n: Int, x: Int, y: Int): Array[Long] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_of_pairs(n: i32, x: i32, y: i32) -> Vec<i64> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-of-pairs n x y)\n  (-> exact-integer? exact-integer? exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_of_pairs(N :: integer(), X :: integer(), Y :: integer()) -> [integer()].\ncount_of_pairs(N, X, Y) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_of_pairs(n :: integer, x :: integer, y :: integer) :: [integer]\n  def count_of_pairs(n, x, y) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given three <strong>positive</strong> integers <code>n</code>, <code>x</code>, and <code>y</code>.</p>\n\n<p>In a city, there exist houses numbered <code>1</code> to <code>n</code> connected by <code>n</code> streets. There is a street connecting the house numbered <code>i</code> with the house numbered <code>i + 1</code> for all <code>1 &lt;= i &lt;= n - 1</code> . An additional street connects the house numbered <code>x</code> with the house numbered <code>y</code>.</p>\n\n<p>For each <code>k</code>, such that <code>1 &lt;= k &lt;= n</code>, you need to find the number of <strong>pairs of houses</strong> <code>(house<sub>1</sub>, house<sub>2</sub>)</code> such that the <strong>minimum</strong> number of streets that need to be traveled to reach <code>house<sub>2</sub></code> from <code>house<sub>1</sub></code> is <code>k</code>.</p>\n\n<p>Return <em>a <strong>1-indexed</strong> array </em><code>result</code><em> of length </em><code>n</code><em> where </em><code>result[k]</code><em> represents the <strong>total</strong> number of pairs of houses such that the <strong>minimum</strong> streets required to reach one house from the other is </em><code>k</code>.</p>\n\n<p><strong>Note</strong> that <code>x</code> and <code>y</code> can be <strong>equal</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example2.png\" style=\"width: 474px; height: 197px;\" />\n<pre>\n<strong>Input:</strong> n = 3, x = 1, y = 3\n<strong>Output:</strong> [6,0,0]\n<strong>Explanation:</strong> Let&#39;s look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example3.png\" style=\"width: 668px; height: 174px;\" />\n<pre>\n<strong>Input:</strong> n = 5, x = 2, y = 4\n<strong>Output:</strong> [10,8,2,0,0]\n<strong>Explanation:</strong> For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k == 3, the pairs are (1, 5), and (5, 1).\n- For k == 4 and k == 5, there are no pairs.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example5.png\" style=\"width: 544px; height: 130px;\" />\n<pre>\n<strong>Input:</strong> n = 4, x = 1, y = 1\n<strong>Output:</strong> [6,4,2,0]\n<strong>Explanation:</strong> For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k == 3, the pairs are (1, 4), and (4, 1).\n- For k == 4, there are no pairs.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= x, y &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "3\n1\n3\n5\n2\n4\n4\n1\n1",
        "formTitle": "[3017]Count the Number of Houses at a Certain Distance II",
        "frequency": 0.0,
        "frontendQuestionId": "3017",
        "hints": [
            "If there were no additional street connecting house <code>x</code> to house <code>y</code>, there would be <code>2 * (n - i)</code> pairs of houses at distance <code>i</code>.",
            "The shortest distance between house <code>i</code> and house <code>j</code> (<code>j < i</code>) is along one of these paths:\r\n- <code>i -> j</code>\r\n- <code>i -> y---x -> j</code>",
            "Try to change the distances calculated by path <code>i ->j</code> to the other path.",
            "Can we use prefix sums to compute the answer?"
        ],
        "level": 3,
        "metaData": {
            "name": "countOfPairs",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "x",
                    "type": "integer"
                },
                {
                    "name": "y",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3310",
        "similarQuestions": [
            "[{\"title\": \"Walls and Gates\", \"titleSlug\": \"walls-and-gates\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5899\\u4e0e\\u95e8\", \"isPaidOnly\": true}]"
        ],
        "statusSign": "?",
        "testCase": "3\n1\n3",
        "title": "Count the Number of Houses at a Certain Distance II",
        "titleSlug": "count-the-number-of-houses-at-a-certain-distance-ii",
        "infer_hints": [
            "We can use Dijkstra's algorithm to calculate the shortest distance between each pair of houses.",
            "How can you compute the number of houses that can be reached from the house i in a minimum number of steps?",
            "For each house, calculate the distance to the closest houses with one or two streets.",
            "Try to find the number of pairs (house1, house2) such that the distance between them is equal to k.",
            "What is the maximum distance between two houses?",
            "How many pairs of houses are there?  Can you generalize this to all houses?",
            "Try to find the number of houses that are at distance i from the x and y houses.",
            "Use dynamic programming.",
            "For each pair of houses, you can choose whether to go directly or go through the extra street.",
            "How many pairs (i, j) are there such that i < j and the minimum distance between them is exactly k?",
            "If the distance between two houses is d, then the minimum number of steps that can be taken to reach from house 1 to house 2 is max(d - 1, 0).",
            "Consider all the houses at distance k.",
            "Use dynamic programming to solve this problem.",
            "Try to count the number of houses at each distance from each house.",
            "Try to solve the problem for k = 1.",
            "Calculate the distance between each pair of houses.",
            "Use the Breadth-First Search (BFS) to find the minimum distance between each pair of houses.",
            "The number of pairs of houses (house1, house2) such that the minimum distance between them is k is equal to the number of pairs of houses (house1, house2) such that the distance between them is exactly k.",
            "For each pair of houses, compute the distance between them.",
            "If you're at house <code>i</code> and you want to reach house <code>j</code>, the minimum number of steps is either <code>abs(i - j)</code> or <code>n - abs(i - j)</code>."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int returnToBoundaryCount(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int returnToBoundaryCount(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def returnToBoundaryCount(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def returnToBoundaryCount(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int returnToBoundaryCount(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int ReturnToBoundaryCount(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar returnToBoundaryCount = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function returnToBoundaryCount(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function returnToBoundaryCount($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func returnToBoundaryCount(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun returnToBoundaryCount(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int returnToBoundaryCount(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func returnToBoundaryCount(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef return_to_boundary_count(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def returnToBoundaryCount(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn return_to_boundary_count(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (return-to-boundary-count nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec return_to_boundary_count(Nums :: [integer()]) -> integer().\nreturn_to_boundary_count(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec return_to_boundary_count(nums :: [integer]) :: integer\n  def return_to_boundary_count(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>An ant is on a boundary. It sometimes goes <strong>left</strong> and sometimes <strong>right</strong>.</p>\n\n<p>You are given an array of <strong>non-zero</strong> integers <code>nums</code>. The ant starts reading <code>nums</code> from the first element of it to its end. At each step, it moves according to the value of the current element:</p>\n\n<ul>\n\t<li>If <code>nums[i] &lt; 0</code>, it moves <strong>left</strong> by<!-- notionvc: 55fee232-4fc9-445f-952a-f1b979415864 --> <code>-nums[i]</code> units.</li>\n\t<li>If <code>nums[i] &gt; 0</code>, it moves <strong>right</strong> by <code>nums[i]</code> units.</li>\n</ul>\n\n<p>Return <em>the number of times the ant <strong>returns</strong> to the boundary.</em></p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>There is an infinite space on both sides of the boundary.</li>\n\t<li>We check whether the ant is on the boundary only after it has moved <code>|nums[i]|</code> units. In other words, if the ant crosses the boundary during its movement, it does not count.<!-- notionvc: 5ff95338-8634-4d02-a085-1e83c0be6fcd --></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,-5]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> After the first step, the ant is 2 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the second step, the ant is 5 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the third step, the ant is on the boundary.\nSo the answer is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,-3,-4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> After the first step, the ant is 3 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the second step, the ant is 5 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the third step, the ant is 2 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the fourth step, the ant is 2 steps to the left of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nThe ant never returned to the boundary, so the answer is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li><code>nums[i] != 0</code></li>\n</ul>\n",
        "exampleTestcases": "[2,3,-5]\n[3,2,-3,-4]",
        "formTitle": "[3028]Ant on the Boundary",
        "frequency": 0.0,
        "frontendQuestionId": "3028",
        "hints": [
            "Define a variable and add <code>nums[i]</code> to it in each step."
        ],
        "level": 1,
        "metaData": {
            "name": "returnToBoundaryCount",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3311",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[2,3,-5]",
        "title": "Ant on the Boundary",
        "titleSlug": "ant-on-the-boundary",
        "infer_hints": [
            "If the ant is moving left, it will eventually meet a boundary. If the ant is moving right, it will eventually meet a boundary.",
            "Consider the sign of each number. If it's positive, the ant moves right, otherwise it moves left.",
            "You can maintain the sign of the sum of the elements. If the sum is positive, the ant will move right. If the sum is negative, the ant will move left.",
            "Keep track of the direction the ant is going.",
            "If the sum of the absolute values of all the numbers in nums is equal to the total number of steps that the ant takes, then the ant returns to the boundary.",
            "We can simulate the ant's movement and count how many times it crosses the boundary.",
            "The ant will return to the boundary if it has moved exactly `K` steps to the right and `-K` steps to the left, where `K` is the number of steps it has taken.",
            "The ant will return to the boundary if and only if it has been at the boundary before.",
            "For each step, keep track of the direction the ant is moving in.",
            "The ant always moves by the absolute value of the current number.",
            "Count the number of changes in direction.",
            "How can we count the number of times the ant crosses the boundary?",
            "The ant returns to the boundary if and only if the sign of nums[i] differs from the sign of nums[i - 1].",
            "Can you solve this problem in O(n) time complexity?",
            "What if we track the net direction the ant is moving in?",
            "Can you keep track of the number of times the ant returns to the boundary?",
            "How many steps does the ant take to reach the boundary?",
            "Can we calculate the number of steps taken by the ant and then find the number of times the ant moves back to the boundary?",
            "How many times does the ant cross the boundary?",
            "For each step, keep track of the direction in which the ant is moving."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countKeyChanges(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countKeyChanges(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countKeyChanges(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countKeyChanges(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countKeyChanges(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountKeyChanges(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countKeyChanges = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countKeyChanges(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countKeyChanges($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countKeyChanges(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countKeyChanges(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countKeyChanges(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countKeyChanges(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef count_key_changes(s)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countKeyChanges(s: String): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_key_changes(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-key-changes s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_key_changes(S :: unicode:unicode_binary()) -> integer().\ncount_key_changes(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_key_changes(s :: String.t) :: integer\n  def count_key_changes(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed </strong>string <code>s</code> typed by a user. Changing a key is defined as using a key different from the last used key. For example, <code>s = &quot;ab&quot;</code> has a change of a key while <code>s = &quot;bBBb&quot;</code> does not have any.</p>\n\n<p>Return <em>the number of times the user had to change the key. </em></p>\n\n<p><strong>Note: </strong>Modifiers like <code>shift</code> or <code>caps lock</code> won&#39;t be counted in changing the key that is if a user typed the letter <code>&#39;a&#39;</code> and then the letter <code>&#39;A&#39;</code> then it will not be considered as a changing of key.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aAbBcC&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nFrom s[0] = &#39;a&#39; to s[1] = &#39;A&#39;, there is no change of key as caps lock or shift is not counted.\nFrom s[1] = &#39;A&#39; to s[2] = &#39;b&#39;, there is a change of key.\nFrom s[2] = &#39;b&#39; to s[3] = &#39;B&#39;, there is no change of key as caps lock or shift is not counted.\nFrom s[3] = &#39;B&#39; to s[4] = &#39;c&#39;, there is a change of key.\nFrom s[4] = &#39;c&#39; to s[5] = &#39;C&#39;, there is no change of key as caps lock or shift is not counted.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;AaAaAaaA&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no change of key since only the letters &#39;a&#39; and &#39;A&#39; are<!-- notionvc: 8849fe75-f31e-41dc-a2e0-b7d33d8427d2 --> pressed which does not require change of key.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of only upper case and lower case English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aAbBcC\"\n\"AaAaAaaA\"",
        "formTitle": "[3019]Number of Changing Keys",
        "frequency": 0.0,
        "frontendQuestionId": "3019",
        "hints": [
            "Change all the characters to lowercase and then return the number of indices where the character does not match with the last index character."
        ],
        "level": 1,
        "metaData": {
            "name": "countKeyChanges",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3312",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"aAbBcC\"",
        "title": "Number of Changing Keys",
        "titleSlug": "number-of-changing-keys",
        "infer_hints": [
            "Count the number of times the lowercase and uppercase versions of a letter appear in the string.",
            "Keep track of the keys used.",
            "Keep track of the last character you have seen and whether it was upper case or lower case.",
            "How many changes are needed to convert the string into a palindrome?",
            "The change of key will be at every two characters.",
            "We need to count the number of different lower case and upper case English letters.",
            "How can you check if the character is in lower case or upper case?",
            "You need to track the last character used and the next character.",
            "You can maintain two states, 1 for lower case and 1 for upper case.",
            "The idea is to find out the difference between the upper case and lower case English letters.",
            "Keep track of the previous character and the current state of the shift.",
            "Compare the previous character with the current character.",
            "For each letter, we can check whether it is lower case or upper case.",
            "Consider a string where all the letters are either lower case or upper case.",
            "For each letter, check if it is upper case or lower case.",
            "You need to keep track of two things: 1) the current case (upper or lower) and 2) the last character.",
            "You need to track the last two characters of the string.",
            "Check if the next character is the same case as the previous one.",
            "We can use a stack to keep track of the current keys.",
            "Use a stack to store the characters that are currently being typed."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumStrength(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumStrength(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumStrength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumStrength(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumStrength(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumStrength(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumStrength = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumStrength(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumStrength($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumStrength(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumStrength(nums: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumStrength(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumStrength(nums []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_strength(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumStrength(nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_strength(nums: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-strength nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_strength(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_strength(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_strength(nums :: [integer], k :: integer) :: integer\n  def maximum_strength(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>, and a <strong>positive</strong> <strong>odd</strong> integer <code>k</code>.</p>\n\n<p>The strength of <code>x</code> subarrays is defined as <code>strength = sum[1] * x - sum[2] * (x - 1) + sum[3] * (x - 2) - sum[4] * (x - 3) + ... + sum[x] * 1</code> where <code>sum[i]</code> is the sum of the elements in the <code>i<sup>th</sup></code> subarray. Formally, strength is sum of <code>(-1)<sup>i+1</sup> * sum[i] * (x - i + 1)</code> over all <code>i</code>&#39;s such that <code>1 &lt;= i &lt;= x</code>.</p>\n\n<p>You need to select <code>k</code> <strong>disjoint <span data-keyword=\"subarray-nonempty\">subarrays</span></strong> from <code>nums</code>, such that their <strong>strength</strong> is <strong>maximum</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible <strong>strength</strong> that can be obtained</em>.</p>\n\n<p><strong>Note</strong> that the selected subarrays <strong>don&#39;t</strong> need to cover the entire array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,-1,2], k = 3\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> The best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is (1 + 2 + 3) * 3 - (-1) * 2 + 2 * 1 = 22.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [12,-2,-2,-2,-2], k = 5\n<strong>Output:</strong> 64\n<strong>Explanation:</strong> The only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is 12 * 5 - (-2) * 4 + (-2) * 3 - (-2) * 2 + (-2) * 1 = 64.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3], k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The best possible way to select 1 subarray is: nums[0..0]. The strength is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n\t<li><code>1 &lt;= n * k &lt;= 10<sup>6</sup></code></li>\n\t<li><code>k</code> is odd.</li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,-1,2]\n3\n[12,-2,-2,-2,-2]\n5\n[-1,-2,-3]\n1",
        "formTitle": "[3077]Maximum Strength of K Disjoint Subarrays",
        "frequency": 0.0,
        "frontendQuestionId": "3077",
        "hints": [
            "Let <code>dp[i][j][x == 0/1]</code> be the maximum strength to select <code>j</code> disjoint subarrays from the original array鈥檚 suffix (<code>nums[i..(n - 1)]</code>), x denotes whether we select the element or not.",
            "Initially <code>dp[n][0][0] == 0</code>.",
            "We have \r\n<code>dp[i][j][1] = nums[i] * get(j) + max(dp[i + 1][j - 1][0], dp[i + 1][j][1])</code> where <code>get(j) = j</code> if <code>j</code> is odd, otherwise <code>-j</code>.",
            "We can select <code>nums[i]</code> as a separate subarray or select at least <code>nums[i]</code> and <code>nums[i + 1]</code> as the first subarray.\r\n<code>dp[i][j][0] = max(dp[i + 1][j][0], dp[i][j][1])</code>.",
            "The answer is <code>dp[0][k][0]</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "maximumStrength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3313",
        "similarQuestions": [
            "[{\"title\": \"Partition Array into Disjoint Intervals\", \"titleSlug\": \"partition-array-into-disjoint-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5206\\u5272\\u6570\\u7ec4\", \"isPaidOnly\": false}, {\"title\": \"Maximum Strength of a Group\", \"titleSlug\": \"maximum-strength-of-a-group\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u4e00\\u4e2a\\u5c0f\\u7ec4\\u7684\\u6700\\u5927\\u5b9e\\u529b\\u503c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,2,3,-1,2]\n3",
        "title": "Maximum Strength of K Disjoint Subarrays",
        "titleSlug": "maximum-strength-of-k-disjoint-subarrays",
        "infer_hints": [
            "The problem can be solved by using a dynamic programming (DP) approach.",
            "For each prefix of the array, calculate the maximum sum of a subarray ending at that prefix.",
            "The problem is a modified version of a classic dynamic programming problem.  How can you apply dynamic programming to solve it?",
            "You can use a prefix sum array to calculate the sum of a subarray.",
            "How can we find the maximum strength of a subarray?",
            "Try to think about the dp[i][j] as the maximum strength that can be obtained from nums[i:] with j subarrays.",
            "Think of the array as a sequence of sums of subarrays.",
            "If you want to maximize the strength of a subarray, what should you do?",
            "Think of the array as a sequence of positive and negative numbers.  What happens when you add a positive number and a negative number?",
            "If we have 2 subarrays and we remove the smaller one, we gain strength(A) - strength(B).!",
            "If you're trying to maximize the sum of all subarray strengths, you can use dynamic programming.",
            "Consider each subarray of length 1, 2, 3,..., k.",
            "If we can select all subarrays, what can we say about the selected subarrays?",
            "Calculate prefix sum of the array.",
            "How many subarrays of length 1, 2, 3,..., k are there?",
            "What if we take a prefix sum of the array?",
            "The maximum strength of the subarrays is obtained when the elements in the subarrays are either all positive or all negative.  Or, when the sum of the elements in the subarrays is maximized.",
            "For each possible size of subarray, try to find a subarray with that size that maximizes the sum.",
            "What happens if we have a subarray [x1,x2,x3,...,xn]?",
            "We can use a priority queue to find the maximum subarray in O(n) time."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int mostFrequentPrime(vector<vector<int>>& mat) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int mostFrequentPrime(int[][] mat) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def mostFrequentPrime(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def mostFrequentPrime(self, mat: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int mostFrequentPrime(int** mat, int matSize, int* matColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MostFrequentPrime(int[][] mat) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} mat\n * @return {number}\n */\nvar mostFrequentPrime = function(mat) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function mostFrequentPrime(mat: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function mostFrequentPrime($mat) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func mostFrequentPrime(_ mat: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun mostFrequentPrime(mat: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int mostFrequentPrime(List<List<int>> mat) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func mostFrequentPrime(mat [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} mat\n# @return {Integer}\ndef most_frequent_prime(mat)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def mostFrequentPrime(mat: Array[Array[Int]]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn most_frequent_prime(mat: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (most-frequent-prime mat)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec most_frequent_prime(Mat :: [[integer()]]) -> integer().\nmost_frequent_prime(Mat) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec most_frequent_prime(mat :: [[integer]]) :: integer\n  def most_frequent_prime(mat) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <code>m x n</code> <strong>0-indexed </strong>2D<strong> </strong>matrix <code>mat</code>. From every cell, you can create numbers in the following way:</p>\n\n<ul>\n\t<li>There could be at most <code>8</code> paths from the cells namely: east, south-east, south, south-west, west, north-west, north, and north-east.</li>\n\t<li>Select a path from them and append digits in this path to the number being formed by traveling in this direction.</li>\n\t<li>Note that numbers are generated at every step, for example, if the digits along the path are <code>1, 9, 1</code>, then there will be three numbers generated along the way: <code>1, 19, 191</code>.</li>\n</ul>\n\n<p>Return <em>the most frequent <span data-keyword=\"prime-number\">prime number</span> <strong>greater</strong> than </em><code>10</code><em> out of all the numbers created by traversing the matrix or </em><code>-1</code><em> if no such prime number exists. If there are multiple prime numbers with the highest frequency, then return the <b>largest</b> among them.</em></p>\n\n<p><strong>Note:</strong> It is invalid to change the direction during the move.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/15/south\" style=\"width: 641px; height: 291px;\" /> </strong>\n\n<pre>\n<strong>\nInput:</strong> mat = [[1,1],[9,9],[1,1]]\n<strong>Output:</strong> 19\n<strong>Explanation:</strong> \nFrom cell (0,0) there are 3 possible directions and the numbers greater than 10 which can be created in those directions are:\nEast: [11], South-East: [19], South: [19,191].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [19,191,19,11].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [99,91,91,91,91].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [91,91,99,91,91].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [11,19,191,19].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [11,19,19,191].\nThe most frequent prime number among all the created numbers is 19.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[7]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The only number which can be formed is 7. It is a prime number however it is not greater than 10, so return -1.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[9,7,8],[4,6,5],[2,8,6]]\n<strong>Output:</strong> 97\n<strong>Explanation:</strong> \nNumbers greater than 10 created from the cell (0,0) in all possible directions are: [97,978,96,966,94,942].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [78,75,76,768,74,79].\nNumbers greater than 10 created from the cell (0,2) in all possible directions are: [85,856,86,862,87,879].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [46,465,48,42,49,47].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [65,66,68,62,64,69,67,68].\nNumbers greater than 10 created from the cell (1,2) in all possible directions are: [56,58,56,564,57,58].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [28,286,24,249,26,268].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [86,82,84,86,867,85].\nNumbers greater than 10 created from the cell (2,2) in all possible directions are: [68,682,66,669,65,658].\nThe most frequent prime number among all the created numbers is 97.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 6</code></li>\n\t<li><code>1 &lt;= mat[i][j] &lt;= 9</code></li>\n</ul>\n",
        "exampleTestcases": "[[1,1],[9,9],[1,1]]\n[[7]]\n[[9,7,8],[4,6,5],[2,8,6]]",
        "formTitle": "[3044]Most Frequent Prime",
        "frequency": 0.0,
        "frontendQuestionId": "3044",
        "hints": [
            "Use recursion to find all possible numbers for each cell and then check for prime."
        ],
        "level": 2,
        "metaData": {
            "name": "mostFrequentPrime",
            "params": [
                {
                    "name": "mat",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3314",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[1,1],[9,9],[1,1]]",
        "title": "Most Frequent Prime",
        "titleSlug": "most-frequent-prime",
        "infer_hints": [
            "You can use a 2D prefix sum to solve this problem.",
            "Use dynamic programming to store the results of each cell.",
            "Consider each cell as a starting point and use depth-first search to generate all the numbers.",
            "Since the numbers generated are at most 4 digits, you can precompute all prime numbers up to 10000.",
            "Use dynamic programming.",
            "Use a 2D DP table to store the maximum number that can be formed from the cell (i, j) and the direction of traversal.",
            "Try to create a recursive solution.",
            "We can use a depth-first search (DFS) to generate all the numbers.",
            "If you want to generate all the numbers, you need to store all the numbers.",
            "We can use dynamic programming. We can create a dynamic programming table dp[i][j][k], which is the most frequent prime number of length k starting from cell (i,j).",
            "For every cell (i, j), we need to check all 8 directions and then recursively call the DFS for the cells in that direction.",
            "Generate all the numbers that can be formed by moving from one cell to another in the grid.",
            "Generate all numbers from the given cell in all possible directions.",
            "Try to solve this problem using dynamic programming.",
            "Use a dynamic programming to solve this problem.",
            "You can use a recursive function to travel through all possible paths from each cell.",
            "You can use dynamic programming to solve this problem.",
            "The most common prime number is 11, and you can generate the prime numbers up to 11 by using a depth-first search.",
            "What if we were to store the prime numbers less than or equal to 99999?",
            "Try to simulate the process to get the answer."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int sumOfPowers(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int sumOfPowers(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def sumOfPowers(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def sumOfPowers(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int sumOfPowers(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int SumOfPowers(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumOfPowers = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function sumOfPowers(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumOfPowers($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func sumOfPowers(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun sumOfPowers(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int sumOfPowers(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func sumOfPowers(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_of_powers(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def sumOfPowers(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn sum_of_powers(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (sum-of-powers nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec sum_of_powers(Nums :: [integer()], K :: integer()) -> integer().\nsum_of_powers(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec sum_of_powers(nums :: [integer], k :: integer) :: integer\n  def sum_of_powers(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code>, and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>The <strong>power</strong> of a <span data-keyword=\"subsequence-array\">subsequence</span> is defined as the <strong>minimum</strong> absolute difference between <strong>any</strong> two elements in the subsequence.</p>\n\n<p>Return <em>the <strong>sum</strong> of <strong>powers</strong> of <strong>all</strong> subsequences of </em><code>nums</code><em> which have length</em> <strong><em>equal to</em></strong> <code>k</code>.</p>\n\n<p>Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 4 subsequences in <code>nums</code> which have length 3: <code>[1,2,3]</code>, <code>[1,3,4]</code>, <code>[1,2,4]</code>, and <code>[2,3,4]</code>. The sum of powers is <code>|2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,2], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only subsequence in <code>nums</code> which has length 2 is&nbsp;<code>[2,2]</code>. The sum of powers is <code>|2 - 2| = 0</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,-1], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 3 subsequences in <code>nums</code> which have length 2: <code>[4,3]</code>, <code>[4,-1]</code>, and <code>[3,-1]</code>. The sum of powers is <code>|4 - 3| + |4 - (-1)| + |3 - (-1)| = 10</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 50</code></li>\n\t<li><code>-10<sup>8</sup> &lt;= nums[i] &lt;= 10<sup>8</sup> </code></li>\n\t<li><code>2 &lt;= k &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4]\n3\n[2,2]\n2\n[4,3,-1]\n2",
        "formTitle": "[3098]Find the Sum of Subsequence Powers",
        "frequency": 0.0,
        "frontendQuestionId": "3098",
        "hints": [
            "Sort <code>nums</code>.",
            "There are at most <code>n<sup>2</sup></code> distinct differences.",
            "For a particular difference <code>d</code>, let <code>dp[len][i][j]</code> be the number of subsequences of length <code>len</code> in the subarray <code>nums[0..i]</code> where the last element picked was at index <code>j</code>.",
            "For each index, we can check if it can be picked if <code>nums[i] - nums[j] <= d</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "sumOfPowers",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3316",
        "similarQuestions": [
            "[{\"title\": \"Number of Subsequences That Satisfy the Given Sum Condition\", \"titleSlug\": \"number-of-subsequences-that-satisfy-the-given-sum-condition\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6ee1\\u8db3\\u6761\\u4ef6\\u7684\\u5b50\\u5e8f\\u5217\\u6570\\u76ee\", \"isPaidOnly\": false}, {\"title\": \"Closest Subsequence Sum\", \"titleSlug\": \"closest-subsequence-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u63a5\\u8fd1\\u76ee\\u6807\\u503c\\u7684\\u5b50\\u5e8f\\u5217\\u548c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,2,3,4]\n3",
        "title": "Find the Sum of Subsequence Powers",
        "titleSlug": "find-the-sum-of-subsequence-powers",
        "infer_hints": [
            "Think about the smallest subsequence that you can generate.",
            "The subsequence is only 2 long.",
            "Use dynamic programming to store the results of the smaller problem.",
            "The power of a subsequence is the minimum difference between any two numbers in the subsequence.",
            "Consider a subsequence where the first element is fixed.  How many ways are there to choose the second element?",
            "For each element, consider all subsequences that contain it.",
            "Find the sum of all subsequences of length k.",
            "Can we solve this problem with Dynamic Programming?",
            "If we choose a[i], we can choose a[i+1] or a[i+2], or we can choose nothing.",
            "For each index i, we can select it or not.",
            "Use a dynamic programming approach.  How many subsequences of length 2 are there?",
            "We can use dynamic programming.  Try to calculate the answer for the array [3,4,5,6].  Can you find a recursive formula?",
            "What if we just sorted the array?  Then the answer would be the sum of all differences of all possible subsequences.",
            "Can you find the sum of the differences between all pairs of elements in the array?",
            "Sort the array and then use dynamic programming.",
            "Sort the array in ascending order.",
            "The sum of the powers of all subsequences of a set can be calculated by summing up the differences between all possible pairs of numbers in the set.",
            "Use dynamic programming to store the minimum and maximum values in a range.",
            "What are the minimum and maximum possible values for the difference between two elements in a subsequence?",
            "What if we calculate the number of subsequences with length k that include each element?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxPalindromesAfterOperations(vector<string>& words) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxPalindromesAfterOperations(String[] words) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxPalindromesAfterOperations(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxPalindromesAfterOperations(self, words: List[str]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxPalindromesAfterOperations(char** words, int wordsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxPalindromesAfterOperations(string[] words) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxPalindromesAfterOperations = function(words) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxPalindromesAfterOperations(words: string[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function maxPalindromesAfterOperations($words) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxPalindromesAfterOperations(_ words: [String]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxPalindromesAfterOperations(words: Array<String>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxPalindromesAfterOperations(List<String> words) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxPalindromesAfterOperations(words []string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} words\n# @return {Integer}\ndef max_palindromes_after_operations(words)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxPalindromesAfterOperations(words: Array[String]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_palindromes_after_operations(words: Vec<String>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-palindromes-after-operations words)\n  (-> (listof string?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_palindromes_after_operations(Words :: [unicode:unicode_binary()]) -> integer().\nmax_palindromes_after_operations(Words) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_palindromes_after_operations(words :: [String.t]) :: integer\n  def max_palindromes_after_operations(words) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code> having length <code>n</code> and containing <strong>0-indexed</strong> strings.</p>\n\n<p>You are allowed to perform the following operation <strong>any</strong> number of times (<strong>including</strong> <strong>zero</strong>):</p>\n\n<ul>\n\t<li>Choose integers <code>i</code>, <code>j</code>, <code>x</code>, and <code>y</code> such that <code>0 &lt;= i, j &lt; n</code>, <code>0 &lt;= x &lt; words[i].length</code>, <code>0 &lt;= y &lt; words[j].length</code>, and <strong>swap</strong> the characters <code>words[i][x]</code> and <code>words[j][y]</code>.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>maximum</strong> number of <span data-keyword=\"palindrome-string\">palindromes</span> </em><code>words</code><em> can contain, after performing some operations.</em></p>\n\n<p><strong>Note:</strong> <code>i</code> and <code>j</code> may be equal during an operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abbb&quot;,&quot;ba&quot;,&quot;aa&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> In this example, one way to get the maximum number of palindromes is:\nChoose i = 0, j = 1, x = 0, y = 0, so we swap words[0][0] and words[1][0]. words becomes [&quot;bbbb&quot;,&quot;aa&quot;,&quot;aa&quot;].\nAll strings in words are now palindromes.\nHence, the maximum number of palindromes achievable is 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;ab&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>In this example, one way to get the maximum number of palindromes is: \nChoose i = 0, j = 1, x = 1, y = 0, so we swap words[0][1] and words[1][0]. words becomes [&quot;aac&quot;,&quot;bb&quot;].\nChoose i = 0, j = 0, x = 1, y = 2, so we swap words[0][1] and words[0][2]. words becomes [&quot;aca&quot;,&quot;bb&quot;].\nBoth strings are now palindromes.\nHence, the maximum number of palindromes achievable is 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cd&quot;,&quot;ef&quot;,&quot;a&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In this example, there is no need to perform any operation.\nThere is one palindrome in words &quot;a&quot;.\nIt can be shown that it is not possible to get more than one palindrome after any number of operations.\nHence, the answer is 1.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "[\"abbb\",\"ba\",\"aa\"]\n[\"abc\",\"ab\"]\n[\"cd\",\"ef\",\"a\"]",
        "formTitle": "[3035]Maximum Palindromes After Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3035",
        "hints": [
            "We can redistribute all the letters freely among the words.",
            "Calculate the frequency of each letter and total the number of matching letter pairs that can be formed from the letters, i.e., <code>total = sum(freq[ch] / 2)</code> for all <code>'a' <= ch <= 'z'</code>.",
            "We can greedily try making palindromes from <code>words[i]</code> with the smallest length to <code>words[i]</code> with the longest length.",
            "For the current index, <code>i</code>, we try to make <code>words[i]</code> a palindrome. We need <code>len(words[i]) / 2</code> matching character pairs, and the letter in the middle (if it exists) can be freely chosen afterward.",
            "We can check if we have enough pairs for index <code>i</code>; if we do, we increase the number of palindromes we can make and decrease the number of pairs we have. Otherwise, we end the loop at this index.",
            "The answer is the number of palindromes we were able to make in the end."
        ],
        "level": 2,
        "metaData": {
            "name": "maxPalindromesAfterOperations",
            "params": [
                {
                    "name": "words",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3317",
        "similarQuestions": [
            "[{\"title\": \"Valid Palindrome\", \"titleSlug\": \"valid-palindrome\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u9a8c\\u8bc1\\u56de\\u6587\\u4e32\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[\"abbb\",\"ba\",\"aa\"]",
        "title": "Maximum Palindromes After Operations",
        "titleSlug": "maximum-palindromes-after-operations",
        "infer_hints": [
            "What does the array of palindromes look like after one operation?",
            "Use a frequency count for each character.",
            "We can pre-calculate the number of palindromes for each prefix of the string.",
            "Can we use dynamic programming?",
            "Count the number of characters for each string in words.",
            "Find the number of palindromes for each string and add them up.",
            "The answer is the sum of the counts of all anagrams of each word.",
            "We can use bit manipulation to find the palindrome mask of a string.",
            "What if we swap two characters from the same word?",
            "Find the frequency of each character in the array.",
            "For each word, we can swap any two characters to make it a palindrome.",
            "The number of palindromes in a string s can be at most 2 * the number of palindromic substrings in s.",
            "If the characters at the same positions are the same, we can create a palindrome. \r\nIf they are not the same, we can create a palindrome by swapping them.",
            "For each word, what is the maximum number of palindromes it can contribute to the final answer?",
            "How can you find the number of palindromes for each string?",
            "How can we make a string palindrome?",
            "Use dynamic programming.",
            "Count the number of characters of each word that can be used to form a palindrome.",
            "You can find the maximum number of palindromes you can form by swapping characters in a string.",
            "If two strings have the same characters in the same order, then they are the same string."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxOperations(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxOperations(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxOperations(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxOperations(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxOperations(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxOperations = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxOperations(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxOperations($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxOperations(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxOperations(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxOperations(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxOperations(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_operations(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxOperations(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_operations(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_operations(Nums :: [integer()]) -> integer().\nmax_operations(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_operations(nums :: [integer]) :: integer\n  def max_operations(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given an array of integers called <code>nums</code>, you can perform <strong>any</strong> of the following operation while <code>nums</code> contains <strong>at least</strong> <code>2</code> elements:</p>\n\n<ul>\n\t<li>Choose the first two elements of <code>nums</code> and delete them.</li>\n\t<li>Choose the last two elements of <code>nums</code> and delete them.</li>\n\t<li>Choose the first and the last elements of <code>nums</code> and delete them.</li>\n</ul>\n\n<p>The<strong> score</strong> of the operation is the sum of the deleted elements.</p>\n\n<p>Your task is to find the <strong>maximum</strong> number of operations that can be performed, such that <strong>all operations have the same score</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of operations possible that satisfy the condition mentioned above</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,2,3,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [1,2,3,4].\n- Delete the first and the last elements, with score 1 + 4 = 5, nums = [2,3].\n- Delete the first and the last elements, with score 2 + 3 = 5, nums = [].\nWe are unable to perform any more operations as nums is empty.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,6,1,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4].\n- Delete the last two elements, with score 1 + 4 = 5, nums = [6].\nIt can be proven that we can perform at most 2 operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "exampleTestcases": "[3,2,1,2,3,4]\n[3,2,6,1,4]",
        "formTitle": "[3040]Maximum Number of Operations With the Same Score II",
        "frequency": 0.0,
        "frontendQuestionId": "3040",
        "hints": [
            "After the first operation, the score of other operations is fixed.",
            "For the fixed score use dynamic programming <code>dp[l][r]</code> to find a maximum number of operations on the subarray <code>nums[l..r]</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maxOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3318",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "[3,2,1,2,3,4]",
        "title": "Maximum Number of Operations With the Same Score II",
        "titleSlug": "maximum-number-of-operations-with-the-same-score-ii",
        "infer_hints": [
            "The optimal strategy is to always pick the two elements with the maximum sum.",
            "What if we could choose the smallest two numbers and delete them?",
            "Try to use Dynamic Programming.",
            "Think of this as a game of cards.",
            "You can try all possible operations and then use a DP approach to keep track of the maximum operations for each score.",
            "Try to find a relation between the array and the prefix sums.",
            "Use a greedy approach with a prefix sum.",
            "For every pair of elements, how can you calculate the score?",
            "Let's say we take a prefix and a suffix of the array. The score of the operation would be equal to prefix[i] + suffix[i] - A[i]. Can we somehow use dynamic programming to solve this problem?",
            "What is the score of the first operation?",
            "For every pair of indices (i, j), we can calculate the score of the operations and use the fact that all operations have the same score to compare the scores of the operations.",
            "Can you apply a similar approach to the previous problem?",
            "Try all possible operations.",
            "Consider each operation as choosing the minimum possible pair of elements to delete.",
            "Try to keep track of the score of the operation.",
            "Use dynamic programming.  Now, the state is the current sum of the elements, the maximum number of operations we can perform using the elements from the first i elements of nums, and the maximum number of operations we can perform using the elements from the last i elements of nums.",
            "How can you remove the smallest and largest elements at each step?",
            "Can you solve the problem if we have only two elements to delete?",
            "What if we try to pair the smallest and largest elements?",
            "Consider the prefix and suffix of the array."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxOperations(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxOperations(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxOperations(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxOperations(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxOperations(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxOperations = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxOperations(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxOperations($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxOperations(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxOperations(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxOperations(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxOperations(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_operations(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxOperations(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_operations(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_operations(Nums :: [integer()]) -> integer().\nmax_operations(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_operations(nums :: [integer]) :: integer\n  def max_operations(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given an array of integers called <code>nums</code>, you can perform the following operation while <code>nums</code> contains <strong>at least</strong> <code>2</code> elements:</p>\n\n<ul>\n\t<li>Choose the first two elements of <code>nums</code> and delete them.</li>\n</ul>\n\n<p>The<strong> score</strong> of the operation is the sum of the deleted elements.</p>\n\n<p>Your task is to find the <strong>maximum</strong> number of operations that can be performed, such that <strong>all operations have the same score</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of operations possible that satisfy the condition mentioned above</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,4,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [1,4,5].\n- Delete the first two elements, with score 1 + 4 = 5, nums = [5].\nWe are unable to perform any more operations as nums contain only 1 element.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,6,1,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4].\nWe are unable to perform any more operations as the score of the next operation isn&#39;t the same as the previous one.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "exampleTestcases": "[3,2,1,4,5]\n[3,2,6,1,4]",
        "formTitle": "[3038]Maximum Number of Operations With the Same Score I",
        "frequency": 0.0,
        "frontendQuestionId": "3038",
        "hints": [],
        "level": 1,
        "metaData": {
            "name": "maxOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3320",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "[3,2,1,4,5]",
        "title": "Maximum Number of Operations With the Same Score I",
        "titleSlug": "maximum-number-of-operations-with-the-same-score-i",
        "infer_hints": [
            "We can use a greedy approach.  Do you know what a priority queue is?",
            "Keep track of the score and the count of the current pair of numbers.",
            "Sort the array in non-decreasing order.",
            "Sort the array in decreasing order.",
            "Find the smallest two elements in the array and add them.",
            "Use the priority_queue to get the maximum sum.",
            "Keep track of the current score of the first two elements.",
            "Try to keep track of the smallest and the largest element in the array.",
            "Sort the array and then perform the operations.",
            "Try to count the frequency of the elements in the array.",
            "Can you sort the array and keep popping the two smallest elements until the array is empty?",
            "Sort the array and then use two pointers to check the sum of the two elements.",
            "If we can find the smallest and largest elements of the array, we can calculate the score of the operation and check if it's possible to make another operation.",
            "Use a greedy approach.",
            "Keep a count of each score.",
            "Use a greedy approach and a priority queue.",
            "Can you use the number of elements left in the array as a base?",
            "Use a stack.",
            "If the first two elements have the same value, how can we decide which to delete?",
            "What is the maximum number of operations that can be performed if we keep the smallest number of the two?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string triangleType(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String triangleType(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def triangleType(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def triangleType(self, nums: List[int]) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* triangleType(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string TriangleType(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar triangleType = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function triangleType(nums: number[]): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function triangleType($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func triangleType(_ nums: [Int]) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun triangleType(nums: IntArray): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String triangleType(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func triangleType(nums []int) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {String}\ndef triangle_type(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def triangleType(nums: Array[Int]): String = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn triangle_type(nums: Vec<i32>) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (triangle-type nums)\n  (-> (listof exact-integer?) string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec triangle_type(Nums :: [integer()]) -> unicode:unicode_binary().\ntriangle_type(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec triangle_type(nums :: [integer]) :: String.t\n  def triangle_type(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>3</code> which can form the sides of a triangle.</p>\n\n<ul>\n\t<li>A triangle is called <strong>equilateral</strong> if it has all sides of equal length.</li>\n\t<li>A triangle is called <strong>isosceles</strong> if it has exactly two sides of equal length.</li>\n\t<li>A triangle is called <strong>scalene</strong> if all its sides are of different lengths.</li>\n</ul>\n\n<p>Return <em>a string representing</em> <em>the type of triangle that can be formed </em><em>or </em><code>&quot;none&quot;</code><em> if it <strong>cannot</strong> form a triangle.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3,3]\n<strong>Output:</strong> &quot;equilateral&quot;\n<strong>Explanation:</strong> Since all the sides are of equal length, therefore, it will form an equilateral triangle.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,5]\n<strong>Output:</strong> &quot;scalene&quot;\n<strong>Explanation:</strong> \nnums[0] + nums[1] = 3 + 4 = 7, which is greater than nums[2] = 5.\nnums[0] + nums[2] = 3 + 5 = 8, which is greater than nums[1] = 4.\nnums[1] + nums[2] = 4 + 5 = 9, which is greater than nums[0] = 3. \nSince the sum of the two sides is greater than the third side for all three cases, therefore, it can form a triangle.\nAs all the sides are of different lengths, it will form a scalene triangle.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == 3</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "[3,3,3]\n[3,4,5]",
        "formTitle": "[3024]Type of Triangle",
        "frequency": 0.0,
        "frontendQuestionId": "3024",
        "hints": [
            "The condition for a valid triangle is that for any two sides, the sum of their lengths must be greater than the third side.",
            "Simply count the number of unique edge lengths after checking it鈥檚 a valid triangle."
        ],
        "level": 1,
        "metaData": {
            "name": "triangleType",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3321",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[3,3,3]",
        "title": "Type of Triangle",
        "titleSlug": "type-of-triangle",
        "infer_hints": [
            "The triangle inequality theorem states that for any triangle, the sum of the lengths of any two sides must be greater than or equal to the length of the remaining side.",
            "If a triangle can be formed, how do you know if it's an equilateral triangle?",
            "The sum of the two smaller sides must be greater than the largest side for a valid triangle.",
            "You can use the triangle inequality theorem to check if a triangle can be formed.",
            "The sum of the two sides should be greater than the third side.",
            "If the sides of a triangle are of different lengths, it will form a scalene triangle.",
            "Check if the triangle inequality holds for the given lengths.",
            "Use the triangle inequality theorem (also known as triangle inequality) to check if a triangle can be formed from the given lengths.",
            "If a triangle can be formed from the given lengths, find the type of the triangle.",
            "We know that a triangle is valid if and only if the sum of the lengths of any two sides is greater than the length of the remaining side.",
            "How to check if a triangle can be formed from given sides?",
            "If a triangle can be formed, then what should be the condition for it to be equilateral, isosceles or scalene?",
            "Sort the array.",
            "The sum of the lengths of any two sides of a triangle must be greater than the length of the remaining side.",
            "What are the possible sums of the lengths of two sides of a triangle?",
            "The triangle inequality theorem states that for any triangle, the sum of the lengths of any two sides must be greater than or equal to the length of the remaining side.",
            "Use the triangle inequality theorem to solve this problem.",
            "You can check the triangle inequality theorem which states that the sum of the lengths of any two sides of a triangle is greater than the length of the remaining side.",
            "If a triangle can be formed, what are the conditions that must be met?",
            "A triangle is possible if the sum of the lengths of any two sides is greater than the length of the third side."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool isPossibleToSplit(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean isPossibleToSplit(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def isPossibleToSplit(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def isPossibleToSplit(self, nums: List[int]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool isPossibleToSplit(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool IsPossibleToSplit(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isPossibleToSplit = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function isPossibleToSplit(nums: number[]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isPossibleToSplit($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func isPossibleToSplit(_ nums: [Int]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun isPossibleToSplit(nums: IntArray): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool isPossibleToSplit(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func isPossibleToSplit(nums []int) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_possible_to_split(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def isPossibleToSplit(nums: Array[Int]): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn is_possible_to_split(nums: Vec<i32>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (is-possible-to-split nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec is_possible_to_split(Nums :: [integer()]) -> boolean().\nis_possible_to_split(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec is_possible_to_split(nums :: [integer]) :: boolean\n  def is_possible_to_split(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> of <strong>even</strong> length. You have to split the array into two parts <code>nums1</code> and <code>nums2</code> such that:</p>\n\n<ul>\n\t<li><code>nums1.length == nums2.length == nums.length / 2</code>.</li>\n\t<li><code>nums1</code> should contain <strong>distinct </strong>elements.</li>\n\t<li><code>nums2</code> should also contain <strong>distinct</strong> elements.</li>\n</ul>\n\n<p>Return <code>true</code><em> if it is possible to split the array, and </em><code>false</code> <em>otherwise</em><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,2,3,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> One of the possible ways to split nums is nums1 = [1,2,3] and nums2 = [1,2,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The only possible way to split nums is nums1 = [1,1] and nums2 = [1,1]. Both nums1 and nums2 do not contain distinct elements. Therefore, we return false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>nums.length % 2 == 0 </code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "[1,1,2,2,3,4]\n[1,1,1,1]",
        "formTitle": "[3046]Split the Array",
        "frequency": 0.0,
        "frontendQuestionId": "3046",
        "hints": [
            "It鈥檚 impossible if the same number occurs more than twice. So just check the frequency of each value."
        ],
        "level": 1,
        "metaData": {
            "name": "isPossibleToSplit",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3324",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,1,2,2,3,4]",
        "title": "Split the Array",
        "titleSlug": "split-the-array",
        "infer_hints": [
            "If you have two distinct arrays, how can you split the original array into two distinct arrays?",
            "Try to split the array into two parts so that the sum of the elements in both parts is equal.",
            "Use a HashSet to keep track of the elements of the array.",
            "We can use a set to store the elements of nums.",
            "Can you use a hash set to store the elements in the first half of the array?",
            "Use a greedy algorithm to try to partition the array into two parts with distinct elements.",
            "Use two sets to track the elements.",
            "How many ways can you divide the array into two parts such that the sum of the elements in both parts is the same?",
            "If you split the array into two halves and sort them independently, then merge them, the array is still sorted.",
            "Can you find the total sum of all the elements?",
            "Use a set to keep track of the numbers in the first half.  Then for the second half, try to add each number to the set.",
            "Use the property of a valid split.",
            "If you sort the array and check each possible split, you can check whether a split is possible.",
            "If it is possible to split the array into two arrays with distinct elements, then one of them must have all the elements less than or equal to the median.",
            "The problem is asking to check whether we can partition the array into two parts such that the sum of each part is equal.",
            "If it's possible to split the array into two parts, it's also possible to split it into two parts with distinct elements.",
            "Try to split the array into two parts where each part contains distinct elements.",
            "Can we split the array in two parts such that each part contains distinct elements?",
            "The best way to solve this problem is by using a map to count the number of distinct elements in each subarray.",
            "For every possible position to split the array, you can calculate the number of distinct elements in the two halves."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long largestSquareArea(vector<vector<int>>& bottomLeft, vector<vector<int>>& topRight) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long largestSquareArea(int[][] bottomLeft, int[][] topRight) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def largestSquareArea(self, bottomLeft, topRight):\n        \"\"\"\n        :type bottomLeft: List[List[int]]\n        :type topRight: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def largestSquareArea(self, bottomLeft: List[List[int]], topRight: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long largestSquareArea(int** bottomLeft, int bottomLeftSize, int* bottomLeftColSize, int** topRight, int topRightSize, int* topRightColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long LargestSquareArea(int[][] bottomLeft, int[][] topRight) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} bottomLeft\n * @param {number[][]} topRight\n * @return {number}\n */\nvar largestSquareArea = function(bottomLeft, topRight) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function largestSquareArea(bottomLeft: number[][], topRight: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $bottomLeft\n     * @param Integer[][] $topRight\n     * @return Integer\n     */\n    function largestSquareArea($bottomLeft, $topRight) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func largestSquareArea(_ bottomLeft: [[Int]], _ topRight: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun largestSquareArea(bottomLeft: Array<IntArray>, topRight: Array<IntArray>): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int largestSquareArea(List<List<int>> bottomLeft, List<List<int>> topRight) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func largestSquareArea(bottomLeft [][]int, topRight [][]int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} bottom_left\n# @param {Integer[][]} top_right\n# @return {Integer}\ndef largest_square_area(bottom_left, top_right)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def largestSquareArea(bottomLeft: Array[Array[Int]], topRight: Array[Array[Int]]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn largest_square_area(bottom_left: Vec<Vec<i32>>, top_right: Vec<Vec<i32>>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (largest-square-area bottomLeft topRight)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec largest_square_area(BottomLeft :: [[integer()]], TopRight :: [[integer()]]) -> integer().\nlargest_square_area(BottomLeft, TopRight) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec largest_square_area(bottom_left :: [[integer]], top_right :: [[integer]]) :: integer\n  def largest_square_area(bottom_left, top_right) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There exist <code>n</code> rectangles in a 2D plane. You are given two <strong>0-indexed</strong> 2D integer arrays <code>bottomLeft</code> and <code>topRight</code>, both of size <code>n x 2</code>, where <code>bottomLeft[i]</code> and <code>topRight[i]</code> represent the <strong>bottom-left</strong> and <strong>top-right</strong> coordinates of the <code>i<sup>th</sup></code> rectangle respectively.</p>\n\n<p>You can select a region formed from the <strong>intersection</strong> of&nbsp;two of the given rectangles. You need to find the <strong>largest </strong>area of a <strong>square</strong> that can fit <strong>inside</strong> this region if you select the region optimally.</p>\n\n<p>Return <em>the <strong>largest </strong>possible area of a square, or </em><code>0</code><em> if there <strong>do not</strong> exist any intersecting regions between the rectangles</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/05/example12.png\" style=\"width: 443px; height: 364px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> bottomLeft = [[1,1],[2,2],[3,1]], topRight = [[3,3],[4,4],[6,6]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, or the intersecting region of rectangle 1 and rectangle 2. Hence the largest area is side * side which is 1 * 1 == 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/rectanglesexample2.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 445px; height: 365px;\" />\n<pre>\n<strong>Input:</strong> bottomLeft = [[1,1],[2,2],[1,2]], topRight = [[3,3],[4,4],[3,4]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, the intersecting region of rectangle 1 and rectangle 2, or the intersection region of all 3 rectangles. Hence the largest area is side * side which is 1 * 1 == 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region.\nNote that the region can be formed by the intersection of more than 2 rectangles.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/rectanglesexample3.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 444px; height: 364px;\" />\n<pre>\n<strong>Input:</strong> bottomLeft = [[1,1],[3,3],[3,1]], topRight = [[2,2],[4,4],[4,2]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No pair of rectangles intersect, hence, we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == bottomLeft.length == topRight.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>3</sup></code></li>\n\t<li><code>bottomLeft[i].length == topRight[i].length == 2</code></li>\n\t<li><code>1 &lt;= bottomLeft[i][0], bottomLeft[i][1] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>1 &lt;= topRight[i][0], topRight[i][1] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>bottomLeft[i][0] &lt; topRight[i][0]</code></li>\n\t<li><code>bottomLeft[i][1] &lt; topRight[i][1]</code></li>\n</ul>\n",
        "exampleTestcases": "[[1,1],[2,2],[3,1]]\n[[3,3],[4,4],[6,6]]\n[[1,1],[2,2],[1,2]]\n[[3,3],[4,4],[3,4]]\n[[1,1],[3,3],[3,1]]\n[[2,2],[4,4],[4,2]]",
        "formTitle": "[3047]Find the Largest Area of Square Inside Two Rectangles",
        "frequency": 0.0,
        "frontendQuestionId": "3047",
        "hints": [
            "Brute Force the intersection area of each pair of rectangles.",
            "Two rectangles will not overlap when the bottom left x coordinate of one rectangle is greater than the top right x coordinate of the other rectangle. The same is true for the y coordinate.",
            "The intersection area (if any) is also a rectangle. Find its corners."
        ],
        "level": 2,
        "metaData": {
            "name": "largestSquareArea",
            "params": [
                {
                    "name": "bottomLeft",
                    "type": "integer[][]"
                },
                {
                    "name": "topRight",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3325",
        "similarQuestions": [
            "[{\"title\": \"Rectangle Area\", \"titleSlug\": \"rectangle-area\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u77e9\\u5f62\\u9762\\u79ef\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[1,1],[2,2],[3,1]]\n[[3,3],[4,4],[6,6]]",
        "title": "Find the Largest Area of Square Inside Two Rectangles",
        "titleSlug": "find-the-largest-area-of-square-inside-two-rectangles",
        "infer_hints": [
            "For each rectangle, find the other two rectangles that can be intersected with it.",
            "Can you find the minimum of the minimum x-coordinates and the minimum of the minimum y-coordinates?",
            "If we know the minimum of the two y-coordinates and the maximum of the two x-coordinates, how can we find the largest square that can fit inside the intersecting region?",
            "If you are able to find the minimum possible side length of a square, how can you find the maximum possible side length?",
            "How can we find the area of a square that can fit inside two rectangles?",
            "The area of a square is side².",
            "Think of each rectangle as a cell in a grid.",
            "We can solve this problem by sorting the bottom-left and top-right coordinates by their x-coordinates.",
            "Find the intersection of all the rectangles.",
            "Can you calculate the length of the square that can be fitted inside the intersection of two rectangles?",
            "Consider the three intersections of the rectangles.  (The intersection of the i-th rectangle with the x-axis is the interval [bottomLeft[i][0], topRight[i][0]].)  We need to find the smallest y-coordinate of the intersections.",
            "Use the minimum and maximum x-coordinates and y-coordinates to determine the area of the intersection.",
            "How do you find the intersection of two rectangles?",
            "Find the intersection of the rectangles.",
            "The intersection of two rectangles is at least as large as the smaller rectangle.",
            "Try to find the intersection of two rectangles.",
            "How to find the intersection area between two rectangles?",
            "Can you solve this problem in a bottom-up fashion?",
            "Think of the two rectangles as the corners of a rectangle.  How can you find the intersection of two rectangles?",
            "For each rectangle, find the maximum side length of a square that can fit inside this rectangle."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> countPairsOfConnectableServers(vector<vector<int>>& edges, int signalSpeed) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] countPairsOfConnectableServers(int[][] edges, int signalSpeed) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countPairsOfConnectableServers(self, edges, signalSpeed):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type signalSpeed: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countPairsOfConnectableServers(self, edges: List[List[int]], signalSpeed: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countPairsOfConnectableServers(int** edges, int edgesSize, int* edgesColSize, int signalSpeed, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] CountPairsOfConnectableServers(int[][] edges, int signalSpeed) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} edges\n * @param {number} signalSpeed\n * @return {number[]}\n */\nvar countPairsOfConnectableServers = function(edges, signalSpeed) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countPairsOfConnectableServers(edges: number[][], signalSpeed: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer $signalSpeed\n     * @return Integer[]\n     */\n    function countPairsOfConnectableServers($edges, $signalSpeed) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countPairsOfConnectableServers(_ edges: [[Int]], _ signalSpeed: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countPairsOfConnectableServers(edges: Array<IntArray>, signalSpeed: Int): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> countPairsOfConnectableServers(List<List<int>> edges, int signalSpeed) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countPairsOfConnectableServers(edges [][]int, signalSpeed int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} edges\n# @param {Integer} signal_speed\n# @return {Integer[]}\ndef count_pairs_of_connectable_servers(edges, signal_speed)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countPairsOfConnectableServers(edges: Array[Array[Int]], signalSpeed: Int): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_pairs_of_connectable_servers(edges: Vec<Vec<i32>>, signal_speed: i32) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-pairs-of-connectable-servers edges signalSpeed)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_pairs_of_connectable_servers(Edges :: [[integer()]], SignalSpeed :: integer()) -> [integer()].\ncount_pairs_of_connectable_servers(Edges, SignalSpeed) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_pairs_of_connectable_servers(edges :: [[integer]], signal_speed :: integer) :: [integer]\n  def count_pairs_of_connectable_servers(edges, signal_speed) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an unrooted weighted tree with <code>n</code> vertices representing servers numbered from <code>0</code> to <code>n - 1</code>, an array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]</code> represents a bidirectional edge between vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> of weight <code>weight<sub>i</sub></code>. You are also given an integer <code>signalSpeed</code>.</p>\n\n<p>Two servers <code>a</code> and <code>b</code> are <strong>connectable</strong> through a server <code>c</code> if:</p>\n\n<ul>\n\t<li><code>a &lt; b</code>, <code>a != c</code> and <code>b != c</code>.</li>\n\t<li>The distance from <code>c</code> to <code>a</code> is divisible by <code>signalSpeed</code>.</li>\n\t<li>The distance from <code>c</code> to <code>b</code> is divisible by <code>signalSpeed</code>.</li>\n\t<li>The path from <code>c</code> to <code>b</code> and the path from <code>c</code> to <code>a</code> do not share any edges.</li>\n</ul>\n\n<p>Return <em>an integer array</em> <code>count</code> <em>of length</em> <code>n</code> <em>where</em> <code>count[i]</code> <em>is the <strong>number</strong> of server pairs that are <strong>connectable</strong> through</em> <em>the server</em> <code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/21/example22.png\" style=\"width: 438px; height: 243px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1\n<strong>Output:</strong> [0,4,6,6,4,0]\n<strong>Explanation:</strong> Since signalSpeed is 1, count[c] is equal to the number of pairs of paths that start at c and do not share any edges.\nIn the case of the given path graph, count[c] is equal to the number of servers to the left of c multiplied by the servers to the right of c.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/21/example11.png\" style=\"width: 495px; height: 484px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3\n<strong>Output:</strong> [2,0,0,0,0,0,2]\n<strong>Explanation:</strong> Through server 0, there are 2 pairs of connectable servers: (4, 5) and (4, 6).\nThrough server 6, there are 2 pairs of connectable servers: (4, 5) and (0, 5).\nIt can be shown that no two servers are connectable through servers other than 0 and 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]</code><!-- notionvc: a2623897-1bb1-4c07-84b6-917ffdcd83ec --></li>\n\t<li><code>1 &lt;= weight<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= signalSpeed &lt;= 10<sup>6</sup></code></li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n",
        "exampleTestcases": "[[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]]\n1\n[[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]]\n3",
        "formTitle": "[3067]Count Pairs of Connectable Servers in a Weighted Tree Network",
        "frequency": 0.0,
        "frontendQuestionId": "3067",
        "hints": [
            "Take each node as the root of the tree, run DFS, and save for each node <code>i</code>, the number of nodes in the subtree rooted at <code>i</code> whose distance to the root is divisible by <code>signalSpeed</code>.",
            "If the root has <code>m</code> children named <code>c<sub>1</sub>, c<sub>2</sub>, 鈥�, c<sub>m</sub></code> that respectively have <code>num[c<sub>1</sub>], num[c<sub>2</sub>], 鈥�, num[c<sub>m</sub>]</code> nodes in their subtrees whose distance is divisible by signalSpeed. Then, there are <code>((S - num[c<sub>i</sub>]) * num[c<sub>i</sub>]) / 2</code>that are connectable through the root that we have fixed, where <code>S</code> is the sum of <code>num[c<sub>i</sub>]</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "countPairsOfConnectableServers",
            "params": [
                {
                    "name": "edges",
                    "type": "integer[][]"
                },
                {
                    "name": "signalSpeed",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3326",
        "similarQuestions": [
            "[{\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c0f\\u9ad8\\u5ea6\\u6811\", \"isPaidOnly\": false}, {\"title\": \"Sum of Distances in Tree\", \"titleSlug\": \"sum-of-distances-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6811\\u4e2d\\u8ddd\\u79bb\\u4e4b\\u548c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]]\n1",
        "title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
        "titleSlug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network",
        "infer_hints": [
            "Try to think about how you can calculate the number of connectable servers through each server in a binary search manner.",
            "Can you solve this in linear time?",
            "Think about the number of paths that start at a server.",
            "Can you calculate the distance from one server to all other servers?",
            "Use depth-first search (DFS) to calculate the distance from each server to the root.",
            "You can create a sorted list of the distances to the parent.",
            "For each server, we can calculate the distance from it to all other servers.",
            "How can we count the pairs of connectable servers for each server?",
            "Try to divide the problem into subproblems.",
            "You can use a modified version of Dijkstra's algorithm.",
            "How can you calculate the distance from server <code>c</code> to server <code>a</code> and <code>b</code>?",
            "How many pairs of servers are connectable through the server 0?",
            "Consider the servers in the tree as a forest.  How many servers are there?",
            "Try to count the number of pairs that can be connected through the server.",
            "Try to convert the problem to a 2D problem.",
            "Think of the signal as a path from one server to another.",
            "Think of the servers as nodes in a graph.  If you find a path from node a to node b, you know a and b are connectable.",
            "What if you want to calculate the number of pairs of servers that are connectable through server i?",
            "Think about the path lengths.",
            "How can you calculate the number of pairs of servers that are connectable through each server?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minimumMoves(vector<int>& nums, int k, int maxChanges) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minimumMoves(int[] nums, int k, int maxChanges) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumMoves(self, nums, k, maxChanges):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type maxChanges: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumMoves(self, nums: List[int], k: int, maxChanges: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minimumMoves(int* nums, int numsSize, int k, int maxChanges) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinimumMoves(int[] nums, int k, int maxChanges) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} maxChanges\n * @return {number}\n */\nvar minimumMoves = function(nums, k, maxChanges) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumMoves(nums: number[], k: number, maxChanges: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $maxChanges\n     * @return Integer\n     */\n    function minimumMoves($nums, $k, $maxChanges) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumMoves(_ nums: [Int], _ k: Int, _ maxChanges: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumMoves(nums: IntArray, k: Int, maxChanges: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumMoves(List<int> nums, int k, int maxChanges) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumMoves(nums []int, k int, maxChanges int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} max_changes\n# @return {Integer}\ndef minimum_moves(nums, k, max_changes)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumMoves(nums: Array[Int], k: Int, maxChanges: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_moves(nums: Vec<i32>, k: i32, max_changes: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-moves nums k maxChanges)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_moves(Nums :: [integer()], K :: integer(), MaxChanges :: integer()) -> integer().\nminimum_moves(Nums, K, MaxChanges) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_moves(nums :: [integer], k :: integer, max_changes :: integer) :: integer\n  def minimum_moves(nums, k, max_changes) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a binary array <code>nums</code> of length <code>n</code>, a <strong>positive</strong> integer <code>k</code> and a <strong>non-negative</strong> integer <code>maxChanges</code>.</p>\n\n<p>Alice plays a game, where the goal is for Alice to pick up <code>k</code> ones from <code>nums</code> using the <strong>minimum</strong> number of <strong>moves</strong>. When the game starts, Alice picks up any index <code>aliceIndex</code> in the range <code>[0, n - 1]</code> and stands there. If <code>nums[aliceIndex] == 1</code> , Alice picks up the one and <code>nums[aliceIndex]</code> becomes <code>0</code>(this <strong>does not</strong> count as a move). After this, Alice can make <strong>any</strong> number of <strong>moves</strong> (<strong>including</strong> <strong>zero</strong>) where in each move Alice must perform <strong>exactly</strong> one of the following actions:</p>\n\n<ul>\n\t<li>Select any index <code>j != aliceIndex</code> such that <code>nums[j] == 0</code> and set <code>nums[j] = 1</code>. This action can be performed <strong>at</strong> <strong>most</strong> <code>maxChanges</code> times.</li>\n\t<li>Select any two adjacent indices <code>x</code> and <code>y</code> (<code>|x - y| == 1</code>) such that <code>nums[x] == 1</code>, <code>nums[y] == 0</code>, then swap their values (set <code>nums[y] = 1</code> and <code>nums[x] = 0</code>). If <code>y == aliceIndex</code>, Alice picks up the one after this move and <code>nums[y]</code> becomes <code>0</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of moves required by Alice to pick <strong>exactly </strong></em><code>k</code> <em>ones</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">3</span></p>\n\n<p><strong>Explanation:</strong> Alice can pick up <code>3</code> ones in <code>3</code> moves, if Alice performs the following actions in each move when standing at <code>aliceIndex == 1</code>:</p>\n\n<ul>\n\t<li>At the start of the game Alice picks up the one and <code>nums[1]</code> becomes <code>0</code>. <code>nums</code> becomes <code>[1,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n\t<li>Select <code>j == 2</code> and perform an action of the first type. <code>nums</code> becomes <code>[1,<strong><u>0</u></strong>,1,0,0,1,1,0,0,1]</code></li>\n\t<li>Select <code>x == 2</code> and <code>y == 1</code>, and perform an action of the second type. <code>nums</code> becomes <code>[1,<strong><u>1</u></strong>,0,0,0,1,1,0,0,1]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes <code>[1,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n\t<li>Select <code>x == 0</code> and <code>y == 1</code>, and perform an action of the second type. <code>nums</code> becomes <code>[0,<strong><u>1</u></strong>,0,0,0,1,1,0,0,1]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes <code>[0,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n</ul>\n\n<p>Note that it may be possible for Alice to pick up <code>3</code> ones using some other sequence of <code>3</code> moves.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [0,0,0,0], k = 2, maxChanges = 3</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">4</span></p>\n\n<p><strong>Explanation:</strong> Alice can pick up <code>2</code> ones in <code>4</code> moves, if Alice performs the following actions in each move when standing at <code>aliceIndex == 0</code>:</p>\n\n<ul>\n\t<li>Select <code>j == 1</code> and perform an action of the first type. <code>nums</code> becomes <code>[<strong><u>0</u></strong>,1,0,0]</code>.</li>\n\t<li>Select <code>x == 1</code> and <code>y == 0</code>, and perform an action of the second type. <code>nums</code> becomes <code>[<strong><u>1</u></strong>,0,0,0]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes <code>[<strong><u>0</u></strong>,0,0,0]</code>.</li>\n\t<li>Select <code>j == 1</code> again and perform an action of the first type. <code>nums</code> becomes <code>[<strong><u>0</u></strong>,1,0,0]</code>.</li>\n\t<li>Select <code>x == 1</code> and <code>y == 0</code> again, and perform an action of the second type. <code>nums</code> becomes <code>[<strong><u>1</u></strong>,0,0,0]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes <code>[<strong><u>0</u></strong>,0,0,0]</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= maxChanges &lt;= 10<sup>5</sup></code></li>\n\t<li><code>maxChanges + sum(nums) &gt;= k</code></li>\n</ul>\n",
        "exampleTestcases": "[1,1,0,0,0,1,1,0,0,1]\n3\n1\n[0,0,0,0]\n2\n3",
        "formTitle": "[3086]Minimum Moves to Pick K Ones",
        "frequency": 0.0,
        "frontendQuestionId": "3086",
        "hints": [
            "Ones created using a change require <code>2</code> moves. Hence except for the immediate neighbors of the index where we move all the ones, we should try to use change operations.",
            "For some subset of ones, it is always better to move the ones to the median position.",
            "We only need to be concerned with the indices where <code>nums[i] == 1</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumMoves",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                },
                {
                    "name": "maxChanges",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3327",
        "similarQuestions": [
            "[{\"title\": \"Minimum Swaps to Group All 1's Together\", \"titleSlug\": \"minimum-swaps-to-group-all-1s-together\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c11\\u4ea4\\u6362\\u6b21\\u6570\\u6765\\u7ec4\\u5408\\u6240\\u6709\\u7684 1\", \"isPaidOnly\": true}]"
        ],
        "statusSign": "?",
        "testCase": "[1,1,0,0,0,1,1,0,0,1]\n3\n1",
        "title": "Minimum Moves to Pick K Ones",
        "titleSlug": "minimum-moves-to-pick-k-ones",
        "infer_hints": [
            "Use dynamic programming.",
            "If Alice is standing at index i, how many moves does she need to make to pick up k ones?",
            "The state of the game can be described by (aliceIndex, numChanges) where numChanges is the number of changes made so far.",
            "Try to make each move such that Alice can change the maximum number of zeros to ones.",
            "Use dynamic programming.",
            "The idea is to try all possible states of the array at each position and the number of moves required to reach that state.",
            "We can use a dynamic programming.  The state will be dp[i][j][k], the minimum moves to pick up i ones at the position j with k changes remaining.",
            "This is a DP problem.  Try to break it down to smaller sub-problems and solve them recursively.",
            "Can we use dynamic programming?",
            "This problem is a variant of the \"Minimum Cost to Change Array\" problem, where the cost to change the array is the sum of the changes (the number of zeros flipped to ones and ones flipped to zeros).",
            "For each index, try all possible ways of changing the number of ones.",
            "Can we use dynamic programming to solve this problem?",
            "This problem can be solved using dynamic programming.",
            "Consider dynamic programming.",
            "If Alice can pick up <code>k</code> ones, then she can always pick up more ones.",
            "What if Alice changes <code>nums[i]</code> to 1 at the first move?",
            "What if we have to pick exactly k ones?",
            "Try to use dynamic programming to solve this problem.",
            "What if we had to pick up k ones, and we were allowed to flip each bit of the binary number at most once?",
            "The problem is equivalent to finding the shortest path in a weighted, directed graph."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOperations(int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOperations(int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperations(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperations(self, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOperations(int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOperations(int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} k\n * @return {number}\n */\nvar minOperations = function(k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperations(k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperations(_ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperations(k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperations(int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperations(k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} k\n# @return {Integer}\ndef min_operations(k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperations(k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations(k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations k)\n  (-> exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations(K :: integer()) -> integer().\nmin_operations(K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations(k :: integer) :: integer\n  def min_operations(k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>positive</strong> integer <code>k</code>. Initially, you have an array <code>nums = [1]</code>.</p>\n\n<p>You can perform <strong>any</strong> of the following operations on the array <strong>any</strong> number of times (<strong>possibly zero</strong>):</p>\n\n<ul>\n\t<li>Choose any element in the array and <strong>increase</strong> its value by <code>1</code>.</li>\n\t<li>Duplicate any element in the array and add it to the end of the array.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of operations required to make the <strong>sum</strong> of elements of the final array greater than or equal to </em><code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 11</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can do the following operations on the array <code>nums = [1]</code>:</p>\n\n<ul>\n\t<li>Increase the element by <code>1</code> three times. The resulting array is <code>nums = [4]</code>.</li>\n\t<li>Duplicate the element two times. The resulting array is <code>nums = [4,4,4]</code>.</li>\n</ul>\n\n<p>The sum of the final array is <code>4 + 4 + 4 = 12</code> which is greater than or equal to <code>k = 11</code>.<br />\nThe total number of operations performed is <code>3 + 2 = 5</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The sum of the original array is already greater than or equal to <code>1</code>, so no operations are needed.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "11\n1",
        "formTitle": "[3091]Apply Operations to Make Sum of Array Greater Than or Equal to k",
        "frequency": 0.0,
        "frontendQuestionId": "3091",
        "hints": [
            "It is optimal to make all the increase operations first and all the duplicate operations last.",
            "Iterate over all possible number of increase operations that can be done and find the corresponding number of duplicate operations."
        ],
        "level": 2,
        "metaData": {
            "name": "minOperations",
            "params": [
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3328",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "11",
        "title": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
        "titleSlug": "apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k",
        "infer_hints": [
            "The key is to make the maximum element in the array as small as possible.",
            "Use a priority queue to keep track of the current smallest sum.",
            "We can use a priority queue to store the counts of the elements.",
            "We need to add the smallest possible value to the array.",
            "For each integer, how many operations do we need to increase it to be at least x?",
            "What is the smallest number that can be made from the array?",
            "What are the possible smallest sums of arrays?",
            "What is the minimum number of operations to make the array equal to [1, 1,..., 1] of length `n`?",
            "Consider all possible arrays and then try to find a way to minimize the number of operations.",
            "For every operation, we can increase one number or duplicate one number. Use dynamic programming to keep track of the minimum operations for every prefix sum.",
            "What is the maximum number of operations we can do on the array?",
            "You can perform each operation in the order it is given.  What is the optimal way to perform each operation?",
            "We can keep a priority queue of all elements of the array.",
            "Do a binary search over the answer.",
            "We can perform a binary search over the answer.  Do you have a function to check if it's possible to make the sum of the array greater than or equal to k by performing the operations at most m operations?",
            "We can simulate the operations, but it might be hard to do it optimally.  How can we use dynamic programming to optimize it?",
            "Use a priority queue to keep track of the smallest elements in the array.",
            "Use a queue to store the number of operations needed to make the sum greater than or equal to k.",
            "The idea is to do operations in such a way that the array has the minimum number of elements.",
            "The main idea is to calculate the smallest sum we can reach for each prefix, then find the smallest sum that is greater or equal to k."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int longestCommonPrefix(vector<int>& arr1, vector<int>& arr2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int longestCommonPrefix(int[] arr1, int[] arr2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def longestCommonPrefix(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def longestCommonPrefix(self, arr1: List[int], arr2: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int longestCommonPrefix(int* arr1, int arr1Size, int* arr2, int arr2Size) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int LongestCommonPrefix(int[] arr1, int[] arr2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number}\n */\nvar longestCommonPrefix = function(arr1, arr2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function longestCommonPrefix(arr1: number[], arr2: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @return Integer\n     */\n    function longestCommonPrefix($arr1, $arr2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func longestCommonPrefix(_ arr1: [Int], _ arr2: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun longestCommonPrefix(arr1: IntArray, arr2: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int longestCommonPrefix(List<int> arr1, List<int> arr2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func longestCommonPrefix(arr1 []int, arr2 []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @return {Integer}\ndef longest_common_prefix(arr1, arr2)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def longestCommonPrefix(arr1: Array[Int], arr2: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn longest_common_prefix(arr1: Vec<i32>, arr2: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (longest-common-prefix arr1 arr2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec longest_common_prefix(Arr1 :: [integer()], Arr2 :: [integer()]) -> integer().\nlongest_common_prefix(Arr1, Arr2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec longest_common_prefix(arr1 :: [integer], arr2 :: [integer]) :: integer\n  def longest_common_prefix(arr1, arr2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two arrays with <strong>positive</strong> integers <code>arr1</code> and <code>arr2</code>.</p>\n\n<p>A <strong>prefix</strong> of a positive integer is an integer formed by one or more of its digits, starting from its <strong>leftmost</strong> digit. For example, <code>123</code> is a prefix of the integer <code>12345</code>, while <code>234</code> is <strong>not</strong>.</p>\n\n<p>A <strong>common prefix</strong> of two integers <code>a</code> and <code>b</code> is an integer <code>c</code>, such that <code>c</code> is a prefix of both <code>a</code> and <code>b</code>. For example, <code>5655359</code> and <code>56554</code> have a common prefix <code>565</code> while <code>1223</code> and <code>43456</code> <strong>do not</strong> have a common prefix.</p>\n\n<p>You need to find the length of the <strong>longest common prefix</strong> between all pairs of integers <code>(x, y)</code> such that <code>x</code> belongs to <code>arr1</code> and <code>y</code> belongs to <code>arr2</code>.</p>\n\n<p>Return <em>the length of the <strong>longest</strong> common prefix among all pairs</em>.<em> If no common prefix exists among them</em>, <em>return</em> <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,10,100], arr2 = [1000]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 pairs (arr1[i], arr2[j]):\n- The longest common prefix of (1, 1000) is 1.\n- The longest common prefix of (10, 1000) is 10.\n- The longest common prefix of (100, 1000) is 100.\nThe longest common prefix is 100 with a length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,2,3], arr2 = [4,4,4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There exists no common prefix for any pair (arr1[i], arr2[j]), hence we return 0.\nNote that common prefixes between elements of the same array do not count.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= arr1[i], arr2[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,10,100]\n[1000]\n[1,2,3]\n[4,4,4]",
        "formTitle": "[3043]Find the Length of the Longest Common Prefix",
        "frequency": 0.0,
        "frontendQuestionId": "3043",
        "hints": [
            "Put all the possible prefixes of each element in <code>arr1</code> into a HashSet.",
            "For all the possible prefixes of each element in <code>arr2</code>, check if it exists in the HashSet."
        ],
        "level": 2,
        "metaData": {
            "name": "longestCommonPrefix",
            "params": [
                {
                    "name": "arr1",
                    "type": "integer[]"
                },
                {
                    "name": "arr2",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3329",
        "similarQuestions": [
            "[{\"title\": \"Longest Common Prefix\", \"titleSlug\": \"longest-common-prefix\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6700\\u957f\\u516c\\u5171\\u524d\\u7f00\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,10,100]\n[1000]",
        "title": "Find the Length of the Longest Common Prefix",
        "titleSlug": "find-the-length-of-the-longest-common-prefix",
        "infer_hints": [
            "Use the binary search method.",
            "The prefix of the number is the number itself.",
            "For every pair (x, y), we can find the longest common prefix by checking from the left, the smallest common prefix.",
            "If the lengths of two integers are different, how can we find a common prefix?",
            "If the lengths of the two strings are different, then it's impossible for them to have a common prefix.",
            "We can use the built-in function min and max to find the smallest and largest numbers in the array.",
            "For each number in arr1, check the longest common prefix with all numbers in arr2.",
            "Think about how you would find the common prefix of two strings.",
            "Find the common prefixes of all pairs (x, y) where x is a number from arr1 and y is a number from arr2.",
            "Convert the numbers to strings and use the Longest Common Prefix (LCS) code.",
            "You can solve this problem with a simple approach. We can take a pair of integers x and y, and then compute the longest common prefix of x and y.",
            "For each pair of numbers, you can find their longest common prefix.",
            "Think about the smallest possible length of the common prefix.",
            "If you are comparing the prefix of two numbers, what happens when the prefixes are the same?",
            "How many digits does the longest common prefix have?",
            "You can use the following properties of binary prefixes: (1) If a prefix exists, it will be a prefix of all the suffixes. (2) For a given prefix, if it exists, it will be a prefix of all the numbers that are the same modulo 2.",
            "For every pair of integers, compute the longest common prefix.",
            "Find the common prefix of the first pair of integers.",
            "What if you could find the longest common prefix between the first two integers?",
            "How many common prefixes are there between 2 numbers?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<vector<int>> modifiedMatrix(vector<vector<int>>& matrix) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[][] modifiedMatrix(int[][] matrix) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def modifiedMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def modifiedMatrix(self, matrix: List[List[int]]) -> List[List[int]]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** modifiedMatrix(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[][] ModifiedMatrix(int[][] matrix) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar modifiedMatrix = function(matrix) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function modifiedMatrix(matrix: number[][]): number[][] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function modifiedMatrix($matrix) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func modifiedMatrix(_ matrix: [[Int]]) -> [[Int]] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun modifiedMatrix(matrix: Array<IntArray>): Array<IntArray> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<List<int>> modifiedMatrix(List<List<int>> matrix) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func modifiedMatrix(matrix [][]int) [][]int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef modified_matrix(matrix)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def modifiedMatrix(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn modified_matrix(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (modified-matrix matrix)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec modified_matrix(Matrix :: [[integer()]]) -> [[integer()]].\nmodified_matrix(Matrix) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec modified_matrix(matrix :: [[integer]]) :: [[integer]]\n  def modified_matrix(matrix) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given a <strong>0-indexed</strong> <code>m x n</code> integer matrix <code>matrix</code>, create a new <strong>0-indexed</strong> matrix called <code>answer</code>. Make <code>answer</code> equal to <code>matrix</code>, then replace each element with the value <code>-1</code> with the <strong>maximum</strong> element in its respective column.</p>\n\n<p>Return <em>the matrix</em> <code>answer</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/24/matrix1.png\" style=\"width: 491px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,-1],[4,-1,6],[7,8,9]]\n<strong>Output:</strong> [[1,2,9],[4,8,6],[7,8,9]]\n<strong>Explanation:</strong> The diagram above shows the elements that are changed (in blue).\n- We replace the value in the cell [1][1] with the maximum value in the column 1, that is 8.\n- We replace the value in the cell [0][2] with the maximum value in the column 2, that is 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/24/matrix2.png\" style=\"width: 411px; height: 111px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[3,-1],[5,2]]\n<strong>Output:</strong> [[3,2],[5,2]]\n<strong>Explanation:</strong> The diagram above shows the elements that are changed (in blue).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>-1 &lt;= matrix[i][j] &lt;= 100</code></li>\n\t<li>The input is generated such that each column contains at least one non-negative integer.</li>\n</ul>\n",
        "exampleTestcases": "[[1,2,-1],[4,-1,6],[7,8,9]]\n[[3,-1],[5,2]]",
        "formTitle": "[3033]Modify the Matrix",
        "frequency": 0.0,
        "frontendQuestionId": "3033",
        "hints": [],
        "level": 1,
        "metaData": {
            "name": "modifiedMatrix",
            "params": [
                {
                    "name": "matrix",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3330",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[1,2,-1],[4,-1,6],[7,8,9]]",
        "title": "Modify the Matrix",
        "titleSlug": "modify-the-matrix",
        "infer_hints": [
            "We need to find the maximum element in each column, but not the maximum element in the entire matrix.",
            "If you need to replace a cell with the maximum value in its column, then you need to know the maximum value in each column.",
            "If we know the maximum value in the column, how can we use it to replace the -1?",
            "Iterate through each column and for each cell in this column, find the maximum element in this column.",
            "If you use O(mn) space for storing the maximum value in each column, you can achieve the answer with O(mn) time complexity.",
            "How can we store the maximum value in each column to use it later?",
            "For each cell, replace it with the maximum value in its row.",
            "Can we do this in one pass?",
            "How to find the maximum element in each column?",
            "Loop over the columns and rows of the matrix and replace each value with the maximum of its current value and the maximum of the rest of the row or column.",
            "Create a new array of the same size as the input matrix and populate it with the maximum value of each column.",
            "We can create a copy of the original matrix and then, for each cell in the original matrix, we replace the cell's value with the maximum value in its row and column.",
            "How to find the maximum value in each column?",
            "The answer for each cell is the maximum of the current row or the previous row.",
            "Create a new matrix and fill it with the maximum of the cells in the same column.",
            "Try to solve this problem using a prefix sum 2D array.",
            "How can we use prefix sums to solve this problem?",
            "We need to store the maximum value in each column.",
            "We can solve this in 2 passes.!",
            "For each cell, compute the maximum value of its neighbors in the same column."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperations(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOperations(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOperations = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperations(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperations(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperations(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperations(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperations(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_operations(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], k :: integer) :: integer\n  def min_operations(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and an integer <code>k</code>.</p>\n\n<p>In one operation, you can remove one occurrence of the smallest element of <code>nums</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed so that all elements of the array are greater than or equal to</em> <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,11,10,1,3], k = 10\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> After one operation, nums becomes equal to [2, 11, 10, 3].\nAfter two operations, nums becomes equal to [11, 10, 3].\nAfter three operations, nums becomes equal to [11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 3 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,4,9], k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All elements of the array are greater than or equal to 1 so we do not need to apply any operations on nums.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,4,9], k = 9\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> only a single element of nums is greater than or equal to 9 so we need to apply the operations 4 times on nums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li>The input is generated such that there is at least one index <code>i</code> such that <code>nums[i] &gt;= k</code>.</li>\n</ul>\n",
        "exampleTestcases": "[2,11,10,1,3]\n10\n[1,1,2,4,9]\n1\n[1,1,2,4,9]\n9",
        "formTitle": "[3065]Minimum Operations to Exceed Threshold Value I",
        "frequency": 0.0,
        "frontendQuestionId": "3065",
        "hints": [
            "Iterate over <code>nums</code> and count the number of elements less than <code>k</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "minOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3331",
        "similarQuestions": [
            "[{\"title\": \"Search Insert Position\", \"titleSlug\": \"search-insert-position\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u641c\\u7d22\\u63d2\\u5165\\u4f4d\\u7f6e\", \"isPaidOnly\": false}, {\"title\": \"Majority Element\", \"titleSlug\": \"majority-element\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u591a\\u6570\\u5143\\u7d20\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[2,11,10,1,3]\n10",
        "title": "Minimum Operations to Exceed Threshold Value I",
        "titleSlug": "minimum-operations-to-exceed-threshold-value-i",
        "infer_hints": [
            "What if we can sort the array?",
            "The number of operations is equal to the sum of (number of elements before the current element - number of elements after the current element).",
            "Sort the array.",
            "How many operations does it take to increase all the elements of the array to a value that is at least k?",
            "We can use a heap to keep track of the smallest unremoved element.",
            "Can you use a priority queue to keep track of the smallest number that we haven't removed yet?",
            "Sort the array.",
            "Use a priority queue to store the remaining numbers.",
            "We can maintain a priority queue of the differences between the current and target value.",
            "The operation of decreasing one element by one is the same as increasing another element by one.",
            "For each operation, you can remove one occurrence of the smallest element of nums.",
            "If the smallest element of nums is smaller than k, we can add it to k to make it greater than or equal to k.",
            "Sort the array and iterate over it, decreasing the elements that are less than k.",
            "Sort the array in ascending order.",
            "You can use a priority queue to get the minimum number in O(1) time.",
            "Sort the array and then use a prefix sum array to calculate the sum of all the numbers up to a certain index.",
            "Sort the array and find the minimum number of operations to make each number greater than or equal to the next number.",
            "Can we use binary search to solve this?",
            "For each number x in the array, what is the minimum number of operations needed to reduce it to 0?",
            "Can you use a heap to keep track of the smallest element in the array?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperations(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOperations(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOperations = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperations(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperations(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperations(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperations(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperations(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_operations(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], k :: integer) :: integer\n  def min_operations(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and an integer <code>k</code>.</p>\n\n<p>In one operation, you will:</p>\n\n<ul>\n\t<li>Take the two smallest integers <code>x</code> and <code>y</code> in <code>nums</code>.</li>\n\t<li>Remove <code>x</code> and <code>y</code> from <code>nums</code>.</li>\n\t<li>Add <code>min(x, y) * 2 + max(x, y)</code> anywhere in the array.</li>\n</ul>\n\n<p><strong>Note</strong> that you can only apply the described operation if <code>nums</code> contains at least two elements.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed so that all elements of the array are greater than or equal to</em> <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,11,10,1,3], k = 10\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3].\nIn the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,4,9], k = 20\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> After one operation, nums becomes equal to [2, 4, 9, 3].\nAfter two operations, nums becomes equal to [7, 4, 9].\nAfter three operations, nums becomes equal to [15, 9].\nAfter four operations, nums becomes equal to [33].\nAt this stage, all the elements of nums are greater than 20 so we can stop.\nIt can be shown that 4 is the minimum number of operations needed so that all elements of the array are greater than or equal to 20.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li>The input is generated such that an answer always exists. That is, there exists some sequence of operations after which all elements of the array are greater than or equal to <code>k</code>.</li>\n</ul>\n",
        "exampleTestcases": "[2,11,10,1,3]\n10\n[1,1,2,4,9]\n20",
        "formTitle": "[3066]Minimum Operations to Exceed Threshold Value II",
        "frequency": 0.0,
        "frontendQuestionId": "3066",
        "hints": [
            "Use priority queue to keep track of minimum elements.",
            "Remove the minimum two elements, perform the operation, and insert the resulting number into the priority queue."
        ],
        "level": 2,
        "metaData": {
            "name": "minOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3332",
        "similarQuestions": [
            "[{\"title\": \"Minimum Operations to Halve Array Sum\", \"titleSlug\": \"minimum-operations-to-halve-array-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5c06\\u6570\\u7ec4\\u548c\\u51cf\\u534a\\u7684\\u6700\\u5c11\\u64cd\\u4f5c\\u6b21\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[2,11,10,1,3]\n10",
        "title": "Minimum Operations to Exceed Threshold Value II",
        "titleSlug": "minimum-operations-to-exceed-threshold-value-ii",
        "infer_hints": [
            "If we sort the array, we can use a prefix sum to check if we can add the next smallest number to the current sum.",
            "We can sort the array and then use a heap to get the minimum values.",
            "The answer is always in the range [0, n] where n is the size of the array.",
            "Can you apply a priority queue to solve this problem?",
            "Do the operations as if you have infinitely many of each number.",
            "Use priority_queue and binary search to solve this problem.",
            "What if we add a number in the array?",
            "Use a heap to track the smallest values.",
            "You can use a priority queue to keep track of the smallest elements.",
            "Sort the array.",
            "Try to find a way to make the sum of the array as small as possible.",
            "Try to use a heap to solve this problem.",
            "Sort the array in ascending order.",
            "If we can sort the array, then we can always take the smallest elements for the operations.",
            "Try to sort the array.",
            "Can we use a heap instead of sorting the array?",
            "Use a priority queue (heap) to store the smallest numbers in the array.",
            "You can use a priority_queue to store the elements of the array and the operations you can do on them.",
            "Use a priority_queue and a multiset to keep track of the current smallest and largest elements.",
            "Sort the array."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumBoxes(vector<int>& apple, vector<int>& capacity) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumBoxes(int[] apple, int[] capacity) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumBoxes(self, apple, capacity):\n        \"\"\"\n        :type apple: List[int]\n        :type capacity: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumBoxes(self, apple: List[int], capacity: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumBoxes(int* apple, int appleSize, int* capacity, int capacitySize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumBoxes(int[] apple, int[] capacity) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} apple\n * @param {number[]} capacity\n * @return {number}\n */\nvar minimumBoxes = function(apple, capacity) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumBoxes(apple: number[], capacity: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $apple\n     * @param Integer[] $capacity\n     * @return Integer\n     */\n    function minimumBoxes($apple, $capacity) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumBoxes(_ apple: [Int], _ capacity: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumBoxes(apple: IntArray, capacity: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumBoxes(List<int> apple, List<int> capacity) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumBoxes(apple []int, capacity []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} apple\n# @param {Integer[]} capacity\n# @return {Integer}\ndef minimum_boxes(apple, capacity)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumBoxes(apple: Array[Int], capacity: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_boxes(apple: Vec<i32>, capacity: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-boxes apple capacity)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_boxes(Apple :: [integer()], Capacity :: [integer()]) -> integer().\nminimum_boxes(Apple, Capacity) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_boxes(apple :: [integer], capacity :: [integer]) :: integer\n  def minimum_boxes(apple, capacity) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>apple</code> of size <code>n</code> and an array <code>capacity</code> of size <code>m</code>.</p>\n\n<p>There are <code>n</code> packs where the <code>i<sup>th</sup></code> pack contains <code>apple[i]</code> apples. There are <code>m</code> boxes as well, and the <code>i<sup>th</sup></code> box has a capacity of <code>capacity[i]</code> apples.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of boxes you need to select to redistribute these </em><code>n</code><em> packs of apples into boxes</em>.</p>\n\n<p><strong>Note</strong> that, apples from the same pack can be distributed into different boxes.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> apple = [1,3,2], capacity = [4,3,1,5,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We will use boxes with capacities 4 and 5.\nIt is possible to distribute the apples as the total capacity is greater than or equal to the total number of apples.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> apple = [5,5,5], capacity = [2,4,2,7]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We will need to use all the boxes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == apple.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= m == capacity.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= apple[i], capacity[i] &lt;= 50</code></li>\n\t<li>The input is generated such that it&#39;s possible to redistribute packs of apples into boxes.</li>\n</ul>\n",
        "exampleTestcases": "[1,3,2]\n[4,3,1,5,2]\n[5,5,5]\n[2,4,2,7]",
        "formTitle": "[3074]Apple Redistribution into Boxes",
        "frequency": 0.0,
        "frontendQuestionId": "3074",
        "hints": [
            "Sort array <code>capacity</code> in non-decreasing order.",
            "Select boxes greedily while the total capacity is smaller than the total number of apples."
        ],
        "level": 1,
        "metaData": {
            "name": "minimumBoxes",
            "params": [
                {
                    "name": "apple",
                    "type": "integer[]"
                },
                {
                    "name": "capacity",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3334",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,3,2]\n[4,3,1,5,2]",
        "title": "Apple Redistribution into Boxes",
        "titleSlug": "apple-redistribution-into-boxes",
        "infer_hints": [
            "You can simulate the process of redistributing the apples.",
            "How can we distribute the apples?",
            "For each box, sort the apples in descending order.",
            "We can simulate the process and use a priority queue to keep track of the remaining apples in the boxes.",
            "Use a heap to track the remaining capacity of each box.",
            "What if we first sort the boxes by their capacity in increasing order?",
            "Can you sort the boxes by their capacity?",
            "Sort the capacity of boxes in increasing order.",
            "How to make sure we have enough boxes?",
            "We can use a priority queue to keep track of the remaining capacity of the boxes.",
            "Sort the capacity array in decreasing order.",
            "Use a priority queue to keep track of the remaining capacity of the boxes.",
            "If we don't have enough capacity for the current pack, then we need to select a new box.",
            "We need to choose a box to store each apple.  What is the optimal way to do this?",
            "Sort the capacities of the boxes in ascending order.",
            "If we try to distribute the apples from all packs into boxes in the same order, it is possible that some boxes will have more apples than others.",
            "What is the maximum number of apples a box can have?",
            "Sort the capacity array in increasing order.",
            "Use a heap to store the capacities.",
            "Sort the capacities and apples together."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumOperationsToWriteY(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumOperationsToWriteY(int[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumOperationsToWriteY(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumOperationsToWriteY(self, grid: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumOperationsToWriteY(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumOperationsToWriteY(int[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumOperationsToWriteY = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumOperationsToWriteY(grid: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumOperationsToWriteY($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumOperationsToWriteY(_ grid: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumOperationsToWriteY(grid: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumOperationsToWriteY(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumOperationsToWriteY(grid [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_operations_to_write_y(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumOperationsToWriteY(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_operations_to_write_y(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-operations-to-write-y grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_operations_to_write_y(Grid :: [[integer()]]) -> integer().\nminimum_operations_to_write_y(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_operations_to_write_y(grid :: [[integer]]) :: integer\n  def minimum_operations_to_write_y(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> <code>n x n</code> grid where <code>n</code> is odd, and <code>grid[r][c]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</p>\n\n<p>We say that a cell belongs to the Letter <strong>Y</strong> if it belongs to one of the following:</p>\n\n<ul>\n\t<li>The diagonal starting at the top-left cell and ending at the center cell of the grid.</li>\n\t<li>The diagonal starting at the top-right cell and ending at the center cell of the grid.</li>\n\t<li>The vertical line starting at the center cell and ending at the bottom border of the grid.</li>\n</ul>\n\n<p>The Letter <strong>Y</strong> is written on the grid if and only if:</p>\n\n<ul>\n\t<li>All values at cells belonging to the Y are equal.</li>\n\t<li>All values at cells not belonging to the Y are equal.</li>\n\t<li>The values at cells belonging to the Y are different from the values at cells not belonging to the Y.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed to write the letter Y on the grid given that in one operation you can change the value at any cell to</em> <code>0</code><em>,</em> <code>1</code><em>,</em> <em>or</em> <code>2</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/22/y2.png\" style=\"width: 461px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2,2],[1,1,0],[0,1,0]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 1 while those that do not belong to Y are equal to 0.\nIt can be shown that 3 is the minimum number of operations needed to write Y on the grid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/22/y3.png\" style=\"width: 701px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 0 while those that do not belong to Y are equal to 2. \nIt can be shown that 12 is the minimum number of operations needed to write Y on the grid.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 49 </code></li>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 2</code></li>\n\t<li><code>n</code> is odd.</li>\n</ul>\n",
        "exampleTestcases": "[[1,2,2],[1,1,0],[0,1,0]]\n[[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]",
        "formTitle": "[3071]Minimum Operations to Write the Letter Y on a Grid",
        "frequency": 0.0,
        "frontendQuestionId": "3071",
        "hints": [],
        "level": 2,
        "metaData": {
            "name": "minimumOperationsToWriteY",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3335",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[1,2,2],[1,1,0],[0,1,0]]",
        "title": "Minimum Operations to Write the Letter Y on a Grid",
        "titleSlug": "minimum-operations-to-write-the-letter-y-on-a-grid",
        "infer_hints": [
            "If the values of the cells in the Letter Y are the same, we can change all cells in the Letter Y to the same value.",
            "Do you know how to check if a cell belongs to the Y?",
            "Check each cell in the grid.",
            "Can you split the problem into smaller sub-problems?",
            "If you change the value of a cell to 0, how many operations will it take to write the letter Y?",
            "Try to check the conditions for each cell and then try to find the minimum number of operations.",
            "Can we just iterate over the grid and count the cells where we need to change the value?",
            "What if we try to set the values at all cells to the value that would make the cells that belong to the Y have the same value?",
            "If we change all cells to 1 or 0, we will end up with a grid where all cells belong to the Y.",
            "If you can write the letter Y, then it is guaranteed that all cells in Y have the same value.",
            "Consider a cell on the diagonal.!",
            "This problem can be solved by firstly marking the cells that belong to the Y.",
            "Try all 3 possibilities for the values at the cells belonging to the Y.",
            "For each cell, you can compute the distance to the closest cell in the Y.",
            "If you can make the values in the cells that belong to the Y to be equal to each other, then the condition 1 will be satisfied.",
            "Use dynamic programming to find the minimum number of operations for each cell.",
            "Try to use a dynamic programming approach to solve the problem.",
            "We can split the grid into 4 parts and for each part, we calculate the number of operations needed to make all the cells in the part have the same value.",
            "We can iterate over the cells of the grid. \r\n\r\nFor each cell, we check if it belongs to the Y or not.",
            "Find the difference between the values of cells belonging to the Y and the values of cells not belonging to the Y."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxBottlesDrunk(int numBottles, int numExchange) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxBottlesDrunk(int numBottles, int numExchange) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxBottlesDrunk(self, numBottles, numExchange):\n        \"\"\"\n        :type numBottles: int\n        :type numExchange: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxBottlesDrunk(self, numBottles: int, numExchange: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxBottlesDrunk(int numBottles, int numExchange) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar maxBottlesDrunk = function(numBottles, numExchange) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxBottlesDrunk(numBottles: number, numExchange: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $numBottles\n     * @param Integer $numExchange\n     * @return Integer\n     */\n    function maxBottlesDrunk($numBottles, $numExchange) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxBottlesDrunk(_ numBottles: Int, _ numExchange: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxBottlesDrunk(numBottles: Int, numExchange: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxBottlesDrunk(numBottles int, numExchange int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} num_bottles\n# @param {Integer} num_exchange\n# @return {Integer}\ndef max_bottles_drunk(num_bottles, num_exchange)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxBottlesDrunk(numBottles: Int, numExchange: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_bottles_drunk(num_bottles: i32, num_exchange: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-bottles-drunk numBottles numExchange)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_bottles_drunk(NumBottles :: integer(), NumExchange :: integer()) -> integer().\nmax_bottles_drunk(NumBottles, NumExchange) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_bottles_drunk(num_bottles :: integer, num_exchange :: integer) :: integer\n  def max_bottles_drunk(num_bottles, num_exchange) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two integers <code>numBottles</code> and <code>numExchange</code>.</p>\n\n<p><code>numBottles</code> represents the number of full water bottles that you initially have. In one operation, you can perform one of the following operations:</p>\n\n<ul>\n\t<li>Drink any number of full water bottles turning them into empty bottles.</li>\n\t<li>Exchange <code>numExchange</code> empty bottles with one full water bottle. Then, increase <code>numExchange</code> by one.</li>\n</ul>\n\n<p>Note that you cannot exchange multiple batches of empty bottles for the same value of <code>numExchange</code>. For example, if <code>numBottles == 3</code> and <code>numExchange == 1</code>, you cannot exchange <code>3</code> empty water bottles for <code>3</code> full bottles.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of water bottles you can drink</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/28/exampleone1.png\" style=\"width: 948px; height: 482px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> numBottles = 13, numExchange = 6\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/28/example231.png\" style=\"width: 990px; height: 642px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> numBottles = 10, numExchange = 3\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numBottles &lt;= 100 </code></li>\n\t<li><code>1 &lt;= numExchange &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "13\n6\n10\n3",
        "formTitle": "[3100]Water Bottles II",
        "frequency": 0.0,
        "frontendQuestionId": "3100",
        "hints": [
            "Simulate the process step by step. At each step, drink <code>numExchange</code> bottles of water then exchange them for a full bottle. Keep repeating this step until you cannot exchange  bottles anymore."
        ],
        "level": 2,
        "metaData": {
            "name": "maxBottlesDrunk",
            "params": [
                {
                    "name": "numBottles",
                    "type": "integer"
                },
                {
                    "name": "numExchange",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3336",
        "similarQuestions": [
            "[{\"title\": \"Water Bottles\", \"titleSlug\": \"water-bottles\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6362\\u6c34\\u95ee\\u9898\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "13\n6",
        "title": "Water Bottles II",
        "titleSlug": "water-bottles-ii",
        "infer_hints": [
            "What is the number of bottles that you can drink after drinking <code>X</code> full bottles?",
            "If you can exchange 2 empty bottles for 1 full, then you can drink 3 full bottles.  Now, if you have 3 full bottles, you can exchange them for 1 full bottle and 1 empty bottle.",
            "How many full bottles can you get from numBottles?",
            "We can calculate the maximum number of water bottles you can drink in one operation, then use a recursive function to calculate the maximum number of water bottles you can drink if you have a number of empty bottles that is a multiple of numExchange.",
            "Try to use recursion to solve this problem.",
            "Calculate how many full bottles you can drink and then how many you can exchange.",
            "The operation of exchanging empty bottles for new full bottles is equivalent to finding the modulus of the number of empty bottles and numExchange.",
            "We can use a loop to exchange empty bottles and drink them.",
            "You can think of it as a \"queue\" where you keep track of the remaining empty bottles.",
            "Use recursion.",
            "The number of full water bottles you have can be calculated as numBottles + numBottles/numExchange.",
            "Try to find a pattern in the data.",
            "Think about the best way to use the numExchange to maximize the number of bottles you can drink.",
            "The problem is a variant of the water bottles problem.",
            "Find out how many full bottles you can drink without any exchange.",
            "Use a recursive function that takes the current number of bottles and the number of empty bottles.",
            "We can use a while loop to continually exchange empty bottles until we cannot anymore.",
            "We can model this as a graph where each node is a state (bottles, exchange), and the edge is a valid move.",
            "The total number of bottles you can drink is the sum of the number of bottles you have now and the number of bottles you can drink after the exchange.",
            "The problem can be simplified by finding out how many times you can exchange all bottles, then adding the leftover bottles to the result."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long countSubstrings(string s, char c) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long countSubstrings(String s, char c) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countSubstrings(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countSubstrings(self, s: str, c: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long countSubstrings(char* s, char c) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long CountSubstrings(string s, char c) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {character} c\n * @return {number}\n */\nvar countSubstrings = function(s, c) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countSubstrings(s: string, c: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $c\n     * @return Integer\n     */\n    function countSubstrings($s, $c) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countSubstrings(_ s: String, _ c: Character) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countSubstrings(s: String, c: Char): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countSubstrings(String s, String c) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countSubstrings(s string, c byte) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {Character} c\n# @return {Integer}\ndef count_substrings(s, c)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countSubstrings(s: String, c: Char): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_substrings(s: String, c: char) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-substrings s c)\n  (-> string? char? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_substrings(S :: unicode:unicode_binary(), C :: char()) -> integer().\ncount_substrings(S, C) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_substrings(s :: String.t, c :: char) :: integer\n  def count_substrings(s, c) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code> and a character <code>c</code>. Return <em>the total number of <span data-keyword=\"substring-nonempty\">substrings</span> of </em><code>s</code><em> that start and end with </em><code>c</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;abada&quot;, c = &quot;a&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">6</span></p>\n\n<p><strong>Explanation:</strong> Substrings starting and ending with <code>&quot;a&quot;</code> are: <code>&quot;<strong><u>a</u></strong>bada&quot;</code>, <code>&quot;<u><strong>aba</strong></u>da&quot;</code>, <code>&quot;<u><strong>abada</strong></u>&quot;</code>, <code>&quot;ab<u><strong>a</strong></u>da&quot;</code>, <code>&quot;ab<u><strong>ada</strong></u>&quot;</code>, <code>&quot;abad<u><strong>a</strong></u>&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;zzz&quot;, c = &quot;z&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">6</span></p>\n\n<p><strong>Explanation:</strong> There are a total of <code>6</code> substrings in <code>s</code> and all start and end with <code>&quot;z&quot;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>c</code> consist&nbsp;only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abada\"\n\"a\"\n\"zzz\"\n\"z\"",
        "formTitle": "[3084]Count Substrings Starting and Ending with Given Character",
        "frequency": 0.0,
        "frontendQuestionId": "3084",
        "hints": [
            "Count the number of characters <code>'c'</code> in string <code>s</code>, let鈥檚 call it <code>m</code>.",
            "We can select <code>2</code> numbers <code>i</code> and <code>j</code> such that <code>i <= j</code> are the start and end indices of substring. Note that <code>i</code> and <code>j</code> can be the same.",
            "The answer is <code>m * (m + 1) / 2</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "countSubstrings",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "c",
                    "type": "character"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3337",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"abada\"\n\"a\"",
        "title": "Count Substrings Starting and Ending with Given Character",
        "titleSlug": "count-substrings-starting-and-ending-with-given-character",
        "infer_hints": [
            "Count the number of substrings that start with character c.",
            "Find all the starting positions of the character c in the string.",
            "The total number of substrings starting and ending with <code>c</code> can be found by summing up the frequency of <code>c</code> in the string <code>s</code>.",
            "What are the possible values of the count of substrings that start and end with the character?",
            "You can solve this problem by using two arrays, one for counting the occurrence of the character c in the string from the left and the other for counting the occurrence of the character c from the right.",
            "For each character in the string, count the number of substrings that start and end with that character.",
            "Use two pointers to track the start and end of the current substring.",
            "We can use two pointers and a counter to count the number of substrings.",
            "Try to break it down to smaller subproblems.",
            "The problem is asking for the number of substrings of s that start and end with c.  We can count how many substrings of s start with c, and how many substrings of s end with c.  Then we can subtract the number of substrings that start and end with c from the total number of substrings of s.",
            "Count all substrings that start with <code>c</code>.",
            "Use two pointers to find the substrings.",
            "Count the number of substrings ending with the given character.",
            "We can count the number of substrings that start with the character c and the number of substrings that end with the character c separately.",
            "For each character, we can compute the number of substrings starting and ending with it.",
            "You can use two arrays of size n.  The first array counts the number of times a character occurs at the end of a substring, and the second array counts the number of times a character occurs at the start of a substring.",
            "Count the number of substrings starting with character <code>c</code>.",
            "What about all substrings that start and end with <code>c</code>?",
            "Try to solve this problem with a prefix sum array.",
            "Count the number of occurrences of <code>c</code> in <code>s</code>."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countSubmatrices(vector<vector<int>>& grid, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countSubmatrices(int[][] grid, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countSubmatrices(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countSubmatrices(self, grid: List[List[int]], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countSubmatrices(int** grid, int gridSize, int* gridColSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountSubmatrices(int[][] grid, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number}\n */\nvar countSubmatrices = function(grid, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countSubmatrices(grid: number[][], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer $k\n     * @return Integer\n     */\n    function countSubmatrices($grid, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countSubmatrices(_ grid: [[Int]], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countSubmatrices(grid: Array<IntArray>, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countSubmatrices(List<List<int>> grid, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countSubmatrices(grid [][]int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @param {Integer} k\n# @return {Integer}\ndef count_submatrices(grid, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countSubmatrices(grid: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_submatrices(grid: Vec<Vec<i32>>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-submatrices grid k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_submatrices(Grid :: [[integer()]], K :: integer()) -> integer().\ncount_submatrices(Grid, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_submatrices(grid :: [[integer]], k :: integer) :: integer\n  def count_submatrices(grid, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer matrix <code>grid</code> and an integer <code>k</code>.</p>\n\n<p>Return <em>the <strong>number</strong> of <span data-keyword=\"submatrix\">submatrices</span> that contain the top-left element of the</em> <code>grid</code>, <em>and have a sum less than or equal to </em><code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/01/example1.png\" style=\"padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> grid = [[7,6,3],[6,6,1]], k = 18\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are only 4 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 18.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/01/example21.png\" style=\"padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> grid = [[7,2,9],[1,5,0],[2,6,6]], k = 20\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are only 6 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 20.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length </code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 1000 </code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[[7,6,3],[6,6,1]]\n18\n[[7,2,9],[1,5,0],[2,6,6]]\n20",
        "formTitle": "[3070]Count Submatrices with Top-Left Element and Sum Less Than k",
        "frequency": 0.0,
        "frontendQuestionId": "3070",
        "hints": [],
        "level": 2,
        "metaData": {
            "name": "countSubmatrices",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3338",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[7,6,3],[6,6,1]]\n18",
        "title": "Count Submatrices with Top-Left Element and Sum Less Than k",
        "titleSlug": "count-submatrices-with-top-left-element-and-sum-less-than-k",
        "infer_hints": [
            "For each row, try to find all submatrices that have top-left element at this row.",
            "Use prefix sums and binary search.",
            "For each possible top-left cell, calculate the sum of the submatrix and store it in an array.",
            "Calculate the sum of elements in each submatrix with top-left cell at (0,0).",
            "We need to calculate the prefix sum of the matrix.",
            "Calculate prefix sum for each row.",
            "Use prefix sum.",
            "Use prefix sums.",
            "Use a prefix sum array.",
            "Think of a sum(i, j) that represents the sum of the submatrix that starts at the cell (0, 0) and ends at (i, j).  We can then check all submatrices (x, y) that ends at (i, j) by seeing how many sum(x, y) values are smaller than sum(i, j) - k.",
            "For each cell (i, j), calculate the sum of the submatrix from top-left corner (0, 0) to (i, j).",
            "Consider the submatrix of the grid.  How many submatrices of the grid have a top-left element of cell (i,j) and have a sum less than or equal to k?",
            "Pre-compute the cumulative sum of each row.",
            "For each possible submatrix with top-left corner at cell (i, j), we can use a prefix sum to compute the sum of the cells in the submatrix.",
            "How many submatrices can be made from a certain cell?  How can you count this for all cells?  Can you do it in O(n^2) time?",
            "How many submatrices have a top-left element at grid[i][j]?",
            "How many submatrices contain the top-left element of the grid?",
            "What is the definition of a submatrix?",
            "Think about prefix sums.  How many submatrices have their top-left cell at (i, j)?",
            "Use prefix sum to speed up your query."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumDistance(int[][] points) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumDistance(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumDistance(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumDistance(int[][] points) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minimumDistance = function(points) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumDistance(points: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function minimumDistance($points) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumDistance(_ points: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumDistance(points: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumDistance(List<List<int>> points) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumDistance(points [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef minimum_distance(points)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumDistance(points: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_distance(points: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-distance points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_distance(Points :: [[integer()]]) -> integer().\nminimum_distance(Points) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_distance(points :: [[integer]]) :: integer\n  def minimum_distance(points) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a array <code>points</code> representing integer coordinates of some points on a 2D plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>The distance between two points is defined as their <span data-keyword=\"manhattan-distance\">Manhattan distance</span>.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible value for <strong>maximum</strong> distance between any two points by removing exactly one point</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[3,10],[5,15],[10,2],[4,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum distance after removing each point is the following:</p>\n\n<ul>\n\t<li>After removing the 0<sup>th</sup> point the maximum distance is between points (5, 15) and (10, 2), which is <code>|5 - 10| + |15 - 2| = 18</code>.</li>\n\t<li>After removing the 1<sup>st</sup> point the maximum distance is between points (3, 10) and (10, 2), which is <code>|3 - 10| + |10 - 2| = 15</code>.</li>\n\t<li>After removing the 2<sup>nd</sup> point the maximum distance is between points (5, 15) and (4, 4), which is <code>|5 - 4| + |15 - 4| = 12</code>.</li>\n\t<li>After removing the 3<sup>rd</sup> point the maximum distance is between points (5, 15) and (10, 2), which is <code>|5 - 10| + |15 - 2| = 18</code>.</li>\n</ul>\n\n<p>12 is the minimum possible maximum distance between any two points after removing exactly one point.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[1,1],[1,1],[1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Removing any of the points results in the maximum distance between any two points of 0.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>1 &lt;= points[i][0], points[i][1] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[[3,10],[5,15],[10,2],[4,4]]\n[[1,1],[1,1],[1,1]]",
        "formTitle": "[3102]Minimize Manhattan Distances",
        "frequency": 0.0,
        "frontendQuestionId": "3102",
        "hints": [
            "Notice that the Manhattan distance between two points <code>[x<sub>i</sub>, y<sub>i</sub>]</code> and <code>[x<sub>j</sub>, y<sub>j</sub>] is <code> max({x<sub>i</sub> - x<sub>j</sub> + y<sub>i</sub> - y<sub>j</sub>, x<sub>i</sub> - x<sub>j</sub> - y<sub>i</sub> + y<sub>j</sub>, - x<sub>i</sub> + x<sub>j</sub> + y<sub>i</sub> - y<sub>j</sub>, - x<sub>i</sub> + x<sub>j</sub> - y<sub>i</sub> + y<sub>j</sub>})</code></code>.",
            "If you replace points as <code>[x<sub>i</sub> - y<sub>i</sub>, x<sub>i</sub> + y<sub>i</sub>]</code> then the Manhattan distance is <code>max(max(x<sub>i</sub>) - min(x<sub>i</sub>), max(y<sub>i</sub>) - min(y<sub>i</sub>))</code> over all <code>i</code>.",
            "After those observations, the problem just becomes a simulation. Create multiset of points <code>[x<sub>i</sub> - y<sub>i</sub>, x<sub>i</sub> + y<sub>i</sub>]</code>, you can iterate on a point you might remove and get the maximum Manhattan distance over all other points."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumDistance",
            "params": [
                {
                    "name": "points",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3344",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "[[3,10],[5,15],[10,2],[4,4]]",
        "title": "Minimize Manhattan Distances",
        "titleSlug": "minimize-manhattan-distances",
        "infer_hints": [
            "What if we sort the coordinates by x-coordinate?",
            "Can you calculate the Manhattan distance between two points?",
            "What if you consider all points as a line and for each point, you calculate the distance between it and the nearest two points on the line?",
            "Can you sort the coordinates of each dimension separately and then compute the minimum possible Manhattan distance between two points?",
            "Find the two closest points for each dimension.",
            "Sort the points by their x-coordinate.",
            "If you remove a point, the Manhattan distance between two points will be reduced by at least the difference of their coordinates.",
            "Consider the Manhattan distance between two points (x1, y1) and (x2, y2). If we remove point (x1, y1), the Manhattan distance will decrease by abs(x1 - x2) + abs(y1 - y2).",
            "Sort the coordinates.",
            "For each dimension, try to remove the two minimum and two maximum points.",
            "For each dimension, we can try to remove one point so that the remaining points are divided into two parts by a line in this dimension.",
            "The minimum Manhattan distance is achieved when the two closest points are one on each of the diagonals.",
            "How can we find the maximum Manhattan distance that can be achieved without removing any point?",
            "For each dimension, the maximum distance will be when the two points are on the extreme ends of the range.",
            "Sort the coordinates by the x and y values separately.",
            "Try to solve the problem by considering each dimension separately.",
            "If we remove a point, we must remove it from one of the 4 quadrants.",
            "Can we minimize the Manhattan distance by increasing the minimum distance?",
            "How to sort the points in x or y coordinates?",
            "The Manhattan distance between two points (x<sub>1</sub>, y<sub>1</sub>) and (x<sub>2</sub>, y<sub>2</sub>) is |x<sub>1</sub> - x<sub>2</sub>| + |y<sub>1</sub> - y<sub>2</sub>|."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int sumOfPower(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int sumOfPower(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def sumOfPower(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def sumOfPower(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int sumOfPower(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int SumOfPower(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumOfPower = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function sumOfPower(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumOfPower($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func sumOfPower(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun sumOfPower(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int sumOfPower(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func sumOfPower(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_of_power(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def sumOfPower(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn sum_of_power(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (sum-of-power nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec sum_of_power(Nums :: [integer()], K :: integer()) -> integer().\nsum_of_power(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec sum_of_power(nums :: [integer], k :: integer) :: integer\n  def sum_of_power(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>The <strong>power</strong> of an array of integers is defined as the number of <span data-keyword=\"subsequence-array\">subsequences</span> with their sum <strong>equal</strong> to <code>k</code>.</p>\n\n<p>Return <em>the <strong>sum</strong> of <strong>power</strong> of all subsequences of</em> <code>nums</code><em>.</em></p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> nums = [1,2,3], k = 3 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 6 </span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are <code>5</code> subsequences of nums with non-zero power:</p>\n\n<ul>\n\t<li>The subsequence <code>[<u><strong>1</strong></u>,<u><strong>2</strong></u>,<u><strong>3</strong></u>]</code> has <code>2</code> subsequences with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code> and <code>[<u>1</u>,<u>2</u>,3]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>1</strong></u>,2,<u><strong>3</strong></u>]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code>.</li>\n\t<li>The subsequence <code>[1,<u><strong>2</strong></u>,<u><strong>3</strong></u>]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>1</strong></u>,<u><strong>2</strong></u>,3]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[<u>1</u>,<u>2</u>,3]</code>.</li>\n\t<li>The subsequence <code>[1,2,<u><strong>3</strong></u>]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code>.</li>\n</ul>\n\n<p>Hence the answer is <code>2 + 1 + 1 + 1 + 1 = 6</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> nums = [2,3,3], k = 5 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 4 </span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are <code>3</code> subsequences of nums with non-zero power:</p>\n\n<ul>\n\t<li>The subsequence <code>[<u><strong>2</strong></u>,<u><strong>3</strong></u>,<u><strong>3</strong></u>]</code> has 2 subsequences with <code>sum == 5</code>: <code>[<u>2</u>,3,<u>3</u>]</code> and <code>[<u>2</u>,<u>3</u>,3]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>2</strong></u>,3,<u><strong>3</strong></u>]</code> has 1 subsequence with <code>sum == 5</code>: <code>[<u>2</u>,3,<u>3</u>]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>2</strong></u>,<u><strong>3</strong></u>,3]</code> has 1 subsequence with <code>sum == 5</code>: <code>[<u>2</u>,<u>3</u>,3]</code>.</li>\n</ul>\n\n<p>Hence the answer is <code>2 + 1 + 1 = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> nums = [1,2,3], k = 7 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 0 </span></p>\n\n<p><strong>Explanation:&nbsp;</strong>There exists no subsequence with sum <code>7</code>. Hence all subsequences of nums have <code>power = 0</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n3\n[2,3,3]\n5\n[1,2,3]\n7",
        "formTitle": "[3082]Find the Sum of the Power of All Subsequences",
        "frequency": 0.0,
        "frontendQuestionId": "3082",
        "hints": [
            "If there is a subsequence of length <code>j</code> with the sum of elements <code>k</code>, it contributes <code>2<sup>n - j</sup></code> to the answer.",
            "Let <code>dp[i][j]</code> represent the number of subsequences in the subarray <code>nums[0..i]</code> which have a sum of <code>j</code>.",
            "We can find the <code>dp[i][k]</code> for all <code>0 <= i <= n-1</code> and multiply them with <code>2<sup>n - j</sup></code> to get final answer."
        ],
        "level": 3,
        "metaData": {
            "name": "sumOfPower",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3345",
        "similarQuestions": [
            "[{\"title\": \"Number of Subsequences That Satisfy the Given Sum Condition\", \"titleSlug\": \"number-of-subsequences-that-satisfy-the-given-sum-condition\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6ee1\\u8db3\\u6761\\u4ef6\\u7684\\u5b50\\u5e8f\\u5217\\u6570\\u76ee\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,2,3]\n3",
        "title": "Find the Sum of the Power of All Subsequences",
        "titleSlug": "find-the-sum-of-the-power-of-all-subsequences",
        "infer_hints": [
            "For each number in the array, calculate the power of the subsequences containing it.",
            "Think of the power of subsequence as the number of ways to choose elements for subsequence.",
            "If we consider the current number and the number of subsequences without the current number, the total number of subsequences will be the sum of these two quantities.",
            "For each index, we can decide whether to take it or not.",
            "Use Dynamic Programming (DP) to calculate the frequency of each sum from all subsequences.",
            "We need to find the power of each subsequence and sum them up.",
            "The total sum of all subsequences is 2^n.",
            "Think of a subsequence as an array.! Think about how to solve it for a single element.",
            "The total sum of the power of all subsequences is the sum of the power of all subsequences with the sum equal to the target, and the sum of the power of all subsequences with the sum equal to the target minus the sum of the power of all subsequences with the sum equal to the target minus the current number.",
            "Use dynamic programming to find the sum of the power of all subsequences.",
            "Let's try to count the number of subsequences with sum equal to K.",
            "How many subsequences of nums with their sum equal to k?",
            "Use dynamic programming to count the frequency of the numbers.",
            "If we have a subsequence, we can use it to make other subsequences by choosing or not choosing it.",
            "Use a dynamic programming (DP) approach.",
            "Use dynamic programming to solve this problem.",
            "Think about the binary representation of the number.",
            "Use Dynamic Programming (DP) to keep track of the sum of the power of each subsequence.",
            "The answer to this problem is the sum of the power of all subsequences.",
            "Can we calculate the number of subsequences that have sum equal to k?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string getSmallestString(string s, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String getSmallestString(String s, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def getSmallestString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def getSmallestString(self, s: str, k: int) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* getSmallestString(char* s, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string GetSmallestString(string s, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar getSmallestString = function(s, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function getSmallestString(s: string, k: number): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function getSmallestString($s, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func getSmallestString(_ s: String, _ k: Int) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun getSmallestString(s: String, k: Int): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String getSmallestString(String s, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func getSmallestString(s string, k int) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef get_smallest_string(s, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def getSmallestString(s: String, k: Int): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn get_smallest_string(s: String, k: i32) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (get-smallest-string s k)\n  (-> string? exact-integer? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec get_smallest_string(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nget_smallest_string(S, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec get_smallest_string(s :: String.t, k :: integer) :: String.t\n  def get_smallest_string(s, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>.</p>\n\n<p>Define a function <code>distance(s<sub>1</sub>, s<sub>2</sub>)</code> between two strings <code>s<sub>1</sub></code> and <code>s<sub>2</sub></code> of the same length <code>n</code> as:</p>\n\n<ul>\n\t<li>The<strong> sum</strong> of the <strong>minimum distance</strong> between <code>s<sub>1</sub>[i]</code> and <code>s<sub>2</sub>[i]</code> when the characters from <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code> are placed in a <strong>cyclic</strong> order, for all <code>i</code> in the range <code>[0, n - 1]</code>.</li>\n</ul>\n\n<p>For example, <code>distance(&quot;ab&quot;, &quot;cd&quot;) == 4</code>, and <code>distance(&quot;a&quot;, &quot;z&quot;) == 1</code>.</p>\n\n<p>You can <strong>change</strong> any letter of <code>s</code> to <strong>any</strong> other lowercase English letter, <strong>any</strong> number of times.</p>\n\n<p>Return a string denoting the <strong><span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span></strong> string <code>t</code> you can get after some changes, such that <code>distance(s, t) &lt;= k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;zbbz&quot;, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;aaaz&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Change <code>s</code> to <code>&quot;aaaz&quot;</code>. The distance between <code>&quot;zbbz&quot;</code> and <code>&quot;aaaz&quot;</code> is equal to <code>k = 3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;xaxcd&quot;, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;aawcd&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The distance between &quot;xaxcd&quot; and &quot;aawcd&quot; is equal to k = 4.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;lol&quot;, k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;lol&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It&#39;s impossible to change any character as <code>k = 0</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt;= 2000</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"zbbz\"\n3\n\"xaxcd\"\n4\n\"lol\"\n0",
        "formTitle": "[3106]Lexicographically Smallest String After Operations With Constraint",
        "frequency": 0.0,
        "frontendQuestionId": "3106",
        "hints": [
            "The problem can be approached greedily.",
            "For each index in order from <code>0</code> to <code>n - 1</code>, we try all letters from <code>'a'</code> to <code>'z'</code>, selecting the first one as long as the current total distance accumulated is not larger than <code>k</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "getSmallestString",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3346",
        "similarQuestions": [
            "[{\"title\": \"Lexicographically Smallest String After Substring Operation\", \"titleSlug\": \"lexicographically-smallest-string-after-substring-operation\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6267\\u884c\\u5b50\\u4e32\\u64cd\\u4f5c\\u540e\\u7684\\u5b57\\u5178\\u5e8f\\u6700\\u5c0f\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"zbbz\"\n3",
        "title": "Lexicographically Smallest String After Operations With Constraint",
        "titleSlug": "lexicographically-smallest-string-after-operations-with-constraint",
        "infer_hints": [
            "Try to change one character at a time.",
            "You can use a priority queue to store all the characters and their distances.",
            "Consider a binary search over the range of possible results.",
            "The smallest character can be 'a'.  We need to make all the same characters into 'a'.",
            "Find the minimum distance between all characters.",
            "For each character in s, you can move it to a new character so that the new character is the smallest possible.",
            "What if you change the string to have the smallest character in the cyclic order first?",
            "How many changes do you need to make so that all the letters are the same?",
            "You can do this by brute-forcing.  Can you optimize this?",
            "The problem is asking to find the smallest lexicographical string that is not greater than the original string after some changes.",
            "How to calculate the distance between two strings?",
            "For each position, try to make the string lexicographically smallest by changing it to the character that will result in the minimum distance.",
            "Can we greedily try to minimize the string?",
            "Try to replace each character by the closest character.",
            "The minimum distance is always changing in the cyclic order.",
            "You can find the smallest lexicographically string that is possible.  Try all possible operations and find the smallest string.",
            "Use dynamic programming to calculate the cost of each operation.",
            "For each position i, we can replace it with any letter from a to z, and the cost is |cur - target|.  We need to minimize the total cost.",
            "Try to minimize the distance for each letter.",
            "We need to convert the string to its lexicographically smallest form by modifying the string by changing each character to any lowercase English letter."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> resultArray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] resultArray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def resultArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def resultArray(self, nums: List[int]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultArray(int* nums, int numsSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] ResultArray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar resultArray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function resultArray(nums: number[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function resultArray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func resultArray(_ nums: [Int]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun resultArray(nums: IntArray): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> resultArray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func resultArray(nums []int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef result_array(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def resultArray(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn result_array(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (result-array nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec result_array(Nums :: [integer()]) -> [integer()].\nresult_array(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec result_array(nums :: [integer]) :: [integer]\n  def result_array(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>1-indexed</strong> array of <strong>distinct</strong> integers <code>nums</code> of length <code>n</code>.</p>\n\n<p>You need to distribute all the elements of <code>nums</code> between two arrays <code>arr1</code> and <code>arr2</code> using <code>n</code> operations. In the first operation, append <code>nums[1]</code> to <code>arr1</code>. In the second operation, append <code>nums[2]</code> to <code>arr2</code>. Afterwards, in the <code>i<sup>th</sup></code> operation:</p>\n\n<ul>\n\t<li>If the last element of <code>arr1</code> is<strong> greater</strong> than the last element of <code>arr2</code>, append <code>nums[i]</code> to <code>arr1</code>. Otherwise, append <code>nums[i]</code> to <code>arr2</code>.</li>\n</ul>\n\n<p>The array <code>result</code> is formed by concatenating the arrays <code>arr1</code> and <code>arr2</code>. For example, if <code>arr1 == [1,2,3]</code> and <code>arr2 == [4,5,6]</code>, then <code>result = [1,2,3,4,5,6]</code>.</p>\n\n<p>Return <em>the array</em> <code>result</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,3]\n<strong>Output:</strong> [2,3,1]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [2] and arr2 = [1].\nIn the 3<sup>rd</sup> operation, as the last element of arr1 is greater than the last element of arr2 (2 &gt; 1), append nums[3] to arr1.\nAfter 3 operations, arr1 = [2,3] and arr2 = [1].\nHence, the array result formed by concatenation is [2,3,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,3,8]\n<strong>Output:</strong> [5,3,4,8]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [5] and arr2 = [4].\nIn the 3<sup>rd</sup> operation, as the last element of arr1 is greater than the last element of arr2 (5 &gt; 4), append nums[3] to arr1, hence arr1 becomes [5,3].\nIn the 4<sup>th</sup> operation, as the last element of arr2 is greater than the last element of arr1 (4 &gt; 3), append nums[4] to arr2, hence arr2 becomes [4,8].\nAfter 4 operations, arr1 = [5,3] and arr2 = [4,8].\nHence, the array result formed by concatenation is [5,3,4,8].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li>All elements in <code>nums</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "[2,1,3]\n[5,4,3,8]",
        "formTitle": "[3069]Distribute Elements Into Two Arrays I",
        "frequency": 0.0,
        "frontendQuestionId": "3069",
        "hints": [
            "Divide the array into two arrays by keeping track of the last elements of both subarrays."
        ],
        "level": 1,
        "metaData": {
            "name": "resultArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3347",
        "similarQuestions": [
            "[{\"title\": \"Split Array Largest Sum\", \"titleSlug\": \"split-array-largest-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5206\\u5272\\u6570\\u7ec4\\u7684\\u6700\\u5927\\u503c\", \"isPaidOnly\": false}, {\"title\": \"Divide Array Into Equal Pairs\", \"titleSlug\": \"divide-array-into-equal-pairs\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5c06\\u6570\\u7ec4\\u5212\\u5206\\u6210\\u76f8\\u7b49\\u6570\\u5bf9\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[2,1,3]",
        "title": "Distribute Elements Into Two Arrays I",
        "titleSlug": "distribute-elements-into-two-arrays-i",
        "infer_hints": [
            "Try to make each element of the array appear in only one of the two arrays.",
            "How do we know which array to append the next number to?",
            "Sort the array in non-decreasing order.",
            "We can simulate the process described in the problem statement.",
            "You can use two heaps and one operation to solve this problem.",
            "We can sort the array nums and distribute the elements alternatively between the two arrays.",
            "The answer will be in the form of a two-element array.",
            "The key is to sort the array in increasing order and divide it into two arrays based on the conditions.",
            "Try to split the array into two subarrays such that the sum of the first subarray is smaller than the sum of the second subarray.",
            "The optimal strategy is to put the largest elements at the beginning of the two arrays.",
            "How can we use a priority queue to solve this problem?",
            "The number of elements in each array will be equal.",
            "The answer will be the same for all permutations of the input.",
            "Keep a pointer for each array.",
            "The 1st element of the result array must be the minimum element of the given array.",
            "What if we use the priority queue to keep track of the smallest element in each array?",
            "Try to simulate the process of distributing the elements.",
            "How to make sure the answer is always possible?",
            "Think about the order in which you append the elements to arr1 and arr2.",
            "We can simulate the operations and keep the elements in two lists."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> minimumCost(int n, vector<vector<int>>& edges, vector<vector<int>>& query) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] minimumCost(int n, int[][] edges, int[][] query) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumCost(self, n, edges, query):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type query: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumCost(self, n: int, edges: List[List[int]], query: List[List[int]]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minimumCost(int n, int** edges, int edgesSize, int* edgesColSize, int** query, int querySize, int* queryColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] MinimumCost(int n, int[][] edges, int[][] query) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[][]} query\n * @return {number[]}\n */\nvar minimumCost = function(n, edges, query) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumCost(n: number, edges: number[][], query: number[][]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer[][] $query\n     * @return Integer[]\n     */\n    function minimumCost($n, $edges, $query) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumCost(_ n: Int, _ edges: [[Int]], _ query: [[Int]]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumCost(n: Int, edges: Array<IntArray>, query: Array<IntArray>): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> minimumCost(int n, List<List<int>> edges, List<List<int>> query) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumCost(n int, edges [][]int, query [][]int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer[][]} query\n# @return {Integer[]}\ndef minimum_cost(n, edges, query)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumCost(n: Int, edges: Array[Array[Int]], query: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_cost(n: i32, edges: Vec<Vec<i32>>, query: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-cost n edges query)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_cost(N :: integer(), Edges :: [[integer()]], Query :: [[integer()]]) -> [integer()].\nminimum_cost(N, Edges, Query) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_cost(n :: integer, edges :: [[integer]], query :: [[integer]]) :: [integer]\n  def minimum_cost(n, edges, query) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is an undirected weighted graph with <code>n</code> vertices labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given the integer <code>n</code> and an array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between vertices <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with a weight of <code>w<sub>i</sub></code>.</p>\n\n<p>A walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It&#39;s important to note that a walk may visit the same edge or vertex more than once.</p>\n\n<p>The <strong>cost</strong> of a walk starting at node <code>u</code> and ending at node <code>v</code> is defined as the bitwise <code>AND</code> of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is <code>w<sub>0</sub>, w<sub>1</sub>, w<sub>2</sub>, ..., w<sub>k</sub></code>, then the cost is calculated as <code>w<sub>0</sub> &amp; w<sub>1</sub> &amp; w<sub>2</sub> &amp; ... &amp; w<sub>k</sub></code>, where <code>&amp;</code> denotes the bitwise <code>AND</code> operator.</p>\n\n<p>You are also given a 2D array <code>query</code>, where <code>query[i] = [s<sub>i</sub>, t<sub>i</sub>]</code>. For each query, you need to find the minimum cost of the walk starting at vertex <code>s<sub>i</sub></code> and ending at vertex <code>t<sub>i</sub></code>. If there exists no such walk, the answer is <code>-1</code>.</p>\n\n<p>Return <em>the array </em><code>answer</code><em>, where </em><code>answer[i]</code><em> denotes the <strong>minimum</strong> cost of a walk for query </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/31/q4_example1-1.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 351px; height: 141px;\" />\n<p>To achieve the cost of 1 in the first query, we need to move on the following edges: <code>0-&gt;1</code> (weight 7), <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code> (weight 1), <code>1-&gt;3</code> (weight 7).</p>\n\n<p>In the second query, there is no walk between nodes 3 and 4, so the answer is -1.</p>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0]</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/31/q4_example2e.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 211px; height: 181px;\" />\n<p>To achieve the cost of 0 in the first query, we need to move on the following edges: <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code> (weight 6), <code>1-&gt;2</code> (weight 1).</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li><code>0 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= query.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>query[i].length == 2</code></li>\n\t<li><code>0 &lt;= s<sub>i</sub>, t<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>s<sub>i</sub> !=&nbsp;t<sub>i</sub></code></li>\n</ul>\n",
        "exampleTestcases": "5\n[[0,1,7],[1,3,7],[1,2,1]]\n[[0,3],[3,4]]\n3\n[[0,2,7],[0,1,15],[1,2,6],[1,2,1]]\n[[1,2]]",
        "formTitle": "[3108]Minimum Cost Walk in Weighted Graph",
        "frequency": 0.0,
        "frontendQuestionId": "3108",
        "hints": [
            "The intended solution uses Disjoint Set Union.",
            "Notice that, if <code>u</code> and <code>v</code> are not connected then the answer is <code>-1</code>, otherwise we can use all the edges from the connected component where both belong to."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumCost",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "edges",
                    "type": "integer[][]"
                },
                {
                    "name": "query",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3348",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "5\n[[0,1,7],[1,3,7],[1,2,1]]\n[[0,3],[3,4]]",
        "title": "Minimum Cost Walk in Weighted Graph",
        "titleSlug": "minimum-cost-walk-in-weighted-graph",
        "infer_hints": [
            "For each node, calculate the distance to all other nodes.",
            "Use the Dijkstra algorithm.",
            "How can we find the minimum cost to walk from node s to node t?",
            "Use a graph adjacency list to store the graph's edges.  Try to use a shortest path algorithm like Dijkstra's.",
            "Use a graph traversal algorithm to find the shortest path from one vertex to another.",
            "Try to convert the problem into a shortest path problem.",
            "Use the Bellman-Ford algorithm to find the shortest path from the source to all other vertices.",
            "The problem can be solved using the Dijkstra's algorithm.",
            "Can we use Dijkstra's algorithm to solve this?",
            "You can use the Floyd-Warshall algorithm.",
            "What if we add all the edges from node 0 to node 1, and then remove the edges from node 0 to node 1?",
            "Can we use Dijkstra's algorithm to solve this problem?",
            "Can we use the concept of Dijkstra's algorithm to solve this?",
            "If you are looking for the minimum cost, you can use a variant of Dijkstra's algorithm.",
            "The minimum cost walk can be represented as a shortest path problem.",
            "What is the shortest path between two nodes in a graph?",
            "Consider the graph as a tree.",
            "For each edge (u, v), you can find the minimum cost to go from u to v using the Floyd Warshall algorithm.",
            "What can you do if you have the cost of the walk from node 0 to all other nodes?",
            "Think about each node as a state in a DP."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumLengthSubstring(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumLengthSubstring(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumLengthSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumLengthSubstring(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumLengthSubstring(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumLengthSubstring(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maximumLengthSubstring = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumLengthSubstring(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maximumLengthSubstring($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumLengthSubstring(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumLengthSubstring(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumLengthSubstring(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumLengthSubstring(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef maximum_length_substring(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumLengthSubstring(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_length_substring(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-length-substring s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_length_substring(S :: unicode:unicode_binary()) -> integer().\nmaximum_length_substring(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_length_substring(s :: String.t) :: integer\n  def maximum_length_substring(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "Given a string <code>s</code>, return the <strong>maximum</strong> length of a <span data-keyword=\"substring\">substring</span>&nbsp;such that it contains <em>at most two occurrences</em> of each character.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;bcbbbcba&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\nThe following substring has a length of 4 and contains at most two occurrences of each character: <code>&quot;bcbb<u>bcba</u>&quot;</code>.</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;aaaa&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\nThe following substring has a length of 2 and contains at most two occurrences of each character: <code>&quot;<u>aa</u>aa&quot;</code>.</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"bcbbbcba\"\n\"aaaa\"",
        "formTitle": "[3090]Maximum Length Substring With Two Occurrences",
        "frequency": 0.0,
        "frontendQuestionId": "3090",
        "hints": [
            "We can try all substrings by brute-force since the constraints are very small."
        ],
        "level": 1,
        "metaData": {
            "name": "maximumLengthSubstring",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3349",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"bcbbbcba\"",
        "title": "Maximum Length Substring With Two Occurrences",
        "titleSlug": "maximum-length-substring-with-two-occurrences",
        "infer_hints": [
            "We can maintain a sliding window.  What is the maximum size of the window that contains at most two distinct characters?",
            "Use a sliding window to keep track of the characters within the current window.",
            "Use a sliding window to maintain the condition.",
            "How can we check if a character has more than two occurrences?",
            "Try a brute force approach.  How many possibilities do you have to check?",
            "Use a sliding window with a fixed right boundary.  Increment the left boundary when the window is invalid, and increment the right boundary when it's valid.",
            "How can we track the number of distinct characters in the current window?",
            "Use a sliding window.",
            "Sliding window + counting.",
            "Try to solve this problem with a sliding window.",
            "Sliding window approach, keep track of the most recent indices of each character.",
            "Can you do it in O(1) space?",
            "Use a sliding window approach with two pointers.  Use a HashMap to store the character and its occurrence times.",
            "Sliding window.",
            "We need a sliding window with at most 2 distinct characters.",
            "Use a sliding window.  What happens when you add a character to the window?",
            "The answer is max(2 * count(a), 2 * count(b), 2 * count(c),...)!",
            "If you have two of a character, you can't have more than 2.",
            "If you're going to count how many characters are there in the sliding window, you can use an array of 26 elements.",
            "If we have an array of size 256 to record the last occurrence of each character, can we determine the maximum length of substring with two characters without sliding the window?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> resultArray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] resultArray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def resultArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def resultArray(self, nums: List[int]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultArray(int* nums, int numsSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] ResultArray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar resultArray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function resultArray(nums: number[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function resultArray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func resultArray(_ nums: [Int]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun resultArray(nums: IntArray): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> resultArray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func resultArray(nums []int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef result_array(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def resultArray(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn result_array(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (result-array nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec result_array(Nums :: [integer()]) -> [integer()].\nresult_array(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec result_array(nums :: [integer]) :: [integer]\n  def result_array(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>1-indexed</strong> array of integers <code>nums</code> of length <code>n</code>.</p>\n\n<p>We define a function <code>greaterCount</code> such that <code>greaterCount(arr, val)</code> returns the number of elements in <code>arr</code> that are <strong>strictly greater</strong> than <code>val</code>.</p>\n\n<p>You need to distribute all the elements of <code>nums</code> between two arrays <code>arr1</code> and <code>arr2</code> using <code>n</code> operations. In the first operation, append <code>nums[1]</code> to <code>arr1</code>. In the second operation, append <code>nums[2]</code> to <code>arr2</code>. Afterwards, in the <code>i<sup>th</sup></code> operation:</p>\n\n<ul>\n\t<li>If <code>greaterCount(arr1, nums[i]) &gt; greaterCount(arr2, nums[i])</code>, append <code>nums[i]</code> to <code>arr1</code>.</li>\n\t<li>If <code>greaterCount(arr1, nums[i]) &lt; greaterCount(arr2, nums[i])</code>, append <code>nums[i]</code> to <code>arr2</code>.</li>\n\t<li>If <code>greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i])</code>, append <code>nums[i]</code> to the array with a <strong>lesser</strong> number of elements.</li>\n\t<li>If there is still a tie, append <code>nums[i]</code> to <code>arr1</code>.</li>\n</ul>\n\n<p>The array <code>result</code> is formed by concatenating the arrays <code>arr1</code> and <code>arr2</code>. For example, if <code>arr1 == [1,2,3]</code> and <code>arr2 == [4,5,6]</code>, then <code>result = [1,2,3,4,5,6]</code>.</p>\n\n<p>Return <em>the integer array</em> <code>result</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,3,3]\n<strong>Output:</strong> [2,3,1,3]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [2] and arr2 = [1].\nIn the 3<sup>rd</sup> operation, the number of elements greater than 3 is zero in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4<sup>th</sup> operation, the number of elements greater than 3 is zero in both arrays. As the length of arr2 is lesser, hence, append nums[4] to arr2.\nAfter 4 operations, arr1 = [2,3] and arr2 = [1,3].\nHence, the array result formed by concatenation is [2,3,1,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,14,3,1,2]\n<strong>Output:</strong> [5,3,1,2,14]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [5] and arr2 = [14].\nIn the 3<sup>rd</sup> operation, the number of elements greater than 3 is one in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4<sup>th</sup> operation, the number of elements greater than 1 is greater in arr1 than arr2 (2 &gt; 1). Hence, append nums[4] to arr1.\nIn the 5<sup>th</sup> operation, the number of elements greater than 2 is greater in arr1 than arr2 (2 &gt; 1). Hence, append nums[5] to arr1.\nAfter 5 operations, arr1 = [5,3,1,2] and arr2 = [14].\nHence, the array result formed by concatenation is [5,3,1,2,14].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3,3,3]\n<strong>Output:</strong> [3,3,3,3]\n<strong>Explanation:</strong> At the end of 4 operations, arr1 = [3,3] and arr2 = [3,3].\nHence, the array result formed by concatenation is [3,3,3,3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[2,1,3,3]\n[5,14,3,1,2]\n[3,3,3,3]",
        "formTitle": "[3072]Distribute Elements Into Two Arrays II",
        "frequency": 0.0,
        "frontendQuestionId": "3072",
        "hints": [
            "We need a data structure that counts the number of integers greater than a given value <code>x</code> and supports insertion.",
            "Use Segment Tree or Binary Indexed Tree by compressing the numbers to the range <code>[1,n]</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "resultArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3350",
        "similarQuestions": [
            "[{\"title\": \"Split Array Largest Sum\", \"titleSlug\": \"split-array-largest-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5206\\u5272\\u6570\\u7ec4\\u7684\\u6700\\u5927\\u503c\", \"isPaidOnly\": false}, {\"title\": \"Divide Array Into Equal Pairs\", \"titleSlug\": \"divide-array-into-equal-pairs\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5c06\\u6570\\u7ec4\\u5212\\u5206\\u6210\\u76f8\\u7b49\\u6570\\u5bf9\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[2,1,3,3]",
        "title": "Distribute Elements Into Two Arrays II",
        "titleSlug": "distribute-elements-into-two-arrays-ii",
        "infer_hints": [
            "Can we use sorting to solve this problem?",
            "Try sorting the array in non-decreasing order.",
            "Use a priority queue to keep track of the current number of elements greater than a given value.",
            "Use a data structure to count the number of elements in the array that are greater than a certain value.",
            "Try to use binary search to solve this problem.",
            "Try sorting the array in increasing order and then use two pointers to check which number is smaller.",
            "How can we find the count of elements strictly greater than val?",
            "Use prefix sums to calculate the count of elements greater than a certain number.",
            "Use the prefix sum array and sort the array.",
            "What if we first sort the array?",
            "You need to use binary search.",
            "The total number of elements in the array is even, so you can find the median of the array by sorting the array and taking the average of the two middle elements.",
            "Use prefix sum and suffix sum to find out how many elements are greater than a given number.",
            "You can use a prefix sum array to answer the queries in O(1) time.",
            "We can use a modified binary search to find the number of elements greater than a certain number.",
            "For each element, you can maintain two counts: how many numbers are smaller than it and how many are larger.",
            "For each number, count the number of elements that are greater than it.",
            "Calculate the number of elements greater than 3.",
            "Use the merge sort technique to solve the problem.",
            "What can we say about the relation between the number of elements in arr1 and arr2?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumHappinessSum(vector<int>& happiness, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumHappinessSum(int[] happiness, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumHappinessSum(self, happiness, k):\n        \"\"\"\n        :type happiness: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumHappinessSum(self, happiness: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumHappinessSum(int* happiness, int happinessSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumHappinessSum(int[] happiness, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} happiness\n * @param {number} k\n * @return {number}\n */\nvar maximumHappinessSum = function(happiness, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumHappinessSum(happiness: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $happiness\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumHappinessSum($happiness, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumHappinessSum(_ happiness: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumHappinessSum(happiness: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumHappinessSum(List<int> happiness, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumHappinessSum(happiness []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} happiness\n# @param {Integer} k\n# @return {Integer}\ndef maximum_happiness_sum(happiness, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumHappinessSum(happiness: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_happiness_sum(happiness: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-happiness-sum happiness k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_happiness_sum(Happiness :: [integer()], K :: integer()) -> integer().\nmaximum_happiness_sum(Happiness, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_happiness_sum(happiness :: [integer], k :: integer) :: integer\n  def maximum_happiness_sum(happiness, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>happiness</code> of length <code>n</code>, and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>There are <code>n</code> children standing in a queue, where the <code>i<sup>th</sup></code> child has <strong>happiness value</strong> <code>happiness[i]</code>. You want to select <code>k</code> children from these <code>n</code> children in <code>k</code> turns.</p>\n\n<p>In each turn, when you select a child, the <strong>happiness value</strong> of all the children that have <strong>not</strong> been selected till now decreases by <code>1</code>. Note that the happiness value <strong>cannot</strong> become negative and gets decremented <strong>only</strong> if it is positive.</p>\n\n<p>Return <em>the <strong>maximum</strong> sum of the happiness values of the selected children you can achieve by selecting </em><code>k</code> <em>children</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> happiness = [1,2,3], k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can pick 2 children in the following way:\n- Pick the child with the happiness value == 3. The happiness value of the remaining children becomes [0,1].\n- Pick the child with the happiness value == 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.\nThe sum of the happiness values of the selected children is 3 + 1 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> happiness = [1,1,1,1], k = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can pick 2 children in the following way:\n- Pick any child with the happiness value == 1. The happiness value of the remaining children becomes [0,0,0].\n- Pick the child with the happiness value == 0. The happiness value of the remaining child becomes [0,0].\nThe sum of the happiness values of the selected children is 1 + 0 = 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> happiness = [2,3,4,5], k = 1\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We can pick 1 child in the following way:\n- Pick the child with the happiness value == 5. The happiness value of the remaining children becomes [1,2,3].\nThe sum of the happiness values of the selected children is 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == happiness.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= happiness[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n2\n[1,1,1,1]\n2\n[2,3,4,5]\n1",
        "formTitle": "[3075]Maximize Happiness of Selected Children",
        "frequency": 0.0,
        "frontendQuestionId": "3075",
        "hints": [
            "Since all the unselected numbers are decreasing at the same rate, we should greedily select <code>k</code> largest values.",
            "The <code>i<sup>th</code> largest number (<code>i = 1, 2, 3,鈥</code>) should decrease by <code>(i - 1)</code> when it is picked.",
            "Add <code>0</code> if the decreased value is negative."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumHappinessSum",
            "params": [
                {
                    "name": "happiness",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3351",
        "similarQuestions": [
            "[{\"title\": \"Maximum Candies Allocated to K Children\", \"titleSlug\": \"maximum-candies-allocated-to-k-children\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6bcf\\u4e2a\\u5c0f\\u5b69\\u6700\\u591a\\u80fd\\u5206\\u5230\\u591a\\u5c11\\u7cd6\\u679c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,2,3]\n2",
        "title": "Maximize Happiness of Selected Children",
        "titleSlug": "maximize-happiness-of-selected-children",
        "infer_hints": [
            "Use dynamic programming.",
            "The idea is to maximize the happiness value of the children we pick.",
            "Use dynamic programming to track the maximum happiness you can get by selecting a subset of children.",
            "Use a priority queue to keep track of the k children with the highest happiness values.",
            "We can perform a dynamic programming on the happiness array and select the k children that maximize the sum.",
            "Think of this problem as a 0-1 Knapsack problem.",
            "The maximum happiness is obtained when we select the maximum and minimum happiness values.",
            "Consider using dynamic programming.",
            "Sort the children by their happiness value in decreasing order.",
            "What if we have to pick k children in a way that the happiness value of the selected children is maximized?",
            "Sort the children by their happiness value in decreasing order.",
            "Try to find the maximum happiness by making the selection greedy.",
            "If we select a child, how will the happiness change for the remaining children?",
            "Use dynamic programming to solve this problem.",
            "Can we use Dynamic Programming (DP)?",
            "Think of each child as being either in the group or not.  What is the maximum happiness if we decide to add the i-th child to the group?",
            "Think of the problem as a two-dimensional dynamic programming problem.",
            "What if we sort the children by their happiness value?",
            "Can you think of a DP state to solve this problem?",
            "What if you sort the children in increasing order of their happiness value?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool isSubstringPresent(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean isSubstringPresent(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def isSubstringPresent(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def isSubstringPresent(self, s: str) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool isSubstringPresent(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool IsSubstringPresent(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isSubstringPresent = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function isSubstringPresent(s: string): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isSubstringPresent($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func isSubstringPresent(_ s: String) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun isSubstringPresent(s: String): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool isSubstringPresent(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func isSubstringPresent(s string) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Boolean}\ndef is_substring_present(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def isSubstringPresent(s: String): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn is_substring_present(s: String) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (is-substring-present s)\n  (-> string? boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec is_substring_present(S :: unicode:unicode_binary()) -> boolean().\nis_substring_present(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec is_substring_present(s :: String.t) :: boolean\n  def is_substring_present(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given a<strong> </strong>string <code>s</code>, find any <span data-keyword=\"substring\">substring</span> of length <code>2</code> which is also present in the reverse of <code>s</code>.</p>\n\n<p>Return <code>true</code><em> if such a substring exists, and </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;leetcode&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">true</span></p>\n\n<p><strong>Explanation:</strong> Substring <code>&quot;ee&quot;</code> is of length <code>2</code> which is also present in <code>reverse(s) == &quot;edocteel&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;abcba&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">true</span></p>\n\n<p><strong>Explanation:</strong> All of the substrings of length <code>2</code> <code>&quot;ab&quot;</code>, <code>&quot;bc&quot;</code>, <code>&quot;cb&quot;</code>, <code>&quot;ba&quot;</code> are also present in <code>reverse(s) == &quot;abcba&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;abcd&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">false</span></p>\n\n<p><strong>Explanation:</strong> There is no substring of length <code>2</code> in <code>s</code>, which is also present in the reverse of <code>s</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"leetcode\"\n\"abcba\"\n\"abcd\"",
        "formTitle": "[3083]Existence of a Substring in a String and Its Reverse",
        "frequency": 0.0,
        "frontendQuestionId": "3083",
        "hints": [
            "Make a new string by reversing the string <code>s</code>.",
            "For every substring of length <code>2</code> in <code>s</code>, check if there is a corresponding substring in the reverse of <code>s</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "isSubstringPresent",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3353",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"leetcode\"",
        "title": "Existence of a Substring in a String and Its Reverse",
        "titleSlug": "existence-of-a-substring-in-a-string-and-its-reverse",
        "infer_hints": [
            "Try all substrings of length 2 and see if you can find any in the reverse of the string.",
            "Use the substring method in python.",
            "Do we need to consider all substrings of length 2 or only those that appear in the reverse of the string?",
            "Can you use a hash map to store the count of each substring?",
            "Find all substrings of length 2 in s and in reverse(s).",
            "Try to find if there is any substring in the given string that is equal to its reverse.",
            "Create a set to store all substrings of length 2.",
            "The length of the given string <code>s</code> is <code>n</code>.  What is the largest possible length of the substring you can get from <code>s</code> and its reverse?",
            "If the reverse of the string is <code>s</code>, then the answer is <code>true</code>.",
            "Try all substrings of length 2.",
            "You can use a HashSet to store all substrings of length 2 in string s and its reverse.",
            "How about checking if there exists any substring in the string that equals any substring in the reverse of the string?",
            "Check all possible substrings of length 2.",
            "Use a set to store all possible substrings of length 2.",
            "Try all possible substrings of length 2.",
            "How can we check if a string <code>s</code> contains any substring <code>s[i..j]</code> that is also a substring of <code>reverse(s)</code>?",
            "The problem is about finding a substring in a string, which is also in the reverse of that string.",
            "How about the first two characters of the reversed string?",
            "We can check the strings <code>s</code> and <code>s</code> + <code>s</code>.  That way, if <code>s</code> has a substring which is also a suffix of <code>s</code> + <code>s</code>, then it has a substring which is also a prefix of <code>s</code> + <code>s</code>.",
            "Loop over all possible substrings."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string minimizeStringValue(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String minimizeStringValue(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimizeStringValue(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimizeStringValue(self, s: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* minimizeStringValue(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string MinimizeStringValue(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar minimizeStringValue = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimizeStringValue(s: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function minimizeStringValue($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimizeStringValue(_ s: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimizeStringValue(s: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String minimizeStringValue(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimizeStringValue(s string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {String}\ndef minimize_string_value(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimizeStringValue(s: String): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimize_string_value(s: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimize-string-value s)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimize_string_value(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nminimize_string_value(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimize_string_value(s :: String.t) :: String.t\n  def minimize_string_value(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>. <code>s[i]</code> is either a lowercase English letter or <code>&#39;?&#39;</code>.</p>\n\n<p>For a string <code>t</code> having length <code>m</code> containing <strong>only</strong> lowercase English letters, we define the function <code>cost(i)</code> for an index <code>i</code>&nbsp;as the number of characters <strong>equal</strong> to <code>t[i]</code>&nbsp;that appeared before it, i.e. in the range <code>[0, i - 1]</code>.</p>\n\n<p>The <strong>value</strong> of <code>t</code> is the <strong>sum</strong> of <code>cost(i)</code> for all indices <code>i</code>.</p>\n\n<p>For example, for the string <code>t = &quot;aab&quot;</code>:</p>\n\n<ul>\n\t<li><code>cost(0) = 0</code></li>\n\t<li><code>cost(1) = 1</code></li>\n\t<li><code>cost(2) = 0</code></li>\n\t<li>Hence, the value of <code>&quot;aab&quot;</code> is <code>0 + 1 + 0 = 1</code>.</li>\n</ul>\n\n<p>Your task is to <strong>replace all</strong> occurrences of <code>&#39;?&#39;</code> in <code>s</code> with any lowercase English letter so that the <strong>value</strong> of <code>s</code> is <strong>minimized</strong>.</p>\n\n<p>Return <em>a string denoting the modified string with replaced occurrences of </em><code>&#39;?&#39;</code><em>. If there are multiple strings resulting in the <strong>minimum value</strong>, return the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span> one.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> s = &quot;???&quot; </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> &quot;abc&quot; </span></p>\n\n<p><strong>Explanation: </strong> In this example, we can replace the occurrences of <code>&#39;?&#39;</code> to make <code>s</code> equal to <code>&quot;abc&quot;</code>.</p>\n\n<p>For <code>&quot;abc&quot;</code>, <code>cost(0) = 0</code>, <code>cost(1) = 0</code>, and <code>cost(2) = 0</code>.</p>\n\n<p>The value of <code>&quot;abc&quot;</code> is <code>0</code>.</p>\n\n<p>Some other modifications of <code>s</code> that have a value of <code>0</code> are <code>&quot;cba&quot;</code>, <code>&quot;abz&quot;</code>, and, <code>&quot;hey&quot;</code>.</p>\n\n<p>Among all of them, we choose the lexicographically smallest.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;a?a?&quot;</span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">&quot;abac&quot;</span></p>\n\n<p><strong>Explanation: </strong> In this example, the occurrences of <code>&#39;?&#39;</code> can be replaced to make <code>s</code> equal to <code>&quot;abac&quot;</code>.</p>\n\n<p>For <code>&quot;abac&quot;</code>, <code>cost(0) = 0</code>, <code>cost(1) = 0</code>, <code>cost(2) = 1</code>, and <code>cost(3) = 0</code>.</p>\n\n<p>The value of <code>&quot;abac&quot;</code> is&nbsp;<code>1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either a lowercase English letter or <code>&#39;?&#39;</code>.</li>\n</ul>\n",
        "exampleTestcases": "\"???\"\n\"a?a?\"",
        "formTitle": "[3081]Replace Question Marks in String to Minimize Its Value",
        "frequency": 0.0,
        "frontendQuestionId": "3081",
        "hints": [
            "<p>The cost does not depend on the order of characters. If a character <code>c</code> appears <code>x</code> times, the cost is exactly <code>0 + 1 + 2 + 鈥� + (x 鈭� 1) = x * (x 鈭� 1) / 2</code>.</p>",
            "<p>We know the total number of question marks; for each one, we should select the letter with the minimum frequency to replace it.</p>",
            "<p>The letter selection can be achieved by a min-heap (or even by brute-forcing the <code>26</code> possibilities).</p>",
            "<p>So, we know the extra letters we need to replace finally. However, we must put those letters in order from left to right so that the resulting string is the lexicographically smallest one.</p>"
        ],
        "level": 2,
        "metaData": {
            "name": "minimizeStringValue",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3354",
        "similarQuestions": [
            "[{\"title\": \"Lexicographically Smallest String After Substring Operation\", \"titleSlug\": \"lexicographically-smallest-string-after-substring-operation\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6267\\u884c\\u5b50\\u4e32\\u64cd\\u4f5c\\u540e\\u7684\\u5b57\\u5178\\u5e8f\\u6700\\u5c0f\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "\"???\"",
        "title": "Replace Question Marks in String to Minimize Its Value",
        "titleSlug": "replace-question-marks-in-string-to-minimize-its-value",
        "infer_hints": [
            "Use a prefix sum array to get the number of characters that appear before a certain character.",
            "Can you find the answer for a string of length 1?",
            "How can we calculate the cost of a string?",
            "We can iterate over each character in the string and replace '?' by each possible character to get the answer.",
            "Create a prefix and suffix array to calculate the count of characters before and after the '?'.",
            "Generate all permutations of the string s, and for each permutation calculate the value.",
            "The answer is not unique. We can use brute-force to try all possible replacements and find the one with the minimum value.",
            "For each character, calculate the total number of occurrences of it in the string.",
            "You can solve this problem using dynamic programming.",
            "For each character, try replacing it with every lowercase English letter and check if the value of the string is smaller.",
            "We can solve this problem in O(n) time and O(n) space.",
            "We can calculate the cost of each character in s by using prefix sum.",
            "For each character, try all lowercase English letters.",
            "We can use prefix and suffix sum of counts to solve this problem.",
            "If we can calculate the value of the string s modulo 26, we can solve the problem in O(n) time.",
            "You can solve this problem using a prefix sum array.",
            "Try to make the string as small as possible.",
            "We can use a dynamic programming approach to solve this problem.  We can pre-calculate the cost of making the string equal to t for all possible t, and keep track of the minimum value we can achieve.",
            "Try to calculate the cost for each character and then fill the '?'s based on the costs.",
            "Consider prefix sums."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumLevels(vector<int>& possible) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumLevels(int[] possible) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumLevels(self, possible):\n        \"\"\"\n        :type possible: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumLevels(self, possible: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumLevels(int* possible, int possibleSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumLevels(int[] possible) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} possible\n * @return {number}\n */\nvar minimumLevels = function(possible) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumLevels(possible: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $possible\n     * @return Integer\n     */\n    function minimumLevels($possible) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumLevels(_ possible: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumLevels(possible: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumLevels(List<int> possible) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumLevels(possible []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} possible\n# @return {Integer}\ndef minimum_levels(possible)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumLevels(possible: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_levels(possible: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-levels possible)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_levels(Possible :: [integer()]) -> integer().\nminimum_levels(Possible) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_levels(possible :: [integer]) :: integer\n  def minimum_levels(possible) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a binary array <code>possible</code> of length <code>n</code>.</p>\n\n<p>Alice and Bob are playing a game that consists of <code>n</code> levels. Some of the levels in the game are <strong>impossible</strong> to clear while others can <strong>always</strong> be cleared. In particular, if <code>possible[i] == 0</code>, then the <code>i<sup>th</sup></code> level is <strong>impossible</strong> to clear for <strong>both</strong> the players. A player gains <code>1</code> point on clearing a level and loses <code>1</code> point if the player fails to clear it.</p>\n\n<p>At the start of the game, Alice will play some levels in the <strong>given order</strong> starting from the <code>0<sup>th</sup></code> level, after which Bob will play for the rest of the levels.</p>\n\n<p>Alice wants to know the <strong>minimum</strong> number of levels she should play to gain more points than Bob, if both players play optimally to <strong>maximize</strong> their points.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of levels Alice should play to gain more points</em>. <em>If this is <strong>not</strong> possible, return</em> <code>-1</code>.</p>\n\n<p><strong>Note</strong> that each player must play at least <code>1</code> level.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">possible = [1,0,1,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at all the levels that Alice can play up to:</p>\n\n<ul>\n\t<li>If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has -1 + 1 - 1 = -1 point.</li>\n\t<li>If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 1 - 1 = 0 points, while Bob has 1 - 1 = 0 points.</li>\n\t<li>If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 1 - 1 + 1 = 1 point, while Bob has -1 point.</li>\n</ul>\n\n<p>Alice must play a minimum of 1 level to gain more points.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">possible = [1,1,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at all the levels that Alice can play up to:</p>\n\n<ul>\n\t<li>If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has 4 points.</li>\n\t<li>If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 2 points, while Bob has 3 points.</li>\n\t<li>If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 3 points, while Bob has 2 points.</li>\n\t<li>If Alice plays till level 3 and Bob plays the rest of the levels, Alice has 4 points, while Bob has 1 point.</li>\n</ul>\n\n<p>Alice must play a minimum of 3 levels to gain more points.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">possible = [0,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible way is for both players to play 1 level each. Alice plays level 0 and loses 1 point. Bob plays level 1 and loses 1 point. As both players have equal points, Alice can&#39;t gain more points than Bob.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == possible.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>possible[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "exampleTestcases": "[1,0,1,0]\n[1,1,1,1,1]\n[0,0]",
        "formTitle": "[3096]Minimum Levels to Gain More Points",
        "frequency": 0.0,
        "frontendQuestionId": "3096",
        "hints": [
            "Change all <code>0</code> in possible array into <code>-1</code>.",
            "We need to find the shortest non-empty prefix of the new possible array such that the sum of elements in it is strictly larger than the remaining part."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumLevels",
            "params": [
                {
                    "name": "possible",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3355",
        "similarQuestions": [
            "[{\"title\": \"Minimum Rounds to Complete All Tasks\", \"titleSlug\": \"minimum-rounds-to-complete-all-tasks\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5b8c\\u6210\\u6240\\u6709\\u4efb\\u52a1\\u9700\\u8981\\u7684\\u6700\\u5c11\\u8f6e\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,0,1,0]",
        "title": "Minimum Levels to Gain More Points",
        "titleSlug": "minimum-levels-to-gain-more-points",
        "infer_hints": [
            "If you play a certain level, can you figure out the minimum number of levels Bob should play next?",
            "We can use prefix sums to calculate the score of each player.",
            "You can simulate the game.",
            "What if Alice and Bob play the game in an optimal way?",
            "Keep track of the cumulative sum of points Alice and Bob get.  If Alice's cumulative sum ever equals Bob's, it means Alice can get more points than Bob if she plays more levels.",
            "You can use a greedy approach.",
            "Keep track of the maximum points Alice can get with `dp[i]`, where `dp[i] = max(dp[j]) + 1` if Alice can play the level `i`.",
            "Use dynamic programming.",
            "How many levels does Alice play?  Ordered in the order that Alice plays them.  If Bob plays first, what is the maximum difference in points?",
            "If we try to find the maximum score difference we can get, it will take a lot of time because we have to check for all possible levels.  We can optimize this by using binary search.",
            "Keep track of the total points Alice and Bob have at each level.",
            "Can you keep track of the minimum points needed for Bob to win from level i to n?",
            "Alice can play 1, 2, 3,..., k levels and Bob can play n - k, n - k + 1,..., n levels.",
            "For each index i, calculate the maximum number of levels Alice can play if she plays up to index i.",
            "Let's try to find the minimum number of levels Alice should play to make the difference of her and Bob's scores maximum.",
            "What is the optimal strategy for each player?",
            "How many levels does Alice have to play to get more points than Bob?",
            "If the current level is possible to clear for both players, Alice can try to clear it and Bob will have to clear the rest.",
            "We need to check the sum of possible points for Alice and the sum of possible points for Bob.",
            "Can we use dynamic programming?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<string> shortestSubstrings(vector<string>& arr) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String[] shortestSubstrings(String[] arr) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def shortestSubstrings(self, arr):\n        \"\"\"\n        :type arr: List[str]\n        :rtype: List[str]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def shortestSubstrings(self, arr: List[str]) -> List[str]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** shortestSubstrings(char** arr, int arrSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string[] ShortestSubstrings(string[] arr) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} arr\n * @return {string[]}\n */\nvar shortestSubstrings = function(arr) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function shortestSubstrings(arr: string[]): string[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $arr\n     * @return String[]\n     */\n    function shortestSubstrings($arr) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func shortestSubstrings(_ arr: [String]) -> [String] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun shortestSubstrings(arr: Array<String>): Array<String> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<String> shortestSubstrings(List<String> arr) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func shortestSubstrings(arr []string) []string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} arr\n# @return {String[]}\ndef shortest_substrings(arr)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def shortestSubstrings(arr: Array[String]): Array[String] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn shortest_substrings(arr: Vec<String>) -> Vec<String> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (shortest-substrings arr)\n  (-> (listof string?) (listof string?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec shortest_substrings(Arr :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nshortest_substrings(Arr) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec shortest_substrings(arr :: [String.t]) :: [String.t]\n  def shortest_substrings(arr) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>arr</code> of size <code>n</code> consisting of <strong>non-empty</strong> strings.</p>\n\n<p>Find a string array <code>answer</code> of size <code>n</code> such that:</p>\n\n<ul>\n\t<li><code>answer[i]</code> is the <strong>shortest</strong> <span data-keyword=\"substring\">substring</span> of <code>arr[i]</code> that does <strong>not</strong> occur as a substring in any other string in <code>arr</code>. If multiple such substrings exist, <code>answer[i]</code> should be the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span>. And if no such substring exists, <code>answer[i]</code> should be an empty string.</li>\n</ul>\n\n<p>Return <em>the array </em><code>answer</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [&quot;cab&quot;,&quot;ad&quot;,&quot;bad&quot;,&quot;c&quot;]\n<strong>Output:</strong> [&quot;ab&quot;,&quot;&quot;,&quot;ba&quot;,&quot;&quot;]\n<strong>Explanation:</strong> We have the following:\n- For the string &quot;cab&quot;, the shortest substring that does not occur in any other string is either &quot;ca&quot; or &quot;ab&quot;, we choose the lexicographically smaller substring, which is &quot;ab&quot;.\n- For the string &quot;ad&quot;, there is no substring that does not occur in any other string.\n- For the string &quot;bad&quot;, the shortest substring that does not occur in any other string is &quot;ba&quot;.\n- For the string &quot;c&quot;, there is no substring that does not occur in any other string.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [&quot;abc&quot;,&quot;bcd&quot;,&quot;abcd&quot;]\n<strong>Output:</strong> [&quot;&quot;,&quot;&quot;,&quot;abcd&quot;]\n<strong>Explanation:</strong> We have the following:\n- For the string &quot;abc&quot;, there is no substring that does not occur in any other string.\n- For the string &quot;bcd&quot;, there is no substring that does not occur in any other string.\n- For the string &quot;abcd&quot;, the shortest substring that does not occur in any other string is &quot;abcd&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == arr.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= arr[i].length &lt;= 20</code></li>\n\t<li><code>arr[i]</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "[\"cab\",\"ad\",\"bad\",\"c\"]\n[\"abc\",\"bcd\",\"abcd\"]",
        "formTitle": "[3076]Shortest Uncommon Substring in an Array",
        "frequency": 0.0,
        "frontendQuestionId": "3076",
        "hints": [
            "Try a brute force solution where you check every substring.",
            "Use a Hash map to keep track of the substrings."
        ],
        "level": 2,
        "metaData": {
            "name": "shortestSubstrings",
            "params": [
                {
                    "name": "arr",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3356",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[\"cab\",\"ad\",\"bad\",\"c\"]",
        "title": "Shortest Uncommon Substring in an Array",
        "titleSlug": "shortest-uncommon-substring-in-an-array",
        "infer_hints": [
            "Try to find the shortest substring for each string.",
            "How can you check if a string s is a substring of another string t?",
            "We can use the trie data structure to solve this problem.",
            "Use a Trie to store all the strings.",
            "Build a set of all substrings in the array.",
            "What is the smallest substring of each string that doesn't occur in any other string?",
            "The trick to this problem is to build a trie of all the strings, and then go through it to find the shortest uncommon substring.",
            "The idea is to maintain a counter of all substrings of all strings in the array.",
            "Can we generate all substrings and then check which one is not repeated?",
            "We can solve this problem by iterating over all possible substrings of each string.",
            "Try to construct a Trie.",
            "For each string, generate all substrings that are at most the length of the string.",
            "The key to this problem is understanding what it means for a substring to be \"uncommon\".",
            "Try all possible substrings.  What is the maximum length of a substring that can be unique in an array?",
            "You can solve this problem using Trie.",
            "Try to find the smallest substring that doesn't exist in any other string.",
            "We can solve this problem using a Trie data structure.",
            "If a string <code>s</code> is a substring of another string <code>t</code>, then there are two possibilities: <code>s</code> is a prefix of <code>t</code>, or there is a string <code>u</code> such that <code>t = u + s</code>.",
            "You can use a Trie data structure.",
            "We can use a Trie to solve this problem."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumDeletions(string word, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumDeletions(String word, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumDeletions(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumDeletions(self, word: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumDeletions(char* word, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumDeletions(string word, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumDeletions = function(word, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumDeletions(word: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumDeletions($word, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumDeletions(_ word: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumDeletions(word: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumDeletions(String word, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumDeletions(word string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_deletions(word, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumDeletions(word: String, k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_deletions(word: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-deletions word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_deletions(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_deletions(Word, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_deletions(word :: String.t, k :: integer) :: integer\n  def minimum_deletions(word, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>We consider <code>word</code> to be <strong>k-special</strong> if <code>|freq(word[i]) - freq(word[j])| &lt;= k</code> for all indices <code>i</code> and <code>j</code> in the string.</p>\n\n<p>Here, <code>freq(x)</code> denotes the <span data-keyword=\"frequency-letter\">frequency</span> of the character <code>x</code> in <code>word</code>, and <code>|y|</code> denotes the absolute value of <code>y</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of characters you need to delete to make</em> <code>word</code> <strong><em>k-special</em></strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">word = &quot;aabcaba&quot;, k = 0</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">3</span></p>\n\n<p><strong>Explanation:</strong> We can make <code>word</code> <code>0</code>-special by deleting <code>2</code> occurrences of <code>&quot;a&quot;</code> and <code>1</code> occurrence of <code>&quot;c&quot;</code>. Therefore, <code>word</code> becomes equal to <code>&quot;baba&quot;</code> where <code>freq(&#39;a&#39;) == freq(&#39;b&#39;) == 2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">word = &quot;dabdcbdcdcd&quot;, k = 2</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">2</span></p>\n\n<p><strong>Explanation:</strong> We can make <code>word</code> <code>2</code>-special by deleting <code>1</code> occurrence of <code>&quot;a&quot;</code> and <code>1</code> occurrence of <code>&quot;d&quot;</code>. Therefore, <code>word</code> becomes equal to &quot;bdcbdcdcd&quot; where <code>freq(&#39;b&#39;) == 2</code>, <code>freq(&#39;c&#39;) == 3</code>, and <code>freq(&#39;d&#39;) == 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">word = &quot;aaabaaa&quot;, k = 2</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">1</span></p>\n\n<p><strong>Explanation:</strong> We can make <code>word</code> <code>2</code>-special by deleting <code>1</code> occurrence of <code>&quot;b&quot;</code>. Therefore, <code>word</code> becomes equal to <code>&quot;aaaaaa&quot;</code> where each letter&#39;s frequency is now uniformly <code>6</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aabcaba\"\n0\n\"dabdcbdcdcd\"\n2\n\"aaabaaa\"\n2",
        "formTitle": "[3085]Minimum Deletions to Make String K-Special",
        "frequency": 0.0,
        "frontendQuestionId": "3085",
        "hints": [
            "Count the frequency of each letter.",
            "Suppose we select several characters as the final answer, and let <code>x</code> be the character with the smallest frequency in the answer. It can be shown that out of the selected characters, the optimal solution will never delete an occurrence of character <code>x</code> to obtain the answer.",
            "We will fix a character <code>c</code> and assume that it will be the character with the smallest frequency in the answer. Suppose its frequency is <code>x</code>.",
            "Then, for every other character, we will count the number of occurrences that will be deleted. Suppose that the current character has <code>y</code> occurrences. <ol> <li>If y < x, we need to delete all of them.</li> <li> if y > x + k, we should delete y - x - k of such character.</li> <li> Otherwise we don鈥檛 need to delete it.</li></ol>"
        ],
        "level": 2,
        "metaData": {
            "name": "minimumDeletions",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3360",
        "similarQuestions": [
            "[{\"title\": \"Minimum Deletions to Make Character Frequencies Unique\", \"titleSlug\": \"minimum-deletions-to-make-character-frequencies-unique\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5b57\\u7b26\\u9891\\u6b21\\u552f\\u4e00\\u7684\\u6700\\u5c0f\\u5220\\u9664\\u6b21\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"aabcaba\"\n0",
        "title": "Minimum Deletions to Make String K-Special",
        "titleSlug": "minimum-deletions-to-make-string-k-special",
        "infer_hints": [
            "Use a sliding window.",
            "Use a sorted array of frequencies.",
            "Can we use prefix sums to solve this problem?",
            "How can we check if a string is k-special?",
            "We can use the sliding window approach to find the minimum number of deletions.",
            "Use a sliding window to find the maximum frequency of a character in any substring.",
            "Can we use a sliding window approach?",
            "Use a sliding window to check all substrings with length <= k.",
            "For each character, calculate the number of deletions to make it k-special.",
            "We can iterate over each character and count its frequency.",
            "Use a sorted list to keep track of the frequency of each letter.",
            "How to check if a string is k-special?",
            "Use a prefix sum array to store the frequency of all characters till index i.",
            "We can use a sliding window to find all possible substrings.",
            "What if we try to delete each character one by one?",
            "We can use a sliding window to keep track of the minimum frequency of any character in the window.",
            "Use a prefix sum array to count the frequency of each character in the string.",
            "Sort the characters by their frequencies in increasing order.",
            "Do a sweep-line type of solution.",
            "What if you have two characters with the same frequency?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string findLatestTime(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String findLatestTime(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findLatestTime(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findLatestTime(self, s: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* findLatestTime(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string FindLatestTime(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar findLatestTime = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findLatestTime(s: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function findLatestTime($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findLatestTime(_ s: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findLatestTime(s: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String findLatestTime(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findLatestTime(s string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {String}\ndef find_latest_time(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findLatestTime(s: String): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_latest_time(s: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-latest-time s)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_latest_time(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfind_latest_time(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_latest_time(s :: String.t) :: String.t\n  def find_latest_time(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code> representing a 12-hour format time where some of the digits (possibly none) are replaced with a <code>&quot;?&quot;</code>.</p>\n\n<p>12-hour times are formatted as <code>&quot;HH:MM&quot;</code>, where <code>HH</code> is between <code>00</code> and <code>11</code>, and <code>MM</code> is between <code>00</code> and <code>59</code>. The earliest 12-hour time is <code>00:00</code>, and the latest is <code>11:59</code>.</p>\n\n<p>You have to replace <strong>all</strong> the <code>&quot;?&quot;</code> characters in <code>s</code> with digits such that the time we obtain by the resulting string is a <strong>valid</strong> 12-hour format time and is the <strong>latest</strong> possible.</p>\n\n<p>Return <em>the resulting string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;1?:?4&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;11:54&quot;</span></p>\n\n<p><strong>Explanation:</strong> The latest 12-hour format time we can achieve by replacing <code>&quot;?&quot;</code> characters is <code>&quot;11:54&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;0?:5?&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;09:59&quot;</span></p>\n\n<p><strong>Explanation:</strong> The latest 12-hour format time we can achieve by replacing <code>&quot;?&quot;</code> characters is <code>&quot;09:59&quot;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s.length == 5</code></li>\n\t<li><code>s[2]</code> is equal to the character <code>&quot;:&quot;</code>.</li>\n\t<li>All characters except <code>s[2]</code> are digits or <code>&quot;?&quot;</code> characters.</li>\n\t<li>The input is generated such that there is <strong>at least</strong> one time between <code>&quot;00:00&quot;</code> and <code>&quot;11:59&quot;</code> that you can obtain after replacing the <code>&quot;?&quot;</code> characters.</li>\n</ul>\n",
        "exampleTestcases": "\"1?:?4\"\n\"0?:5?\"",
        "formTitle": "[3114]Latest Time You Can Obtain After Replacing Characters",
        "frequency": 0.0,
        "frontendQuestionId": "3114",
        "hints": [
            "Try using a brute force approach.",
            "Iterate over all possible times that can be generated from the string and find the latest one."
        ],
        "level": 1,
        "metaData": {
            "name": "findLatestTime",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3361",
        "similarQuestions": [
            "[{\"title\": \"Latest Time by Replacing Hidden Digits\", \"titleSlug\": \"latest-time-by-replacing-hidden-digits\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u66ff\\u6362\\u9690\\u85cf\\u6570\\u5b57\\u5f97\\u5230\\u7684\\u6700\\u665a\\u65f6\\u95f4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"1?:?4\"",
        "title": "Latest Time You Can Obtain After Replacing Characters",
        "titleSlug": "latest-time-you-can-obtain-after-replacing-characters",
        "infer_hints": [
            "For the first 2 digits, we can just fill them with 2 (as long as it is less than 24).  Do the same for the next 2 digits.",
            "Try all possible times and keep the latest one.",
            "Try all possibilities.  How many?",
            "Can we do a greedy approach?",
            "The largest digit that can be on the hour position is 2, and the largest digit that can be on the minute position is 5.",
            "The question is essentially to find the latest possible time that is less than or equal to the given time.",
            "We have to try all possibilities for '?', but we can avoid some unnecessary calculations by considering the digit of the time.",
            "Consider all possibilities for HH and MM separately.",
            "If the first digit is 2, you can only choose the maximum 23 for the first digit and the maximum 59 for the second digit.",
            "For the first 2 digits, you can always use the number 2, because 23 is the maximum possible hour.",
            "For each digit of the hour, you can replace it with 0-2 or 3-9.",
            "If HH or MM is \"?\", then we can replace it with 0 or 9.",
            "Replace each of the '?' characters with '0' and '1'.",
            "If the first digit is greater than 2, we can always set it to 2. If the first digit is 2, we can set it to 2 only if the second digit is less than 4.",
            "If the first digit is not 2 and we have 2 digits in the format HH:MM, then the second digit must be less than 4, because we can't have a number greater than 1 in the 10th place.",
            "If the hour is 24, then the answer is \"23:59\".  Otherwise, the answer is \"11:59\".",
            "If HH is 24, then we have to use the largest possible value for MM.",
            "We can always replace the '?' with '9' if it's possible to obtain a smaller time. Can you handle the case when there are multiple '?'s?",
            "How many possible combinations are there for HH:MM?  How can you use backtracking to check them all?",
            "If the time is 24:00, we will have to return 23:59."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int medianOfUniquenessArray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int medianOfUniquenessArray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def medianOfUniquenessArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def medianOfUniquenessArray(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int medianOfUniquenessArray(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MedianOfUniquenessArray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar medianOfUniquenessArray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function medianOfUniquenessArray(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function medianOfUniquenessArray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func medianOfUniquenessArray(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun medianOfUniquenessArray(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int medianOfUniquenessArray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func medianOfUniquenessArray(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef median_of_uniqueness_array(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def medianOfUniquenessArray(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn median_of_uniqueness_array(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (median-of-uniqueness-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec median_of_uniqueness_array(Nums :: [integer()]) -> integer().\nmedian_of_uniqueness_array(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec median_of_uniqueness_array(nums :: [integer]) :: integer\n  def median_of_uniqueness_array(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code>. The <strong>uniqueness array</strong> of <code>nums</code> is the sorted array that contains the number of distinct elements of all the <span data-keyword=\"subarray-nonempty\">subarrays</span> of <code>nums</code>. In other words, it is a sorted array consisting of <code>distinct(nums[i..j])</code>, for all <code>0 &lt;= i &lt;= j &lt; nums.length</code>.</p>\n\n<p>Here, <code>distinct(nums[i..j])</code> denotes the number of distinct elements in the subarray that starts at index <code>i</code> and ends at index <code>j</code>.</p>\n\n<p>Return the <strong>median</strong> of the <strong>uniqueness array</strong> of <code>nums</code>.</p>\n\n<p><strong>Note</strong> that the <strong>median</strong> of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the <strong>smaller</strong> of the two values is taken.<!-- notionvc: 7e0f5178-4273-4a82-95ce-3395297921dc --></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The uniqueness array of <code>nums</code> is <code>[distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]), distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])]</code> which is equal to <code>[1, 1, 1, 2, 2, 3]</code>. The uniqueness array has a median of 1. Therefore, the answer is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,4,3,4,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The uniqueness array of <code>nums</code> is <code>[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]</code>. The uniqueness array has a median of 2. Therefore, the answer is 2.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,5,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The uniqueness array of <code>nums</code> is <code>[1, 1, 1, 1, 2, 2, 2, 3, 3, 3]</code>. The uniqueness array has a median of 2. Therefore, the answer is 2.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n[3,4,3,4,5]\n[4,3,5,4]",
        "formTitle": "[3134]Find the Median of the Uniqueness Array",
        "frequency": 0.0,
        "frontendQuestionId": "3134",
        "hints": [
            "Binary search over the answer.",
            "For a given <code>x</code>, you need to check if <code>x</code> is the median, to the left of the median, or to the right of the median. You can do that by counting the number of sub-arrays <code>nums[i鈥]</code> such that <code>distinct(num[i鈥]) <= x</code>.",
            "Use the sliding window to solve the counting problem in the hint above."
        ],
        "level": 3,
        "metaData": {
            "name": "medianOfUniquenessArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3362",
        "similarQuestions": [
            "[{\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u627e\\u51fa\\u7b2c K \\u5c0f\\u7684\\u6570\\u5bf9\\u8ddd\\u79bb\", \"isPaidOnly\": false}, {\"title\": \"Total Appeal of A String\", \"titleSlug\": \"total-appeal-of-a-string\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5b57\\u7b26\\u4e32\\u7684\\u603b\\u5f15\\u529b\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,2,3]",
        "title": "Find the Median of the Uniqueness Array",
        "titleSlug": "find-the-median-of-the-uniqueness-array",
        "infer_hints": [
            "Use a data structure to count the number of distinct elements in each subarray.",
            "Can you solve this problem in O(n) time complexity?",
            "How many subarrays have at most one unique number?",
            "If you know how to find the median of an array, how can you find the median of the uniqueness array?",
            "How many subarrays contain a number x?",
            "Sort the array and find the median.",
            "Use the concept of Prefix Sums and Binary Search.",
            "Try to count the number of distinct elements in the subarray.",
            "If you're familiar with a problem that involves sorting, you can solve this one by sorting the uniqueness array.",
            "Use a sliding window and a balanced binary search tree (BST) to keep track of the distinct elements in each window.",
            "Think about how you can calculate the uniqueness array for a subarray.",
            "How can you compute the number of distinct elements in a subarray?",
            "For each subarray, we can count the number of distinct elements.",
            "Sort the uniqueness array.",
            "If you want to find the median, you can use the concept of a \"window\" of size k and maintain the count of distinct elements in that window.",
            "What if we have a function f(i, j) which counts the number of distinct elements in the subarray nums[i..j]?",
            "Use a hash table or a sorted array to store the distinct elements in the subarray.",
            "How can we count the number of distinct elements in all subarrays?",
            "Think about how you would calculate the uniqueness array of the first few elements of nums.",
            "Do not use any extra space."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<long long> mostFrequentIDs(vector<int>& nums, vector<int>& freq) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long[] mostFrequentIDs(int[] nums, int[] freq) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def mostFrequentIDs(self, nums, freq):\n        \"\"\"\n        :type nums: List[int]\n        :type freq: List[int]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def mostFrequentIDs(self, nums: List[int], freq: List[int]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* mostFrequentIDs(int* nums, int numsSize, int* freq, int freqSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long[] MostFrequentIDs(int[] nums, int[] freq) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} freq\n * @return {number[]}\n */\nvar mostFrequentIDs = function(nums, freq) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function mostFrequentIDs(nums: number[], freq: number[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $freq\n     * @return Integer[]\n     */\n    function mostFrequentIDs($nums, $freq) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func mostFrequentIDs(_ nums: [Int], _ freq: [Int]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun mostFrequentIDs(nums: IntArray, freq: IntArray): LongArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> mostFrequentIDs(List<int> nums, List<int> freq) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func mostFrequentIDs(nums []int, freq []int) []int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} freq\n# @return {Integer[]}\ndef most_frequent_i_ds(nums, freq)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def mostFrequentIDs(nums: Array[Int], freq: Array[Int]): Array[Long] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn most_frequent_i_ds(nums: Vec<i32>, freq: Vec<i32>) -> Vec<i64> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (most-frequent-i-ds nums freq)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec most_frequent_i_ds(Nums :: [integer()], Freq :: [integer()]) -> [integer()].\nmost_frequent_i_ds(Nums, Freq) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec most_frequent_i_ds(nums :: [integer], freq :: [integer]) :: [integer]\n  def most_frequent_i_ds(nums, freq) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, <code>nums</code> and <code>freq</code>, of equal length <code>n</code>. Each element in <code>nums</code> represents an ID, and the corresponding element in <code>freq</code> indicates how many times that ID should be added to or removed from the collection at each step.</p>\n\n<ul>\n\t<li><strong>Addition of IDs:</strong> If <code>freq[i]</code> is positive, it means <code>freq[i]</code> IDs with the value <code>nums[i]</code> are added to the collection at step <code>i</code>.</li>\n\t<li><strong>Removal of IDs:</strong> If <code>freq[i]</code> is negative, it means <code>-freq[i]</code> IDs with the value <code>nums[i]</code> are removed from the collection at step <code>i</code>.</li>\n</ul>\n\n<p>Return an array <code>ans</code> of length <code>n</code>, where <code>ans[i]</code> represents the <strong>count</strong> of the <em>most frequent ID</em> in the collection after the <code>i<sup>th</sup></code>&nbsp;step. If the collection is empty at any step, <code>ans[i]</code> should be 0 for that step.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,2,1], freq = [3,2,-3,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,3,2,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After step 0, we have 3 IDs with the value of 2. So <code>ans[0] = 3</code>.<br />\nAfter step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So <code>ans[1] = 3</code>.<br />\nAfter step 2, we have 2 IDs with the value of 3. So <code>ans[2] = 2</code>.<br />\nAfter step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So <code>ans[3] = 2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [5,5,3], freq = [2,-2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,0,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After step 0, we have 2 IDs with the value of 5. So <code>ans[0] = 2</code>.<br />\nAfter step 1, there are no IDs. So <code>ans[1] = 0</code>.<br />\nAfter step 2, we have 1 ID with the value of 3. So <code>ans[2] = 1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length == freq.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= freq[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>freq[i] != 0</code></li>\n\t<li>The input is generated<!-- notionvc: a136b55a-f319-4fa6-9247-11be9f3b1db8 --> such that the occurrences of an ID will not be negative in any step.</li>\n</ul>\n",
        "exampleTestcases": "[2,3,2,1]\n[3,2,-3,1]\n[5,5,3]\n[2,-2,1]",
        "formTitle": "[3092]Most Frequent IDs",
        "frequency": 0.0,
        "frontendQuestionId": "3092",
        "hints": [
            "Use an ordered set for maintaining the occurrences of each ID.",
            "After step <code>i</code> find the occurrences of <code>nums[i]</code>.",
            "Change the occurrences of <code>nums[i]</code> in the ordered set."
        ],
        "level": 2,
        "metaData": {
            "name": "mostFrequentIDs",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "freq",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3363",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "[2,3,2,1]\n[3,2,-3,1]",
        "title": "Most Frequent IDs",
        "titleSlug": "most-frequent-ids",
        "infer_hints": [
            "What data structure can be used to track the count of IDs at each step?",
            "Try to use a data structure that can help you to keep track of the most frequent IDs.",
            "Can we maintain a sorted list of IDs with their counts?",
            "What if you use a priority queue to store the current most frequent IDs at each step?",
            "You need to maintain the frequency of each ID.  This can be done by using a hash map.",
            "For each ID, maintain its frequency.",
            "Use a priority queue to store the IDs with their current count.",
            "Keep track of the current count of each ID and its frequency in a data structure that allows you to efficiently remove an ID from the count and get the count of the most frequent ID.",
            "We can use a priority queue and a hashmap to solve this problem.",
            "If the current step has more occurrences of a certain ID, we should update the answer.",
            "Try to solve it using a heap.",
            "How to maintain the most frequent IDs at each step?",
            "Use a priority queue to track the most frequent IDs.",
            "If we store the count of each ID in a hash map, we can use it to determine the most frequent ID.",
            "If the IDs are in the heap, we can always access the most frequent ID.",
            "Use a priority queue to keep track of the current maximum count of an ID.",
            "For each step, we will add the IDs to the count and keep track of the maximum count.",
            "We can maintain a priority queue to keep track of the most frequent IDs at each step.",
            "Use a priority queue to keep track of the most frequent IDs at each step.",
            "You can use a map to count the frequency of IDs."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumValueSum(vector<int>& nums, vector<int>& andValues) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumValueSum(int[] nums, int[] andValues) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumValueSum(self, nums, andValues):\n        \"\"\"\n        :type nums: List[int]\n        :type andValues: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumValueSum(self, nums: List[int], andValues: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumValueSum(int* nums, int numsSize, int* andValues, int andValuesSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumValueSum(int[] nums, int[] andValues) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} andValues\n * @return {number}\n */\nvar minimumValueSum = function(nums, andValues) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumValueSum(nums: number[], andValues: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $andValues\n     * @return Integer\n     */\n    function minimumValueSum($nums, $andValues) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumValueSum(_ nums: [Int], _ andValues: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumValueSum(nums: IntArray, andValues: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumValueSum(List<int> nums, List<int> andValues) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumValueSum(nums []int, andValues []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} and_values\n# @return {Integer}\ndef minimum_value_sum(nums, and_values)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumValueSum(nums: Array[Int], andValues: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_value_sum(nums: Vec<i32>, and_values: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-value-sum nums andValues)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_value_sum(Nums :: [integer()], AndValues :: [integer()]) -> integer().\nminimum_value_sum(Nums, AndValues) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_value_sum(nums :: [integer], and_values :: [integer]) :: integer\n  def minimum_value_sum(nums, and_values) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two arrays <code>nums</code> and <code>andValues</code> of length <code>n</code> and <code>m</code> respectively.</p>\n\n<p>The <strong>value</strong> of an array is equal to the <strong>last</strong> element of that array.</p>\n\n<p>You have to divide <code>nums</code> into <code>m</code> <strong>disjoint contiguous</strong> <span data-keyword=\"subarray-nonempty\">subarrays</span> such that for the <code>i<sup>th</sup></code> subarray <code>[l<sub>i</sub>, r<sub>i</sub>]</code>, the bitwise <code>AND</code> of the subarray elements is equal to <code>andValues[i]</code>, in other words, <code>nums[l<sub>i</sub>] &amp; nums[l<sub>i</sub> + 1] &amp; ... &amp; nums[r<sub>i</sub>] == andValues[i]</code> for all <code>1 &lt;= i &lt;= m</code>, where <code>&amp;</code> represents the bitwise <code>AND</code> operator.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible sum of the <strong>values</strong> of the </em><code>m</code><em> subarrays </em><code>nums</code><em> is divided into</em>. <em>If it is not possible to divide </em><code>nums</code><em> into </em><code>m</code><em> subarrays satisfying these conditions, return</em> <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,3,3,2], andValues = [0,3,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible way to divide <code>nums</code> is:</p>\n\n<ol>\n\t<li><code>[1,4]</code> as <code>1 &amp; 4 == 0</code>.</li>\n\t<li><code>[3]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n\t<li><code>[3]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n\t<li><code>[2]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n</ol>\n\n<p>The sum of the values for these subarrays is <code>4 + 3 + 3 + 2 = 12</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,5,7,7,7,5], andValues = [0,7,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">17</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are three ways to divide <code>nums</code>:</p>\n\n<ol>\n\t<li><code>[[2,3,5],[7,7,7],[5]]</code> with the sum of the values <code>5 + 7 + 5 == 17</code>.</li>\n\t<li><code>[[2,3,5,7],[7,7],[5]]</code> with the sum of the values <code>7 + 7 + 5 == 19</code>.</li>\n\t<li><code>[[2,3,5,7,7],[7],[5]]</code> with the sum of the values <code>7 + 7 + 5 == 19</code>.</li>\n</ol>\n\n<p>The minimum possible sum of the values is <code>17</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4], andValues = [2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The bitwise <code>AND</code> of the entire array <code>nums</code> is <code>0</code>. As there is no possible way to divide <code>nums</code> into a single subarray to have the bitwise <code>AND</code> of elements <code>2</code>, return <code>-1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m == andValues.length &lt;= min(n, 10)</code></li>\n\t<li><code>1 &lt;= nums[i] &lt; 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= andValues[j] &lt; 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,4,3,3,2]\n[0,3,3,2]\n[2,3,5,7,7,7,5]\n[0,7,5]\n[1,2,3,4]\n[2]",
        "formTitle": "[3117]Minimum Sum of Values by Dividing Array",
        "frequency": 0.0,
        "frontendQuestionId": "3117",
        "hints": [
            "Let <code>dp[i][j]</code> be the optimal answer to split  <code>nums[0..(i - 1)]</code> into the first <code>j</code> andValues.",
            "<code>dp[i][j] = min(dp[(i - z)][j - 1]) + nums[i - 1]</code> over all <code>x <= z <= y</code> and <code>dp[0][0] = 0</code>, where <code>x</code> and <code>y</code> are the longest and shortest subarrays ending with <code>nums[i - 1]</code> and the bitwise-and of all the values in it is <code>andValues[j - 1]</code>.",
            "The answer is <code>dp[n][m]</code>.",
            "To calculate <code>x</code> and <code>y</code>, we can use binary search (or sliding window). Note that the more values we have, the smaller the <code>AND</code> value is.",
            "To calculate the result, we need to support RMQ (range minimum query). Segment tree is one way to do it in <code>O(log(n))</code>. But we can use Monotonic Queue since the ranges are indeed 鈥渟liding to right鈥� which can be reduced to the classical minimum value in sliding window problem, for a <code>O(n)</code> solution."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumValueSum",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "andValues",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3364",
        "similarQuestions": [
            "[{\"title\": \"Minimum Cost to Split an Array\", \"titleSlug\": \"minimum-cost-to-split-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u62c6\\u5206\\u6570\\u7ec4\\u7684\\u6700\\u5c0f\\u4ee3\\u4ef7\", \"isPaidOnly\": false}, {\"title\": \"Split With Minimum Sum\", \"titleSlug\": \"split-with-minimum-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6700\\u5c0f\\u548c\\u5206\\u5272\", \"isPaidOnly\": false}, {\"title\": \"Find Subarray With Bitwise OR Closest to K\", \"titleSlug\": \"find-subarray-with-bitwise-or-closest-to-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u627e\\u5230\\u6309\\u4f4d\\u6216\\u6700\\u63a5\\u8fd1 K \\u7684\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,4,3,3,2]\n[0,3,3,2]",
        "title": "Minimum Sum of Values by Dividing Array",
        "titleSlug": "minimum-sum-of-values-by-dividing-array",
        "infer_hints": [
            "Can you solve this problem with dynamic programming?",
            "If it's not possible to divide the array into m disjoint subarrays, return -1.",
            "Create a dynamic programming array dp of size (m+1)x(n+1)x(105+1).",
            "Think about the DP state as dp[i][j], the minimum possible sum of values for the first i elements where the last subarray is j.",
            "How many ways can you divide the array?  How many ways can you divide the array if the last element of the array is x?",
            "The minimum sum is obtained by dividing the array in such a way that the bitwise AND of all elements in each subarray is equal to the corresponding value in andValues.",
            "For each AND value, find the subarray that gives minimum sum.",
            "Try to divide the array into smaller subarrays.",
            "You can use dynamic programming.",
            "How many ways are there to divide the array into subarrays?",
            "Try to divide the array into disjoint intervals, each interval will have a value equal to the last element of the interval.",
            "What is the maximum number of subarrays we can divide the array into?",
            "Can we use Dynamic Programming (DP) to solve this problem?",
            "Use a prefix sum array and a binary indexed tree.",
            "You can use dynamic programming.  Try to find out the minimum sum for each prefix of the array and then find the minimum of all the sums.",
            "The problem can be solved using dynamic programming and bit manipulation.",
            "We can use dynamic programming to solve this problem.",
            "Can you think of a greedy approach?",
            "What if we use a priority queue for each of the 31 bit?",
            "The bitwise AND operation on all numbers in a subarray can be represented as a single number."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int sumOfEncryptedInt(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int sumOfEncryptedInt(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def sumOfEncryptedInt(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def sumOfEncryptedInt(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int sumOfEncryptedInt(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int SumOfEncryptedInt(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfEncryptedInt = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function sumOfEncryptedInt(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfEncryptedInt($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func sumOfEncryptedInt(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun sumOfEncryptedInt(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int sumOfEncryptedInt(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func sumOfEncryptedInt(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_encrypted_int(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def sumOfEncryptedInt(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn sum_of_encrypted_int(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (sum-of-encrypted-int nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec sum_of_encrypted_int(Nums :: [integer()]) -> integer().\nsum_of_encrypted_int(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec sum_of_encrypted_int(nums :: [integer]) :: integer\n  def sum_of_encrypted_int(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> containing <strong>positive</strong> integers. We define a function <code>encrypt</code> such that <code>encrypt(x)</code> replaces <strong>every</strong> digit in <code>x</code> with the <strong>largest</strong> digit in <code>x</code>. For example, <code>encrypt(523) = 555</code> and <code>encrypt(213) = 333</code>.</p>\n\n<p>Return <em>the <strong>sum </strong>of encrypted elements</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,2,3]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">6</span></p>\n\n<p><strong>Explanation:</strong> The encrypted elements are&nbsp;<code>[1,2,3]</code>. The sum of encrypted elements is <code>1 + 2 + 3 == 6</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [10,21,31]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">66</span></p>\n\n<p><strong>Explanation:</strong> The encrypted elements are <code>[11,22,33]</code>. The sum of encrypted elements is <code>11 + 22 + 33 == 66</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n[10,21,31]",
        "formTitle": "[3079]Find the Sum of Encrypted Integers",
        "frequency": 0.0,
        "frontendQuestionId": "3079",
        "hints": [
            "Encrypted numbers are of the form <code>11鈥�1 * maxDigit</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "sumOfEncryptedInt",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3367",
        "similarQuestions": [
            "[{\"title\": \"Encrypt and Decrypt Strings\", \"titleSlug\": \"encrypt-and-decrypt-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u52a0\\u5bc6\\u89e3\\u5bc6\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,2,3]",
        "title": "Find the Sum of Encrypted Integers",
        "titleSlug": "find-the-sum-of-encrypted-integers",
        "infer_hints": [
            "Try to solve this problem in a recursive manner.",
            "Use recursion to find the maximum digit in the number.",
            "Find the maximum digit in the given array.",
            "Use recursion to encrypt each number.",
            "The encryption is based on replacing every digit of a number with the largest digit.",
            "The sum of encrypted integers can be found by recursively calling the <code>encrypt</code> function on the sum of each pair of digits.",
            "Find the largest digit in the number.",
            "Find the maximum digit in the number.",
            "How can we find the largest digit in a number?",
            "For each number, how many digits are there?",
            "Find the largest digit in the number.",
            "How to find the maximum digit in an integer?",
            "We can use dynamic programming to solve this problem.",
            "Create a new integer array where the ith element is the maximum digit in the ith integer of the input array.",
            "How to convert the integer into string?",
            "Can you encrypt a number by replacing every digit in it with the maximum digit?",
            "Think about how to encrypt an integer.",
            "For each number, convert it to a string and find the maximum digit.",
            "If you have an integer n, what is the maximum digit you can replace with the largest digit?",
            "Can we convert the integers to strings and perform operations on them?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int sumOfTheDigitsOfHarshadNumber(int x) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int sumOfTheDigitsOfHarshadNumber(int x) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def sumOfTheDigitsOfHarshadNumber(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def sumOfTheDigitsOfHarshadNumber(self, x: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int sumOfTheDigitsOfHarshadNumber(int x) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int SumOfTheDigitsOfHarshadNumber(int x) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar sumOfTheDigitsOfHarshadNumber = function(x) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function sumOfTheDigitsOfHarshadNumber(x: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function sumOfTheDigitsOfHarshadNumber($x) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func sumOfTheDigitsOfHarshadNumber(_ x: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun sumOfTheDigitsOfHarshadNumber(x: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int sumOfTheDigitsOfHarshadNumber(int x) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func sumOfTheDigitsOfHarshadNumber(x int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} x\n# @return {Integer}\ndef sum_of_the_digits_of_harshad_number(x)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def sumOfTheDigitsOfHarshadNumber(x: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn sum_of_the_digits_of_harshad_number(x: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (sum-of-the-digits-of-harshad-number x)\n  (-> exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec sum_of_the_digits_of_harshad_number(X :: integer()) -> integer().\nsum_of_the_digits_of_harshad_number(X) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec sum_of_the_digits_of_harshad_number(x :: integer) :: integer\n  def sum_of_the_digits_of_harshad_number(x) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>An integer divisible by the <strong>sum</strong> of its digits is said to be a <strong>Harshad</strong> number. You are given an integer <code>x</code>. Return<em> the sum of the digits </em>of<em> </em><code>x</code><em> </em>if<em> </em><code>x</code><em> </em>is a <strong>Harshad</strong> number, otherwise, return<em> </em><code>-1</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">x = 18</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">9</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The sum of digits of <code>x</code> is <code>9</code>. <code>18</code> is divisible by <code>9</code>. So <code>18</code> is a Harshad number and the answer is <code>9</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">x = 23</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The sum of digits of <code>x</code> is <code>5</code>. <code>23</code> is not divisible by <code>5</code>. So <code>23</code> is not a Harshad number and the answer is <code>-1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "18\n23",
        "formTitle": "[3099]Harshad Number",
        "frequency": 0.0,
        "frontendQuestionId": "3099",
        "hints": [
            "Use a while loop and divide <code>x</code> to <code>10</code> to find the sum of the digits of <code>x</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "sumOfTheDigitsOfHarshadNumber",
            "params": [
                {
                    "name": "x",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3371",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "18",
        "title": "Harshad Number",
        "titleSlug": "harshad-number",
        "infer_hints": [
            "A number is called a Harshad number if it is divisible by the sum of its digits. What do you notice about the numbers which are divisible by the sum of their digits?",
            "What happens when you do modulo of a number by 9?",
            "To check whether a number is a harshad number, we have to divide the number by the sum of its digits.",
            "A number is said to be a Harshad number if it is divisible by the sum of its digits.",
            "Convert the number to string, then iterate over each digit.",
            "How can we check if a number is a Harshad number?",
            "If x modulo the sum of digits of x equals 0, then x is a Harshad number.",
            "Find the sum of the digits of the number.",
            "To check whether a number is a Harshad number, divide the number by the sum of its digits.",
            "How to check if a number is divisible by the sum of its digits?",
            "Find the sum of the digits of the number.",
            "Find the sum of the digits of the number.",
            "Calculate the sum of digits of the given number.",
            "For every number, we need to compute its digit sum and check if the number is divisible by the digit sum.",
            "What is the smallest Harshad number?<p>If <code>x</code> is a Harshad number, then <code>x</code> is divisible by the sum of its digits.",
            "Use a loop to get each digit of the number.",
            "Take the modulo of the number by 10 to get the last digit.",
            "Harshad numbers are those numbers which are divisible by the sum of their digits.",
            "Take the number of the problem and the remainder of the number when divided by 10, this is the last digit.",
            "To determine whether a number is a Harshad number, we need to know the sum of its digits."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int longestMonotonicSubarray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int longestMonotonicSubarray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def longestMonotonicSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def longestMonotonicSubarray(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int longestMonotonicSubarray(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int LongestMonotonicSubarray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestMonotonicSubarray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function longestMonotonicSubarray(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestMonotonicSubarray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func longestMonotonicSubarray(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun longestMonotonicSubarray(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int longestMonotonicSubarray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func longestMonotonicSubarray(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef longest_monotonic_subarray(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def longestMonotonicSubarray(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn longest_monotonic_subarray(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (longest-monotonic-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec longest_monotonic_subarray(Nums :: [integer()]) -> integer().\nlongest_monotonic_subarray(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec longest_monotonic_subarray(nums :: [integer]) :: integer\n  def longest_monotonic_subarray(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of integers <code>nums</code>. Return <em>the length of the <strong>longest</strong> <span data-keyword=\"subarray-nonempty\">subarray</span> of </em><code>nums</code><em> which is either <strong><span data-keyword=\"strictly-increasing-array\">strictly increasing</span></strong> or <strong><span data-keyword=\"strictly-decreasing-array\">strictly decreasing</span></strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,3,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strictly increasing subarrays of <code>nums</code> are <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>, <code>[4]</code>, and <code>[1,4]</code>.</p>\n\n<p>The strictly decreasing subarrays of <code>nums</code> are <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>, <code>[4]</code>, <code>[3,2]</code>, and <code>[4,3]</code>.</p>\n\n<p>Hence, we return <code>2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,3,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strictly increasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and <code>[3]</code>.</p>\n\n<p>The strictly decreasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and <code>[3]</code>.</p>\n\n<p>Hence, we return <code>1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strictly increasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[2]</code>, and <code>[1]</code>.</p>\n\n<p>The strictly decreasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[2]</code>, <code>[1]</code>, <code>[3,2]</code>, <code>[2,1]</code>, and <code>[3,2,1]</code>.</p>\n\n<p>Hence, we return <code>3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
        "exampleTestcases": "[1,4,3,3,2]\n[3,3,3,3]\n[3,2,1]",
        "formTitle": "[3105]Longest Strictly Increasing or Strictly Decreasing Subarray",
        "frequency": 0.0,
        "frontendQuestionId": "3105",
        "hints": [],
        "level": 1,
        "metaData": {
            "name": "longestMonotonicSubarray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3372",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,4,3,3,2]",
        "title": "Longest Strictly Increasing or Strictly Decreasing Subarray",
        "titleSlug": "longest-strictly-increasing-or-strictly-decreasing-subarray",
        "infer_hints": [
            "How can we process each element to get the length of the longest strictly increasing subarray that ends at that element?",
            "Use dynamic programming.  How can you maintain the longest subarray ending at index i?",
            "Use two pointers to keep track of the length of the longest strictly increasing and strictly decreasing subarray.",
            "Find the longest increasing and decreasing subarray.",
            "You can use dynamic programming to solve this problem.  We can keep track of the length of the longest strictly increasing and strictly decreasing subarray ending at each index.",
            "For each index, how can you compute the length of the longest subarray ending at that index?",
            "We can use Dynamic Programming to solve this problem.  We can use two variables, one for storing the length of the longest strictly increasing subarray ending at the current position, and another for storing the length of the longest strictly decreasing subarray ending at the current position.",
            "The problem is a variant of the Longest Increasing Subsequence problem.",
            "How to find the longest strictly increasing subarray?",
            "Use dynamic programming.  You can maintain two arrays dp1 and dp2 where dp1[i] is the length of the longest subarray ending at i that is strictly increasing and dp2[i] is the length of the longest subarray ending at i that is strictly decreasing.",
            "We can find the length of the longest strictly increasing subarray in O(n) time using dynamic programming.",
            "How can we compute the length of the longest strictly increasing or strictly decreasing subarray ending at each position?",
            "We need to find the length of the longest strictly increasing or strictly decreasing subarray.",
            "For each element, find the length of the longest strictly increasing and strictly decreasing subarray that ends with this element.",
            "Can you use dynamic programming to solve this problem?",
            "We can solve this problem using dynamic programming.  We will solve it in two parts: strictly increasing subarray and strictly decreasing subarray.",
            "If we have a subarray of length <code>x</code> that is strictly increasing, and we have a subarray of length <code>y</code> that is strictly decreasing, what can we say about <code>x + y + 1?",
            "Use dynamic programming.  For each subarray ending at position i, remember the length of the longest subarray ending at position j, where j < i and nums[j] < nums[i].",
            "You can use a dynamic programming approach to solve this problem.  We need to find the longest subarray that ends at the current position.",
            "Think of a dynamic programming solution.  How can you compute dp[i] from previous dp values?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumPrimeDifference(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumPrimeDifference(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumPrimeDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumPrimeDifference(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumPrimeDifference(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumPrimeDifference(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumPrimeDifference = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumPrimeDifference(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumPrimeDifference($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumPrimeDifference(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumPrimeDifference(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumPrimeDifference(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumPrimeDifference(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_prime_difference(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumPrimeDifference(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_prime_difference(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-prime-difference nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_prime_difference(Nums :: [integer()]) -> integer().\nmaximum_prime_difference(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_prime_difference(nums :: [integer]) :: integer\n  def maximum_prime_difference(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code>.</p>\n\n<p>Return an integer that is the <strong>maximum</strong> distance between the <strong>indices</strong> of two (not necessarily different) prime numbers in <code>nums</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,2,9,5,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong> <code>nums[1]</code>, <code>nums[3]</code>, and <code>nums[4]</code> are prime. So the answer is <code>|4 - 1| = 3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,8,2,8]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong> <code>nums[2]</code> is prime. Because there is just one prime number, the answer is <code>|2 - 2| = 0</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li>The input is generated such that the number of prime numbers in the <code>nums</code> is at least one.</li>\n</ul>\n",
        "exampleTestcases": "[4,2,9,5,3]\n[4,8,2,8]",
        "formTitle": "[3115]Maximum Prime Difference",
        "frequency": 0.0,
        "frontendQuestionId": "3115",
        "hints": [
            "Find all prime numbers in the <code>nums</code>.",
            "Find the first and the last prime number in the <code>nums</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumPrimeDifference",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3373",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[4,2,9,5,3]",
        "title": "Maximum Prime Difference",
        "titleSlug": "maximum-prime-difference",
        "infer_hints": [
            "What if we maintain the minimum and maximum prime index so far?",
            "Can we maintain a prefix sum for the prime numbers?",
            "How to check if a number is prime?",
            "Find the minimum and maximum prime numbers in the array.",
            "Use a boolean array to store the primality of each number.",
            "You can use the sieve of Eratosthenes to generate all primes up to 100.",
            "Generate all prime numbers up to 100.",
            "Can you find the minimum prime and maximum prime?",
            "Do you need to store all prime numbers?",
            "Use a Sieve of Eratosthenes to check if a number is prime.",
            "Can you use Sieve of Eratosthenes to solve this?",
            "What if you have a list of prime numbers?",
            "Can you use a sieve of Eratosthenes to find primes in the array?",
            "What if we only consider prime numbers in the array?",
            "What if you first compute the smallest prime index and the largest prime index in the array?",
            "For each number, check if it is prime and if it is, store its index.",
            "Generate all prime numbers in nums and then check the maximum difference between any two prime numbers.",
            "Use a Sieve of Eratosthenes to check whether each number is prime or not.",
            "Can you optimize the solution for the largest prime difference?",
            "You can use Sieve of Eratosthenes to get all primes up to 100."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long countAlternatingSubarrays(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long countAlternatingSubarrays(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countAlternatingSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countAlternatingSubarrays(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long countAlternatingSubarrays(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long CountAlternatingSubarrays(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countAlternatingSubarrays = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countAlternatingSubarrays(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countAlternatingSubarrays($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countAlternatingSubarrays(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countAlternatingSubarrays(nums: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countAlternatingSubarrays(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countAlternatingSubarrays(nums []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_alternating_subarrays(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countAlternatingSubarrays(nums: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_alternating_subarrays(nums: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-alternating-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_alternating_subarrays(Nums :: [integer()]) -> integer().\ncount_alternating_subarrays(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_alternating_subarrays(nums :: [integer]) :: integer\n  def count_alternating_subarrays(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <span data-keyword=\"binary-array\">binary array</span> <code>nums</code>.</p>\n\n<p>We call a <span data-keyword=\"subarray-nonempty\">subarray</span> <strong>alternating</strong> if <strong>no</strong> two <strong>adjacent</strong> elements in the subarray have the <strong>same</strong> value.</p>\n\n<p>Return <em>the number of alternating subarrays in </em><code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following subarrays are alternating: <code>[0]</code>, <code>[1]</code>, <code>[1]</code>, <code>[1]</code>, and <code>[0,1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,0,1,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Every subarray of the array is alternating. There are 10 possible subarrays that we can choose.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "exampleTestcases": "[0,1,1,1]\n[1,0,1,0]",
        "formTitle": "[3101]Count Alternating Subarrays",
        "frequency": 0.0,
        "frontendQuestionId": "3101",
        "hints": [
            "Try using dynamic programming.",
            "Let <code>dp[i]</code> be the number of alternating subarrays ending at index <code>i</code>.",
            "The final answer is the sum of <code>dp[i]</code> over all  indices <code>i</code> from <code>0</code> to <code>n - 1</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "countAlternatingSubarrays",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3374",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[0,1,1,1]",
        "title": "Count Alternating Subarrays",
        "titleSlug": "count-alternating-subarrays",
        "infer_hints": [
            "Use a dynamic programming approach.  The state of dp[i][j] can be computed from the state of dp[i-1][j] and dp[i-1][j^1].",
            "For every index, you need to count the number of alternating subarrays ending at that index.",
            "Use prefix sums to store the number of alternating subarrays.",
            "Use a prefix sum to count the number of alternating subarrays.",
            "If you have two alternating subarrays A and B, how can you add a third alternating subarray C to A and B to get a new alternating subarray?",
            "We can iterate through the array and keep track of the number of alternating subarrays ending at the current position.",
            "The answer is just the number of valid prefixes.",
            "The length of the subarray must be at least 2.",
            "Count the number of subarrays with even number of 1s.",
            "Use dynamic programming.",
            "If we iterate over the array, and for each position, we count the number of alternating subarrays that end at this position, we can solve the problem.",
            "We can count the number of alternating subarrays with the same first and last element as the current one.",
            "Use dynamic programming.",
            "Use a prefix sum array.",
            "Use a dynamic programming approach.  If we can find the number of alternating subarrays ending at each index, we can find the number of alternating subarrays ending at the next index.",
            "Can you calculate the number of alternating subarrays that start at a given index?",
            "Use prefix sums and a hashmap to store the frequency of the prefix sums.",
            "How many subarrays of length N exist in an array of length L?",
            "Count the number of subarrays that start with a 0 and end with a 1 and the other way around.",
            "For every position, we can count the number of alternating subarrays that end at this position."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long findKthSmallest(vector<int>& coins, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long findKthSmallest(int[] coins, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findKthSmallest(self, coins, k):\n        \"\"\"\n        :type coins: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findKthSmallest(self, coins: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long findKthSmallest(int* coins, int coinsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long FindKthSmallest(int[] coins, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} coins\n * @param {number} k\n * @return {number}\n */\nvar findKthSmallest = function(coins, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findKthSmallest(coins: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthSmallest($coins, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findKthSmallest(_ coins: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findKthSmallest(coins: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int findKthSmallest(List<int> coins, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findKthSmallest(coins []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} coins\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_smallest(coins, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findKthSmallest(coins: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_kth_smallest(coins: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-kth-smallest coins k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_kth_smallest(Coins :: [integer()], K :: integer()) -> integer().\nfind_kth_smallest(Coins, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_kth_smallest(coins :: [integer], k :: integer) :: integer\n  def find_kth_smallest(coins, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>k</code>.</p>\n\n<p>You have an infinite number of coins of each denomination. However, you are <strong>not allowed</strong> to combine coins of different denominations.</p>\n\n<p>Return the <code>k<sup>th</sup></code> <strong>smallest</strong> amount that can be made using these coins.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">coins = [3,6,9], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 9</span></p>\n\n<p><strong>Explanation:</strong> The given coins can make the following amounts:<br />\nCoin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.<br />\nCoin 6 produces multiples of 6: 6, 12, 18, 24, etc.<br />\nCoin 9 produces multiples of 9: 9, 18, 27, 36, etc.<br />\nAll of the coins combined produce: 3, 6, <u><strong>9</strong></u>, 12, 15, etc.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> coins = [5,2], k = 7</span></p>\n\n<p><strong>Output:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 12 </span></p>\n\n<p><strong>Explanation:</strong> The given coins can make the following amounts:<br />\nCoin 5 produces multiples of 5: 5, 10, 15, 20, etc.<br />\nCoin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.<br />\nAll of the coins combined produce: 2, 4, 5, 6, 8, 10, <u><strong>12</strong></u>, 14, 15, etc.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= coins.length &lt;= 15</code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= 25</code></li>\n\t<li><code>1 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>\n\t<li><code>coins</code> contains pairwise distinct integers.</li>\n</ul>\n",
        "exampleTestcases": "[3,6,9]\n3\n[5,2]\n7",
        "formTitle": "[3116]Kth Smallest Amount With Single Denomination Combination",
        "frequency": 0.0,
        "frontendQuestionId": "3116",
        "hints": [
            "Binary search the answer <code>x</code>.",
            "Use the inclusion-exclusion principle to count the number of distinct amounts that can be made up to <code>x</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "findKthSmallest",
            "params": [
                {
                    "name": "coins",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3375",
        "similarQuestions": [
            "[{\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u4e58\\u6cd5\\u8868\\u4e2d\\u7b2ck\\u5c0f\\u7684\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[3,6,9]\n3",
        "title": "Kth Smallest Amount With Single Denomination Combination",
        "titleSlug": "kth-smallest-amount-with-single-denomination-combination",
        "infer_hints": [
            "If the number of coins is 15, how many possible amounts are there?",
            "Use a heap to get the next smallest amount.",
            "Do binary search on the answer.",
            "Do a BFS.",
            "Sort all possible amounts that can be made with the coins.",
            "How many combinations are there of the coins that add up to 1?",
            "The result is between 1 and max(coins) * k.  Try to binary search between these two.",
            "If we have the coins [a, b], we can generate the coins [2a, 2b], [3a, 3b],..., [k/a, k/b].  Ordered by the value of a coin, the new coins are [2, 2a, 2b, 3a, 3b,...].",
            "The total number of unique amounts that can be formed with the given coins is at most the product of the number of ways to form the amount with each coin.",
            "Try to use a dynamic programming to solve this problem.",
            "Do a binary search on the answer.",
            "The result is the same as if we had an array of coin denominations, sorted in ascending order.",
            "If we can find k-th smallest number with single denomination, we can then try to combine it with other denominations.",
            "You can use a heap to keep track of the smallest possible amounts.",
            "What is the total number of ways we can make the amount 1 using the coins?  How about 2? 3? 4? 5?  If you know how many ways we can make up to 4, you can figure out how many ways we can make up to 5.",
            "Sort all possible amounts.",
            "Think about the binary search and the prefix sum array.",
            "How many combinations are there for amount 25?  How many for amount 24?  How many for amount 23?",
            "Use a priority queue to get the smallest possible amount.",
            "Can you solve it in a similar way as the coin change problem?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> stringIndices(vector<string>& wordsContainer, vector<string>& wordsQuery) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] stringIndices(String[] wordsContainer, String[] wordsQuery) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def stringIndices(self, wordsContainer, wordsQuery):\n        \"\"\"\n        :type wordsContainer: List[str]\n        :type wordsQuery: List[str]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def stringIndices(self, wordsContainer: List[str], wordsQuery: List[str]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* stringIndices(char** wordsContainer, int wordsContainerSize, char** wordsQuery, int wordsQuerySize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] StringIndices(string[] wordsContainer, string[] wordsQuery) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} wordsContainer\n * @param {string[]} wordsQuery\n * @return {number[]}\n */\nvar stringIndices = function(wordsContainer, wordsQuery) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function stringIndices(wordsContainer: string[], wordsQuery: string[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $wordsContainer\n     * @param String[] $wordsQuery\n     * @return Integer[]\n     */\n    function stringIndices($wordsContainer, $wordsQuery) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func stringIndices(_ wordsContainer: [String], _ wordsQuery: [String]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun stringIndices(wordsContainer: Array<String>, wordsQuery: Array<String>): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> stringIndices(List<String> wordsContainer, List<String> wordsQuery) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func stringIndices(wordsContainer []string, wordsQuery []string) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} words_container\n# @param {String[]} words_query\n# @return {Integer[]}\ndef string_indices(words_container, words_query)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def stringIndices(wordsContainer: Array[String], wordsQuery: Array[String]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn string_indices(words_container: Vec<String>, words_query: Vec<String>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (string-indices wordsContainer wordsQuery)\n  (-> (listof string?) (listof string?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec string_indices(WordsContainer :: [unicode:unicode_binary()], WordsQuery :: [unicode:unicode_binary()]) -> [integer()].\nstring_indices(WordsContainer, WordsQuery) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec string_indices(words_container :: [String.t], words_query :: [String.t]) :: [integer]\n  def string_indices(words_container, words_query) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two arrays of strings <code>wordsContainer</code> and <code>wordsQuery</code>.</p>\n\n<p>For each <code>wordsQuery[i]</code>, you need to find a string from <code>wordsContainer</code> that has the <strong>longest common suffix</strong> with <code>wordsQuery[i]</code>. If there are two or more strings in <code>wordsContainer</code> that share the longest common suffix, find the string that is the <strong>smallest</strong> in length. If there are two or more such strings that have the <strong>same</strong> smallest length, find the one that occurred <strong>earlier</strong> in <code>wordsContainer</code>.</p>\n\n<p>Return <em>an array of integers </em><code>ans</code><em>, where </em><code>ans[i]</code><em> is the index of the string in </em><code>wordsContainer</code><em> that has the <strong>longest common suffix</strong> with </em><code>wordsQuery[i]</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">wordsContainer = [&quot;abcd&quot;,&quot;bcd&quot;,&quot;xbcd&quot;], wordsQuery = [&quot;cd&quot;,&quot;bcd&quot;,&quot;xyz&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at each <code>wordsQuery[i]</code> separately:</p>\n\n<ul>\n\t<li>For <code>wordsQuery[0] = &quot;cd&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;cd&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.</li>\n\t<li>For <code>wordsQuery[1] = &quot;bcd&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;bcd&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.</li>\n\t<li>For <code>wordsQuery[2] = &quot;xyz&quot;</code>, there is no string from <code>wordsContainer</code> that shares a common suffix. Hence the longest common suffix is <code>&quot;&quot;</code>, that is shared with strings at index 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">wordsContainer = [&quot;abcdefgh&quot;,&quot;poiuygh&quot;,&quot;ghghgh&quot;], wordsQuery = [&quot;gh&quot;,&quot;acbfgh&quot;,&quot;acbfegh&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,0,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at each <code>wordsQuery[i]</code> separately:</p>\n\n<ul>\n\t<li>For <code>wordsQuery[0] = &quot;gh&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;gh&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.</li>\n\t<li>For <code>wordsQuery[1] = &quot;acbfgh&quot;</code>, only the string at index 0 shares the longest common suffix <code>&quot;fgh&quot;</code>. Hence it is the answer, even though the string at index 2 is shorter.</li>\n\t<li>For <code>wordsQuery[2] = &quot;acbfegh&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;gh&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= wordsContainer.length, wordsQuery.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= wordsContainer[i].length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= wordsQuery[i].length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>wordsContainer[i]</code> consists only of lowercase English letters.</li>\n\t<li><code>wordsQuery[i]</code> consists only of lowercase English letters.</li>\n\t<li>Sum of <code>wordsContainer[i].length</code> is at most <code>5 * 10<sup>5</sup></code>.</li>\n\t<li>Sum of <code>wordsQuery[i].length</code> is at most <code>5 * 10<sup>5</sup></code>.</li>\n</ul>\n",
        "exampleTestcases": "[\"abcd\",\"bcd\",\"xbcd\"]\n[\"cd\",\"bcd\",\"xyz\"]\n[\"abcdefgh\",\"poiuygh\",\"ghghgh\"]\n[\"gh\",\"acbfgh\",\"acbfegh\"]",
        "formTitle": "[3093]Longest Common Suffix Queries",
        "frequency": 0.0,
        "frontendQuestionId": "3093",
        "hints": [
            "If we reverse the strings, the problem changes to finding the longest common prefix.",
            "Build a Trie, each node is a letter and only saves the best word鈥檚 index in each node, based on the criteria."
        ],
        "level": 3,
        "metaData": {
            "name": "stringIndices",
            "params": [
                {
                    "name": "wordsContainer",
                    "type": "string[]"
                },
                {
                    "name": "wordsQuery",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3376",
        "similarQuestions": [
            "[{\"title\": \"Longest Common Prefix\", \"titleSlug\": \"longest-common-prefix\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6700\\u957f\\u516c\\u5171\\u524d\\u7f00\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[\"abcd\",\"bcd\",\"xbcd\"]\n[\"cd\",\"bcd\",\"xyz\"]",
        "title": "Longest Common Suffix Queries",
        "titleSlug": "longest-common-suffix-queries",
        "infer_hints": [
            "Use a trie to store all the wordsContainer in reverse order.",
            "We can create a trie of all the words in wordsContainer and then for each query, we try to find the longest common suffix.",
            "Can you use a trie data structure for this?",
            "Try to use the concept of LCS.",
            "If we iterate through the words in the query in reverse order, we can keep track of the longest common suffix up to the current word.",
            "Create a list of reversed strings.",
            "Use a suffix array and answer each query in O(logn) time.",
            "Can you use binary search to solve this problem?",
            "For each word in wordsQuery, find the length of the longest common suffix with any word in wordsContainer.",
            "Try to find a way to solve this problem with the help of a Trie data structure.",
            "What if you reverse all the strings in <code>wordsContainer</code> and <code>wordsQuery</code>?",
            "Use a suffix trie.",
            "Try to convert each word in wordsContainer into its suffix trie.",
            "The longest common suffix of two strings is the longest string that occurs at the end of both strings.",
            "Try storing the reverse of all strings in wordsContainer.",
            "Can you keep the suffixes of the words in sorted order and use binary search to find the answer?",
            "Use trie to store all the wordsContainer strings.",
            "Can we preprocess the array and keep track of the maximum length of a common suffix for each string?",
            "We need to find the longest common suffix with the reversed word.",
            "The longest common suffix of a string with itself is the string itself."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int scoreOfString(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int scoreOfString(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def scoreOfString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def scoreOfString(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int scoreOfString(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int ScoreOfString(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar scoreOfString = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function scoreOfString(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function scoreOfString($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func scoreOfString(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun scoreOfString(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int scoreOfString(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func scoreOfString(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef score_of_string(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def scoreOfString(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn score_of_string(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (score-of-string s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec score_of_string(S :: unicode:unicode_binary()) -> integer().\nscore_of_string(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec score_of_string(s :: String.t) :: integer\n  def score_of_string(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>. The <strong>score</strong> of a string is defined as the sum of the absolute difference between the <strong>ASCII</strong> values of adjacent characters.</p>\n\n<p>Return the <strong>score</strong> of<em> </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;hello&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">13</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The <strong>ASCII</strong> values of the characters in <code>s</code> are: <code>&#39;h&#39; = 104</code>, <code>&#39;e&#39; = 101</code>, <code>&#39;l&#39; = 108</code>, <code>&#39;o&#39; = 111</code>. So, the score of <code>s</code> would be <code>|104 - 101| + |101 - 108| + |108 - 108| + |108 - 111| = 3 + 7 + 0 + 3 = 13</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;zaz&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">50</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The <strong>ASCII</strong> values of the characters in <code>s</code> are: <code>&#39;z&#39; = 122</code>, <code>&#39;a&#39; = 97</code>. So, the score of <code>s</code> would be <code>|122 - 97| + |97 - 122| = 25 + 25 = 50</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"hello\"\n\"zaz\"",
        "formTitle": "[3110]Score of a String",
        "frequency": 0.0,
        "frontendQuestionId": "3110",
        "hints": [
            "Sum the difference between all the adjacent characters by just taking the absolute difference of their ASCII values."
        ],
        "level": 1,
        "metaData": {
            "name": "scoreOfString",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3379",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"hello\"",
        "title": "Score of a String",
        "titleSlug": "score-of-a-string",
        "infer_hints": [
            "Iterate over each character in the string.",
            "Think about how you can convert the string into an array of integers.",
            "Iterate through the string, and at each index calculate the score of the substring starting at that index.",
            "For each pair of characters in the string, calculate the difference in ASCII values.",
            "If the string is of length 1, the score is 0.",
            "Use dynamic programming.",
            "Iterate over all adjacent pairs of characters.",
            "Think about the previous question where you had to find the length of the longest prefix that was also a suffix.",
            "Can we do better than O(n) time complexity?",
            "For each pair of characters, find their ASCII values and then compute the absolute difference.",
            "For each character, calculate the score.",
            "How can we use the concept of prefix sum and the difference between ASCII values to solve this problem?",
            "How can we calculate the ASCII value of a character in Python?",
            "How to find the score of a string?",
            "Calculate the ASCII value of the characters and try to find a pattern.",
            "How can we find the ASCII value of a character?",
            "If we consider the string as a subarray, what is the minimum possible score?",
            "Iterate over the string and for each character, calculate the score of all possible substrings that start with this character.",
            "Use dynamic programming.  There are two states, dp[i][j] = dp[i][k] + dp[k + 1][j] + sum(freq[i][k]).",
            "You can use a prefix sum array to get the sum of the absolute difference for all pairs in O(1) time."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumSubarrayLength(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumSubarrayLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumSubarrayLength(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumSubarrayLength = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumSubarrayLength(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumSubarrayLength($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumSubarrayLength(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumSubarrayLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumSubarrayLength(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumSubarrayLength(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_subarray_length(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumSubarrayLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_subarray_length(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-subarray-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_subarray_length(Nums :: [integer()], K :: integer()) -> integer().\nminimum_subarray_length(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_subarray_length(nums :: [integer], k :: integer) :: integer\n  def minimum_subarray_length(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> of <strong>non-negative</strong> integers and an integer <code>k</code>.</p>\n\n<p>An array is called <strong>special</strong> if the bitwise <code>OR</code> of all of its elements is <strong>at least</strong> <code>k</code>.</p>\n\n<p>Return <em>the length of the <strong>shortest</strong> <strong>special</strong> <strong>non-empty</strong> <span data-keyword=\"subarray-nonempty\">subarray</span> of</em> <code>nums</code>, <em>or return</em> <code>-1</code> <em>if no special subarray exists</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[3]</code> has <code>OR</code> value of <code>3</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,8], k = 10</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[2,1,8]</code> has <code>OR</code> value of <code>11</code>. Hence, we return <code>3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2], k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[1]</code> has <code>OR</code> value of <code>1</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n2\n[2,1,8]\n10\n[1,2]\n0",
        "formTitle": "[3097]Shortest Subarray With OR at Least K II",
        "frequency": 0.0,
        "frontendQuestionId": "3097",
        "hints": [
            "For each <code>nums[i]</code>, we can maintain each subarray鈥檚 bitwise <code>OR</code> result ending with it.",
            "The property of bitwise <code>OR</code> is that it never unsets any bits and only sets new bits",
            "So the number of different results for each <code>nums[i]</code> is at most the number of bits 32."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumSubarrayLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3380",
        "similarQuestions": [
            "[{\"title\": \"Maximum Size Subarray Sum Equals k\", \"titleSlug\": \"maximum-size-subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u7b49\\u4e8e k \\u7684\\u6700\\u957f\\u5b50\\u6570\\u7ec4\\u957f\\u5ea6\", \"isPaidOnly\": true}, {\"title\": \"Shortest Subarray with Sum at Least K\", \"titleSlug\": \"shortest-subarray-with-sum-at-least-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u548c\\u81f3\\u5c11\\u4e3a K \\u7684\\u6700\\u77ed\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,2,3]\n2",
        "title": "Shortest Subarray With OR at Least K II",
        "titleSlug": "shortest-subarray-with-or-at-least-k-ii",
        "infer_hints": [
            "How to find the smallest subarray with OR greater than or equal to k?",
            "How to check if an integer is a power of 2?",
            "Use a prefix OR array to compute the OR of every prefix of the array.",
            "What if we want to check if we can make any subarray with OR at least k?",
            "Use a stack to keep track of the prefix ORs.",
            "Try every possible subarray.",
            "Try to solve this problem using the sliding window technique.",
            "The result of bitwise OR operation on two numbers will be greater or equal to the larger number.",
            "We can solve this problem by maintaining a sliding window where all elements in this window have their OR at least K.",
            "We can pre-calculate the OR of all prefixes and suffixes.",
            "Can we use binary search to solve this problem?",
            "Try to use binary search and prefix OR.",
            "How to check if a subarray OR-ed is at least k? (The answer is the minimum x such that nums[i] >= x.)",
            "Try to solve this using a prefix OR array.",
            "Use prefix OR and binary search.",
            "We can use the concept of sliding window and the stack data structure to solve this problem.",
            "Use prefix OR and binary search.",
            "If you have two integers x and y, then the bitwise OR of them is equal to x if x >= y. Otherwise, it's equal to y.",
            "What about prefix ORs?",
            "Think about the property of OR operation."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumSubarrayLength(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumSubarrayLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumSubarrayLength(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumSubarrayLength = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumSubarrayLength(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumSubarrayLength($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumSubarrayLength(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumSubarrayLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumSubarrayLength(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumSubarrayLength(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_subarray_length(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumSubarrayLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_subarray_length(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-subarray-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_subarray_length(Nums :: [integer()], K :: integer()) -> integer().\nminimum_subarray_length(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_subarray_length(nums :: [integer], k :: integer) :: integer\n  def minimum_subarray_length(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> of <strong>non-negative</strong> integers and an integer <code>k</code>.</p>\n\n<p>An array is called <strong>special</strong> if the bitwise <code>OR</code> of all of its elements is <strong>at least</strong> <code>k</code>.</p>\n\n<p>Return <em>the length of the <strong>shortest</strong> <strong>special</strong> <strong>non-empty</strong> <span data-keyword=\"subarray-nonempty\">subarray</span> of</em> <code>nums</code>, <em>or return</em> <code>-1</code> <em>if no special subarray exists</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[3]</code> has <code>OR</code> value of <code>3</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,8], k = 10</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[2,1,8]</code> has <code>OR</code> value of <code>11</code>. Hence, we return <code>3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2], k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[1]</code> has <code>OR</code> value of <code>1</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>0 &lt;= k &lt; 64</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n2\n[2,1,8]\n10\n[1,2]\n0",
        "formTitle": "[3095]Shortest Subarray With OR at Least K I",
        "frequency": 0.0,
        "frontendQuestionId": "3095",
        "hints": [
            "The constraints are small. Brute force checking all the subarrays."
        ],
        "level": 1,
        "metaData": {
            "name": "minimumSubarrayLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3381",
        "similarQuestions": [
            "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u957f\\u5ea6\\u6700\\u5c0f\\u7684\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}, {\"title\": \"Shortest Subarray with Sum at Least K\", \"titleSlug\": \"shortest-subarray-with-sum-at-least-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u548c\\u81f3\\u5c11\\u4e3a K \\u7684\\u6700\\u77ed\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[1,2,3]\n2",
        "title": "Shortest Subarray With OR at Least K I",
        "titleSlug": "shortest-subarray-with-or-at-least-k-i",
        "infer_hints": [
            "Use prefix AND operation to store the prefix OR operation result.",
            "Consider the prefix ORs.  How many of them can be turned into K or more?",
            "Use a sliding window with a queue to keep track of the maximum OR value.",
            "Can we binary search on the answer?",
            "How can we solve this problem?  We can use binary search on the length of the subarray.",
            "The bitwise OR of any two integers is at least that integer if at least one integer is.",
            "Can we use a sliding window to solve this problem?",
            "You can use a sliding window with two pointers.",
            "Do binary search over the length of the subarray.",
            "How to find the maximum OR in a subarray?",
            "If we can calculate the OR of the subarray from index l to r, how can we check if it's at least k?",
            "For each prefix, we want to know the smallest subarray ending at that prefix that has OR at least K.",
            "We can maintain a sliding window to find the shortest subarray.",
            "Use binary search on the lengths of the subarray.",
            "Can we use binary search for this problem?",
            "The bitwise OR of all elements of a subarray is at least k if and only if the bitwise OR of all elements of a subarray with k is at least k.",
            "We need to find the shortest subarray that has OR at least k.  If it doesn't exist, return -1.",
            "Use prefix OR to compute the OR value of all prefixes.",
            "Try to solve it with the sliding window technique.",
            "Can we use a prefix-sum array?  Or can we use a stack?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long numberOfSubarrays(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long numberOfSubarrays(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfSubarrays(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long numberOfSubarrays(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long NumberOfSubarrays(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numberOfSubarrays = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfSubarrays(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function numberOfSubarrays($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfSubarrays(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfSubarrays(nums: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfSubarrays(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfSubarrays(nums []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef number_of_subarrays(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfSubarrays(nums: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_subarrays(nums: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_subarrays(Nums :: [integer()]) -> integer().\nnumber_of_subarrays(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_subarrays(nums :: [integer]) :: integer\n  def number_of_subarrays(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of <strong>positive</strong> integers <code>nums</code>.</p>\n\n<p>Return the number of <span data-keyword=\"subarray-nonempty\">subarrays</span> of <code>nums</code>, where the <strong>first</strong> and the <strong>last</strong> elements of the subarray are <em>equal</em> to the <strong>largest</strong> element in the subarray.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,3,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:</p>\n\n<ul>\n\t<li>subarray <code>[<strong><u>1</u></strong>,4,3,3,2]</code>, with its largest element 1. The first element is 1 and the last element is also 1.</li>\n\t<li>subarray <code>[1,<u><strong>4</strong></u>,3,3,2]</code>, with its largest element 4. The first element is 4 and the last element is also 4.</li>\n\t<li>subarray <code>[1,4,<u><strong>3</strong></u>,3,2]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[1,4,3,<u><strong>3</strong></u>,2]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[1,4,3,3,<u><strong>2</strong></u>]</code>, with its largest element 2. The first element is 2 and the last element is also 2.</li>\n\t<li>subarray <code>[1,4,<u><strong>3,3</strong></u>,2]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n</ul>\n\n<p>Hence, we return 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:</p>\n\n<ul>\n\t<li>subarray <code>[<u><strong>3</strong></u>,3,3]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[3,<strong><u>3</u></strong>,3]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[3,3,<u><strong>3</strong></u>]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[<strong><u>3,3</u></strong>,3]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[3,<u><strong>3,3</strong></u>]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[<u><strong>3,3,3</strong></u>]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n</ul>\n\n<p>Hence, we return 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is a single subarray of <code>nums</code> which is <code>[<strong><u>1</u></strong>]</code>, with its largest element 1. The first element is 1 and the last element is also 1.</p>\n\n<p>Hence, we return 1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,4,3,3,2]\n[3,3,3]\n[1]",
        "formTitle": "[3113]Find the Number of Subarrays Where Boundary Elements Are Maximum",
        "frequency": 0.0,
        "frontendQuestionId": "3113",
        "hints": [
            "For each element <code>nums[i]</code>, we can count the number of valid subarrays ending with it.",
            "For each index <code>i</code>, find the nearest index <code>j</code> on its left <code>(j < i)</code> such that <code>nums[j] < nums[i]</code>. This can be done via a monotonic stack.",
            "For each index <code>i</code>, find the number of indices <code>k</code> in the window <code>[j + 1, i]</code> such that <code>nums[k] == nums[i]</code>, this is the number of the valid subarrays ending with <code>nums[i]</code>. This can be done by sliding window.",
            "Sum the answer of all the indices <code>i</code> to get the final result.",
            "Is it possible to use DSU as an alternate solution?"
        ],
        "level": 3,
        "metaData": {
            "name": "numberOfSubarrays",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3382",
        "similarQuestions": [
            "[{\"title\": \"Number of Subarrays with Bounded Maximum\", \"titleSlug\": \"number-of-subarrays-with-bounded-maximum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u533a\\u95f4\\u5b50\\u6570\\u7ec4\\u4e2a\\u6570\", \"isPaidOnly\": false}, {\"title\": \"Count Subarrays With Fixed Bounds\", \"titleSlug\": \"count-subarrays-with-fixed-bounds\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u5b9a\\u754c\\u5b50\\u6570\\u7ec4\\u7684\\u6570\\u76ee\", \"isPaidOnly\": false}, {\"title\": \"Count Subarrays Where Max Element Appears at Least K Times\", \"titleSlug\": \"count-subarrays-where-max-element-appears-at-least-k-times\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u6700\\u5927\\u5143\\u7d20\\u51fa\\u73b0\\u81f3\\u5c11 K \\u6b21\\u7684\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[1,4,3,3,2]",
        "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
        "titleSlug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum",
        "infer_hints": [
            "Keep track of the count of maximums.",
            "How many subarrays of a length k start with the maximum element?",
            "Count the number of subarrays with the maximum element as the first element, and the maximum element as the last element.",
            "You can use a sliding window to solve this problem.",
            "Use the concept of Prefix and Suffix arrays.",
            "Use prefix and suffix arrays.",
            "For each index i, how many subarrays can we choose the left boundary? How many subarrays can we choose the right boundary?",
            "How many subarrays can we choose?  How many subarrays start with 1 and end with 3?  How many subarrays start with 1 and end with 3 and have at least one element greater than 3?",
            "Count the number of subarrays where the maximum element is on the boundary.",
            "Find the number of subarrays where the leftmost element is maximum.  Then find the number of subarrays where the rightmost element is maximum.  Their difference is the answer.",
            "We can count the number of subarrays where the largest element is on the boundary.",
            "Use a sliding window to count the subarrays where the maximum element is at the boundary.",
            "The answer can be found in the following way:\r\n- For each element, we count the number of subarrays that can be made ending with this element.\r\n- To count the number of subarrays, we need to know the number of subarrays that can be made ending with the previous element.",
            "Use prefix sum and suffix sum.",
            "How many subarrays are there where the leftmost and rightmost element is maximum?",
            "For each number, calculate the number of subarrays where the left boundary is this number and the right boundary is maximum.",
            "How many subarrays can we get from the subarray [3,3,3]?",
            "Count the number of subarrays where the first element is maximum. Then, count the number of subarrays where the last element is maximum.",
            "Use prefix and suffix maximum arrays to find all the subarrays where the maximum element is on the boundary.",
            "We can use the two pointers technique.  We can keep two pointers, left and right.  The right pointer will iterate through the array, and for each element, we will calculate the number of subarrays ending at that position.  Meanwhile, we will also keep track of the largest element we've seen so far.  The left pointer will then move to the next position."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumEnergy(vector<int>& energy, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumEnergy(int[] energy, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumEnergy(self, energy, k):\n        \"\"\"\n        :type energy: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumEnergy(self, energy: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumEnergy(int* energy, int energySize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumEnergy(int[] energy, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} energy\n * @param {number} k\n * @return {number}\n */\nvar maximumEnergy = function(energy, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumEnergy(energy: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $energy\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumEnergy($energy, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumEnergy(_ energy: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumEnergy(energy: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumEnergy(List<int> energy, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumEnergy(energy []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} energy\n# @param {Integer} k\n# @return {Integer}\ndef maximum_energy(energy, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumEnergy(energy: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_energy(energy: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-energy energy k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_energy(Energy :: [integer()], K :: integer()) -> integer().\nmaximum_energy(Energy, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_energy(energy :: [integer], k :: integer) :: integer\n  def maximum_energy(energy, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>In a mystic dungeon, <code>n</code> magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.</p>\n\n<p>You have been cursed in such a way that after absorbing energy from magician <code>i</code>, you will be instantly transported to magician <code>(i + k)</code>. This process will be repeated until you reach the magician where <code>(i + k)</code> does not exist.</p>\n\n<p>In other words, you will choose a starting point and then teleport with <code>k</code> jumps until you reach the end of the magicians&#39; sequence, <strong>absorbing all the energy</strong> during the journey.</p>\n\n<p>You are given an array <code>energy</code> and an integer <code>k</code>. Return the <strong>maximum</strong> possible energy you can gain.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> energy = [5,2,-10,-5,1], k = 3</span></p>\n\n<p><strong>Output:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 3</span></p>\n\n<p><strong>Explanation:</strong> We can gain a total energy of 3 by starting from magician 1 absorbing 2 + 1 = 3.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> energy = [-2,-3,-1], k = 2</span></p>\n\n<p><strong>Output:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> -1</span></p>\n\n<p><strong>Explanation:</strong> We can gain a total energy of -1 by starting from magician 2.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= energy.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-1000 &lt;= energy[i] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= energy.length - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n鈥嬧�嬧�嬧�嬧�嬧��",
        "exampleTestcases": "[5,2,-10,-5,1]\n3\n[-2,-3,-1]\n2",
        "formTitle": "[3147]Taking Maximum Energy From the Mystic Dungeon",
        "frequency": 0.0,
        "frontendQuestionId": "3147",
        "hints": [
            "Let <code>dp[i]</code> denote the energy we gain starting from index <code>i</code>.",
            "We can notice, that <code> dp[i] = dp[i + k] + energy[i]</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumEnergy",
            "params": [
                {
                    "name": "energy",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3383",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[5,2,-10,-5,1]\n3",
        "title": "Taking Maximum Energy From the Mystic Dungeon",
        "titleSlug": "taking-maximum-energy-from-the-mystic-dungeon",
        "infer_hints": [
            "Use Dynamic Programming.",
            "Use Dynamic Programming to store the maximum energy that can be gained starting from each magician.",
            "The problem can be solved using Dynamic Programming.",
            "What if we just take the max energy?",
            "Do a Dynamic Programming (DP). \n\nIf you look at it, you will notice that if you start from the ith magician, you will get energy[i] + dp[i+k].",
            "The main intuition behind this question is that you need to take the maximum energy from the next 'k' number of houses.",
            "How can we use the fact that we can take energy from any magician in any order?",
            "Can we do dynamic programming?",
            "If we are at position i, what's the maximum energy we can get from taking the jumps?",
            "Use Dynamic Programming to solve this problem.",
            "You can do a dynamic programming approach. Try to store the maximum energy you can get if you start at a particular position.",
            "You can use Dynamic Programming to solve this problem.",
            "Use dynamic programming to solve this problem.",
            "What if you start from the end?",
            "You can use dynamic programming to solve this problem.",
            "You can use a sliding window to keep track of the maximum energy.",
            "Try using a prefix sum array.",
            "How can we make sure we always take the maximum energy? (Hint: Dynamic Programming!)",
            "Take a DP array dp where dp[i] is the maximum energy we can get if we start at index i.",
            "If we want to maximize our energy, we should start with the most negative energy. Can you prove this?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumOperationsToMakeKPeriodic(string word, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumOperationsToMakeKPeriodic(String word, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumOperationsToMakeKPeriodic(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumOperationsToMakeKPeriodic(char* word, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumOperationsToMakeKPeriodic(string word, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumOperationsToMakeKPeriodic = function(word, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumOperationsToMakeKPeriodic(word: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumOperationsToMakeKPeriodic($word, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumOperationsToMakeKPeriodic(_ word: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumOperationsToMakeKPeriodic(word: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumOperationsToMakeKPeriodic(String word, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumOperationsToMakeKPeriodic(word string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_operations_to_make_k_periodic(word, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumOperationsToMakeKPeriodic(word: String, k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_operations_to_make_k_periodic(word: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-operations-to-make-k-periodic word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_operations_to_make_k_periodic(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_operations_to_make_k_periodic(Word, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_operations_to_make_k_periodic(word :: String.t, k :: integer) :: integer\n  def minimum_operations_to_make_k_periodic(word, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code> of size <code>n</code>, and an integer <code>k</code> such that <code>k</code> divides <code>n</code>.</p>\n\n<p>In one operation, you can pick any two indices <code>i</code> and <code>j</code>, that are divisible by <code>k</code>, then replace the <span data-keyword=\"substring\">substring</span> of length <code>k</code> starting at <code>i</code> with the substring of length <code>k</code> starting at <code>j</code>. That is, replace the substring <code>word[i..i + k - 1]</code> with the substring <code>word[j..j + k - 1]</code>.<!-- notionvc: 49ac84f7-0724-452a-ab43-0c5e53f1db33 --></p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations required to make</em> <code>word</code> <em><strong>k-periodic</strong></em>.</p>\n\n<p>We say that <code>word</code> is <strong>k-periodic</strong> if there is some string <code>s</code> of length <code>k</code> such that <code>word</code> can be obtained by concatenating <code>s</code> an arbitrary number of times. For example, if <code>word == &ldquo;ababab&rdquo;</code>, then <code>word</code> is 2-periodic for <code>s = &quot;ab&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">word = &quot;leetcodeleet&quot;, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\nfont-family: Menlo,sans-serif;\nfont-size: 0.85rem;\n\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to &quot;leetleetleet&quot;.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">word = &quot;</span>leetcoleet<span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a 2-periodic string by applying the operations in the table below.</p>\n\n<table border=\"1\" bordercolor=\"#ccc\" cellpadding=\"5\" cellspacing=\"0\" height=\"146\" style=\"border-collapse:collapse; text-align: center; vertical-align: middle;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>i</th>\n\t\t\t<th>j</th>\n\t\t\t<th>word</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">2</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetcoleet</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">4</td>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetetleet</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">6</td>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetetetet</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<div id=\"gtx-trans\" style=\"position: absolute; left: 107px; top: 238.5px;\">\n<div class=\"gtx-trans-icon\">&nbsp;</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>k</code> divides <code>word.length</code>.</li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"leetcodeleet\"\n4\n\"leetcoleet\"\n2",
        "formTitle": "[3137]Minimum Number of Operations to Make Word K-Periodic",
        "frequency": 0.0,
        "frontendQuestionId": "3137",
        "hints": [
            "Calculate the frequency of each substring of length <code>k</code> that starts at an index that is divisible by <code>k</code>.",
            "The period of the final string will be the substring with the highest frequency."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumOperationsToMakeKPeriodic",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3384",
        "similarQuestions": [
            "[{\"title\": \"Maximum Repeating Substring\", \"titleSlug\": \"maximum-repeating-substring\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6700\\u5927\\u91cd\\u590d\\u5b50\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "\"leetcodeleet\"\n4",
        "title": "Minimum Number of Operations to Make Word K-Periodic",
        "titleSlug": "minimum-number-of-operations-to-make-word-k-periodic",
        "infer_hints": [
            "Let's calculate the length of the smallest period <code>t</code>. Then, the answer is min(t, n//t).",
            "For each prefix of length k, how many operations do we need to transform it into a period of length k?",
            "Let's use dynamic programming to solve this problem.",
            "Use the KMP (Knuth Morris Pratt) algorithm.",
            "Use prefix sums to find the number of operations to change the substring at i to j.",
            "Can you solve it in O(n) time?",
            "We can try all possible indices <code>i</code> and <code>j</code>, and check which one minimizes the cost.",
            "Use prefix sums and check the periodicity of the string.",
            "If we could make the word periodic by using only one operation, we could solve the problem.",
            "We need to find the smallest rotation of the string.",
            "We can use a sliding window with two pointers to solve this problem.",
            "Can you solve this using the Manhattan distance between two substrings?",
            "Try all possible replacements and see which one results in the smallest number of operations.",
            "What does it mean for two substrings of length k to be equal?",
            "Can we use a sliding window to solve this problem?",
            "Try to find out the minimum number of operations for the first k characters.",
            "Use the concept of prefix sums and check for each prefix, if it can be used to replace the substring starting at i.",
            "If we can find a rotation of the string that is k-periodic, we can just find that rotation.",
            "Think of the smallest possible number of operations to make a string periodic.",
            "Find the period <code>s</code>.!"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<bool> findAnswer(int n, vector<vector<int>>& edges) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean[] findAnswer(int n, int[][] edges) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findAnswer(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findAnswer(self, n: int, edges: List[List[int]]) -> List[bool]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* findAnswer(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool[] FindAnswer(int n, int[][] edges) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {boolean[]}\n */\nvar findAnswer = function(n, edges) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findAnswer(n: number, edges: number[][]): boolean[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Boolean[]\n     */\n    function findAnswer($n, $edges) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findAnswer(_ n: Int, _ edges: [[Int]]) -> [Bool] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findAnswer(n: Int, edges: Array<IntArray>): BooleanArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<bool> findAnswer(int n, List<List<int>> edges) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findAnswer(n int, edges [][]int) []bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Boolean[]}\ndef find_answer(n, edges)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findAnswer(n: Int, edges: Array[Array[Int]]): Array[Boolean] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_answer(n: i32, edges: Vec<Vec<i32>>) -> Vec<bool> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-answer n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof boolean?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_answer(N :: integer(), Edges :: [[integer()]]) -> [boolean()].\nfind_answer(N, Edges) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_answer(n :: integer, edges :: [[integer]]) :: [boolean]\n  def find_answer(n, edges) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an undirected weighted graph of <code>n</code> nodes numbered from 0 to <code>n - 1</code>. The graph consists of <code>m</code> edges represented by a 2D array <code>edges</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> with weight <code>w<sub>i</sub></code>.</p>\n\n<p>Consider all the shortest paths from node 0 to node <code>n - 1</code> in the graph. You need to find a <strong>boolean</strong> array <code>answer</code> where <code>answer[i]</code> is <code>true</code> if the edge <code>edges[i]</code> is part of <strong>at least</strong> one shortest path. Otherwise, <code>answer[i]</code> is <code>false</code>.</p>\n\n<p>Return the array <code>answer</code>.</p>\n\n<p><strong>Note</strong> that the graph may not be connected.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/05/graph35drawio-1.png\" style=\"height: 129px; width: 250px;\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 6, edges = [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[true,true,true,false,true,true,true,false]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following are <strong>all</strong> the shortest paths between nodes 0 and 5:</p>\n\n<ul>\n\t<li>The path <code>0 -&gt; 1 -&gt; 5</code>: The sum of weights is <code>4 + 1 = 5</code>.</li>\n\t<li>The path <code>0 -&gt; 2 -&gt; 3 -&gt; 5</code>: The sum of weights is <code>1 + 1 + 3 = 5</code>.</li>\n\t<li>The path <code>0 -&gt; 2 -&gt; 3 -&gt; 1 -&gt; 5</code>: The sum of weights is <code>1 + 1 + 2 + 1 = 5</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/05/graphhhh.png\" style=\"width: 185px; height: 136px;\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[true,false,false,true]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is one shortest path between nodes 0 and 3, which is the path <code>0 -&gt; 2 -&gt; 3</code> with the sum of weights <code>1 + 2 = 3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>m == edges.length</code></li>\n\t<li><code>1 &lt;= m &lt;= min(5 * 10<sup>4</sup>, n * (n - 1) / 2)</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>1 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li>There are no repeated edges.</li>\n</ul>\n",
        "exampleTestcases": "6\n[[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]\n4\n[[2,0,1],[0,1,1],[0,3,4],[3,2,2]]",
        "formTitle": "[3123]Find Edges in Shortest Paths",
        "frequency": 0.0,
        "frontendQuestionId": "3123",
        "hints": [
            "Find all the shortest paths starting from nodes 0 and <code>n - 1</code> to all other nodes.",
            "How to use the above calculated shortest paths to check if an edge is part of at least one shortest path from 0 to <code>n - 1</code>?"
        ],
        "level": 3,
        "metaData": {
            "name": "findAnswer",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "edges",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3386",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "6\n[[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]",
        "title": "Find Edges in Shortest Paths",
        "titleSlug": "find-edges-in-shortest-paths",
        "infer_hints": [
            "You can use a modified version of Dijkstra's algorithm to solve this problem.",
            "Can you use the Dijkstra's algorithm?",
            "If the graph is not connected, you can still find the shortest path from 0 to n-1 by finding the shortest path from 0 to any node, and then from that node to n-1.",
            "You can use Dijkstra's algorithm.",
            "We need to find edges that are on the shortest path from 0 to n-1.",
            "Can you use a shortest path algorithm to solve this?",
            "Can we do a BFS or DFS to mark the edges that are in the shortest paths?",
            "We can use Dijkstra's algorithm.  We need to be careful about the edge selection.  We can do this by storing the edge id along with the node in the heap.",
            "The problem is a shortest path problem with a slight modification.",
            "We can use a BFS to find all shortest paths from 0 to n - 1.",
            "Use a modified version of Dijkstra's algorithm.",
            "You can use a union-find algorithm to find all the connected components.",
            "Use Dijkstra's algorithm to find the shortest paths.",
            "Use Dijkstra's algorithm to find the shortest paths.",
            "Use Dijkstra's algorithm.",
            "Consider a node i.  Can you prove that if the path from node 0 to node i is not changed, then the path from node 0 to node i can be extended to the path from node 0 to node j?",
            "Consider each edge in the shortest path from node 0 to node N-1.",
            "We can use Dijkstra's algorithm to find the shortest paths. \r\n\r\nHow can we use Dijkstra's algorithm?",
            "Do a DFS from node 0.",
            "If the shortest path from node 0 to node 1 is via node x, then node 0 must have visited node x before node 1."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minOperationsToMakeMedianK(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minOperationsToMakeMedianK(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperationsToMakeMedianK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperationsToMakeMedianK(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minOperationsToMakeMedianK(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinOperationsToMakeMedianK(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOperationsToMakeMedianK = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperationsToMakeMedianK(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperationsToMakeMedianK($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperationsToMakeMedianK(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperationsToMakeMedianK(nums: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperationsToMakeMedianK(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperationsToMakeMedianK(nums []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations_to_make_median_k(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperationsToMakeMedianK(nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations_to_make_median_k(nums: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations-to-make-median-k nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations_to_make_median_k(Nums :: [integer()], K :: integer()) -> integer().\nmin_operations_to_make_median_k(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations_to_make_median_k(nums :: [integer], k :: integer) :: integer\n  def min_operations_to_make_median_k(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> and a <strong>non-negative</strong> integer <code>k</code>. In one operation, you can increase or decrease any element by 1.</p>\n\n<p>Return the <strong>minimum</strong> number of operations needed to make the <strong>median</strong> of <code>nums</code> <em>equal</em> to <code>k</code>.</p>\n\n<p>The median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the larger of the two values is taken.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,5,6,8,5], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can subtract one from <code>nums[1]</code> and <code>nums[4]</code> to obtain <code>[2, 4, 6, 8, 4]</code>. The median of the resulting array is equal to <code>k</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,5,6,8,5], k = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can add one to <code>nums[1]</code> twice and add one to <code>nums[2]</code> once to obtain <code>[2, 7, 7, 8, 5]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5,6], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The median of the array is already equal to <code>k</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[2,5,6,8,5]\n4\n[2,5,6,8,5]\n7\n[1,2,3,4,5,6]\n4",
        "formTitle": "[3107]Minimum Operations to Make Median of Array Equal to K",
        "frequency": 0.0,
        "frontendQuestionId": "3107",
        "hints": [
            "Sort <code>nums</code> in non-descending order.",
            "For all the smaller values on the left side of the median, change them to <code>k</code> if they are larger than <code>k</code>.",
            "For all the larger values on the right side of the median, change them to <code>k</code> if they are smaller than <code>k</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minOperationsToMakeMedianK",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3387",
        "similarQuestions": [
            "[{\"title\": \"Find Median from Data Stream\", \"titleSlug\": \"find-median-from-data-stream\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6570\\u636e\\u6d41\\u7684\\u4e2d\\u4f4d\\u6570\", \"isPaidOnly\": false}, {\"title\": \"Sliding Window Median\", \"titleSlug\": \"sliding-window-median\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6ed1\\u52a8\\u7a97\\u53e3\\u4e2d\\u4f4d\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[2,5,6,8,5]\n4",
        "title": "Minimum Operations to Make Median of Array Equal to K",
        "titleSlug": "minimum-operations-to-make-median-of-array-equal-to-k",
        "infer_hints": [
            "What is the median of an array?",
            "What is the median of the array?",
            "Use prefix sum and binary search.",
            "How can you modify the array to make the median equal to k?",
            "Use a prefix sum array to calculate the number of elements that are smaller or larger than k.",
            "Sort the array.",
            "We can perform a prefix and suffix operation.",
            "How can we calculate the median of an array?",
            "For each number in the array, what operations are we going to do to reach the median?",
            "Use prefix sum to calculate the sum of numbers in a certain range.",
            "For every element, try to minimize its difference to k.",
            "What if you sorted the array and then applied the operations?  We can do better.",
            "How can we calculate the median of the array?",
            "Use prefix sum to count the number of elements in nums that are less than or equal to k.",
            "Can we sort the array?",
            "For each number, try to make it the median.",
            "Use a prefix sum array.",
            "You need to find the minimum number of operations needed to make all elements in the array equal to k.",
            "Sort the array.",
            "Use prefix sum to count how many numbers in the array are smaller than or equal to the median."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long numberOfRightTriangles(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long numberOfRightTriangles(int[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfRightTriangles(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfRightTriangles(self, grid: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long numberOfRightTriangles(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long NumberOfRightTriangles(int[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar numberOfRightTriangles = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfRightTriangles(grid: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function numberOfRightTriangles($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfRightTriangles(_ grid: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfRightTriangles(grid: Array<IntArray>): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfRightTriangles(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfRightTriangles(grid [][]int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef number_of_right_triangles(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfRightTriangles(grid: Array[Array[Int]]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_right_triangles(grid: Vec<Vec<i32>>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-right-triangles grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_right_triangles(Grid :: [[integer()]]) -> integer().\nnumber_of_right_triangles(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_right_triangles(grid :: [[integer]]) :: integer\n  def number_of_right_triangles(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D boolean matrix <code>grid</code>.</p>\n\n<p>Return an integer that is the number of <strong>right triangles</strong> that can be made with the 3 elements of <code>grid</code> such that <strong>all</strong> of them have a value of 1.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A collection of 3 elements of <code>grid</code> is a <strong>right triangle</strong> if one of its elements is in the <strong>same row</strong> with another<!-- notionvc: 6133ebe2-45aa-4346-9c28-03193b794c49 --> element and in the <strong>same column</strong> with the third element. The 3 elements do not have to be next to each other.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div style=\"display:flex; gap: 12px;\">\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,1,0],[0,1,1],[0,1,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are two right triangles.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div style=\"display:flex; gap: 12px;\">\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,0,0],[0,1,0,1],[1,0,0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no right triangles.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div style=\"display:flex; gap: 12px;\">\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\">1</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t\t<td data-darkreader-inline-border-bottom=\"\" data-darkreader-inline-border-left=\"\" data-darkreader-inline-border-right=\"\" data-darkreader-inline-border-top=\"\" style=\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\">0</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,1],[1,0,0],[1,0,0]]</span></p>\n\n<p><strong>Output:&nbsp;</strong>2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are two right triangles.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= grid[i].length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n</ul>\n",
        "exampleTestcases": "[[0,1,0],[0,1,1],[0,1,0]]\n[[1,0,0,0],[0,1,0,1],[1,0,0,0]]\n[[1,0,1],[1,0,0],[1,0,0]]",
        "formTitle": "[3128]Right Triangles",
        "frequency": 0.0,
        "frontendQuestionId": "3128",
        "hints": [
            "If <code>grid[x][y]</code> is 1, it can form a right triangle with an element of <code>grid</code> with value 1 in the same row and an element of <code>grid</code> with value 1 in the same column.",
            "So we just need to count the number of 1s in each row and column.",
            "For each <code>x, y</code> with <code>grid[x][y] = 1</code> if there are <code>row[x]</code> 1s in the row <code>x</code> and <code>col[y]</code> 1s in column <code>y</code>, the answer should be added by <code>(row[x] - 1) * (col[y] - 1)</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfRightTriangles",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3388",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[0,1,0],[0,1,1],[0,1,0]]",
        "title": "Right Triangles",
        "titleSlug": "right-triangles",
        "infer_hints": [
            "Loop over the 2D array and count the number of 1s in each row.",
            "Try brute-forcing the solution.  Can you use dynamic programming?",
            "We need to find all combinations of three points.",
            "Try to use 3 nested loops to get all possible combinations of 3 elements.",
            "Think about the three elements of a triangle.",
            "Try to brute force it.",
            "A triangle is valid if the 3 points are distinct and are in clockwise order.",
            "Count the number of 1s in each row.",
            "Think of the three points of a triangle as a, b, and c. If you have a right triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides.",
            "Can you enumerate all the triangles and check each one?",
            "The right triangle must have one element of grid[i][j] = 1 and two other elements of grid[k][l] = 1.",
            "For each triplet of cells (i, j, k), you need to check if they form a right triangle.",
            "Try to brute force this.",
            "What are the possible 3 elements of the grid?",
            "For each pair of cells in the grid, check if there is a cell that can form a right triangle with the pair.",
            "How many right triangles can be made with the 3 elements of grid[i][j] as one of the vertices?",
            "Try all combinations of 3 elements and check if they form a right triangle.",
            "The total number of triangles is the sum of the number of triangles that can be made by each pair of points (i, j) where 0 ≤ i < j < n.",
            "Use three loops to check every possible triplet of points.",
            "For each triplet (i, j, k), check if the points are on the same row or column or not."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] minimumTime(int n, int[][] edges, int[] disappear) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumTime(self, n, edges, disappear):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type disappear: List[int]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumTime(self, n: int, edges: List[List[int]], disappear: List[int]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minimumTime(int n, int** edges, int edgesSize, int* edgesColSize, int* disappear, int disappearSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] MinimumTime(int n, int[][] edges, int[] disappear) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[]} disappear\n * @return {number[]}\n */\nvar minimumTime = function(n, edges, disappear) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumTime(n: number, edges: number[][], disappear: number[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer[] $disappear\n     * @return Integer[]\n     */\n    function minimumTime($n, $edges, $disappear) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumTime(_ n: Int, _ edges: [[Int]], _ disappear: [Int]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumTime(n: Int, edges: Array<IntArray>, disappear: IntArray): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> minimumTime(int n, List<List<int>> edges, List<int> disappear) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumTime(n int, edges [][]int, disappear []int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer[]} disappear\n# @return {Integer[]}\ndef minimum_time(n, edges, disappear)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumTime(n: Int, edges: Array[Array[Int]], disappear: Array[Int]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_time(n: i32, edges: Vec<Vec<i32>>, disappear: Vec<i32>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-time n edges disappear)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_time(N :: integer(), Edges :: [[integer()]], Disappear :: [integer()]) -> [integer()].\nminimum_time(N, Edges, Disappear) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_time(n :: integer, edges :: [[integer]], disappear :: [integer]) :: [integer]\n  def minimum_time(n, edges, disappear) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is an undirected graph of <code>n</code> nodes. You are given a 2D array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]</code> describes an edge between node <code>u<sub>i</sub></code> and node <code>v<sub>i</sub></code> with a traversal time of <code>length<sub>i</sub></code> units.</p>\n\n<p>Additionally, you are given an array <code>disappear</code>, where <code>disappear[i]</code> denotes the time when the node <code>i</code> disappears from the graph and you won&#39;t be able to visit it.</p>\n\n<p><strong>Notice</strong> that the graph might be disconnected and might contain multiple edges.</p>\n\n<p>Return the array <code>answer</code>, with <code>answer[i]</code> denoting the <strong>minimum</strong> units of time required to reach node <code>i</code> from node 0. If node <code>i</code> is <strong>unreachable</strong> from node 0 then <code>answer[i]</code> is <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img 10px=\"\" alt=\"\" padding:=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/09/example1.png\" style=\"width: 350px; height: 210px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\"> n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,1,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\"> [0,-1,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.</p>\n\n<ul>\n\t<li>For node 0, we don&#39;t need any time as it is our starting point.</li>\n\t<li>For node 1, we need at least 2 units of time to traverse <code>edges[0]</code>. Unfortunately, it disappears at that moment, so we won&#39;t be able to visit it.</li>\n\t<li>For node 2, we need at least 4 units of time to traverse <code>edges[2]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img 10px=\"\" alt=\"\" padding:=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/09/example2.png\" style=\"width: 350px; height: 210px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\"> n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,3,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\"> [0,2,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.</p>\n\n<ul>\n\t<li>For node 0, we don&#39;t need any time as it is the starting point.</li>\n\t<li>For node 1, we need at least 2 units of time to traverse <code>edges[0]</code>.</li>\n\t<li>For node 2, we need at least 3 units of time to traverse <code>edges[0]</code> and <code>edges[1]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, edges = [[0,1,1]], disappear = [1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Exactly when we reach node 1, it disappears.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges[i] == [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= length<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>disappear.length == n</code></li>\n\t<li><code>1 &lt;= disappear[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "3\n[[0,1,2],[1,2,1],[0,2,4]]\n[1,1,5]\n3\n[[0,1,2],[1,2,1],[0,2,4]]\n[1,3,5]\n2\n[[0,1,1]]\n[1,1]",
        "formTitle": "[3112]Minimum Time to Visit Disappearing Nodes",
        "frequency": 0.0,
        "frontendQuestionId": "3112",
        "hints": [
            "Use Dijkstra鈥檚 algorithm, but only visit nodes if you can reach them before disappearance."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumTime",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "edges",
                    "type": "integer[][]"
                },
                {
                    "name": "disappear",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3389",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "3\n[[0,1,2],[1,2,1],[0,2,4]]\n[1,1,5]",
        "title": "Minimum Time to Visit Disappearing Nodes",
        "titleSlug": "minimum-time-to-visit-disappearing-nodes",
        "infer_hints": [
            "If you think about it carefully, this problem is a shortest path problem with a twist.",
            "How can we use the disappearing times to optimize the time complexity of our algorithm?",
            "You can do a modified version of BFS to solve this problem.",
            "Can we use a shortest path algorithm?",
            "Use the shortest path algorithm.",
            "We can use Dijkstra's algorithm with a priority queue.",
            "Do a BFS and use a priority queue to maintain the nodes to visit.",
            "Think about the graph as a directed graph, where the edge [u, v, length] means there is a directed edge from u to v with a time cost of length.",
            "What is the shortest path between two nodes?",
            "What if we use Dijkstra's algorithm?",
            "Can we use a Dijkstra-like algorithm to solve this?",
            "We can use Dijkstra's algorithm with some modifications.",
            "Try to use Dijkstra's algorithm.",
            "Try using Dijkstra's algorithm.",
            "Use a priority queue to store the nodes and their minimum distance.",
            "What if we consider each node as a separate graph and then perform Dijkstra's algorithm?",
            "Can we do a BFS from the node 0 and then try to find the shortest path to all the nodes? \r\n\r\nIf we try to find the shortest path to all the nodes, it will be a TLE.",
            "Use Dijkstra's algorithm.",
            "If a node is visible, we can find its minimum time by checking all its children.",
            "You can use Dijkstra's algorithm."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minRectanglesToCoverPoints(vector<vector<int>>& points, int w) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minRectanglesToCoverPoints(int[][] points, int w) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minRectanglesToCoverPoints(self, points, w):\n        \"\"\"\n        :type points: List[List[int]]\n        :type w: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minRectanglesToCoverPoints(self, points: List[List[int]], w: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minRectanglesToCoverPoints(int** points, int pointsSize, int* pointsColSize, int w) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinRectanglesToCoverPoints(int[][] points, int w) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} points\n * @param {number} w\n * @return {number}\n */\nvar minRectanglesToCoverPoints = function(points, w) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minRectanglesToCoverPoints(points: number[][], w: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @param Integer $w\n     * @return Integer\n     */\n    function minRectanglesToCoverPoints($points, $w) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minRectanglesToCoverPoints(_ points: [[Int]], _ w: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minRectanglesToCoverPoints(points: Array<IntArray>, w: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minRectanglesToCoverPoints(List<List<int>> points, int w) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minRectanglesToCoverPoints(points [][]int, w int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} points\n# @param {Integer} w\n# @return {Integer}\ndef min_rectangles_to_cover_points(points, w)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minRectanglesToCoverPoints(points: Array[Array[Int]], w: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_rectangles_to_cover_points(points: Vec<Vec<i32>>, w: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-rectangles-to-cover-points points w)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_rectangles_to_cover_points(Points :: [[integer()]], W :: integer()) -> integer().\nmin_rectangles_to_cover_points(Points, W) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_rectangles_to_cover_points(points :: [[integer]], w :: integer) :: integer\n  def min_rectangles_to_cover_points(points, w) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D integer array <code>points</code>, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. You are also given an integer <code>w</code>. Your task is to <strong>cover</strong> <strong>all</strong> the given points with rectangles.</p>\n\n<p>Each rectangle has its lower end at some point <code>(x<sub>1</sub>, 0)</code> and its upper end at some point <code>(x<sub>2</sub>, y<sub>2</sub>)</code>, where <code>x<sub>1</sub> &lt;= x<sub>2</sub></code>, <code>y<sub>2</sub> &gt;= 0</code>, and the condition <code>x<sub>2</sub> - x<sub>1</sub> &lt;= w</code> <strong>must</strong> be satisfied for each rectangle.</p>\n\n<p>A point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.</p>\n\n<p>Return an integer denoting the <strong>minimum</strong> number of rectangles needed so that each point is covered by <strong>at least one</strong> rectangle<em>.</em></p>\n\n<p><strong>Note:</strong> A point may be covered by more than one rectangle.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-33-05.png\" style=\"width: 205px; height: 300px;\" /></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">points = [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">2</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The image above shows one possible placement of rectangles to cover the points:</p>\n\n<ul>\n\t<li>A rectangle with a lower end at <code>(1, 0)</code> and its upper end at <code>(2, 8)</code></li>\n\t<li>A rectangle with a lower end at <code>(3, 0)</code> and its upper end at <code>(4, 8)</code></li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-18-59-12.png\" style=\"width: 260px; height: 250px;\" /></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">3</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The image above shows one possible placement of rectangles to cover the points:</p>\n\n<ul>\n\t<li>A rectangle with a lower end at <code>(0, 0)</code> and its upper end at <code>(2, 2)</code></li>\n\t<li>A rectangle with a lower end at <code>(3, 0)</code> and its upper end at <code>(5, 5)</code></li>\n\t<li>A rectangle with a lower end at <code>(6, 0)</code> and its upper end at <code>(6, 6)</code></li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-24-03.png\" style=\"height: 150px; width: 127px;\" /></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">points = [[2,3],[1,2]], w = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">2</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The image above shows one possible placement of rectangles to cover the points:</p>\n\n<ul>\n\t<li>A rectangle with a lower end at <code>(1, 0)</code> and its upper end at <code>(1, 2)</code></li>\n\t<li>A rectangle with a lower end at <code>(2, 0)</code> and its upper end at <code>(2, 3)</code></li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub> == points[i][0] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= y<sub>i</sub> == points[i][1] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= w &lt;= 10<sup>9</sup></code></li>\n\t<li>All pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "[[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]]\n1\n[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]\n2\n[[2,3],[1,2]]\n0",
        "formTitle": "[3111]Minimum Rectangles to Cover Points",
        "frequency": 0.0,
        "frontendQuestionId": "3111",
        "hints": [
            "The <code>y</code> values don't matter; only the <code>x</code> values matter.",
            "Sort all the points by <code>x<sub>i</sub></code>.",
            "Each time, select the smallest <code>x</code> value, <code>x<sub>0</sub></code>, from the unselected points, and then select all the points with <code>x</code> values not larger than <code>x<sub>0</sub> + w</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minRectanglesToCoverPoints",
            "params": [
                {
                    "name": "points",
                    "type": "integer[][]"
                },
                {
                    "name": "w",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3390",
        "similarQuestions": [
            "[{\"title\": \"Minimum Area Rectangle\", \"titleSlug\": \"minimum-area-rectangle\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c0f\\u9762\\u79ef\\u77e9\\u5f62\", \"isPaidOnly\": false}, {\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u63a5\\u8fd1\\u539f\\u70b9\\u7684 K \\u4e2a\\u70b9\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]]\n1",
        "title": "Minimum Rectangles to Cover Points",
        "titleSlug": "minimum-rectangles-to-cover-points",
        "infer_hints": [
            "Sort the points by x-coordinate.",
            "What if you only care about the y-coordinate of each point?",
            "We can use a priority queue to store the rectangles that can be created.",
            "You can maintain a sorted list of all possible rectangle heights and the number of rectangles that can have that height.",
            "If you have two points, how many rectangles can you create?",
            "Can you use a binary search to solve this problem?",
            "You can use a sweep line and use it to keep track of the current maximum y-coordinate.",
            "You can use a sweep line to solve this problem.",
            "Can you think of a data structure that can store the y-coordinates of the points that have the same x-coordinate?",
            "Sort the points by x-coordinate.",
            "For each x-coordinate, find the maximum y-coordinate.",
            "Use a binary search to find the y-coordinate of the rectangle's upper end.",
            "Can you find the smallest x-coordinate of a rectangle for each y-coordinate?",
            "Use the SortedList data structure.",
            "Sort the points based on their x-coordinate.",
            "How many rectangles can we create with the left point at (x<sub>i</sub>, 0) and the right point at (x<sub>i</sub> + w, y<sub>i</sub>)?",
            "You can sort the points by their x-coordinates and then try to build the rectangles from left to right.",
            "Sort the points by their x-coordinates.",
            "The points can be sorted by their x-coordinates.",
            "Try to simulate the process of covering the points by rectangles."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxScore(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxScore(List<List<Integer>> grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxScore(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxScore(self, grid: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxScore(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxScore(IList<IList<int>> grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxScore = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxScore(grid: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxScore($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxScore(_ grid: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxScore(grid: List<List<Int>>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxScore(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxScore(grid [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef max_score(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxScore(grid: List[List[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_score(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-score grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_score(Grid :: [[integer()]]) -> integer().\nmax_score(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_score(grid :: [[integer]]) :: integer\n  def max_score(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an <code>m x n</code> matrix <code>grid</code> consisting of <strong>positive</strong> integers. You can move from a cell in the matrix to <strong>any</strong> other cell that is either to the bottom or to the right (not necessarily adjacent). The score of a move from a cell with the value <code>c1</code> to a cell with the value <code>c2</code> is <code>c2 - c1</code>.<!-- notionvc: 8819ca04-8606-4ecf-815b-fb77bc63b851 --></p>\n\n<p>You can start at <strong>any</strong> cell, and you have to make <strong>at least</strong> one move.</p>\n\n<p>Return the <strong>maximum</strong> total score you can achieve.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/14/grid1.png\" style=\"width: 240px; height: 240px;\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">9</span></p>\n\n<p><strong>Explanation:</strong> We start at the cell <code>(0, 1)</code>, and we perform the following moves:<br />\n- Move from the cell <code>(0, 1)</code> to <code>(2, 1)</code> with a score of <code>7 - 5 = 2</code>.<br />\n- Move from the cell <code>(2, 1)</code> to <code>(2, 2)</code> with a score of <code>14 - 7 = 7</code>.<br />\nThe total score is <code>2 + 7 = 9</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/08/moregridsdrawio-1.png\" style=\"width: 180px; height: 116px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[4,3,2],[3,2,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong> We start at the cell <code>(0, 0)</code>, and we perform one move: <code>(0, 0)</code> to <code>(0, 1)</code>. The score is <code>3 - 4 = -1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>4 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]\n[[4,3,2],[3,2,1]]",
        "formTitle": "[3148]Maximum Difference Score in a Grid",
        "frequency": 0.0,
        "frontendQuestionId": "3148",
        "hints": [
            "Any path from a cell <code>(x1, y1)</code> to another cell <code>(x2, y2)</code> will always have a score of <code>grid[x2][y2] - grid[x1][y1]</code>.",
            "Let鈥檚 say we fix the starting cell <code>(x1, y1)</code>, how to the find a cell <code>(x2, y2)</code> such that the value <code>grid[x2][y2] - grid[x1][y1]</code> is the maximum possible?"
        ],
        "level": 2,
        "metaData": {
            "name": "maxScore",
            "params": [
                {
                    "name": "grid",
                    "type": "list<list<integer>>"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3391",
        "similarQuestions": [
            "[{\"title\": \"Maximum Score From Grid Operations\", \"titleSlug\": \"maximum-score-from-grid-operations\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u7f51\\u683c\\u56fe\\u64cd\\u4f5c\\u540e\\u7684\\u6700\\u5927\\u5206\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]",
        "title": "Maximum Difference Score in a Grid",
        "titleSlug": "maximum-difference-score-in-a-grid",
        "infer_hints": [
            "Use dynamic programming.",
            "Use dynamic programming.",
            "If you're going to move right or down, you can do it in either order.",
            "Do a breadth-first search.",
            "Try to solve this problem in a bottom-up manner.",
            "What is the minimum score you can get?",
            "Can you do it in O(m*n) time complexity?",
            "How many moves can you make?",
            "You can use dynamic programming.",
            "This is a dynamic programming problem.",
            "How can you compute the score of the path (0,0) -> (i,j) -> (m-1,n-1) for each possible ending point (i,j) in O(mn) time?",
            "Use dynamic programming.",
            "You can start at any cell and keep track of the minimum value you've seen so far.",
            "We can solve this problem using dynamic programming.",
            "The score is a sum of differences of the values in the path. We can use dynamic programming to find the best score for each cell.",
            "How to maximize the score?",
            "You can maintain a 2D prefix sum array dp, where dp[i][j] is the maximum score we can achieve by considering the first i * j cells.",
            "The score for each cell is the max difference you can get if you start at that cell.",
            "You can use DP to solve this problem.",
            "Can you solve this problem in one pass with dynamic programming?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minEnd(int n, int x) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minEnd(int n, int x) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minEnd(self, n, x):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minEnd(self, n: int, x: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minEnd(int n, int x) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinEnd(int n, int x) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} x\n * @return {number}\n */\nvar minEnd = function(n, x) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minEnd(n: number, x: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @return Integer\n     */\n    function minEnd($n, $x) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minEnd(_ n: Int, _ x: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minEnd(n: Int, x: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minEnd(int n, int x) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minEnd(n int, x int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} x\n# @return {Integer}\ndef min_end(n, x)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minEnd(n: Int, x: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_end(n: i32, x: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-end n x)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_end(N :: integer(), X :: integer()) -> integer().\nmin_end(N, X) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_end(n :: integer, x :: integer) :: integer\n  def min_end(n, x) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two integers <code>n</code> and <code>x</code>. You have to construct an array of <strong>positive</strong> integers <code>nums</code> of size <code>n</code> where for every <code>0 &lt;= i &lt; n - 1</code>, <code>nums[i + 1]</code> is <strong>greater than</strong> <code>nums[i]</code>, and the result of the bitwise <code>AND</code> operation between all elements of <code>nums</code> is <code>x</code>.</p>\n\n<p>Return the <strong>minimum</strong> possible value of <code>nums[n - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, x = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>nums</code> can be <code>[4,5,6]</code> and its last element is 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, x = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>nums</code> can be <code>[7,15]</code> and its last element is 15.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, x &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "exampleTestcases": "3\n4\n2\n7",
        "formTitle": "[3133]Minimum Array End",
        "frequency": 0.0,
        "frontendQuestionId": "3133",
        "hints": [
            "Each element of the array should be obtained by 鈥渕erging鈥� <code>x</code> and <code>v</code> where <code>v = 0, 1, 2, 鈥�(n - 1)</code>.",
            "To merge <code>x</code> with another number <code>v</code>, keep the set bits of <code>x</code> untouched, for all the other bits, fill the set bits of <code>v</code> from right to left in order one by one.",
            "So the final answer is the 鈥渕erge鈥� of <code>x</code> and <code>n - 1</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minEnd",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "x",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3394",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "3\n4",
        "title": "Minimum Array End",
        "titleSlug": "minimum-array-end",
        "infer_hints": [
            "Can we use a brute-force approach?  Try all possible values of the last element.",
            "Try to find a pattern or a formula to get the last element of the array.",
            "For each bit in <code>x</code>, you can create a range that has this bit set.",
            "What is the smallest possible value of the last number?  If x &gt;= 2^i for some i, then the last number should be at least 2^i.",
            "If the highest bit of x is set, we can set all other bits of nums[i] as well.",
            "The last number must be the smallest number that is greater than all possible numbers in the array.",
            "Try to find the smallest possible value of <code>nums[n - 1]</code> using bitwise operation.",
            "Find the smallest 2<sup>i</sup> &gt;= n for i &gt;= 0.",
            "Try binary search.",
            "Try binary search on the answer.",
            "If the last element is not equal to x, it means we can add the missing bit to the last element.",
            "For each <code>i</code>, we can set <code>nums[i]</code> to be either <code>x &amp; i</code> or <code>x &amp; i + 1</code>.",
            "You need to find the minimum number of bits to represent x.",
            "How to make the next number bigger?",
            "If we know that <code>nums[i]</code> is always smaller than <code>nums[i + 1]</code>, then we can try to make <code>nums[i + 1]</code> as small as possible.",
            "What are the constraints of the array?",
            "If <code>nums[i] = nums[i - 1] + (x &gt;&gt; i - 1 &amp; 1)</code>, then the result of the bitwise AND operation is equal to x.",
            "Try binary search.",
            "You can use binary search to solve this problem.",
            "The minimum value of the array is at least 1.  (Or is it 0?)"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minAnagramLength(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minAnagramLength(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minAnagramLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minAnagramLength(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minAnagramLength(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinAnagramLength(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minAnagramLength = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minAnagramLength(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minAnagramLength($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minAnagramLength(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minAnagramLength(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minAnagramLength(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minAnagramLength(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef min_anagram_length(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minAnagramLength(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_anagram_length(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-anagram-length s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_anagram_length(S :: unicode:unicode_binary()) -> integer().\nmin_anagram_length(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_anagram_length(s :: String.t) :: integer\n  def min_anagram_length(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>, which is known to be a concatenation of <strong>anagrams</strong> of some string <code>t</code>.</p>\n\n<p>Return the <strong>minimum</strong> possible length of the string <code>t</code>.</p>\n\n<p>An <strong>anagram</strong> is formed by rearranging the letters of a string. For example, &quot;aab&quot;, &quot;aba&quot;, and, &quot;baa&quot; are anagrams of &quot;aab&quot;.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abba&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>One possible string <code>t</code> could be <code>&quot;ba&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;cdef&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>One possible string <code>t</code> could be <code>&quot;cdef&quot;</code>, notice that <code>t</code> can be equal to <code>s</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consist only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abba\"\n\"cdef\"",
        "formTitle": "[3138]Minimum Length of Anagram Concatenation",
        "frequency": 0.0,
        "frontendQuestionId": "3138",
        "hints": [
            "The answer should be a divisor of <code>s.length</code>.",
            "Check each candidate naively."
        ],
        "level": 2,
        "metaData": {
            "name": "minAnagramLength",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3395",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "\"abba\"",
        "title": "Minimum Length of Anagram Concatenation",
        "titleSlug": "minimum-length-of-anagram-concatenation",
        "infer_hints": [
            "If we have a length-n string, we can have a minimum length-n string.",
            "The length of the answer is at most 105.",
            "For each length <code>x</code>, you can check if the string <code>s</code> has an anagram of length <code>x</code>.",
            "Use sliding window.",
            "How to know if all characters in s are present in a window?",
            "What is the size of the array?  How do you compute it?",
            "If we want the minimum length of the concatenation, what can we do?",
            "Keep track of the smallest length that can be achieved for each length of the anagram.",
            "Think about how you can check for anagrams.",
            "Try all possible lengths for the string t.",
            "Keep adding characters from s one by one and check if you can form a substring that is an anagram of s.",
            "The concatenation of all anagrams of t in sorted order would result in the string s.",
            "We can check the smallest length possible for each character.",
            "For each length, count the number of substrings that can be formed by using each character in a single pass.",
            "Find all substrings of <code>s</code>, and for each substring, check if it is an anagram of <code>s</code>.",
            "You can solve this problem in O(n) time by using a hash table to count the frequency of each character.",
            "Do we have enough information to solve this?  We have a string <code>s</code> and know it can be rearranged to form an anagram of some string <code>t</code>.",
            "Find the smallest number of anagrams that can be concatenated to form the string.",
            "Find the first occurrence of each letter in <code>s</code>.",
            "If the answer is x, then s should have a length that is a multiple of x."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool isValid(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean isValid(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def isValid(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def isValid(self, word: str) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool isValid(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool IsValid(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {boolean}\n */\nvar isValid = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function isValid(word: string): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function isValid($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func isValid(_ word: String) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun isValid(word: String): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool isValid(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func isValid(word string) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Boolean}\ndef is_valid(word)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def isValid(word: String): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn is_valid(word: String) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (is-valid word)\n  (-> string? boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec is_valid(Word :: unicode:unicode_binary()) -> boolean().\nis_valid(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec is_valid(word :: String.t) :: boolean\n  def is_valid(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>A word is considered <strong>valid</strong> if:</p>\n\n<ul>\n\t<li>It contains a <strong>minimum</strong> of 3 characters.</li>\n\t<li>It contains only digits (0-9), and English letters (uppercase and lowercase).</li>\n\t<li>It includes <strong>at least</strong> one <strong>vowel</strong>.</li>\n\t<li>It includes <strong>at least</strong> one <strong>consonant</strong>.</li>\n</ul>\n\n<p>You are given a string <code>word</code>.</p>\n\n<p>Return <code>true</code> if <code>word</code> is valid, otherwise, return <code>false</code>.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li><code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>, and their uppercases are <strong>vowels</strong>.</li>\n\t<li>A <strong>consonant</strong> is an English letter that is not a vowel.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;234Adas&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>This word satisfies the conditions.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;b3&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The length of this word is fewer than 3, and does not have a vowel.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;a3$e&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>This word contains a <code>&#39;$&#39;</code> character and does not have a consonant.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 20</code></li>\n\t<li><code>word</code> consists of English uppercase and lowercase letters, digits, <code>&#39;@&#39;</code>, <code>&#39;#&#39;</code>, and <code>&#39;$&#39;</code>.</li>\n</ul>\n",
        "exampleTestcases": "\"234Adas\"\n\"b3\"\n\"a3$e\"",
        "formTitle": "[3136]Valid Word",
        "frequency": 0.0,
        "frontendQuestionId": "3136",
        "hints": [
            "Use if-else to check all the conditions."
        ],
        "level": 1,
        "metaData": {
            "name": "isValid",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3396",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"234Adas\"",
        "title": "Valid Word",
        "titleSlug": "valid-word",
        "infer_hints": [
            "Find the position of the first vowel and the position of the first consonant.",
            "How about checking each condition one by one?",
            "Use regular expressions to match the required pattern.",
            "Check each condition separately.",
            "If a word is valid, it should satisfy all the conditions.",
            "What is the length of a valid word?",
            "Create a list of vowels.",
            "A valid word must contain at least one vowel and one consonant.",
            "Use regular expressions to check if the word contains at least one vowel and one consonant.",
            "What if the string is not a valid word?",
            "Check if the word has a vowel and a consonant.",
            "Check if the string has at least 3 characters and contains only letters and digits.",
            "We can check each condition separately.",
            "How about checking if there is at least one vowel and one consonant?",
            "If a word has only digits, it is not valid.",
            "Use a regular expression to check if the word meets the conditions.",
            "The only special characters are '@', '#', '$', and '&'.",
            "Check the first character. If it's a letter, it should be a consonant. If it's a digit, it should be even.",
            "If the word does not meet the conditions, return False.",
            "What are the conditions for a word to be valid?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int addedInteger(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int addedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def addedInteger(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def addedInteger(self, nums1: List[int], nums2: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int addedInteger(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int AddedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar addedInteger = function(nums1, nums2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function addedInteger(nums1: number[], nums2: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function addedInteger($nums1, $nums2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func addedInteger(_ nums1: [Int], _ nums2: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun addedInteger(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int addedInteger(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func addedInteger(nums1 []int, nums2 []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef added_integer(nums1, nums2)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def addedInteger(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn added_integer(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (added-integer nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec added_integer(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nadded_integer(Nums1, Nums2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec added_integer(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def added_integer(nums1, nums2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two arrays of equal length, <code>nums1</code> and <code>nums2</code>.</p>\n\n<p>Each element in <code>nums1</code> has been increased (or decreased in the case of negative) by an integer, represented by the variable <code>x</code>.</p>\n\n<p>As a result, <code>nums1</code> becomes <strong>equal</strong> to <code>nums2</code>. Two arrays are considered <strong>equal</strong> when they contain the same integers with the same frequencies.</p>\n\n<p>Return the integer <code>x</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [2,6,4], nums2 = [9,7,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The integer added to each element of <code>nums1</code> is 3.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [10], nums2 = [5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">-5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The integer added to each element of <code>nums1</code> is -5.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [1,1,1,1], nums2 = [1,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The integer added to each element of <code>nums1</code> is 0.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length == nums2.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n\t<li>The test cases are generated in a way that there is an integer <code>x</code> such that <code>nums1</code> can become equal to <code>nums2</code> by adding <code>x</code> to each element of <code>nums1</code>.</li>\n</ul>\n",
        "exampleTestcases": "[2,6,4]\n[9,7,5]\n[10]\n[5]\n[1,1,1,1]\n[1,1,1,1]",
        "formTitle": "[3131]Find the Integer Added to Array I",
        "frequency": 0.0,
        "frontendQuestionId": "3131",
        "hints": [
            "Notice that, after sorting both arrays, there should be a one-to-one correspondence between every element.",
            "Thus <code>x = min(nums2) - min(nums1)</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "addedInteger",
            "params": [
                {
                    "name": "nums1",
                    "type": "integer[]"
                },
                {
                    "name": "nums2",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3397",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[2,6,4]\n[9,7,5]",
        "title": "Find the Integer Added to Array I",
        "titleSlug": "find-the-integer-added-to-array-i",
        "infer_hints": [
            "How can we find the difference between the sums of the two arrays?",
            "We need to find the difference between the sums of the two arrays.",
            "The integers in nums1 can be represented as A = {a[1], a[2],..., a[n]} + x.  The integers in nums2 can be represented as B = {b[1], b[2],..., b[n]} + y.  The sum of the differences of corresponding elements from A and B (i.e. sum((a[i] - b[i]) for all i)) is zero.",
            "The total sum of both arrays should be equal.",
            "What if you subtract each element of <code>nums1</code> from <code>nums2</code>?",
            "The sum of the array is the sum of the differences between the two arrays.",
            "What is the difference between the sum of nums1 and nums2?",
            "Can you find the sum of the two arrays?",
            "Try subtracting the arrays.",
            "The sum of the two arrays is equal.",
            "You can sort the arrays and then find the difference.",
            "You can solve this problem in one pass.",
            "If you subtract the sum of the array <code>nums1</code> from the sum of the array <code>nums2</code>, you get the difference of the sums. \r\n\r\nCan you find this difference?",
            "Think about the sum of two arrays and the sum of the differences between corresponding elements of two arrays.",
            "Find the sum of both arrays.",
            "Use a map to count the frequency of each integer in nums1 and nums2.",
            "Try to find a way to sum the differences between the two arrays.",
            "What is the difference between the sum of nums1 and nums2?",
            "Do we need to sort both arrays first?  Or can we just count the frequency of each number in both arrays?",
            "If we find the sum of both arrays, we can easily find the integer added to nums1 by subtracting the sum of nums2 from the sum of nums1."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool canMakeSquare(vector<vector<char>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean canMakeSquare(char[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def canMakeSquare(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def canMakeSquare(self, grid: List[List[str]]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool canMakeSquare(char** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool CanMakeSquare(char[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {character[][]} grid\n * @return {boolean}\n */\nvar canMakeSquare = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function canMakeSquare(grid: string[][]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Boolean\n     */\n    function canMakeSquare($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func canMakeSquare(_ grid: [[Character]]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun canMakeSquare(grid: Array<CharArray>): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool canMakeSquare(List<List<String>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func canMakeSquare(grid [][]byte) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Character[][]} grid\n# @return {Boolean}\ndef can_make_square(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def canMakeSquare(grid: Array[Array[Char]]): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn can_make_square(grid: Vec<Vec<char>>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (can-make-square grid)\n  (-> (listof (listof char?)) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec can_make_square(Grid :: [[char()]]) -> boolean().\ncan_make_square(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec can_make_square(grid :: [[char]]) :: boolean\n  def can_make_square(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D matrix <code>grid</code> of size <code>3 x 3</code> consisting only of characters <code>&#39;B&#39;</code> and <code>&#39;W&#39;</code>. Character <code>&#39;W&#39;</code> represents the white color<!-- notionvc: 06a49cc0-a296-4bd2-9bfe-c8818edeb53a -->, and character <code>&#39;B&#39;</code> represents the black color<!-- notionvc: 06a49cc0-a296-4bd2-9bfe-c8818edeb53a -->.</p>\n\n<p>Your task is to change the color of <strong>at most one</strong> cell<!-- notionvc: c04cb478-8dd5-49b1-80bb-727c6b1e0232 --> so that the matrix has a <code>2 x 2</code> square where all cells are of the same color.<!-- notionvc: adf957e1-fa0f-40e5-9a2e-933b95e276a7 --></p>\n\n<p>Return <code>true</code> if it is possible to create a <code>2 x 2</code> square of the same color, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<style type=\"text/css\">.grid-container {\n  display: grid;\n  grid-template-columns: 30px 30px 30px;\n  padding: 10px;\n}\n.grid-item {\n  background-color: black;\n  border: 1px solid gray;\n  height: 30px;\n  font-size: 30px;\n  text-align: center;\n}\n.grid-item-white {\n  background-color: white;\n}\n</style>\n<style class=\"darkreader darkreader--sync\" media=\"screen\" type=\"text/css\">\n</style>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"grid-container\">\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;W&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It can be done by changing the color of the <code>grid[0][2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"grid-container\">\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;W&quot;,&quot;B&quot;,&quot;W&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It cannot be done by changing at most one cell.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"grid-container\">\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;W&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;W&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The <code>grid</code> already contains a <code>2 x 2</code> square of the same color.<!-- notionvc: 9a8b2d3d-1e73-457a-abe0-c16af51ad5c2 --></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>grid.length == 3</code></li>\n\t<li><code>grid[i].length == 3</code></li>\n\t<li><code>grid[i][j]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>.</li>\n</ul>\n",
        "exampleTestcases": "[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]\n[[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]]\n[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]]",
        "formTitle": "[3127]Make a Square with the Same Color",
        "frequency": 0.0,
        "frontendQuestionId": "3127",
        "hints": [
            "It is impossible to create <code>2 x 2</code> square with the same color by changing the color of at most one cell when the number of <code>鈥榃'</code> or <code>'B鈥�</code> in all squares is 2."
        ],
        "level": 1,
        "metaData": {
            "name": "canMakeSquare",
            "params": [
                {
                    "name": "grid",
                    "type": "character[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3398",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]",
        "title": "Make a Square with the Same Color",
        "titleSlug": "make-a-square-with-the-same-color",
        "infer_hints": [
            "Use the bitwise XOR operator to change the color of a cell.",
            "If you change one cell, you can change it to the other color.  Try changing each cell and see if you can make a square.",
            "We can simulate the process of changing the color of the cell.  How can we check if the cell can be changed?",
            "Try to check all possible squares.",
            "How can you check whether a 2 x 2 square has the same color?",
            "Consider each 2x2 subgrid of the grid.",
            "How many cells should have the same color?",
            "Try all possible 2 x 2 squares in the grid.",
            "Count the number of white and black cells in each of the 2x2 sub-matrices.",
            "Count the number of 'B's and 'W's in each 2x2 square.",
            "If you want to make a 2 x 2 square with the same color, the color of the top-left cell must be the same as the color of the bottom-right cell.",
            "Try to find the 2x2 square that can be made.",
            "You can change one cell from black to white or one cell from white to black.",
            "You can flip a cell in 4 ways.",
            "Try all possible cells for the cell that will be changed.",
            "Can you make a square with one cell as black and another cell as white?",
            "Find the count of white and black cells in the 2x2 square.",
            "For each cell, check if it is possible to make a 2x2 square with the same color by changing one cell.",
            "You can change the color of one cell.  What does this change?",
            "If the matrix has a 2 x 2 square of the same color, you can change the color of one cell."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumAddedInteger(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumAddedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumAddedInteger(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumAddedInteger(self, nums1: List[int], nums2: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumAddedInteger(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumAddedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minimumAddedInteger = function(nums1, nums2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumAddedInteger(nums1: number[], nums2: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minimumAddedInteger($nums1, $nums2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumAddedInteger(_ nums1: [Int], _ nums2: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumAddedInteger(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumAddedInteger(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumAddedInteger(nums1 []int, nums2 []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef minimum_added_integer(nums1, nums2)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumAddedInteger(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_added_integer(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-added-integer nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_added_integer(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nminimum_added_integer(Nums1, Nums2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_added_integer(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def minimum_added_integer(nums1, nums2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>.</p>\n\n<p>From <code>nums1</code> two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable <code>x</code>.</p>\n\n<p>As a result, <code>nums1</code> becomes <strong>equal</strong> to <code>nums2</code>. Two arrays are considered <strong>equal</strong> when they contain the same integers with the same frequencies.</p>\n\n<p>Return the <strong>minimum</strong> possible integer<em> </em><code>x</code><em> </em>that achieves this equivalence.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [4,20,16,12,8], nums2 = [14,18,10]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">-2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After removing elements at indices <code>[0,4]</code> and adding -2, <code>nums1</code> becomes <code>[18,14,10]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [3,5,5,3], nums2 = [7,7]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After removing elements at indices <code>[0,3]</code> and adding 2, <code>nums1</code> becomes <code>[7,7]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums1.length &lt;= 200</code></li>\n\t<li><code>nums2.length == nums1.length - 2</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n\t<li>The test cases are generated in a way that there is an integer <code>x</code> such that <code>nums1</code> can become equal to <code>nums2</code> by removing two elements and adding <code>x</code> to each element of <code>nums1</code>.</li>\n</ul>\n",
        "exampleTestcases": "[4,20,16,12,8]\n[14,18,10]\n[3,5,5,3]\n[7,7]",
        "formTitle": "[3132]Find the Integer Added to Array II",
        "frequency": 0.0,
        "frontendQuestionId": "3132",
        "hints": [
            "Try all possibilities to remove 2 elements from <code>nums1</code>.",
            "<code>x</code> should be equal to <code>min(nums2) - min(nums1)</code>, check it naively."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumAddedInteger",
            "params": [
                {
                    "name": "nums1",
                    "type": "integer[]"
                },
                {
                    "name": "nums2",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3399",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "鉁�",
        "testCase": "[4,20,16,12,8]\n[14,18,10]",
        "title": "Find the Integer Added to Array II",
        "titleSlug": "find-the-integer-added-to-array-ii",
        "infer_hints": [
            "What if you were to sort both arrays?",
            "Use a map to count the number of times each integer occurs in both arrays.",
            "What if we sum the elements of both arrays and subtract the sum of nums2 from the sum of nums1?",
            "Use the frequency of each number in both arrays.",
            "You can use a frequency map to count the numbers in each array.",
            "How can we ensure we get the minimum possible integer x?",
            "If you are adding a number <code>x</code> to each element in <code>nums1</code>, then the total sum of <code>nums1</code> and <code>nums2</code> should be equal.",
            "The smallest integer that makes nums1 equal to nums2 is the difference between the sums of nums1 and nums2.",
            "If the sum of the arrays is the same, then the integers removed must be the same.",
            "Think of each element of the final array as the sum of an element from the first array and the difference between the sum of the two arrays.",
            "Find the sum of all elements in both arrays.",
            "What if you subtract two elements from the sum of nums1 and nums2?",
            "Can you find the difference between the sums of the two arrays?",
            "What if you have two arrays, sorted, and you want to find the smallest difference?",
            "You need to calculate the sum of the differences between the arrays, but you need to be careful with the signs.",
            "The answer must be in the range of all possible differences between numbers in both arrays.",
            "You can use the difference between the sums of the arrays to find the integer.",
            "The difference between the sums of the two arrays is the integer we need to return.",
            "For each number in nums1, compute the number of times it appears in nums2.",
            "The answer is the sum of the differences between each pair of elements in nums1 and nums2."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minCostToEqualizeArray(vector<int>& nums, int cost1, int cost2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minCostToEqualizeArray(self, nums, cost1, cost2):\n        \"\"\"\n        :type nums: List[int]\n        :type cost1: int\n        :type cost2: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minCostToEqualizeArray(self, nums: List[int], cost1: int, cost2: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minCostToEqualizeArray(int* nums, int numsSize, int cost1, int cost2) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} cost1\n * @param {number} cost2\n * @return {number}\n */\nvar minCostToEqualizeArray = function(nums, cost1, cost2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minCostToEqualizeArray(nums: number[], cost1: number, cost2: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $cost1\n     * @param Integer $cost2\n     * @return Integer\n     */\n    function minCostToEqualizeArray($nums, $cost1, $cost2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minCostToEqualizeArray(_ nums: [Int], _ cost1: Int, _ cost2: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minCostToEqualizeArray(nums: IntArray, cost1: Int, cost2: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minCostToEqualizeArray(List<int> nums, int cost1, int cost2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minCostToEqualizeArray(nums []int, cost1 int, cost2 int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} cost1\n# @param {Integer} cost2\n# @return {Integer}\ndef min_cost_to_equalize_array(nums, cost1, cost2)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minCostToEqualizeArray(nums: Array[Int], cost1: Int, cost2: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_cost_to_equalize_array(nums: Vec<i32>, cost1: i32, cost2: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-cost-to-equalize-array nums cost1 cost2)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_cost_to_equalize_array(Nums :: [integer()], Cost1 :: integer(), Cost2 :: integer()) -> integer().\nmin_cost_to_equalize_array(Nums, Cost1, Cost2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_cost_to_equalize_array(nums :: [integer], cost1 :: integer, cost2 :: integer) :: integer\n  def min_cost_to_equalize_array(nums, cost1, cost2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> and two integers <code>cost1</code> and <code>cost2</code>. You are allowed to perform <strong>either</strong> of the following operations <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> from <code>nums</code> and <strong>increase</strong> <code>nums[i]</code> by <code>1</code> for a cost of <code>cost1</code>.</li>\n\t<li>Choose two <strong>different</strong> indices <code>i</code>, <code>j</code>, from <code>nums</code> and <strong>increase</strong> <code>nums[i]</code> and <code>nums[j]</code> by <code>1</code> for a cost of <code>cost2</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> <strong>cost</strong> required to make all elements in the array <strong>equal</strong><em>. </em></p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,1], cost1 = 5, cost2 = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The following operations can be performed to make the values equal:</p>\n\n<ul>\n\t<li>Increase <code>nums[1]</code> by 1 for a cost of 5. <code>nums</code> becomes <code>[4,2]</code>.</li>\n\t<li>Increase <code>nums[1]</code> by 1 for a cost of 5. <code>nums</code> becomes <code>[4,3]</code>.</li>\n\t<li>Increase <code>nums[1]</code> by 1 for a cost of 5. <code>nums</code> becomes <code>[4,4]</code>.</li>\n</ul>\n\n<p>The total cost is 15.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,3,3,5], cost1 = 2, cost2 = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The following operations can be performed to make the values equal:</p>\n\n<ul>\n\t<li>Increase <code>nums[0]</code> and <code>nums[1]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[3,4,3,3,5]</code>.</li>\n\t<li>Increase <code>nums[0]</code> and <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[4,4,4,3,5]</code>.</li>\n\t<li>Increase <code>nums[0]</code> and <code>nums[3]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,4,4,4,5]</code>.</li>\n\t<li>Increase <code>nums[1]</code> and <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,5,4,5]</code>.</li>\n\t<li>Increase <code>nums[3]</code> by 1 for a cost of 2. <code>nums</code> becomes <code>[5,5,5,5,5]</code>.</li>\n</ul>\n\n<p>The total cost is 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,5,3], cost1 = 1, cost2 = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following operations can be performed to make the values equal:</p>\n\n<ul>\n\t<li>Increase <code>nums[0]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[4,5,3]</code>.</li>\n\t<li>Increase <code>nums[0]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,3]</code>.</li>\n\t<li>Increase <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,4]</code>.</li>\n\t<li>Increase <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,5]</code>.</li>\n</ul>\n\n<p>The total cost is 4.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= cost1 &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= cost2 &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[4,1]\n5\n2\n[2,3,3,3,5]\n2\n1\n[3,5,3]\n1\n3",
        "formTitle": "[3139]Minimum Cost to Equalize Array",
        "frequency": 0.0,
        "frontendQuestionId": "3139",
        "hints": [
            "How can you determine the minimum cost if you know the maximum value in the array once all values are made equal?",
            "If <code>cost2 > cost1 * 2</code>, we should just use <code>cost1</code> to change all the values to the maximum one.",
            "Otherwise, it's optimal to choose the smallest two values and use <code>cost2</code> to increase both of them.",
            "Since the maximum value is known, calculate the required increases to equalize all values, instead of naively simulating the operations.",
            "There are not a lot of candidates for the maximum; we can try all of them and choose which uses the minimum number of operations."
        ],
        "level": 3,
        "metaData": {
            "name": "minCostToEqualizeArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "cost1",
                    "type": "integer"
                },
                {
                    "name": "cost2",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3402",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": "?",
        "testCase": "[4,1]\n5\n2",
        "title": "Minimum Cost to Equalize Array",
        "titleSlug": "minimum-cost-to-equalize-array",
        "infer_hints": [
            "Consider the first operation.",
            "Use a prefix sum to compute the total cost of increasing all elements to a certain value.",
            "Use prefix and suffix sum.",
            "We can binary search the answer.  What is the cost if we want all the numbers to be equal to x?",
            "The minimum cost can be calculated by calculating the total cost for increasing each number to the median.",
            "We can keep track of the sum of the absolute differences between each number and the median.",
            "You can do a prefix-sum query for each value in the range of 1 to 10^6.",
            "How can you use binary search to solve this problem?",
            "The key is to calculate the cost to make the array equal to some specific value.",
            "You can use the concept of prefix and suffix sum.",
            "Calculate the total cost if you want each number to be the same as the median.",
            "If we can increase the value of a number, then we can decrease the value of another number.",
            "Calculate the sum of the costs to make all elements equal to the minimum value in the array.",
            "What if we make all numbers the median of all numbers?",
            "Think of the total cost as a function of the median of the array.",
            "Try each possible target value and calculate the cost to make the array equal to that value.",
            "Try to reduce the array to one element.",
            "Find the median of the array.",
            "Use a prefix sum array to calculate the total cost for each value.",
            "For each value in the array, calculate the cost to equalize the array with that value."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumSubstringsInPartition(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumSubstringsInPartition(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumSubstringsInPartition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumSubstringsInPartition(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumSubstringsInPartition(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumSubstringsInPartition(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumSubstringsInPartition = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumSubstringsInPartition(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumSubstringsInPartition($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumSubstringsInPartition(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumSubstringsInPartition(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumSubstringsInPartition(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumSubstringsInPartition(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef minimum_substrings_in_partition(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumSubstringsInPartition(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_substrings_in_partition(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-substrings-in-partition s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_substrings_in_partition(S :: unicode:unicode_binary()) -> integer().\nminimum_substrings_in_partition(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_substrings_in_partition(s :: String.t) :: integer\n  def minimum_substrings_in_partition(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given a string <code>s</code>, you need to partition it into one or more <strong>balanced</strong> <span data-keyword=\"substring\">substrings</span>. For example, if <code>s == &quot;ababcc&quot;</code> then <code>(&quot;abab&quot;, &quot;c&quot;, &quot;c&quot;)</code>, <code>(&quot;ab&quot;, &quot;abc&quot;, &quot;c&quot;)</code>, and <code>(&quot;ababcc&quot;)</code> are all valid partitions, but <code>(&quot;a&quot;, <strong>&quot;bab&quot;</strong>, &quot;cc&quot;)</code>, <code>(<strong>&quot;aba&quot;</strong>, &quot;bc&quot;, &quot;c&quot;)</code>, and <code>(&quot;ab&quot;, <strong>&quot;abcc&quot;</strong>)</code> are not. The unbalanced substrings are bolded.</p>\n\n<p>Return the <strong>minimum</strong> number of substrings that you can partition <code>s</code> into.</p>\n\n<p><strong>Note:</strong> A <strong>balanced</strong> string is a string where each character in the string occurs the same number of times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;fabccddg&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can partition the string <code>s</code> into 3 substrings in one of the following ways: <code>(&quot;fab, &quot;ccdd&quot;, &quot;g&quot;)</code>, or <code>(&quot;fabc&quot;, &quot;cd&quot;, &quot;dg&quot;)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abababaccddb&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can partition the string <code>s</code> into 2 substrings like so: <code>(&quot;abab&quot;, &quot;abaccddb&quot;)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists only of English lowercase letters.</li>\n</ul>\n",
        "exampleTestcases": "\"fabccddg\"\n\"abababaccddb\"",
        "formTitle": "[3144]Minimum Substring Partition of Equal Character Frequency",
        "frequency": 0.0,
        "frontendQuestionId": "3144",
        "hints": [
            "Let <code>dp[i]</code> be the minimum number of partitions for the prefix ending at index <code>i + 1</code>.",
            "<code>dp[i]</code> can be calculated as the <code>min(dp[j])</code> over all <code>j</code> such that <code>j < i</code> and <code>word[j+1鈥]</code> is valid."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumSubstringsInPartition",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3403",
        "similarQuestions": [
            "[{\"title\": \"Partition Array for Maximum Sum\", \"titleSlug\": \"partition-array-for-maximum-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5206\\u9694\\u6570\\u7ec4\\u4ee5\\u5f97\\u5230\\u6700\\u5927\\u548c\", \"isPaidOnly\": false}, {\"title\": \"Partition String Into Minimum Beautiful Substrings\", \"titleSlug\": \"partition-string-into-minimum-beautiful-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5c06\\u5b57\\u7b26\\u4e32\\u5206\\u5272\\u4e3a\\u6700\\u5c11\\u7684\\u7f8e\\u4e3d\\u5b50\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "\"fabccddg\"",
        "title": "Minimum Substring Partition of Equal Character Frequency",
        "titleSlug": "minimum-substring-partition-of-equal-character-frequency",
        "infer_hints": [
            "Try to keep track of the count of characters.",
            "Keep track of the number of times each character occurs in the string.",
            "Use dynamic programming.  The state dp[i] will be the minimum number of partitions for the string s[0..i] including s[i] as the last character.",
            "We can use DP.  For every index i, let dp[i] be the minimum number of substrings we can partition s[:i] into.",
            "For each substring, it's guaranteed that the frequencies of the characters in the left and right substring are the same.",
            "We need to check each substring to see if it is balanced.",
            "Use dynamic programming.",
            "The key idea is to check if the substring is balanced.",
            "Can we partition the string in such a way that the length of each substring is equal?",
            "How can we check if the string is balanced?",
            "Can you use dynamic programming to solve this problem?",
            "Keep track of the frequency of each character in the string.",
            "Use dynamic programming.",
            "The answer is the number of balanced substrings in <code>s</code>.",
            "Use a dynamic programming approach to solve this problem.",
            "We need to partition the string into substrings that have equal frequency of characters.",
            "Keep track of the number of distinct characters in each substring.",
            "Try to think of a DP state.",
            "The minimum number of partitions is 1 if all characters have the same frequency.",
            "The problem can be solved using dynamic programming."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumOperations(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumOperations(int[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumOperations(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumOperations(self, grid: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumOperations(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumOperations(int[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumOperations = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumOperations(grid: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumOperations($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumOperations(_ grid: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumOperations(grid: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumOperations(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumOperations(grid [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_operations(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumOperations(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_operations(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-operations grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_operations(Grid :: [[integer()]]) -> integer().\nminimum_operations(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_operations(grid :: [[integer]]) :: integer\n  def minimum_operations(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D matrix <code>grid</code> of size <code>m x n</code>. In one <strong>operation</strong>, you can change the value of <strong>any</strong> cell to <strong>any</strong> non-negative number. You need to perform some <strong>operations</strong> such that each cell <code>grid[i][j]</code> is:</p>\n\n<ul>\n\t<li>Equal to the cell below it, i.e. <code>grid[i][j] == grid[i + 1][j]</code> (if it exists).</li>\n\t<li>Different from the cell to its right, i.e. <code>grid[i][j] != grid[i][j + 1]</code> (if it exists).</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> number of operations needed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,2],[1,0,2]]</span></p>\n\n<p><strong>Output:</strong> 0</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>All the cells in the matrix already satisfy the properties.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,1,1],[0,0,0]]</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/27/example21.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>The matrix becomes <code>[[1,0,1],[1,0,1]]</code> which satisfies the properties, by doing these 3 operations:</p>\n\n<ul>\n\t<li>Change <code>grid[1][0]</code> to 1.</li>\n\t<li>Change <code>grid[0][1]</code> to 0.</li>\n\t<li>Change <code>grid[1][2]</code> to 1.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1],[2],[3]]</span></p>\n\n<p><strong>Output:</strong> 2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/31/changed.png\" style=\"width: 86px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p>There is a single column. We can change the value to 1 in each cell using 2 operations.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 9</code></li>\n</ul>\n",
        "exampleTestcases": "[[1,0,2],[1,0,2]]\n[[1,1,1],[0,0,0]]\n[[1],[2],[3]]",
        "formTitle": "[3122]Minimum Number of Operations to Satisfy Conditions",
        "frequency": 0.0,
        "frontendQuestionId": "3122",
        "hints": [
            "Use Hashing to store for each frequency of candies, how many times it occurs in each box.",
            "We can use dynamic programming."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumOperations",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3404",
        "similarQuestions": [
            "[{\"title\": \"Candy\", \"titleSlug\": \"candy\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5206\\u53d1\\u7cd6\\u679c\", \"isPaidOnly\": false}, {\"title\": \"Distribute Candies\", \"titleSlug\": \"distribute-candies\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5206\\u7cd6\\u679c\", \"isPaidOnly\": false}, {\"title\": \"Minimum Cost of Buying Candies With Discount\", \"titleSlug\": \"minimum-cost-of-buying-candies-with-discount\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6253\\u6298\\u8d2d\\u4e70\\u7cd6\\u679c\\u7684\\u6700\\u5c0f\\u5f00\\u9500\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "[[1,0,2],[1,0,2]]",
        "title": "Minimum Number of Operations to Satisfy Conditions",
        "titleSlug": "minimum-number-of-operations-to-satisfy-conditions",
        "infer_hints": [
            "Can we do it greedily?",
            "For each cell, if it is not equal to the cell below it, we should change it to the cell below it. Otherwise, we should change it to the cell to its right.",
            "For each cell (i, j), what are the possible values of grid[i][j]?  We need to satisfy two conditions: if i > 0, then grid[i][j] == grid[i-1][j].  If j > 0, then grid[i][j]!= grid[i][j-1].",
            "You can start by comparing the current cell with the cell to its right and the cell below it.",
            "Use a dynamic programming to solve this problem.",
            "The answer is the minimum sum of the costs of all operations.",
            "How can we satisfy the conditions if we can change the value of any cell to any non-negative number?",
            "How many operations are needed to make the bottom-right corner 0?",
            "Can you perform the operations in a different order?",
            "The cells must satisfy the conditions if we make all cells equal to the cell below or to the right.",
            "Use dynamic programming.",
            "How to do this if you can change one cell?",
            "You can use dynamic programming.  The state dp[i][j] will be the minimum number of operations to satisfy the conditions if the last two rows are as the current row and j-th column.",
            "Think about how to make a column satisfy the conditions.",
            "What is the maximum number of operations needed to make the grid satisfy the conditions?",
            "You need to apply a certain transformation on the array.",
            "Consider the grid[i][j] = grid[i+1][j] or grid[i][j]!= grid[i][j+1] as one operation.",
            "Try all possibilities and keep track of the minimum operations.",
            "Try to calculate the difference between the current cell and the next cell.",
            "Use dynamic programming."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfSpecialChars(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfSpecialChars(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfSpecialChars(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfSpecialChars(self, word: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfSpecialChars(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfSpecialChars(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar numberOfSpecialChars = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfSpecialChars(word: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function numberOfSpecialChars($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfSpecialChars(_ word: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfSpecialChars(word: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfSpecialChars(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfSpecialChars(word string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Integer}\ndef number_of_special_chars(word)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfSpecialChars(word: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_special_chars(word: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-special-chars word)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_special_chars(Word :: unicode:unicode_binary()) -> integer().\nnumber_of_special_chars(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_special_chars(word :: String.t) :: integer\n  def number_of_special_chars(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code>. A letter&nbsp;<code>c</code> is called <strong>special</strong> if it appears <strong>both</strong> in lowercase and uppercase in <code>word</code>, and <strong>every</strong> lowercase occurrence of <code>c</code> appears before the <strong>first</strong> uppercase occurrence of <code>c</code>.</p>\n\n<p>Return the number of<em> </em><strong>special</strong> letters<em> </em>in<em> </em><code>word</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;aaAbcBC&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The special characters are <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no special characters in <code>word</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;AbBCab&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no special characters in <code>word</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists of only lowercase and uppercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aaAbcBC\"\n\"abc\"\n\"AbBCab\"",
        "formTitle": "[3121]Count the Number of Special Characters II",
        "frequency": 0.0,
        "frontendQuestionId": "3121",
        "hints": [
            "For each character <code>c</code>, store the first occurrence of its uppercase and the last occurrence of its lowercase."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfSpecialChars",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3405",
        "similarQuestions": [
            "[{\"title\": \"Detect Capital\", \"titleSlug\": \"detect-capital\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u68c0\\u6d4b\\u5927\\u5199\\u5b57\\u6bcd\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"aaAbcBC\"",
        "title": "Count the Number of Special Characters II",
        "titleSlug": "count-the-number-of-special-characters-ii",
        "infer_hints": [
            "Count the number of special characters for each prefix and suffix.",
            "Keep track of the characters in a list.",
            "Can we use a set to store the special characters?",
            "Can you count the number of special characters in the prefixes of the string?",
            "You can use a binary indexed tree (Fenwick tree) to solve this problem.",
            "Use a stack to keep track of the previous letters.",
            "What about the case where the character 'c' is not special?  Try using two arrays to store the positions of lowercase and uppercase 'c's.",
            "Keep track of the last seen lowercase and uppercase letters.",
            "For each special character, try to find the range of occurrence in the string.",
            "For each character, how many strings can be formed with it as the first character?  (This is the number of valid strings of length 1 or more.)",
            "For each character, keep track of the smallest index it occurs at, and the smallest index it would occur at if it was capitalized.",
            "Use two arrays to keep track of lowercase and uppercase letters.",
            "Think of a character as a range in the ASCII table.",
            "For each special character, we can calculate the number of times it appears by subtracting the number of times the previous special character appears from it.",
            "You can solve this problem by maintaining a boolean array of 26 letters and a variable to keep track of the previous lowercase and uppercase letters.",
            "The answer is the sum of the number of special characters in each substring of s.",
            "How many times is a letter a lowercase letter?  How many times is it an uppercase letter?",
            "Count the number of special characters in the prefixes.",
            "Create a list of all the special characters.",
            "Can you find all the special characters in the string?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfStableArrays(self, zero, one, limit):\n        \"\"\"\n        :type zero: int\n        :type one: int\n        :type limit: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfStableArrays(int zero, int one, int limit) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} zero\n * @param {number} one\n * @param {number} limit\n * @return {number}\n */\nvar numberOfStableArrays = function(zero, one, limit) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfStableArrays(zero: number, one: number, limit: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $zero\n     * @param Integer $one\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numberOfStableArrays($zero, $one, $limit) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfStableArrays(_ zero: Int, _ one: Int, _ limit: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfStableArrays(zero: Int, one: Int, limit: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfStableArrays(int zero, int one, int limit) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfStableArrays(zero int, one int, limit int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} zero\n# @param {Integer} one\n# @param {Integer} limit\n# @return {Integer}\ndef number_of_stable_arrays(zero, one, limit)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfStableArrays(zero: Int, one: Int, limit: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_stable_arrays(zero: i32, one: i32, limit: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-stable-arrays zero one limit)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_stable_arrays(Zero :: integer(), One :: integer(), Limit :: integer()) -> integer().\nnumber_of_stable_arrays(Zero, One, Limit) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_stable_arrays(zero :: integer, one :: integer, limit :: integer) :: integer\n  def number_of_stable_arrays(zero, one, limit) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given 3 positive integers <code>zero</code>, <code>one</code>, and <code>limit</code>.</p>\n\n<p>A <span data-keyword=\"binary-array\">binary array</span> <code>arr</code> is called <strong>stable</strong> if:</p>\n\n<ul>\n\t<li>The number of occurrences of 0 in <code>arr</code> is <strong>exactly </strong><code>zero</code>.</li>\n\t<li>The number of occurrences of 1 in <code>arr</code> is <strong>exactly</strong> <code>one</code>.</li>\n\t<li>Each <span data-keyword=\"subarray-nonempty\">subarray</span> of <code>arr</code> with a size greater than <code>limit</code> must contain <strong>both </strong>0 and 1.</li>\n</ul>\n\n<p>Return the <em>total</em> number of <strong>stable</strong> binary arrays.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 1, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two possible stable binary arrays are <code>[1,0]</code> and <code>[0,1]</code>, as both arrays have a single 0 and a single 1, and no subarray has a length greater than 2.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 2, limit = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible stable binary array is <code>[1,0,1]</code>.</p>\n\n<p>Note that the binary arrays <code>[1,1,0]</code> and <code>[0,1,1]</code> have subarrays of length 2 with identical elements, hence, they are not stable.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 3, one = 3, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">14</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All the possible stable binary arrays are <code>[0,0,1,0,1,1]</code>, <code>[0,0,1,1,0,1]</code>, <code>[0,1,0,0,1,1]</code>, <code>[0,1,0,1,0,1]</code>, <code>[0,1,0,1,1,0]</code>, <code>[0,1,1,0,0,1]</code>, <code>[0,1,1,0,1,0]</code>, <code>[1,0,0,1,0,1]</code>, <code>[1,0,0,1,1,0]</code>, <code>[1,0,1,0,0,1]</code>, <code>[1,0,1,0,1,0]</code>, <code>[1,0,1,1,0,0]</code>, <code>[1,1,0,0,1,0]</code>, and <code>[1,1,0,1,0,0]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= zero, one, limit &lt;= 200</code></li>\n</ul>\n",
        "exampleTestcases": "1\n1\n2\n1\n2\n1\n3\n3\n2",
        "formTitle": "[3129]Find All Possible Stable Binary Arrays I",
        "frequency": 0.0,
        "frontendQuestionId": "3129",
        "hints": [
            "Let <code>dp[a][b][c = 0/1][d]</code> be the number of stable arrays with exactly <code>a</code> 0s, <code>b</code> 1s and consecutive <code>d</code> value of <code>c</code>鈥檚 at the end.",
            "Try each case by appending a 0/1 at last to get the inductions."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfStableArrays",
            "params": [
                {
                    "name": "zero",
                    "type": "integer"
                },
                {
                    "name": "one",
                    "type": "integer"
                },
                {
                    "name": "limit",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3406",
        "similarQuestions": [
            "[{\"title\": \"Contiguous Array\", \"titleSlug\": \"contiguous-array\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u8fde\\u7eed\\u6570\\u7ec4\", \"isPaidOnly\": false}, {\"title\": \"Binary Subarrays With Sum\", \"titleSlug\": \"binary-subarrays-with-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u76f8\\u540c\\u7684\\u4e8c\\u5143\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "1\n1\n2",
        "title": "Find All Possible Stable Binary Arrays I",
        "titleSlug": "find-all-possible-stable-binary-arrays-i",
        "infer_hints": [
            "We can consider the problem in two parts.",
            "Count the number of valid binary arrays of length up to 2*limit.",
            "Think about what happens when we add a 0 or a 1 to the end of the binary array.",
            "What are the possible lengths of the binary arrays?",
            "Try to use dynamic programming.",
            "For each length of the binary array, how many possible stable arrays are there?",
            "We can use a dynamic programming to solve this problem.  What can be the maximum possible length of the subarray that contains both 0 and 1?",
            "Do the dynamic programming.",
            "Try generating all possible arrays.",
            "The dp[i][j] represents the number of possible stable binary arrays of length i with j 1's.",
            "Let's try to count the number of binary arrays of length n that contain k 1's.",
            "If there are more than 2 different numbers, you can use dynamic programming.",
            "How many ways are there to choose the first 2^k elements of the binary array?  Do you know a way to compute this?",
            "How many binary arrays of length n have exactly i zeros and j ones?",
            "How many binary arrays of length 2*limit have at most k 1s and at most k 0s?",
            "What is the total number of possible binary arrays of length 2 * limit?",
            "Use dynamic programming to calculate the number of possible binary arrays with at most i 1s and j 0s.",
            "You can solve this problem using dynamic programming.",
            "How many possible binary arrays of length 2 can be made?",
            "If you consider the prefix of the array, you can find the number of ways to append 0 or 1."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfStableArrays(self, zero, one, limit):\n        \"\"\"\n        :type zero: int\n        :type one: int\n        :type limit: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfStableArrays(int zero, int one, int limit) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} zero\n * @param {number} one\n * @param {number} limit\n * @return {number}\n */\nvar numberOfStableArrays = function(zero, one, limit) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfStableArrays(zero: number, one: number, limit: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $zero\n     * @param Integer $one\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numberOfStableArrays($zero, $one, $limit) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfStableArrays(_ zero: Int, _ one: Int, _ limit: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfStableArrays(zero: Int, one: Int, limit: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfStableArrays(int zero, int one, int limit) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfStableArrays(zero int, one int, limit int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} zero\n# @param {Integer} one\n# @param {Integer} limit\n# @return {Integer}\ndef number_of_stable_arrays(zero, one, limit)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfStableArrays(zero: Int, one: Int, limit: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_stable_arrays(zero: i32, one: i32, limit: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-stable-arrays zero one limit)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_stable_arrays(Zero :: integer(), One :: integer(), Limit :: integer()) -> integer().\nnumber_of_stable_arrays(Zero, One, Limit) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_stable_arrays(zero :: integer, one :: integer, limit :: integer) :: integer\n  def number_of_stable_arrays(zero, one, limit) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given 3 positive integers <code>zero</code>, <code>one</code>, and <code>limit</code>.</p>\n\n<p>A <span data-keyword=\"binary-array\">binary array</span> <code>arr</code> is called <strong>stable</strong> if:</p>\n\n<ul>\n\t<li>The number of occurrences of 0 in <code>arr</code> is <strong>exactly </strong><code>zero</code>.</li>\n\t<li>The number of occurrences of 1 in <code>arr</code> is <strong>exactly</strong> <code>one</code>.</li>\n\t<li>Each <span data-keyword=\"subarray-nonempty\">subarray</span> of <code>arr</code> with a size greater than <code>limit</code> must contain <strong>both </strong>0 and 1.</li>\n</ul>\n\n<p>Return the <em>total</em> number of <strong>stable</strong> binary arrays.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 1, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two possible stable binary arrays are <code>[1,0]</code> and <code>[0,1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 2, limit = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible stable binary array is <code>[1,0,1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 3, one = 3, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">14</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All the possible stable binary arrays are <code>[0,0,1,0,1,1]</code>, <code>[0,0,1,1,0,1]</code>, <code>[0,1,0,0,1,1]</code>, <code>[0,1,0,1,0,1]</code>, <code>[0,1,0,1,1,0]</code>, <code>[0,1,1,0,0,1]</code>, <code>[0,1,1,0,1,0]</code>, <code>[1,0,0,1,0,1]</code>, <code>[1,0,0,1,1,0]</code>, <code>[1,0,1,0,0,1]</code>, <code>[1,0,1,0,1,0]</code>, <code>[1,0,1,1,0,0]</code>, <code>[1,1,0,0,1,0]</code>, and <code>[1,1,0,1,0,0]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= zero, one, limit &lt;= 1000</code></li>\n</ul>\n",
        "exampleTestcases": "1\n1\n2\n1\n2\n1\n3\n3\n2",
        "formTitle": "[3130]Find All Possible Stable Binary Arrays II",
        "frequency": 0.0,
        "frontendQuestionId": "3130",
        "hints": [
            "Let <code>dp[x][y][z = 0/1]</code> be the number of stable arrays with exactly <code>x</code> zeros, <code>y</code> ones, and the last element is <code>z</code>. (0 or 1).\r\n<code>dp[x][y][0] + dp[x][y][1]</code> is the answer for given <code>(x, y)</code>.",
            "If we have already placed <code>x</code> 1 and <code>y</code> 0, if we place a group of <code>k</code> 0, the number of ways is <code>dp[x-k][y][1]</code>. We can place a group with size <code>i</code>, where <code>i</code> varies from 1 to <code>min(limit, zero - x)</code>.\r\nSimilarly, we can solve by placing a group of ones.",
            "Speed up the calculation using prefix arrays to store the sum of <code>dp</code> states."
        ],
        "level": 3,
        "metaData": {
            "name": "numberOfStableArrays",
            "params": [
                {
                    "name": "zero",
                    "type": "integer"
                },
                {
                    "name": "one",
                    "type": "integer"
                },
                {
                    "name": "limit",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3407",
        "similarQuestions": [
            "[{\"title\": \"Contiguous Array\", \"titleSlug\": \"contiguous-array\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u8fde\\u7eed\\u6570\\u7ec4\", \"isPaidOnly\": false}, {\"title\": \"Binary Subarrays With Sum\", \"titleSlug\": \"binary-subarrays-with-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u76f8\\u540c\\u7684\\u4e8c\\u5143\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "?",
        "testCase": "1\n1\n2",
        "title": "Find All Possible Stable Binary Arrays II",
        "titleSlug": "find-all-possible-stable-binary-arrays-ii",
        "infer_hints": [
            "Let dp[i] be the number of ways to create an array of length i that satisfies the conditions.",
            "We can use dynamic programming.",
            "How many binary arrays of length N are there that can be formed using X 0's and Y 1's?",
            "Try to find a relation between the total number of stable binary arrays of size n and the total number of stable binary arrays of size n + 1.",
            "Use dynamic programming.",
            "Use a dynamic programming approach.",
            "What does a \"stable\" binary array mean?",
            "The answer can be calculated using dynamic programming.",
            "Try dynamic programming.",
            "For every index i in [0, limit], you can add 0 or 1 to the array.",
            "If you have two arrays, one with 0s and another with 1s, how many possible stable arrays are there?",
            "How many ways can you add 0s and 1s to the array such that it stays stable?",
            "Create a dynamic programming (DP) table where dp[i][j] represents the number of stable arrays of length i with j 1's.",
            "Can you build the binary array in one pass?",
            "What are the possible values for the last digit of the array?",
            "Consider the number of ones in the array.  You should have dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i-1][j+1] where dp[i][j] is the number of binary arrays of length i with j ones.",
            "Consider dp[i][j][k], the number of ways to build a binary array of length i with j 0's and k 1's.",
            "How many binary arrays of length N with 0 <= x <= 2N can be made such that the number of 1's is exactly X?",
            "For every possible length of the binary array, calculate the number of valid arrays of that length.",
            "For each number of 1s, how many possible numbers of 0s are there?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfSpecialChars(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfSpecialChars(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfSpecialChars(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfSpecialChars(self, word: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfSpecialChars(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfSpecialChars(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar numberOfSpecialChars = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfSpecialChars(word: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function numberOfSpecialChars($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfSpecialChars(_ word: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfSpecialChars(word: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfSpecialChars(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfSpecialChars(word string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Integer}\ndef number_of_special_chars(word)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfSpecialChars(word: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_special_chars(word: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-special-chars word)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_special_chars(Word :: unicode:unicode_binary()) -> integer().\nnumber_of_special_chars(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_special_chars(word :: String.t) :: integer\n  def number_of_special_chars(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code>. A letter is called <strong>special</strong> if it appears <strong>both</strong> in lowercase and uppercase in <code>word</code>.</p>\n\n<p>Return the number of<em> </em><strong>special</strong> letters in<em> </em><code>word</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;aaAbcBC&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The special characters in <code>word</code> are <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>No character in <code>word</code> appears in uppercase.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;abBCab&quot;</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only special character in <code>word</code> is <code>&#39;b&#39;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 50</code></li>\n\t<li><code>word</code> consists of only lowercase and uppercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aaAbcBC\"\n\"abc\"\n\"abBCab\"",
        "formTitle": "[3120]Count the Number of Special Characters I",
        "frequency": 0.0,
        "frontendQuestionId": "3120",
        "hints": [
            "The constraints are small. For all 52 characters, check if they are present in <code>word</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "numberOfSpecialChars",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3408",
        "similarQuestions": [
            "[{\"title\": \"Detect Capital\", \"titleSlug\": \"detect-capital\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u68c0\\u6d4b\\u5927\\u5199\\u5b57\\u6bcd\", \"isPaidOnly\": false}]"
        ],
        "statusSign": "鉁�",
        "testCase": "\"aaAbcBC\"",
        "title": "Count the Number of Special Characters I",
        "titleSlug": "count-the-number-of-special-characters-i",
        "infer_hints": [
            "Use a set to store all special characters.",
            "Count the number of characters in each word.  Then, subtract the count of characters from the sum of the lengths of all words.",
            "How many special characters are there in total?",
            "What are the special characters? Can you use a set to track them?",
            "For each character, check if it's a lowercase letter, uppercase letter, or not a letter.",
            "Iterate over the string from left to right.",
            "Create a set of characters that are both lowercase and uppercase.",
            "Convert the string to a set of characters.",
            "Count the number of uppercase and lowercase letters separately.",
            "Iterate over each character of the string.",
            "What if you could create a counter for the lowercase and uppercase English letters?",
            "The special characters are the characters that do not appear in <code>word</code>.",
            "Use the built-in functions in Python to check if a character is uppercase or lowercase.",
            "How can you determine if a character is uppercase or lowercase?",
            "You can use a set to store the uppercase and lowercase letters.",
            "How many special characters are there in the string?",
            "If a letter appears twice in the string, then it must appear in both lowercase and uppercase.",
            "Count the number of lowercase and uppercase English letters in word.  How can you tell if a letter is special?",
            "How many special characters are there in the string?",
            "How can we check if a character is uppercase or lowercase?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> findProductsOfElements(vector<vector<long long>>& queries) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] findProductsOfElements(long[][] queries) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findProductsOfElements(self, queries):\n        \"\"\"\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findProductsOfElements(self, queries: List[List[int]]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findProductsOfElements(long long** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] FindProductsOfElements(long[][] queries) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar findProductsOfElements = function(queries) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findProductsOfElements(queries: number[][]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function findProductsOfElements($queries) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findProductsOfElements(_ queries: [[Int]]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findProductsOfElements(queries: Array<LongArray>): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> findProductsOfElements(List<List<int>> queries) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findProductsOfElements(queries [][]int64) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} queries\n# @return {Integer[]}\ndef find_products_of_elements(queries)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findProductsOfElements(queries: Array[Array[Long]]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_products_of_elements(queries: Vec<Vec<i64>>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-products-of-elements queries)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_products_of_elements(Queries :: [[integer()]]) -> [integer()].\nfind_products_of_elements(Queries) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_products_of_elements(queries :: [[integer]]) :: [integer]\n  def find_products_of_elements(queries) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>A <strong>powerful array</strong> for an integer <code>x</code> is the shortest sorted array of powers of two that sum up to <code>x</code>. For example, the powerful array for 11 is <code>[1, 2, 8]</code>.</p>\n\n<p>The array <code>big_nums</code> is created by concatenating the <strong>powerful</strong> arrays for every positive integer <code>i</code> in ascending order: 1, 2, 3, and so forth. Thus, <code>big_nums</code> starts as <code>[<u>1</u>, <u>2</u>, <u>1, 2</u>, <u>4</u>, <u>1, 4</u>, <u>2, 4</u>, <u>1, 2, 4</u>, <u>8</u>, ...]</code>.</p>\n\n<p>You are given a 2D integer matrix <code>queries</code>, where for <code>queries[i] = [from<sub>i</sub>, to<sub>i</sub>, mod<sub>i</sub>]</code> you should calculate <code>(big_nums[from<sub>i</sub>] * big_nums[from<sub>i</sub> + 1] * ... * big_nums[to<sub>i</sub>]) % mod<sub>i</sub></code><!-- notionvc: a71131cc-7b52-4786-9a4b-660d6d864f89 -->.</p>\n\n<p>Return an integer array <code>answer</code> such that <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = [[1,3,7]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is one query.</p>\n\n<p><code>big_nums[1..3] = [2,1,2]</code>. The product of them is 4. The remainder of 4 under 7 is 4.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = [[2,5,3],[7,7,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are two queries.</p>\n\n<p>First query: <code>big_nums[2..5] = [1,2,4,1]</code>. The product of them is 8. The remainder of 8 under 3 is 2.</p>\n\n<p>Second query: <code>big_nums[7] = 2</code>. The remainder of 2 under 4 is 2.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 500</code></li>\n\t<li><code>queries[i].length == 3</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;= 10<sup>15</sup></code></li>\n\t<li><code>1 &lt;= queries[i][2] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[[1,3,7]]\n[[2,5,3],[7,7,4]]",
        "formTitle": "[3145]Find Products of Elements of Big Array",
        "frequency": 0.0,
        "frontendQuestionId": "3145",
        "hints": [
            "Find a way to calculate <code>f(n, i)</code> which is the total number of numbers in <code>[1, n]</code> when the <code>i<sup>th</sup></code> bit is set in <code>O(log(n))</code> time.",
            "Use binary search to find the last number for each query (and there might be one 鈥渋ncomplete鈥� number for the query).",
            "Use a similar way to find the product (we only need to save the sum of exponents of power of <code>2</code>)."
        ],
        "level": 3,
        "metaData": {
            "name": "findProductsOfElements",
            "params": [
                {
                    "name": "queries",
                    "type": "long[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3411",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[1,3,7]]",
        "title": "Find Products of Elements of Big Array",
        "titleSlug": "find-products-of-elements-of-big-array",
        "infer_hints": [
            "Use prefix products.",
            "Think of big_nums as a stream of numbers.",
            "Use the property of the modulus operation.  If a*b % k = r, then (a % k)*(b % k) % k = r.",
            "How can we get all the powers of 2 in the range [1, 10^15]?",
            "Do a binary search on the array.",
            "Calculate the products modulo 1e9+7.",
            "What happens when the number is too big?",
            "Think about how to find the products of elements in the array.",
            "The power of 2 is small. You can precompute the power of 2 up to 10^15 and use them to answer the queries.",
            "Use binary indexed tree or segment tree to get the product quickly.",
            "If you can find the product of all the elements of big_nums from 1 to 10^15, what will it be?",
            "What is the maximum possible value of big_nums[i] * big_nums[i+1] *... * big_nums[j] modulo MOD?",
            "Can you optimize this solution?",
            "Think about what we're storing.",
            "Calculate the power of 2 and store them in an array.",
            "For each query, compute the product of all the elements in big_nums[from_i : to_i] (mod mod_i).",
            "Use the prefix sums of the big_nums array.",
            "The array <code>big_nums</code> has only 150000 elements, and you can do a binary search on it.",
            "Generate all the powers of 2, up to 2^62.",
            "For every integer i, find out how many powers of 2 fit in it."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int findPermutationDifference(string s, string t) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int findPermutationDifference(String s, String t) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findPermutationDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findPermutationDifference(self, s: str, t: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int findPermutationDifference(char* s, char* t) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int FindPermutationDifference(string s, string t) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar findPermutationDifference = function(s, t) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findPermutationDifference(s: string, t: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Integer\n     */\n    function findPermutationDifference($s, $t) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findPermutationDifference(_ s: String, _ t: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findPermutationDifference(s: String, t: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int findPermutationDifference(String s, String t) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findPermutationDifference(s string, t string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef find_permutation_difference(s, t)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findPermutationDifference(s: String, t: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_permutation_difference(s: String, t: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-permutation-difference s t)\n  (-> string? string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_permutation_difference(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> integer().\nfind_permutation_difference(S, T) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_permutation_difference(s :: String.t, t :: String.t) :: integer\n  def find_permutation_difference(s, t) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two strings <code>s</code> and <code>t</code> such that every character occurs at most once in <code>s</code> and <code>t</code> is a permutation of <code>s</code>.</p>\n\n<p>The <strong>permutation difference</strong> between <code>s</code> and <code>t</code> is defined as the <strong>sum</strong> of the absolute difference between the index of the occurrence of each character in <code>s</code> and the index of the occurrence of the same character in <code>t</code>.</p>\n\n<p>Return the <strong>permutation difference</strong> between <code>s</code> and <code>t</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abc&quot;, t = &quot;bac&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>For <code>s = &quot;abc&quot;</code> and <code>t = &quot;bac&quot;</code>, the permutation difference of <code>s</code> and <code>t</code> is equal to the sum of:</p>\n\n<ul>\n\t<li>The absolute difference between the index of the occurrence of <code>&quot;a&quot;</code> in <code>s</code> and the index of the occurrence of <code>&quot;a&quot;</code> in <code>t</code>.</li>\n\t<li>The absolute difference between the index of the occurrence of <code>&quot;b&quot;</code> in <code>s</code> and the index of the occurrence of <code>&quot;b&quot;</code> in <code>t</code>.</li>\n\t<li>The absolute difference between the index of the occurrence of <code>&quot;c&quot;</code> in <code>s</code> and the index of the occurrence of <code>&quot;c&quot;</code> in <code>t</code>.</li>\n</ul>\n\n<p>That is, the permutation difference between <code>s</code> and <code>t</code> is equal to <code>|0 - 1| + |2 - 2| + |1 - 0| = 2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abcde&quot;, t = &quot;edbac&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong> The permutation difference between <code>s</code> and <code>t</code> is equal to <code>|0 - 3| + |1 - 2| + |2 - 4| + |3 - 1| + |4 - 0| = 12</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 26</code></li>\n\t<li>Each character occurs at most once in <code>s</code>.</li>\n\t<li><code>t</code> is a permutation of <code>s</code>.</li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abc\"\n\"bac\"\n\"abcde\"\n\"edbac\"",
        "formTitle": "[3146]Permutation Difference between Two Strings",
        "frequency": 0.0,
        "frontendQuestionId": "3146",
        "hints": [
            "For each character, find the indices of its occurrences in string <code>s</code> then in string <code>t</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "findPermutationDifference",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "t",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3412",
        "similarQuestions": [
            "[{\"title\": \"Find the Difference\", \"titleSlug\": \"find-the-difference\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u627e\\u4e0d\\u540c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "\"abc\"\n\"bac\"",
        "title": "Permutation Difference between Two Strings",
        "titleSlug": "permutation-difference-between-two-strings",
        "infer_hints": [
            "Use a frequency array to count the number of occurrences of each character in <code>s</code>.",
            "How do you know which index the character is at in the other string?",
            "Find the first occurrence of each character in s.",
            "How can we handle multiple occurrences of a character in the given strings?",
            "How to calculate the permutation difference?",
            "Can you find a way to calculate the sum of the differences in constant time?",
            "The permutation difference can be calculated using two arrays of size 26, to store the position of each character in the strings.",
            "Use an array to store the index of each character in <code>s</code>.",
            "How can we calculate the difference between the positions of each character in s and t?",
            "You can use the array indices as the mapping.",
            "Find the index of the character in the given string.",
            "For each character in s, calculate the index of its first occurrence and its last occurrence.",
            "Try to solve it using only arrays.  Can you solve it in O(n) time complexity?",
            "Can we solve this problem in one pass?",
            "For each character, find the difference in the indices in the two strings.",
            "Calculate the frequency of each character in s and t.",
            "How can you solve this problem if you know the index of each character in the permutation?",
            "Calculate the number of swaps to sort each string.",
            "Calculate the permutation difference between the two strings and return the result.",
            "Use a hash map to store the indices of each character in the string."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int findWinningPlayer(vector<int>& skills, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int findWinningPlayer(int[] skills, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findWinningPlayer(self, skills, k):\n        \"\"\"\n        :type skills: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findWinningPlayer(self, skills: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int findWinningPlayer(int* skills, int skillsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int FindWinningPlayer(int[] skills, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} skills\n * @param {number} k\n * @return {number}\n */\nvar findWinningPlayer = function(skills, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findWinningPlayer(skills: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $skills\n     * @param Integer $k\n     * @return Integer\n     */\n    function findWinningPlayer($skills, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findWinningPlayer(_ skills: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findWinningPlayer(skills: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int findWinningPlayer(List<int> skills, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findWinningPlayer(skills []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} skills\n# @param {Integer} k\n# @return {Integer}\ndef find_winning_player(skills, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findWinningPlayer(skills: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_winning_player(skills: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-winning-player skills k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_winning_player(Skills :: [integer()], K :: integer()) -> integer().\nfind_winning_player(Skills, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_winning_player(skills :: [integer], k :: integer) :: integer\n  def find_winning_player(skills, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>A competition consists of <code>n</code> players numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given an integer array <code>skills</code> of size <code>n</code> and a <strong>positive</strong> integer <code>k</code>, where <code>skills[i]</code> is the skill level of player <code>i</code>. All integers in <code>skills</code> are <strong>unique</strong>.</p>\n\n<p>All players are standing in a queue in order from player <code>0</code> to player <code>n - 1</code>.</p>\n\n<p>The competition process is as follows:</p>\n\n<ul>\n\t<li>The first two players in the queue play a game, and the player with the <strong>higher</strong> skill level wins.</li>\n\t<li>After the game, the winner stays at the beginning of the queue, and the loser goes to the end of it.</li>\n</ul>\n\n<p>The winner of the competition is the <strong>first</strong> player who wins <code>k</code> games <strong>in a row</strong>.</p>\n\n<p>Return the initial index of the <em>winning</em> player.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">skills = [4,2,6,3,9], k = 2</span></p>\n\n<p><strong>Output:</strong> 2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, the queue of players is <code>[0,1,2,3,4]</code>. The following process happens:</p>\n\n<ul>\n\t<li>Players 0 and 1 play a game, since the skill of player 0 is higher than that of player 1, player 0 wins. The resulting queue is <code>[0,2,3,4,1]</code>.</li>\n\t<li>Players 0 and 2 play a game, since the skill of player 2 is higher than that of player 0, player 2 wins. The resulting queue is <code>[2,3,4,1,0]</code>.</li>\n\t<li>Players 2 and 3 play a game, since the skill of player 2 is higher than that of player 3, player 2 wins. The resulting queue is <code>[2,4,1,0,3]</code>.</li>\n</ul>\n\n<p>Player 2 won <code>k = 2</code> games in a row, so the winner is player 2.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">skills = [2,5,4], k = 3</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, the queue of players is <code>[0,1,2]</code>. The following process happens:</p>\n\n<ul>\n\t<li>Players 0 and 1 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is <code>[1,2,0]</code>.</li>\n\t<li>Players 1 and 2 play a game, since the skill of player 1 is higher than that of player 2, player 1 wins. The resulting queue is <code>[1,0,2]</code>.</li>\n\t<li>Players 1 and 0 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is <code>[1,2,0]</code>.</li>\n</ul>\n\n<p>Player 1 won <code>k = 3</code> games in a row, so the winner is player 1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == skills.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= skills[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>All integers in <code>skills</code> are unique.</li>\n</ul>\n",
        "exampleTestcases": "[4,2,6,3,9]\n2\n[2,5,4]\n3",
        "formTitle": "[3175]Find The First Player to win K Games in a Row",
        "frequency": 0.0,
        "frontendQuestionId": "3175",
        "hints": [
            "Suppose that <code>k 鈮� n</code>, there is exactly one player who can win <code>k</code> games in a row. Who is it?",
            "In case <code>k < n</code>, you can simulate the competition process described."
        ],
        "level": 2,
        "metaData": {
            "name": "findWinningPlayer",
            "params": [
                {
                    "name": "skills",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3413",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[4,2,6,3,9]\n2",
        "title": "Find The First Player to win K Games in a Row",
        "titleSlug": "find-the-first-player-to-win-k-games-in-a-row",
        "infer_hints": [
            "For each pair of players, you can check if one of them is a winner in the current state.",
            "For each player, check if the sum of the skills of the two players in front of him in the queue can be equal to the sum of the skills of the two players behind him.",
            "If you find that two players play the same game, you can skip the games in between and directly compare the skills of the two players.",
            "Keep a prefix sum array.  What will the prefix sum array be?",
            "If the skill difference of two players is 0, the winner can be any of them.",
            "Keep track of the players that have won k games in a row.",
            "Use a deque.",
            "Keep a prefix sum of the array of skills.  Then for each subarray, you can compute the prefix sum in O(1) time.",
            "For each possible starting player, we can simulate the game until we find a winner.",
            "Try to simulate the process.",
            "How can we check if a player wins the next game?",
            "If a player wins, he/she can always stay at the start of the queue.",
            "Try to simulate the game process.",
            "Can we use a priority queue?",
            "For each player, we can calculate the skill difference between the player and the player in front of them.",
            "We can simulate the process to find the first player who wins k games in a row.",
            "Can we calculate the winner of the game of 2 players?",
            "Use prefix sums.",
            "Use a stack.",
            "Can you use the sum of the skills of a team to find out if a team wins the game?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int waysToReachStair(int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def waysToReachStair(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def waysToReachStair(self, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int waysToReachStair(int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int WaysToReachStair(int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} k\n * @return {number}\n */\nvar waysToReachStair = function(k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function waysToReachStair(k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function waysToReachStair($k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func waysToReachStair(_ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun waysToReachStair(k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int waysToReachStair(int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func waysToReachStair(k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} k\n# @return {Integer}\ndef ways_to_reach_stair(k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def waysToReachStair(k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn ways_to_reach_stair(k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (ways-to-reach-stair k)\n  (-> exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec ways_to_reach_stair(K :: integer()) -> integer().\nways_to_reach_stair(K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec ways_to_reach_stair(k :: integer) :: integer\n  def ways_to_reach_stair(k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>non-negative</strong> integer <code>k</code>. There exists a staircase with an infinite number of stairs, with the <strong>lowest</strong> stair numbered 0.</p>\n\n<p>Alice has an integer <code>jump</code>, with an initial value of 0. She starts on stair 1 and wants to reach stair <code>k</code> using <strong>any</strong> number of <strong>operations</strong>. If she is on stair <code>i</code>, in one <strong>operation</strong> she can:</p>\n\n<ul>\n\t<li>Go down to stair <code>i - 1</code>. This operation <strong>cannot</strong> be used consecutively or on stair 0.</li>\n\t<li>Go up to stair <code>i + 2<sup>jump</sup></code>. And then, <code>jump</code> becomes <code>jump + 1</code>.</li>\n</ul>\n\n<p>Return the <em>total</em> number of ways Alice can reach stair <code>k</code>.</p>\n\n<p><strong>Note</strong> that it is possible that Alice reaches the stair <code>k</code>, and performs some operations to reach the stair <code>k</code> again.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The 2 possible ways of reaching stair 0 are:</p>\n\n<ul>\n\t<li>Alice starts at stair 1.\n\t<ul>\n\t\t<li>Using an operation of the first type, she goes down 1 stair to reach stair 0.</li>\n\t</ul>\n\t</li>\n\t<li>Alice starts at stair 1.\n\t<ul>\n\t\t<li>Using an operation of the first type, she goes down 1 stair to reach stair 0.</li>\n\t\t<li>Using an operation of the second type, she goes up 2<sup>0</sup> stairs to reach stair 1.</li>\n\t\t<li>Using an operation of the first type, she goes down 1 stair to reach stair 0.</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The 4 possible ways of reaching stair 1 are:</p>\n\n<ul>\n\t<li>Alice starts at stair 1. Alice is at stair 1.</li>\n\t<li>Alice starts at stair 1.\n\t<ul>\n\t\t<li>Using an operation of the first type, she goes down 1 stair to reach stair 0.</li>\n\t\t<li>Using an operation of the second type, she goes up 2<sup>0</sup> stairs to reach stair 1.</li>\n\t</ul>\n\t</li>\n\t<li>Alice starts at stair 1.\n\t<ul>\n\t\t<li>Using an operation of the second type, she goes up 2<sup>0</sup> stairs to reach stair 2.</li>\n\t\t<li>Using an operation of the first type, she goes down 1 stair to reach stair 1.</li>\n\t</ul>\n\t</li>\n\t<li>Alice starts at stair 1.\n\t<ul>\n\t\t<li>Using an operation of the first type, she goes down 1 stair to reach stair 0.</li>\n\t\t<li>Using an operation of the second type, she goes up 2<sup>0</sup> stairs to reach stair 1.</li>\n\t\t<li>Using an operation of the first type, she goes down 1 stair to reach stair 0.</li>\n\t\t<li>Using an operation of the second type, she goes up 2<sup>1</sup> stairs to reach stair 2.</li>\n\t\t<li>Using an operation of the first type, she goes down 1 stair to reach stair 1.</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "0\n1",
        "formTitle": "[3154]Find Number of Ways to Reach the K-th Stair",
        "frequency": 0.0,
        "frontendQuestionId": "3154",
        "hints": [
            "On using <code>x</code> operations of the second type and <code>y</code> operations of the first type, the stair <code>2<sup>x + 1</sup> - y</code> is reached.",
            "Since first operations cannot be consecutive, there are exactly <code>x + 1</code> positions (before and after each power of 2) to perform the second operation.",
            "Using combinatorics, we have <sup>x + 1</sup>C<sub>y</sub> number of ways to select the positions of second operations."
        ],
        "level": 3,
        "metaData": {
            "name": "waysToReachStair",
            "params": [
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3414",
        "similarQuestions": [
            "[{\"title\": \"Climbing Stairs\", \"titleSlug\": \"climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u722c\\u697c\\u68af\", \"isPaidOnly\": false}, {\"title\": \"Min Cost Climbing Stairs\", \"titleSlug\": \"min-cost-climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u4f7f\\u7528\\u6700\\u5c0f\\u82b1\\u8d39\\u722c\\u697c\\u68af\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "0",
        "title": "Find Number of Ways to Reach the K-th Stair",
        "titleSlug": "find-number-of-ways-to-reach-the-k-th-stair",
        "infer_hints": [
            "Try to find a pattern in the ways Alice can reach the stair <code>k</code>.",
            "Try dynamic programming.",
            "How many ways to reach stair i from stair j where i > j?",
            "Use dynamic programming.",
            "Use a dynamic programming approach.  You can use an array dp[n] to store the number of ways to reach the stair i.  For each stair i, you can use a loop to try each possible jump and add the number of ways to reach the previous stair to the number of ways to reach the current stair.",
            "If you try to use a brute force approach, you will have to check all possible combinations.",
            "Let dp[i] be the number of ways to reach the stair i.",
            "Try to use dynamic programming.",
            "The answer is the sum of dp[k] and dp[k+1].",
            "Try to use dynamic programming.",
            "Use Dynamic Programming.",
            "Use dynamic programming.  Can you create a dp array where dp[i] = number of ways to reach the stair i?",
            "This problem is a variation of a classical Dynamic Programming problem.",
            "You need to find the number of ways to reach stair <code>k</code> by using some or all of the available operations.",
            "We can use dynamic programming to solve this problem.  For each step i, we keep track of the number of ways we can reach it.",
            "Use dynamic programming.",
            "The DP state is dp[i] = sum(dp[j]) where j ranges from 0 to i - 1.",
            "We can use a dynamic programming approach to solve this problem.  We can define dp[i] as the number of ways to reach the stair i.",
            "The problem is equivalent to counting the number of ways to reach the top of a staircase with <i>n</i> stairs where the constraint is <i>n</i> = k.",
            "The total number of ways to reach the stair <code>k</code> is the sum of the total number of ways to reach the stairs <code>k - 1</code> and <code>k - 2</code>."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool satisfiesConditions(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean satisfiesConditions(int[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def satisfiesConditions(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def satisfiesConditions(self, grid: List[List[int]]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool satisfiesConditions(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool SatisfiesConditions(int[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {boolean}\n */\nvar satisfiesConditions = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function satisfiesConditions(grid: number[][]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Boolean\n     */\n    function satisfiesConditions($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func satisfiesConditions(_ grid: [[Int]]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun satisfiesConditions(grid: Array<IntArray>): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool satisfiesConditions(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func satisfiesConditions(grid [][]int) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Boolean}\ndef satisfies_conditions(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def satisfiesConditions(grid: Array[Array[Int]]): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn satisfies_conditions(grid: Vec<Vec<i32>>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (satisfies-conditions grid)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec satisfies_conditions(Grid :: [[integer()]]) -> boolean().\nsatisfies_conditions(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec satisfies_conditions(grid :: [[integer]]) :: boolean\n  def satisfies_conditions(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D matrix <code>grid</code> of size <code>m x n</code>. You need to check if each cell <code>grid[i][j]</code> is:</p>\n\n<ul>\n\t<li>Equal to the cell below it, i.e. <code>grid[i][j] == grid[i + 1][j]</code> (if it exists).</li>\n\t<li>Different from the cell to its right, i.e. <code>grid[i][j] != grid[i][j + 1]</code> (if it exists).</li>\n</ul>\n\n<p>Return <code>true</code> if <strong>all</strong> the cells satisfy these conditions, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,2],[1,0,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>All the cells in the grid satisfy the conditions.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,1,1],[0,0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/27/example21.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>All cells in the first row are equal.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1],[2],[3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/31/changed.png\" style=\"width: 86px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p>Cells in the first column have different values.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 10</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 9</code></li>\n</ul>\n",
        "exampleTestcases": "[[1,0,2],[1,0,2]]\n[[1,1,1],[0,0,0]]\n[[1],[2],[3]]",
        "formTitle": "[3142]Check if Grid Satisfies Conditions",
        "frequency": 0.0,
        "frontendQuestionId": "3142",
        "hints": [
            "Check if each column has same value in each cell.",
            "If the previous condition is satisfied, we can simply check the first cells in adjacent columns."
        ],
        "level": 1,
        "metaData": {
            "name": "satisfiesConditions",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3415",
        "similarQuestions": [
            "[{\"title\": \"Candy\", \"titleSlug\": \"candy\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5206\\u53d1\\u7cd6\\u679c\", \"isPaidOnly\": false}, {\"title\": \"Distribute Candies\", \"titleSlug\": \"distribute-candies\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5206\\u7cd6\\u679c\", \"isPaidOnly\": false}, {\"title\": \"Minimum Cost of Buying Candies With Discount\", \"titleSlug\": \"minimum-cost-of-buying-candies-with-discount\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6253\\u6298\\u8d2d\\u4e70\\u7cd6\\u679c\\u7684\\u6700\\u5c0f\\u5f00\\u9500\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[[1,0,2],[1,0,2]]",
        "title": "Check if Grid Satisfies Conditions",
        "titleSlug": "check-if-grid-satisfies-conditions",
        "infer_hints": [
            "What is the difference between the values in the row and the values in the column?",
            "Can you do it in one pass through the grid?",
            "Try to traverse the grid and check the conditions for each cell.",
            "Check the condition for each cell.",
            "You can use bitwise XOR operation to check if two values are equal.",
            "Iterate through the grid.",
            "If you have two cells (i1, j1) and (i2, j2) in the grid, can you conclude something about the cells that are adjacent to them?",
            "We can check each cell if it satisfies the conditions.",
            "Check the cells to its right and below each cell.",
            "For each cell, check if it's equal to the cell below it and to its right.",
            "Iterate over the grid and check for each cell if it satisfies the conditions.",
            "What if we traverse the grid row by row and for each row check if each cell satisfies the conditions.",
            "Use a brute force approach.  Check if all cells satisfy the conditions.",
            "Iterate over the grid and check the conditions.",
            "What if we can perform any number of operations?",
            "For each cell, check the condition for being equal to the cell below it and different from the cell to its right.",
            "The problem is about equality of rows and columns.  We can solve this problem by iterating over the grid in row by row order.  We check if the current row satisfies the condition with the next row.  If it does, we check if the current column satisfies the condition with the next column.",
            "What about the condition that each cell must be different from the cell to its right?",
            "Iterate over the grid from top to bottom and from left to right.",
            "Use a 2D boolean array dp to store the conditions of each cell."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long sumDigitDifferences(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long sumDigitDifferences(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def sumDigitDifferences(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def sumDigitDifferences(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long sumDigitDifferences(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long SumDigitDifferences(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumDigitDifferences = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function sumDigitDifferences(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumDigitDifferences($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func sumDigitDifferences(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun sumDigitDifferences(nums: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int sumDigitDifferences(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func sumDigitDifferences(nums []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_digit_differences(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def sumDigitDifferences(nums: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn sum_digit_differences(nums: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (sum-digit-differences nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec sum_digit_differences(Nums :: [integer()]) -> integer().\nsum_digit_differences(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec sum_digit_differences(nums :: [integer]) :: integer\n  def sum_digit_differences(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers where all integers have the <strong>same</strong> number of digits.</p>\n\n<p>The <strong>digit difference</strong> between two integers is the <em>count</em> of different digits that are in the <strong>same</strong> position in the two integers.</p>\n\n<p>Return the <strong>sum</strong> of the <strong>digit differences</strong> between <strong>all</strong> pairs of integers in <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [13,23,12]</span></p>\n\n<p><strong>Output:</strong> 4</p>\n\n<p><strong>Explanation:</strong><br />\nWe have the following:<br />\n- The digit difference between <strong>1</strong>3 and <strong>2</strong>3 is 1.<br />\n- The digit difference between 1<strong>3</strong> and 1<strong>2</strong> is 1.<br />\n- The digit difference between <strong>23</strong> and <strong>12</strong> is 2.<br />\nSo the total sum of digit differences between all pairs of integers is <code>1 + 1 + 2 = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [10,10,10,10]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong><br />\nAll the integers in the array are the same. So the total sum of digit differences between all pairs of integers will be 0.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt; 10<sup>9</sup></code></li>\n\t<li>All integers in <code>nums</code> have the same number of digits.</li>\n</ul>\n",
        "exampleTestcases": "[13,23,12]\n[10,10,10,10]",
        "formTitle": "[3153]Sum of Digit Differences of All Pairs",
        "frequency": 0.0,
        "frontendQuestionId": "3153",
        "hints": [
            "You can solve the problem for digits that are on the same position separately, and then sum up all the answers.",
            "For each position, count the number of occurences of each digit from 0 to 9 that appear on that position.",
            "Let <code>c</code> be the number of occurences of a digit on a position, that will contribute with <code>c * (n - c)</code> to the final answer, where <code>n</code> is the number of integers in <code>nums</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "sumDigitDifferences",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3416",
        "similarQuestions": [
            "[{\"title\": \"Total Hamming Distance\", \"titleSlug\": \"total-hamming-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6c49\\u660e\\u8ddd\\u79bb\\u603b\\u548c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[13,23,12]",
        "title": "Sum of Digit Differences of All Pairs",
        "titleSlug": "sum-of-digit-differences-of-all-pairs",
        "infer_hints": [
            "Calculate the sum of differences between each pair of numbers in the array.",
            "You can use bit manipulation to get the digits of a number.",
            "The digit difference between two numbers can be calculated by subtracting them and counting the number of different digits.",
            "You can iterate over all pairs of numbers, then calculate the digit difference.",
            "Try to find the sum of digit differences for a single number.",
            "For each digit in each number, count how many pairs it appears in.",
            "Think about what you're actually counting for each number in nums.",
            "Calculate the sum of digit differences between all pairs of integers.",
            "Find the digit difference between each pair of integers.",
            "Use prefix sums and a bitmask to track the count of each digit.",
            "For each pair of numbers, calculate the digit difference.",
            "If we can compute the number of numbers in nums[] that have a digit at position i, how can we compute the number of numbers that have a digit at position i+1?",
            "How to calculate the digit differences?",
            "If you're not careful, you can make the complexity of this problem extremely high.  How can you reduce the complexity of this problem?",
            "For each digit, compute how many pairs are there that have the same digit at this position and how many pairs have a different digit at this position.",
            "Calculate the digit difference between every pair of numbers and sum up all these differences.",
            "Calculate the number of pairs (i,j) such that i < j.",
            "For each number, how many pairs it can be a part of?",
            "For every digit position, we need to count how many pairs have that digit and how many pairs do not have that digit.",
            "For each digit position, count how many numbers have that digit as the first digit.  Then, for each number, calculate the contribution of this number to the total sum."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long countCompleteDayPairs(vector<int>& hours) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long countCompleteDayPairs(int[] hours) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countCompleteDayPairs(self, hours):\n        \"\"\"\n        :type hours: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countCompleteDayPairs(self, hours: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long countCompleteDayPairs(int* hours, int hoursSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long CountCompleteDayPairs(int[] hours) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} hours\n * @return {number}\n */\nvar countCompleteDayPairs = function(hours) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countCompleteDayPairs(hours: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $hours\n     * @return Integer\n     */\n    function countCompleteDayPairs($hours) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countCompleteDayPairs(_ hours: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countCompleteDayPairs(hours: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countCompleteDayPairs(List<int> hours) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countCompleteDayPairs(hours []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} hours\n# @return {Integer}\ndef count_complete_day_pairs(hours)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countCompleteDayPairs(hours: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_complete_day_pairs(hours: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-complete-day-pairs hours)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_complete_day_pairs(Hours :: [integer()]) -> integer().\ncount_complete_day_pairs(Hours) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_complete_day_pairs(hours :: [integer]) :: integer\n  def count_complete_day_pairs(hours) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given an integer array <code>hours</code> representing times in <strong>hours</strong>, return an integer denoting the number of pairs <code>i</code>, <code>j</code> where <code>i &lt; j</code> and <code>hours[i] + hours[j]</code> forms a <strong>complete day</strong>.</p>\n\n<p>A <strong>complete day</strong> is defined as a time duration that is an <strong>exact</strong> <strong>multiple</strong> of 24 hours.</p>\n\n<p>For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">hours = [12,12,30,24,24]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong> The pairs of indices that form a complete day are <code>(0, 1)</code> and <code>(3, 4)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">hours = [72,48,24,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong> The pairs of indices that form a complete day are <code>(0, 1)</code>, <code>(0, 2)</code>, and <code>(1, 2)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= hours.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= hours[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[12,12,30,24,24]\n[72,48,24,3]",
        "formTitle": "[3185]Count Pairs That Form a Complete Day II",
        "frequency": 0.0,
        "frontendQuestionId": "3185",
        "hints": [
            "A pair <code>(i, j)</code> forms a valid complete day if <code>(hours[i] + hours[j]) % 24 == 0</code>.",
            "Using an array or a map, for each index <code>j</code> moving from left to right, increase the answer by the count of <code>(24 - hours[j]) % 24</code>, and then increase the count of <code>hours[j]</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "countCompleteDayPairs",
            "params": [
                {
                    "name": "hours",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3418",
        "similarQuestions": [
            "[{\"title\": \"Check If Array Pairs Are Divisible by k\", \"titleSlug\": \"check-if-array-pairs-are-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u68c0\\u67e5\\u6570\\u7ec4\\u5bf9\\u662f\\u5426\\u53ef\\u4ee5\\u88ab k \\u6574\\u9664\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[12,12,30,24,24]",
        "title": "Count Pairs That Form a Complete Day II",
        "titleSlug": "count-pairs-that-form-a-complete-day-ii",
        "infer_hints": [
            "Count how many numbers of the form a + b (where a and b are in the array) sum to a multiple of 24.",
            "Count the number of pairs (i, j) such that the sum of the hours is a multiple of 24.",
            "How many pairs can you make that sum up to 24?",
            "Try to use a hashmap to count the frequency of each prefix sum.",
            "How many pairs of indices <code>(i, j)</code> can you form with <code>hours[i] + hours[j]</code> equals to 24?",
            "If we use prefix sums, how can we compute the number of pairs (i, j) where i < j and hours[i] + hours[j] is a multiple of 24?",
            "The number of pairs that sum to a multiple of 24 is the same as the number of pairs that sum to 12 or 36.",
            "The problem can be solved by keeping the count of the frequency of each hour and then counting the number of pairs that sum up to 24.",
            "You can use prefix sum array and binary search to solve this problem.",
            "Try to reduce the problem to a simpler problem.",
            "The key observation is that the total number of pairs of indices is just the sum of the number of ways to choose two indices i and j.",
            "Use a prefix sum array.",
            "Think about the sum of the hours of the first and last person.  We should consider the sum of all the hours, and then subtract the sum of the first and last person.",
            "Use a prefix sum array.",
            "Count the number of pairs (i, j) where i < j and hours[i] + hours[j] is a multiple of 24.",
            "For each pair of indices, compute the sum of the hours in the range between them.",
            "If you want to check if an array has a multiple of 24, then it will be much easier if you check if each element is a multiple of 24.",
            "For each hour, what are the possible pairs of hours we can add to it to form a complete day?",
            "Count the number of pairs (i, j) where i < j and the sum of hours[i] and hours[j] forms a complete day.",
            "For each prefix sum, store the maximum number of hours."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxPointsInsideSquare(vector<vector<int>>& points, string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxPointsInsideSquare(int[][] points, String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxPointsInsideSquare(self, points, s):\n        \"\"\"\n        :type points: List[List[int]]\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxPointsInsideSquare(self, points: List[List[int]], s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxPointsInsideSquare(int** points, int pointsSize, int* pointsColSize, char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxPointsInsideSquare(int[][] points, string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} points\n * @param {string} s\n * @return {number}\n */\nvar maxPointsInsideSquare = function(points, s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxPointsInsideSquare(points: number[][], s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @param String $s\n     * @return Integer\n     */\n    function maxPointsInsideSquare($points, $s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxPointsInsideSquare(_ points: [[Int]], _ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxPointsInsideSquare(points: Array<IntArray>, s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxPointsInsideSquare(List<List<int>> points, String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxPointsInsideSquare(points [][]int, s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} points\n# @param {String} s\n# @return {Integer}\ndef max_points_inside_square(points, s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxPointsInsideSquare(points: Array[Array[Int]], s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_points_inside_square(points: Vec<Vec<i32>>, s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-points-inside-square points s)\n  (-> (listof (listof exact-integer?)) string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_points_inside_square(Points :: [[integer()]], S :: unicode:unicode_binary()) -> integer().\nmax_points_inside_square(Points, S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_points_inside_square(points :: [[integer]], s :: String.t) :: integer\n  def max_points_inside_square(points, s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D<strong> </strong>array <code>points</code> and a string <code>s</code> where, <code>points[i]</code> represents the coordinates of point <code>i</code>, and <code>s[i]</code> represents the <strong>tag</strong> of point <code>i</code>.</p>\n\n<p>A <strong>valid</strong> square is a square centered at the origin <code>(0, 0)</code>, has edges parallel to the axes, and <strong>does not</strong> contain two points with the same tag.</p>\n\n<p>Return the <strong>maximum</strong> number of points contained in a <strong>valid</strong> square.</p>\n\n<p>Note:</p>\n\n<ul>\n\t<li>A point is considered to be inside the square if it lies on or within the square&#39;s boundaries.</li>\n\t<li>The side length of the square can be zero.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/29/3708-tc1.png\" style=\"width: 303px; height: 303px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[2,2],[-1,-2],[-4,4],[-3,1],[3,-3]], s = &quot;abdca&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The square of side length 4 covers two points <code>points[0]</code> and <code>points[1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/29/3708-tc2.png\" style=\"width: 302px; height: 302px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[1,1],[-2,-2],[-2,2]], s = &quot;abb&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The square of side length 2 covers one point, which is <code>points[0]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[1,1],[-1,-1],[2,-2]], s = &quot;ccd&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It&#39;s impossible to make any valid squares centered at the origin such that it covers only one point among <code>points[0]</code> and <code>points[1]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= points[i][0], points[i][1] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>s.length == points.length</code></li>\n\t<li><code>points</code> consists of distinct coordinates.</li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "[[2,2],[-1,-2],[-4,4],[-3,1],[3,-3]]\n\"abdca\"\n[[1,1],[-2,-2],[-2,2]]\n\"abb\"\n[[1,1],[-1,-1],[2,-2]]\n\"ccd\"",
        "formTitle": "[3143]Maximum Points Inside the Square",
        "frequency": 0.0,
        "frontendQuestionId": "3143",
        "hints": [
            "The smallest edge length of a square to include point <code>(x, y)</code> is <code>max(abs(x), abs(y)) * 2</code>.",
            "Sort the points by <code>max(abs(x), abs(y))</code> and try each edge length, check the included point tags."
        ],
        "level": 2,
        "metaData": {
            "name": "maxPointsInsideSquare",
            "params": [
                {
                    "name": "points",
                    "type": "integer[][]"
                },
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3419",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[2,2],[-1,-2],[-4,4],[-3,1],[3,-3]]\n\"abdca\"",
        "title": "Maximum Points Inside the Square",
        "titleSlug": "maximum-points-inside-the-square",
        "infer_hints": [
            "We can store the counts of all points in a hash map.",
            "Use a hashmap to record the count of points with the same tags.",
            "Calculate the 4 possible corners of the square.",
            "If a square is centered at (x1, y1), can we always make it centered at (x2, y2) where x2 = x1 + dx, y2 = y1 + dy?",
            "Can we try all possible points as the center of the square?",
            "We can compute the count of points for all possible centers.  We can pre-compute the distance to the origin for each point.",
            "Use a 4D array to store the count of points with the same color and distance.",
            "How many ways can you have 4 points on a square?",
            "Use a sliding window technique.",
            "Can we use the Manhattan distance for this?",
            "For each point, we need to check the 4 points around it to form a square.",
            "Generate all possible squares.",
            "For each pair of points, find all the other points that form a square.",
            "Find the points that lie on the boundary of the square.",
            "Think of a square with the center at (0,0) and side length 1. The square covers 4 points.",
            "Use a set to store the 4 points.",
            "What is the minimum possible distance between any two points?",
            "Try to build the square around each point and check for each possible size of the square if it's valid.",
            "Try to find four points in a square.",
            "How many squares can you make if you have a point and two other points?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> occurrencesOfElement(vector<int>& nums, vector<int>& queries, int x) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] occurrencesOfElement(int[] nums, int[] queries, int x) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def occurrencesOfElement(self, nums, queries, x):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[int]\n        :type x: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def occurrencesOfElement(self, nums: List[int], queries: List[int], x: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* occurrencesOfElement(int* nums, int numsSize, int* queries, int queriesSize, int x, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] OccurrencesOfElement(int[] nums, int[] queries, int x) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} queries\n * @param {number} x\n * @return {number[]}\n */\nvar occurrencesOfElement = function(nums, queries, x) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function occurrencesOfElement(nums: number[], queries: number[], x: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $queries\n     * @param Integer $x\n     * @return Integer[]\n     */\n    function occurrencesOfElement($nums, $queries, $x) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func occurrencesOfElement(_ nums: [Int], _ queries: [Int], _ x: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun occurrencesOfElement(nums: IntArray, queries: IntArray, x: Int): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> occurrencesOfElement(List<int> nums, List<int> queries, int x) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func occurrencesOfElement(nums []int, queries []int, x int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} queries\n# @param {Integer} x\n# @return {Integer[]}\ndef occurrences_of_element(nums, queries, x)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def occurrencesOfElement(nums: Array[Int], queries: Array[Int], x: Int): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn occurrences_of_element(nums: Vec<i32>, queries: Vec<i32>, x: i32) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (occurrences-of-element nums queries x)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec occurrences_of_element(Nums :: [integer()], Queries :: [integer()], X :: integer()) -> [integer()].\noccurrences_of_element(Nums, Queries, X) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec occurrences_of_element(nums :: [integer], queries :: [integer], x :: integer) :: [integer]\n  def occurrences_of_element(nums, queries, x) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code>, an integer array <code>queries</code>, and an integer <code>x</code>.</p>\n\n<p>For each <code>queries[i]</code>, you need to find the index of the <code>queries[i]<sup>th</sup></code> occurrence of <code>x</code> in the <code>nums</code> array. If there are fewer than <code>queries[i]</code> occurrences of <code>x</code>, the answer should be -1 for that query.</p>\n\n<p>Return an integer array <code>answer</code> containing the answers to all queries.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,3,1,7], queries = [1,3,2,4], x = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,-1,2,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>For the 1<sup>st</sup> query, the first occurrence of 1 is at index 0.</li>\n\t<li>For the 2<sup>nd</sup> query, there are only two occurrences of 1 in <code>nums</code>, so the answer is -1.</li>\n\t<li>For the 3<sup>rd</sup> query, the second occurrence of 1 is at index 2.</li>\n\t<li>For the 4<sup>th</sup> query, there are only two occurrences of 1 in <code>nums</code>, so the answer is -1.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], queries = [10], x = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>For the 1<sup>st</sup> query, 5 doesn&#39;t exist in <code>nums</code>, so the answer is -1.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], x &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,3,1,7]\n[1,3,2,4]\n1\n[1,2,3]\n[10]\n5",
        "formTitle": "[3159]Find Occurrences of an Element in an Array",
        "frequency": 0.0,
        "frontendQuestionId": "3159",
        "hints": [
            "Compress the array <code>nums</code> and save all the occurrences of each element in the separate arrays."
        ],
        "level": 2,
        "metaData": {
            "name": "occurrencesOfElement",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "queries",
                    "type": "integer[]"
                },
                {
                    "name": "x",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3420",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,3,1,7]\n[1,3,2,4]\n1",
        "title": "Find Occurrences of an Element in an Array",
        "titleSlug": "find-occurrences-of-an-element-in-an-array",
        "infer_hints": [
            "Store all indices of each number in a map.",
            "You can use a dictionary to count the occurrences of each number in nums.",
            "Use the prefix sum concept and a frequency map.",
            "For each query, you can find the index of the element using binary search.",
            "If we find the occurrence of the number in the array, how can we find the next occurrence?",
            "Use a frequency counter to count the occurrences of each number in the array.",
            "Can we keep track of the indexes of the occurrences of x in nums?",
            "How can you store the indexes of the elements?",
            "Try to find the first occurrence of each number in the nums array.",
            "You can use a map to count the occurrences of all numbers.",
            "What if we iterate over the array in reverse order?",
            "You can use the two pointers technique to solve this problem.",
            "Can we use a hash map to store the counts of the elements?",
            "Try to find the position of x in nums using binary search.",
            "For each number in nums, count the number of times it occurs in nums and store this count in a map.",
            "Use the array indices as hashtable keys.",
            "If the element is not present in the array, return -1.",
            "Use a stack to check the next occurrence of x.",
            "We can store the indexes of all occurrences of x in an array and then use binary search to find the k-th occurrence of x.",
            "If you can find the index of the first occurrence of x, you can find the index of the second occurrence by adding one to the index of the first occurrence."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countCompleteDayPairs(vector<int>& hours) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countCompleteDayPairs(int[] hours) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countCompleteDayPairs(self, hours):\n        \"\"\"\n        :type hours: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countCompleteDayPairs(self, hours: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countCompleteDayPairs(int* hours, int hoursSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountCompleteDayPairs(int[] hours) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} hours\n * @return {number}\n */\nvar countCompleteDayPairs = function(hours) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countCompleteDayPairs(hours: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $hours\n     * @return Integer\n     */\n    function countCompleteDayPairs($hours) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countCompleteDayPairs(_ hours: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countCompleteDayPairs(hours: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countCompleteDayPairs(List<int> hours) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countCompleteDayPairs(hours []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} hours\n# @return {Integer}\ndef count_complete_day_pairs(hours)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countCompleteDayPairs(hours: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_complete_day_pairs(hours: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-complete-day-pairs hours)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_complete_day_pairs(Hours :: [integer()]) -> integer().\ncount_complete_day_pairs(Hours) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_complete_day_pairs(hours :: [integer]) :: integer\n  def count_complete_day_pairs(hours) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given an integer array <code>hours</code> representing times in <strong>hours</strong>, return an integer denoting the number of pairs <code>i</code>, <code>j</code> where <code>i &lt; j</code> and <code>hours[i] + hours[j]</code> forms a <strong>complete day</strong>.</p>\n\n<p>A <strong>complete day</strong> is defined as a time duration that is an <strong>exact</strong> <strong>multiple</strong> of 24 hours.</p>\n\n<p>For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">hours = [12,12,30,24,24]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The pairs of indices that form a complete day are <code>(0, 1)</code> and <code>(3, 4)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">hours = [72,48,24,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The pairs of indices that form a complete day are <code>(0, 1)</code>, <code>(0, 2)</code>, and <code>(1, 2)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= hours.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= hours[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[12,12,30,24,24]\n[72,48,24,3]",
        "formTitle": "[3184]Count Pairs That Form a Complete Day I",
        "frequency": 0.0,
        "frontendQuestionId": "3184",
        "hints": [
            "Brute force all pairs <code>(i, j)</code> and check if they form a valid complete day. It is considered a complete day if <code>(hours[i] + hours[j]) % 24 == 0</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "countCompleteDayPairs",
            "params": [
                {
                    "name": "hours",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3421",
        "similarQuestions": [
            "[{\"title\": \"Check If Array Pairs Are Divisible by k\", \"titleSlug\": \"check-if-array-pairs-are-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u68c0\\u67e5\\u6570\\u7ec4\\u5bf9\\u662f\\u5426\\u53ef\\u4ee5\\u88ab k \\u6574\\u9664\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[12,12,30,24,24]",
        "title": "Count Pairs That Form a Complete Day I",
        "titleSlug": "count-pairs-that-form-a-complete-day-i",
        "infer_hints": [
            "Use a hash map to count the frequency of each hour.",
            "What are the possible sum values that can occur in an array?",
            "The sum of 2 numbers is a multiple of 24 if and only if the sum of their modulo 24 is 0.",
            "What if we just count the number of pairs that sum up to 24?",
            "How can we use prefix sums?",
            "What if you keep track of the prefix sums?  (This approach is known as a sliding window.)",
            "You can iterate over each pair of indices and check if the sum is a multiple of 24.",
            "Use a hashmap to count the number of elements with each possible sum.",
            "For each element, try to find out how many other elements can form a day.",
            "Use a hash map to store the count of each value.",
            "You can use a map to count the number of hours.",
            "Find all the pairs of hours that sum up to 24.",
            "The sum of the hours can be at most 1440 (24 * 60).  What data structure would allow for quick lookup of how many hours are there?",
            "What is the smallest multiple of 24?",
            "The problem can be simplified by taking the modulo of each hour by 24.",
            "Count how many pairs <code>(i, j)</code> we can form where <code>i &lt; j</code>.",
            "Count the number of times that 1, 2,..., 12, 12, 12,... appears in the array.",
            "Can we do better than O(n^2) time complexity?",
            "What is the largest number of complete days that can be formed from 2 hours?",
            "Do you need to count the number of pairs that sum up to 24?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int valueAfterKSeconds(int n, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int valueAfterKSeconds(int n, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def valueAfterKSeconds(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def valueAfterKSeconds(self, n: int, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int valueAfterKSeconds(int n, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int ValueAfterKSeconds(int n, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar valueAfterKSeconds = function(n, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function valueAfterKSeconds(n: number, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function valueAfterKSeconds($n, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func valueAfterKSeconds(_ n: Int, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun valueAfterKSeconds(n: Int, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int valueAfterKSeconds(int n, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func valueAfterKSeconds(n int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef value_after_k_seconds(n, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def valueAfterKSeconds(n: Int, k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn value_after_k_seconds(n: i32, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (value-after-k-seconds n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec value_after_k_seconds(N :: integer(), K :: integer()) -> integer().\nvalue_after_k_seconds(N, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec value_after_k_seconds(n :: integer, k :: integer) :: integer\n  def value_after_k_seconds(n, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two integers <code>n</code> and <code>k</code>.</p>\n\n<p>Initially, you start with an array <code>a</code> of <code>n</code> integers where <code>a[i] = 1</code> for all <code>0 &lt;= i &lt;= n - 1</code>. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, <code>a[0]</code> remains the same, <code>a[1]</code> becomes <code>a[0] + a[1]</code>, <code>a[2]</code> becomes <code>a[0] + a[1] + a[2]</code>, and so on.</p>\n\n<p>Return the <strong>value</strong> of <code>a[n - 1]</code> after <code>k</code> seconds.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, k = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">56</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Second</th>\n\t\t\t<th>State After</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>[1,1,1,1]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>[1,2,3,4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>[1,3,6,10]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>[1,4,10,20]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>[1,5,15,35]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>[1,6,21,56]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">35</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Second</th>\n\t\t\t<th>State After</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>[1,1,1,1,1]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>[1,2,3,4,5]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>[1,3,6,10,15]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>[1,4,10,20,35]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, k &lt;= 1000</code></li>\n</ul>\n",
        "exampleTestcases": "4\n5\n5\n3",
        "formTitle": "[3179]Find the N-th Value After K Seconds",
        "frequency": 0.0,
        "frontendQuestionId": "3179",
        "hints": [
            "Calculate the prefix sum array of <code>nums</code>, <code>k</code> times."
        ],
        "level": 2,
        "metaData": {
            "name": "valueAfterKSeconds",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3422",
        "similarQuestions": [
            "[{\"title\": \"Left and Right Sum Differences\", \"titleSlug\": \"left-and-right-sum-differences\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5de6\\u53f3\\u5143\\u7d20\\u548c\\u7684\\u5dee\\u503c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "4\n5",
        "title": "Find the N-th Value After K Seconds",
        "titleSlug": "find-the-n-th-value-after-k-seconds",
        "infer_hints": [
            "Can you solve it in O(n) time?  There are n states that you need to calculate.",
            "The number at position i is the sum of the numbers before it.",
            "Use dynamic programming to store the sum of the previous values for each element.",
            "The problem can be solved with dynamic programming.",
            "The value of the array after k seconds can be calculated by summing up all the numbers from 1 to n.",
            "This problem can be simplified by observing that for each <code>i</code>, <code>a[i] = a[i - 1] + a[i - 2] +... + a[0]</code>.",
            "For each second, you are accumulating a running sum of the array.",
            "The state after k seconds is the same as the state after k mod n seconds.",
            "How to calculate the next state based on the previous one?",
            "Use dynamic programming to solve this problem.  There are n different states you can be in, and you can move from one state to another in constant time.",
            "Calculate the sum of all elements in the array.",
            "The sum at a particular index will be the sum of the previous indices.",
            "This is a classic dynamic programming problem.",
            "What is the pattern of the first few values?",
            "You need to keep track of the current sum of the array, and the cumulative sum of the array.",
            "This problem can be solved using dynamic programming.",
            "The answer is a simple geometric sequence.  What does the sum of a geometric sequence look like?",
            "Use a dynamic programming approach.",
            "Try to simulate the process.",
            "Consider the pattern of the sequence for the first few values of k."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumSumSubsequence(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumSumSubsequence(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumSumSubsequence(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number}\n */\nvar maximumSumSubsequence = function(nums, queries) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumSumSubsequence(nums: number[], queries: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer\n     */\n    function maximumSumSubsequence($nums, $queries) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumSumSubsequence(_ nums: [Int], _ queries: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumSumSubsequence(nums: IntArray, queries: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumSumSubsequence(List<int> nums, List<List<int>> queries) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumSumSubsequence(nums []int, queries [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer}\ndef maximum_sum_subsequence(nums, queries)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumSumSubsequence(nums: Array[Int], queries: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_sum_subsequence(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-sum-subsequence nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_sum_subsequence(Nums :: [integer()], Queries :: [[integer()]]) -> integer().\nmaximum_sum_subsequence(Nums, Queries) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_sum_subsequence(nums :: [integer], queries :: [[integer]]) :: integer\n  def maximum_sum_subsequence(nums, queries) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> consisting of integers. You are also given a 2D array <code>queries</code>, where <code>queries[i] = [pos<sub>i</sub>, x<sub>i</sub>]</code>.</p>\n\n<p>For query <code>i</code>, we first set <code>nums[pos<sub>i</sub>]</code> equal to <code>x<sub>i</sub></code>, then we calculate the answer to query <code>i</code> which is the <strong>maximum</strong> sum of a <span data-keyword=\"subsequence-array\">subsequence</span> of <code>nums</code> where <strong>no two adjacent elements are selected</strong>.</p>\n\n<p>Return the <em>sum</em> of the answers to all queries.</p>\n\n<p>Since the final answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,5,9], queries = [[1,-2],[0,-3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">21</span></p>\n\n<p><strong>Explanation:</strong><br />\nAfter the 1<sup>st</sup> query, <code>nums = [3,-2,9]</code> and the maximum sum of a subsequence with non-adjacent elements is <code>3 + 9 = 12</code>.<br />\nAfter the 2<sup>nd</sup> query, <code>nums = [-3,-2,9]</code> and the maximum sum of a subsequence with non-adjacent elements is 9.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,-1], queries = [[0,-5]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong><br />\nAfter the 1<sup>st</sup> query, <code>nums = [-5,-1]</code> and the maximum sum of a subsequence with non-adjacent elements is 0 (choosing an empty subsequence).</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>queries[i] == [pos<sub>i</sub>, x<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= pos<sub>i</sub> &lt;= nums.length - 1</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= x<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[3,5,9]\n[[1,-2],[0,-3]]\n[0,-1]\n[[0,-5]]",
        "formTitle": "[3165]Maximum Sum of Subsequence With Non-adjacent Elements",
        "frequency": 0.0,
        "frontendQuestionId": "3165",
        "hints": [
            "Can you solve each query in <code>O(nums.length)</code> with dynamic programming?",
            "In order to optimize, we will use segment tree where each node contains the maximum value of (front element has been chosen or not, back element has been chosen or not)."
        ],
        "level": 3,
        "metaData": {
            "name": "maximumSumSubsequence",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "queries",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3423",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,5,9]\n[[1,-2],[0,-3]]",
        "title": "Maximum Sum of Subsequence With Non-adjacent Elements",
        "titleSlug": "maximum-sum-of-subsequence-with-non-adjacent-elements",
        "infer_hints": [
            "Try to think of a dynamic programming approach.",
            "The problem can be solved using dynamic programming.",
            "Use prefix and suffix sum arrays.",
            "Try dynamic programming.",
            "Consider using dynamic programming.",
            "Try to use dynamic programming to keep track of the maximum sum you can get by considering each number.",
            "Consider the example nums = [1,2,3,4,5].  We consider the subsequences [1,2,3,4,5], [1,2,3,5], [1,2,4,5], [1,3,4,5], [2,3,4,5].  Can you use dynamic programming to solve this problem?",
            "For each element, you have two choices, take it or not take it.",
            "Do a simple prefix sum for the array.",
            "How to compute the answer for a single query?  What if we use dp to compute the maximum sum of a subsequence that ends at position i?",
            "If we take a number, we cannot take the previous number.",
            "Can we solve this problem in O(n log(n)) time complexity?",
            "We can do dynamic programming.  Can we do it with O(n log(n))?",
            "The subsequence can be formed using the prefix and suffix of the array.",
            "You can maintain a sorted list of all the prefix sums.  How can you use this to solve the problem?",
            "Use dynamic programming.",
            "What if you sort the array in non-decreasing order?",
            "How can we handle this problem using dynamic programming?",
            "How to choose the subsequence to maximize the sum?",
            "Think of dp[i] as the maximum sum of subsequence if we consider nums[i] for our answer."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumChairs(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumChairs(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumChairs(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumChairs(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumChairs(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumChairs(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumChairs = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumChairs(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumChairs($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumChairs(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumChairs(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumChairs(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumChairs(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef minimum_chairs(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumChairs(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_chairs(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-chairs s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_chairs(S :: unicode:unicode_binary()) -> integer().\nminimum_chairs(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_chairs(s :: String.t) :: integer\n  def minimum_chairs(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>. Simulate events at each second <code>i</code>:</p>\n\n<ul>\n\t<li>If <code>s[i] == &#39;E&#39;</code>, a person enters the waiting room and takes one of the chairs in it.</li>\n\t<li>If <code>s[i] == &#39;L&#39;</code>, a person leaves the waiting room, freeing up a chair.</li>\n</ul>\n\n<p>Return the <strong>minimum </strong>number of chairs needed so that a chair is available for every person who enters the waiting room given that it is initially <strong>empty</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;EEEEEEE&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After each second, a person enters the waiting room and no person leaves it. Therefore, a minimum of 7 chairs is needed.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;ELELEEL&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s consider that there are 2 chairs in the waiting room. The table below shows the state of the waiting room at each second.</p>\n</div>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Second</th>\n\t\t\t<th>Event</th>\n\t\t\t<th>People in the Waiting Room</th>\n\t\t\t<th>Available Chairs</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>Enter</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Leave</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Enter</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Leave</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>Enter</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>Enter</td>\n\t\t\t<td>2</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>Leave</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;ELEELEELLL&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s consider that there are 3 chairs in the waiting room. The table below shows the state of the waiting room at each second.</p>\n</div>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Second</th>\n\t\t\t<th>Event</th>\n\t\t\t<th>People in the Waiting Room</th>\n\t\t\t<th>Available Chairs</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>Enter</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Leave</td>\n\t\t\t<td>0</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Enter</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Enter</td>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>Leave</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>Enter</td>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>Enter</td>\n\t\t\t<td>3</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>7</td>\n\t\t\t<td>Leave</td>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>8</td>\n\t\t\t<td>Leave</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>9</td>\n\t\t\t<td>Leave</td>\n\t\t\t<td>0</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 50</code></li>\n\t<li><code>s</code> consists only of the letters <code>&#39;E&#39;</code> and <code>&#39;L&#39;</code>.</li>\n\t<li><code>s</code> represents a valid sequence of entries and exits.</li>\n</ul>\n",
        "exampleTestcases": "\"EEEEEEE\"\n\"ELELEEL\"\n\"ELEELEELLL\"",
        "formTitle": "[3168]Minimum Number of Chairs in a Waiting Room",
        "frequency": 0.0,
        "frontendQuestionId": "3168",
        "hints": [
            "Iterate from left to right over the string and keep track of the number of people in the waiting room using a variable that you will increment on every occurrence of 鈥楨鈥� and decrement on every occurrence of 鈥楲鈥�.",
            "The answer is the maximum number of people in the waiting room at any instance."
        ],
        "level": 1,
        "metaData": {
            "name": "minimumChairs",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3426",
        "similarQuestions": [
            "[{\"title\": \"Consecutive Characters\", \"titleSlug\": \"consecutive-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u8fde\\u7eed\\u5b57\\u7b26\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "\"EEEEEEE\"",
        "title": "Minimum Number of Chairs in a Waiting Room",
        "titleSlug": "minimum-number-of-chairs-in-a-waiting-room",
        "infer_hints": [
            "You can use a queue to keep track of the people who are currently in the waiting room.",
            "Let's simulate the process.",
            "You can use a priority queue to keep track of the current number of people in the waiting room.",
            "What is the worst-case scenario?",
            "For each second, count the number of people who are in the waiting room.",
            "We need to count the number of people who entered the room at each second.",
            "How many people can we add to the waiting room?  You can add the difference between the number of people who entered and left at time i.",
            "For each second, how many people enter and leave the waiting room?",
            "The minimum number of chairs needed is the number of rooms which are currently occupied.",
            "What if you have a list of people who enter the room and a list of people who leave the room?",
            "We can use a queue and sort it to find the minimum number of chairs needed.",
            "Can we use a priority queue to solve this problem?",
            "We can maintain the count of people in the waiting room and the count of empty chairs.",
            "Keep track of the number of people waiting and the number of available chairs.",
            "For each second, how many people are entering and leaving the room?",
            "Keep track of the number of people in the waiting room and the number of empty chairs.",
            "If a person enters the waiting room, we need at least one chair. If a person leaves, we can free up a chair.",
            "Can we use a data structure to keep track of the number of people who entered the room but haven't left yet?",
            "The answer will be the number of people at the end of the string.",
            "Can you keep track of the difference between the number of people in the waiting room and the number of empty chairs at each second?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<bool> isArraySpecial(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean[] isArraySpecial(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def isArraySpecial(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* isArraySpecial(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool[] IsArraySpecial(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar isArraySpecial = function(nums, queries) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function isArraySpecial(nums: number[], queries: number[][]): boolean[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function isArraySpecial($nums, $queries) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func isArraySpecial(_ nums: [Int], _ queries: [[Int]]) -> [Bool] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun isArraySpecial(nums: IntArray, queries: Array<IntArray>): BooleanArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<bool> isArraySpecial(List<int> nums, List<List<int>> queries) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func isArraySpecial(nums []int, queries [][]int) []bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef is_array_special(nums, queries)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def isArraySpecial(nums: Array[Int], queries: Array[Array[Int]]): Array[Boolean] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn is_array_special(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<bool> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (is-array-special nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof boolean?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec is_array_special(Nums :: [integer()], Queries :: [[integer()]]) -> [boolean()].\nis_array_special(Nums, Queries) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec is_array_special(nums :: [integer], queries :: [[integer]]) :: [boolean]\n  def is_array_special(nums, queries) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>An array is considered <strong>special</strong> if every pair of its adjacent elements contains two numbers with different parity.</p>\n\n<p>You are given an array of integer <code>nums</code> and a 2D integer matrix <code>queries</code>, where for <code>queries[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> your task is to check that <span data-keyword=\"subarray\">subarray</span> <code>nums[from<sub>i</sub>..to<sub>i</sub>]</code> is <strong>special</strong> or not.</p>\n\n<p>Return an array of booleans <code>answer</code> such that <code>answer[i]</code> is <code>true</code> if <code>nums[from<sub>i</sub>..to<sub>i</sub>]</code> is special.<!-- notionvc: e5d6f4e2-d20a-4fbd-9c7f-22fbe52ef730 --></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,4,1,2,6], queries = [[0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[false]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray is <code>[3,4,1,2,6]</code>. 2 and 6 are both even.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,1,6], queries = [[0,2],[2,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[false,true]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ol>\n\t<li>The subarray is <code>[4,3,1]</code>. 3 and 1 are both odd. So the answer to this query is <code>false</code>.</li>\n\t<li>The subarray is <code>[1,6]</code>. There is only one pair: <code>(1,6)</code> and it contains numbers with different parity. So the answer to this query is <code>true</code>.</li>\n</ol>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;= nums.length - 1</code></li>\n</ul>\n",
        "exampleTestcases": "[3,4,1,2,6]\n[[0,4]]\n[4,3,1,6]\n[[0,2],[2,3]]",
        "formTitle": "[3152]Special Array II",
        "frequency": 0.0,
        "frontendQuestionId": "3152",
        "hints": [
            "Try to split the array into some non-intersected continues special subarrays.",
            "For each query check that the first and the last elements of that query are in the same subarray or not."
        ],
        "level": 2,
        "metaData": {
            "name": "isArraySpecial",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "queries",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3427",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,4,1,2,6]\n[[0,4]]",
        "title": "Special Array II",
        "titleSlug": "special-array-ii",
        "infer_hints": [
            "Use a prefix sum array to store the number of even elements in the range.",
            "Use prefix sum to solve the problem in O(n) time.",
            "You can use prefix sum array and binary search to solve this problem.",
            "Use a prefix sum array and binary search.",
            "If we have a number in nums[i], it means that we have i elements that are smaller or equal to nums[i] and at least nums[i] - x elements that are smaller or equal to nums[i] - 1.",
            "A special array is an array that meets one of the following conditions:\r\n- The sum of the array is odd, and the sum of all the odd indices is even.\r\n- The sum of the array is even, and the sum of all the even indices is odd.",
            "For each number, count how many numbers in the array are smaller than it.",
            "We can preprocess the array to calculate the prefix sum of the number of even numbers.",
            "How to check if a number is even or odd?",
            "Try to check the parity of the numbers in the subarray in a more efficient way.",
            "You can use a prefix-sum array to solve this problem in O(n) time.",
            "If you have a prefix array and a suffix array, can you calculate the number of special subarrays in O(n) time?",
            "How to check if an array is special?",
            "If a number appears more than n / 2 times, it is a special number.",
            "Can we use some prefix and suffix information to solve this problem?",
            "Use a prefix sum array and count the number of elements with a certain value.",
            "For each element, check the count of numbers which are smaller than it.",
            "Use prefix sums and the fact that the answer must be an integer.",
            "The subarray should have an even number of elements.",
            "Consider each number as a root of a tree."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int duplicateNumbersXOR(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int duplicateNumbersXOR(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def duplicateNumbersXOR(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def duplicateNumbersXOR(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int duplicateNumbersXOR(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int DuplicateNumbersXOR(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar duplicateNumbersXOR = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function duplicateNumbersXOR(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function duplicateNumbersXOR($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func duplicateNumbersXOR(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun duplicateNumbersXOR(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int duplicateNumbersXOR(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func duplicateNumbersXOR(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef duplicate_numbers_xor(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def duplicateNumbersXOR(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn duplicate_numbers_xor(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (duplicate-numbers-xor nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec duplicate_numbers_xor(Nums :: [integer()]) -> integer().\nduplicate_numbers_xor(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec duplicate_numbers_xor(nums :: [integer]) :: integer\n  def duplicate_numbers_xor(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code>, where each number in the array appears <strong>either</strong><em> </em>once<em> </em>or<em> </em>twice.</p>\n\n<p>Return the bitwise<em> </em><code>XOR</code> of all the numbers that appear twice in the array, or 0 if no number appears twice.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,1,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only number that appears twice in&nbsp;<code>nums</code>&nbsp;is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>No number appears twice in&nbsp;<code>nums</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Numbers 1 and 2 appeared twice. <code>1 XOR 2 == 3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n\t<li>Each number in <code>nums</code> appears either once or twice.</li>\n</ul>\n",
        "exampleTestcases": "[1,2,1,3]\n[1,2,3]\n[1,2,2,1]",
        "formTitle": "[3158]Find the XOR of Numbers Which Appear Twice",
        "frequency": 0.0,
        "frontendQuestionId": "3158",
        "hints": [
            "The constraints are small. Brute force checking each value in the array."
        ],
        "level": 1,
        "metaData": {
            "name": "duplicateNumbersXOR",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3428",
        "similarQuestions": [
            "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u7684\\u6570\\u5b57\", \"isPaidOnly\": false}, {\"title\": \"Single Number II\", \"titleSlug\": \"single-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u7684\\u6570\\u5b57 II\", \"isPaidOnly\": false}, {\"title\": \"Single Number III\", \"titleSlug\": \"single-number-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u7684\\u6570\\u5b57 III\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,1,3]",
        "title": "Find the XOR of Numbers Which Appear Twice",
        "titleSlug": "find-the-xor-of-numbers-which-appear-twice",
        "infer_hints": [
            "The bitwise XOR of two integers a and b is equal to the bitwise XOR of a and the bitwise XOR of a and b.",
            "Can we use a hashmap to count the frequency of each number?",
            "You may use an integer array of size 2N to store the count of each number in nums.",
            "Bitwise XOR of all elements gives us XOR of elements occurring twice, XOR of all elements from 1 to n gives us XOR of elements occurring once.",
            "How can you reduce the size of the nums array?",
            "If we XOR all elements of the array, we will get XOR of two numbers which appear once. But we are asked to get the XOR of two numbers which appear twice. How to get the XOR of two numbers which appear twice?",
            "If you can find all elements that appear twice, you can find the answer by simply doing a XOR operation on all the elements.",
            "How can we find the XOR of all the numbers which appear twice?",
            "If the number appears twice, XOR it with 0.",
            "Think about XOR and bit manipulation.",
            "XOR has some interesting properties.",
            "Try to solve it without using extra memory.",
            "How can we find the elements that appear twice?",
            "The XOR operation is commutative, so you can group the numbers by the last bit to get the answer.",
            "Use bitwise XOR.",
            "A number XORed with itself is zero. This can be useful in our case.",
            "XOR is a bitwise operation that takes two equal-length binary representations, performs the logical XOR operation on both, and returns the result.\r\n\r\nThink a bit.",
            "Try to find the bitwise XOR of all the numbers.",
            "The XOR operation can be used to find a unique number in an array.",
            "Use bitwise AND operator."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool isArraySpecial(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean isArraySpecial(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def isArraySpecial(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def isArraySpecial(self, nums: List[int]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool isArraySpecial(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool IsArraySpecial(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isArraySpecial = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function isArraySpecial(nums: number[]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isArraySpecial($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func isArraySpecial(_ nums: [Int]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun isArraySpecial(nums: IntArray): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool isArraySpecial(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func isArraySpecial(nums []int) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_array_special(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def isArraySpecial(nums: Array[Int]): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn is_array_special(nums: Vec<i32>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (is-array-special nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec is_array_special(Nums :: [integer()]) -> boolean().\nis_array_special(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec is_array_special(nums :: [integer]) :: boolean\n  def is_array_special(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>An array is considered <strong>special</strong> if every pair of its adjacent elements contains two numbers with different parity.<!-- notionvc: e6bed0fa-c67d-43a7-81b4-99fb85b99e98 --></p>\n\n<p>You are given an array of integers <code>nums</code>. Return <code>true</code> if <code>nums</code> is a <strong>special</strong> array, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is only one element. So the answer is <code>true</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is only two pairs: <code>(2,1)</code> and <code>(1,4)</code>, and both of them contain numbers with different parity. So the answer is <code>true</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,1,6]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>nums[1]</code> and <code>nums[2]</code> are both odd. So the answer is <code>false</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "[1]\n[2,1,4]\n[4,3,1,6]",
        "formTitle": "[3151]Special Array I",
        "frequency": 0.0,
        "frontendQuestionId": "3151",
        "hints": [
            "Try to check the parity of each element and its previous element."
        ],
        "level": 1,
        "metaData": {
            "name": "isArraySpecial",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3429",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1]",
        "title": "Special Array I",
        "titleSlug": "special-array-i",
        "infer_hints": [
            "How to check if an array is special?",
            "You can sort the array, then for each index i, check whether the number of elements to the right of i are greater than or equal to nums[i].",
            "For each number in the array, check if it is larger than the number of other numbers.",
            "We can use binary search to solve this problem.",
            "The array is special if every element appears exactly once.",
            "A number is special if it is greater than the number of elements that are greater than it.",
            "Can you solve this problem in O(n) time complexity?",
            "How can you use the property of a special array to solve this problem?",
            "If there is an integer x such that for every integer y, x < y, the sum of all numbers <= y is strictly less than the sum of all numbers < y.",
            "We need to find an element in the array that is bigger than the number of elements that are smaller than it.",
            "If a number is the special array, then its index should be the number itself.",
            "We can use the binary search for each element in the array.",
            "How to check if a number is special?",
            "A special array is an array that holds the value of the length of the array in every index.",
            "How to check if an array is special?",
            "For each number, check if it is the answer.",
            "Use the properties of bitwise XOR to solve this in O(n) time.",
            "How about the case where the length of the array is 2?",
            "How to check if the array is sorted?",
            "For each element in the array, check if it's larger than the number of elements that are greater than it."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countDays(int days, vector<vector<int>>& meetings) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countDays(int days, int[][] meetings) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countDays(self, days, meetings):\n        \"\"\"\n        :type days: int\n        :type meetings: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countDays(self, days: int, meetings: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countDays(int days, int** meetings, int meetingsSize, int* meetingsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountDays(int days, int[][] meetings) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} days\n * @param {number[][]} meetings\n * @return {number}\n */\nvar countDays = function(days, meetings) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countDays(days: number, meetings: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $days\n     * @param Integer[][] $meetings\n     * @return Integer\n     */\n    function countDays($days, $meetings) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countDays(_ days: Int, _ meetings: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countDays(days: Int, meetings: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countDays(int days, List<List<int>> meetings) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countDays(days int, meetings [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} days\n# @param {Integer[][]} meetings\n# @return {Integer}\ndef count_days(days, meetings)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countDays(days: Int, meetings: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_days(days: i32, meetings: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-days days meetings)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_days(Days :: integer(), Meetings :: [[integer()]]) -> integer().\ncount_days(Days, Meetings) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_days(days :: integer, meetings :: [[integer]]) :: integer\n  def count_days(days, meetings) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a positive integer <code>days</code> representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array <code>meetings</code> of size <code>n</code> where, <code>meetings[i] = [start_i, end_i]</code> represents the starting and ending days of meeting <code>i</code> (inclusive).</p>\n\n<p>Return the count of days when the employee is available for work but no meetings are scheduled.</p>\n\n<p><strong>Note: </strong>The meetings may overlap.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">days = 10, meetings = [[5,7],[1,3],[9,10]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no meeting scheduled on the 4<sup>th</sup> and 8<sup>th</sup> days.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">days = 5, meetings = [[2,4],[1,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no meeting scheduled on the 5<sup>th </sup>day.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">days = 6, meetings = [[1,6]]</span></p>\n\n<p><strong>Output:</strong> 0</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Meetings are scheduled for all working days.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= days &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 2</code></li>\n\t<li><code><font face=\"monospace\">1 &lt;= meetings[i][0] &lt;= meetings[i][1] &lt;= days</font></code></li>\n</ul>\n",
        "exampleTestcases": "10\n[[5,7],[1,3],[9,10]]\n5\n[[2,4],[1,3]]\n6\n[[1,6]]",
        "formTitle": "[3169]Count Days Without Meetings",
        "frequency": 0.0,
        "frontendQuestionId": "3169",
        "hints": [
            "Merge the overlapping meetings and sort the new meetings timings.",
            "Return the sum of difference between the end time of a meeting and the start time of the next meeting for all adjacent pairs."
        ],
        "level": 2,
        "metaData": {
            "name": "countDays",
            "params": [
                {
                    "name": "days",
                    "type": "integer"
                },
                {
                    "name": "meetings",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3430",
        "similarQuestions": [
            "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5408\\u5e76\\u533a\\u95f4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "10\n[[5,7],[1,3],[9,10]]",
        "title": "Count Days Without Meetings",
        "titleSlug": "count-days-without-meetings",
        "infer_hints": [
            "If you sort the meetings by their start day, can you process them in order?",
            "Do a binary search on the days, and for each mid, check if all meetings can be scheduled within mid days.",
            "Use a set to store the meetings' starting and ending days.",
            "How many days are there without any meetings?  We need to count all days where there are no meetings.",
            "If you sort the meetings by their starting days, then you can use a sweep line to determine the days when there are no meetings.",
            "Do a binary search over the range of days.",
            "For each day, you need to check whether this day is a day when no meetings are scheduled.",
            "For each day, check if it is not a meeting day.",
            "If there is a meeting between the ith and (i+1)th day, then the employee is busy between these two days.  What if there is no meeting between the ith and (i+1)th day?",
            "Can you keep track of all the meeting days in a sorted list?",
            "You can use a set to store the days with meetings.",
            "Try to keep track of the days when meetings are scheduled.",
            "Keep track of the meeting days.",
            "Can you do this with O(n log n) time complexity?",
            "How many meetings can you organize in 10 days?",
            "Sort the meetings by their start and end times.",
            "How many days are there without meetings?  How many days are there with meetings?",
            "We can use a sorted array to store the meeting days.",
            "How many days are there where there are no meetings?",
            "Think of a greedy approach.  We need to find out the days where there are no meetings."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> findPermutation(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] findPermutation(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findPermutation(self, nums: List[int]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findPermutation(int* nums, int numsSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] FindPermutation(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findPermutation = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findPermutation(nums: number[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function findPermutation($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findPermutation(_ nums: [Int]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findPermutation(nums: IntArray): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> findPermutation(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findPermutation(nums []int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_permutation(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findPermutation(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_permutation(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-permutation nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_permutation(Nums :: [integer()]) -> [integer()].\nfind_permutation(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_permutation(nums :: [integer]) :: [integer]\n  def find_permutation(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> which is a <span data-keyword=\"permutation\">permutation</span> of <code>[0, 1, 2, ..., n - 1]</code>. The <strong>score</strong> of any permutation of <code>[0, 1, 2, ..., n - 1]</code> named <code>perm</code> is defined as:</p>\n\n<p><code>score(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|</code></p>\n\n<p>Return the permutation <code>perm</code> which has the <strong>minimum</strong> possible score. If <em>multiple</em> permutations exist with this score, return the one that is <span data-keyword=\"lexicographically-smaller-array\">lexicographically smallest</span> among them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,0,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,1,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/04/example0gif.gif\" style=\"width: 235px; height: 235px;\" /></strong></p>\n\n<p>The lexicographically smallest permutation with minimum cost is <code>[0,1,2]</code>. The cost of this permutation is <code>|0 - 0| + |1 - 2| + |2 - 1| = 2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,2,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/04/example1gif.gif\" style=\"width: 235px; height: 235px;\" /></strong></p>\n\n<p>The lexicographically smallest permutation with minimum cost is <code>[0,2,1]</code>. The cost of this permutation is <code>|0 - 1| + |2 - 2| + |1 - 0| = 2</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 14</code></li>\n\t<li><code>nums</code> is a permutation of <code>[0, 1, 2, ..., n - 1]</code>.</li>\n</ul>\n",
        "exampleTestcases": "[1,0,2]\n[0,2,1]",
        "formTitle": "[3149]Find the Minimum Cost Array Permutation",
        "frequency": 0.0,
        "frontendQuestionId": "3149",
        "hints": [
            "The score function is cyclic, so we can always set <code>perm[0] = 0</code> for the smallest lexical order.",
            "It鈥檚 similar to the Traveling Salesman Problem. Use Dynamic Programming.",
            "Use a bitmask to track which elements have been assigned to <code>perm</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "findPermutation",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3431",
        "similarQuestions": [
            "[{\"title\": \"Shortest Path Visiting All Nodes\", \"titleSlug\": \"shortest-path-visiting-all-nodes\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u8bbf\\u95ee\\u6240\\u6709\\u8282\\u70b9\\u7684\\u6700\\u77ed\\u8def\\u5f84\", \"isPaidOnly\": false}, {\"title\": \"Find the Shortest Superstring\", \"titleSlug\": \"find-the-shortest-superstring\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u77ed\\u8d85\\u7ea7\\u4e32\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,0,2]",
        "title": "Find the Minimum Cost Array Permutation",
        "titleSlug": "find-the-minimum-cost-array-permutation",
        "infer_hints": [
            "Let's use the array <code>nums</code> to generate all the permutations. Then for each permutation, we calculate the score.",
            "Find the lexicographically smallest permutation that can be achieved with minimum absolute difference.",
            "The best way to find the minimum score is to find the lexicographically smallest permutation of the array.",
            "Can we just sort the permutations and take the first one?",
            "For each index, we can try to move it to the position that minimizes the cost.",
            "Find a permutation that gives the minimum absolute difference between each pair of consecutive elements.",
            "What if we want to minimize the sum of the absolute differences?",
            "Think about the absolute difference.",
            "Sort the permutations by their scores.",
            "Sort the array nums, and then generate all permutations of it.",
            "We can sort the array in ascending order.  Then, we can greedily generate the permutation by putting the smallest number at the beginning, the next smallest number at the second position, and so on.",
            "The score of a permutation is the sum of the absolute differences between the permutation and the original array.",
            "Try to sort the array and then generate the permutation.",
            "The minimum score of a permutation can be calculated by observing that the sum of the absolute differences between each pair of elements is always the same regardless of the order of the elements.",
            "Try all permutations and keep the one with the minimum cost.",
            "What if we try to sort the array in increasing or decreasing order?",
            "Try all permutations.",
            "Try to find a way to sort the permutations based on the score.",
            "Try sorting the array and then building the permutation.",
            "The minimum possible score is obtained when we arrange the numbers in ascending order."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> queryResults(int limit, vector<vector<int>>& queries) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] queryResults(int limit, int[][] queries) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def queryResults(self, limit, queries):\n        \"\"\"\n        :type limit: int\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* queryResults(int limit, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] QueryResults(int limit, int[][] queries) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} limit\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar queryResults = function(limit, queries) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function queryResults(limit: number, queries: number[][]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $limit\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function queryResults($limit, $queries) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func queryResults(_ limit: Int, _ queries: [[Int]]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun queryResults(limit: Int, queries: Array<IntArray>): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> queryResults(int limit, List<List<int>> queries) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func queryResults(limit int, queries [][]int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} limit\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef query_results(limit, queries)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def queryResults(limit: Int, queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn query_results(limit: i32, queries: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (query-results limit queries)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec query_results(Limit :: integer(), Queries :: [[integer()]]) -> [integer()].\nquery_results(Limit, Queries) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec query_results(limit :: integer, queries :: [[integer]]) :: [integer]\n  def query_results(limit, queries) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer <code>limit</code> and a 2D array <code>queries</code> of size <code>n x 2</code>.</p>\n\n<p>There are <code>limit + 1</code> balls with <strong>distinct</strong> labels in the range <code>[0, limit]</code>. Initially, all balls are uncolored. For every query in <code>queries</code> that is of the form <code>[x, y]</code>, you mark ball <code>x</code> with the color <code>y</code>. After each query, you need to find the number of <strong>distinct</strong> colors among the balls.</p>\n\n<p>Return an array <code>result</code> of length <code>n</code>, where <code>result[i]</code> denotes the number of distinct colors <em>after</em> <code>i<sup>th</sup></code> query.</p>\n\n<p><strong>Note</strong> that when answering a query, lack of a color <em>will not</em> be considered as a color.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">limit = 4, queries = [[1,4],[2,5],[1,3],[3,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,2,2,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop.gif\" style=\"width: 455px; height: 145px;\" /></p>\n\n<ul>\n\t<li>After query 0, ball 1 has color 4.</li>\n\t<li>After query 1, ball 1 has color 4, and ball 2 has color 5.</li>\n\t<li>After query 2, ball 1 has color 3, and ball 2 has color 5.</li>\n\t<li>After query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">limit = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,2,2,3,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop2.gif\" style=\"width: 457px; height: 144px;\" /></strong></p>\n\n<ul>\n\t<li>After query 0, ball 0 has color 1.</li>\n\t<li>After query 1, ball 0 has color 1, and ball 1 has color 2.</li>\n\t<li>After query 2, ball 0 has color 1, and balls 1 and 2 have color 2.</li>\n\t<li>After query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4.</li>\n\t<li>After query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= limit &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= n == queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;= limit</code></li>\n\t<li><code>1 &lt;= queries[i][1] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "4\n[[1,4],[2,5],[1,3],[3,4]]\n4\n[[0,1],[1,2],[2,2],[3,4],[4,5]]",
        "formTitle": "[3160]Find the Number of Distinct Colors Among the Balls",
        "frequency": 0.0,
        "frontendQuestionId": "3160",
        "hints": [
            "Use two HashMaps to maintain the color of each ball and the set of balls with each color."
        ],
        "level": 2,
        "metaData": {
            "name": "queryResults",
            "params": [
                {
                    "name": "limit",
                    "type": "integer"
                },
                {
                    "name": "queries",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3434",
        "similarQuestions": [
            "[{\"title\": \"Maximum Number of Balls in a Box\", \"titleSlug\": \"maximum-number-of-balls-in-a-box\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u76d2\\u5b50\\u4e2d\\u5c0f\\u7403\\u7684\\u6700\\u5927\\u6570\\u91cf\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "4\n[[1,4],[2,5],[1,3],[3,4]]",
        "title": "Find the Number of Distinct Colors Among the Balls",
        "titleSlug": "find-the-number-of-distinct-colors-among-the-balls",
        "infer_hints": [
            "You can use an array to count the colors.",
            "Use a Union-Find data structure.",
            "Use a Union-Find structure.",
            "You can maintain a count of colors for each ball.",
            "For each query, use a data structure to store the color of each ball.",
            "If the ball <code>x</code> is already colored with color <code>y</code>, then we can ignore the query.",
            "How many colors are there in the array?",
            "The balls are in a sequence.  We can use a data structure to keep track of the distinct colors.",
            "What if we use a data structure that supports counting?",
            "Keep track of the colors that have been assigned to the balls.",
            "If the color of a ball is not present in the map, how to count it?",
            "Use a bitmask to keep track of the distinct colors.",
            "Use a map or an array to count the number of balls with each color.",
            "Use a data structure to store the colors of the balls.",
            "For each ball, maintain the smallest and largest color it has seen.",
            "Use a hash set to store all the colors that are currently colored.",
            "Use an ordered set or a hash map to store the colors.",
            "Use a union-find data structure.",
            "What if we use a hashmap for each color?",
            "Try to think about the structure of the data you need to maintain for each ball."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public List<Boolean> getResults(int[][] queries) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def getResults(self, queries):\n        \"\"\"\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* getResults(int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public IList<bool> GetResults(int[][] queries) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar getResults = function(queries) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function getResults(queries: number[][]): boolean[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function getResults($queries) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func getResults(_ queries: [[Int]]) -> [Bool] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun getResults(queries: Array<IntArray>): List<Boolean> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<bool> getResults(List<List<int>> queries) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func getResults(queries [][]int) []bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef get_results(queries)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def getResults(queries: Array[Array[Int]]): List[Boolean] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn get_results(queries: Vec<Vec<i32>>) -> Vec<bool> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (get-results queries)\n  (-> (listof (listof exact-integer?)) (listof boolean?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec get_results(Queries :: [[integer()]]) -> [boolean()].\nget_results(Queries) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec get_results(queries :: [[integer]]) :: [boolean]\n  def get_results(queries) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There exists an infinite number line, with its origin at 0 and extending towards the <strong>positive</strong> x-axis.</p>\n\n<p>You are given a 2D array <code>queries</code>, which contains two types of queries:</p>\n\n<ol>\n\t<li>For a query of type 1, <code>queries[i] = [1, x]</code>. Build an obstacle at distance <code>x</code> from the origin. It is guaranteed that there is <strong>no</strong> obstacle at distance <code>x</code> when the query is asked.</li>\n\t<li>For a query of type 2, <code>queries[i] = [2, x, sz]</code>. Check if it is possible to place a block of size <code>sz</code> <em>anywhere</em> in the range <code>[0, x]</code> on the line, such that the block <strong>entirely</strong> lies in the range <code>[0, x]</code>. A block <strong>cannot </strong>be placed if it intersects with any obstacle, but it may touch it. Note that you do<strong> not</strong> actually place the block. Queries are separate.</li>\n</ol>\n\n<p>Return a boolean array <code>results</code>, where <code>results[i]</code> is <code>true</code> if you can place the block specified in the <code>i<sup>th</sup></code> query of type 2, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = [[1,2],[2,3,3],[2,3,1],[2,2,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[false,true,true]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example0block.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 309px; height: 129px;\" /></strong></p>\n\n<p>For query 0, place an obstacle at <code>x = 2</code>. A block of size at most 2 can be placed before <code>x = 3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">queries = </span>[[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]<!-- notionvc: 4a471445-5af1-4d72-b11b-94d351a2c8e9 --></p>\n\n<p><strong>Output:</strong> [true,true,false]</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example1block.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 310px; height: 130px;\" /></strong></p>\n\n<ul>\n\t<li>Place an obstacle at <code>x = 7</code> for query 0. A block of size at most 7 can be placed before <code>x = 7</code>.</li>\n\t<li>Place an obstacle at <code>x = 2</code> for query 2. Now, a block of size at most 5 can be placed before <code>x = 7</code>, and a block of size at most 2 before <code>x = 2</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 15 * 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= queries[i].length &lt;= 3</code></li>\n\t<li><code>1 &lt;= queries[i][0] &lt;= 2</code></li>\n\t<li><code>1 &lt;= x, sz &lt;= min(5 * 10<sup>4</sup>, 3 * queries.length)</code></li>\n\t<li>The input is generated such that for queries of type 1, no obstacle exists at distance <code>x</code> when the query is asked.</li>\n\t<li>The input is generated such that there is at least one query of type 2.</li>\n</ul>\n",
        "exampleTestcases": "[[1,2],[2,3,3],[2,3,1],[2,2,2]]\n[[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]",
        "formTitle": "[3161]Block Placement Queries",
        "frequency": 0.0,
        "frontendQuestionId": "3161",
        "hints": [
            "Let <code>d[x]</code> be the distance of the next obstacle after <code>x</code>.",
            "For each query of type 2, we just need to check if <code>max(d[0], d[1], d[2], 鈥[x - sz]) > sz</code>.",
            "Use segment tree to maintain <code>d[x]</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "getResults",
            "params": [
                {
                    "name": "queries",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3435",
        "similarQuestions": [
            "[{\"title\": \"Building Boxes\", \"titleSlug\": \"building-boxes\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u653e\\u7f6e\\u76d2\\u5b50\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[[1,2],[2,3,3],[2,3,1],[2,2,2]]",
        "title": "Block Placement Queries",
        "titleSlug": "block-placement-queries",
        "infer_hints": [
            "Can you store the locations of all obstacles in a sorted array and then use binary search to check if you can place a block at a certain location?",
            "Can we maintain a sorted list of the obstacles?",
            "For each query of type 2, check if you can place a block of size sz before x in O(1) time.",
            "Do you need to use a BIT?",
            "Build an array of size `n`, where `n` is the maximum distance.",
            "For each query of type 2, you want to check whether you can place a block of size at most `sz` anywhere in the range `[0, x]` on the line, such that the block <strong>entirely</strong> lies in the range `[0, x]`.",
            "We need to be able to quickly check if there is an obstacle at a distance x.",
            "How many blocks of size 1, 2, 3,..., sz can you place at distance x from the origin?",
            "Use a sorted list of obstacles and binary search to check if a block can be placed.",
            "For each query of type 2, we can use binary search to check whether a block of size sz can be placed anywhere in the range [0, x] on the line.",
            "For each query, if the size of the block is smaller than or equal to the query, then we can place the block.",
            "You can use a set to store the obstacles.",
            "Create a list of the gaps in the array.",
            "Try to simulate the process and keep track of the largest free block size you have.",
            "Create a set of all possible positions of obstacles.",
            "For each query, if it's a type 1, just add the distance of the obstacle to the set. If it's a type 2, check if the block size can be placed at the given distance.",
            "Keep track of the distances between the obstacles.  Then, for each query of type 2, check if the query range has a gap of size sz.",
            "The idea is to store the distance from the origin to each query of type 2 in an array and then use binary search to find the answer.",
            "Can you do a binary search to check whether a block of size sz can be placed anywhere in the range [0, x]?",
            "We can use a binary search tree to keep track of all the obstacles."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumDifference(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumDifference(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumDifference = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumDifference(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumDifference($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumDifference(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumDifference(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumDifference(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumDifference(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_difference(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumDifference(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_difference(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-difference nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_difference(Nums :: [integer()], K :: integer()) -> integer().\nminimum_difference(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_difference(nums :: [integer], k :: integer) :: integer\n  def minimum_difference(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> and an integer <code>k</code>. You need to find a <span data-keyword=\"subarray-nonempty\">subarray</span> of <code>nums</code> such that the <strong>absolute difference</strong> between <code>k</code> and the bitwise <code>OR</code> of the subarray elements is as<strong> small</strong> as possible. In other words, select a subarray <code>nums[l..r]</code> such that <code>|k - (nums[l] OR nums[l + 1] ... OR nums[r])|</code> is minimum.</p>\n\n<p>Return the <strong>minimum</strong> possible value of the absolute difference.</p>\n\n<p>A <strong>subarray</strong> is a contiguous <b>non-empty</b> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,4,5], k = 3</span></p>\n\n<p><strong>Output:</strong> 0</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>nums[0..1]</code> has <code>OR</code> value 3, which gives the minimum absolute difference <code>|3 - 3| = 0</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,3,1,3], k = 2</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>nums[1..1]</code> has <code>OR</code> value 3, which gives the minimum absolute difference <code>|3 - 2| = 1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1], k = 10</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">9</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is a single subarray with <code>OR</code> value 1, which gives the minimum absolute difference <code>|10 - 1| = 9</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,4,5]\n3\n[1,3,1,3]\n2\n[1]\n10",
        "formTitle": "[3171]Find Subarray With Bitwise OR Closest to K",
        "frequency": 0.0,
        "frontendQuestionId": "3171",
        "hints": [
            "Let <code>dp[i]</code> be the set of all the bitwise <code>OR</code> of all the subarrays ending at index <code>i</code>.",
            "We start from <code>nums[i]</code>, taking the bitwise <code>OR</code> result by including elements one by one from <code>i</code> towards left. Notice that only unset bits can become set on adding an element, and set bits never become unset again.",
            "Hence <code>dp[i]</code> can contain at most 30 elements."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumDifference",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3436",
        "similarQuestions": [
            "[{\"title\": \"Minimum Sum of Values by Dividing Array\", \"titleSlug\": \"minimum-sum-of-values-by-dividing-array\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5212\\u5206\\u6570\\u7ec4\\u5f97\\u5230\\u6700\\u5c0f\\u7684\\u503c\\u4e4b\\u548c\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,4,5]\n3",
        "title": "Find Subarray With Bitwise OR Closest to K",
        "titleSlug": "find-subarray-with-bitwise-or-closest-to-k",
        "infer_hints": [
            "Think about how to compute the OR value of the subarray.",
            "The bitwise OR operation on two numbers results in another number. Think about how it works.",
            "How many subarrays are there in the array?",
            "We can use a sliding window approach.",
            "Try to split the array into two parts, so that the first part consists of all elements less than the bitwise OR of all the elements in the second part.",
            "Can you use binary search to solve this?",
            "If you try to solve this problem using brute force, you will find it to be very slow.  What can you do to optimize it?",
            "For every possible bitwise OR of the subarray, we need to check if it is closer to k than the current best result.",
            "Try to find the smallest possible difference for every prefix OR.",
            "Use prefix OR and binary search.",
            "How can we calculate the OR value of a subarray in O(1) time?",
            "You can try to fix the left end of the subarray and then find the minimum possible right end.",
            "We can use a sliding window and binary search to solve this problem.",
            "For each bit, we can maintain the minimum possible absolute difference of the bitwise OR value of the subarray for all possible lengths.",
            "Try all subarrays.",
            "We can keep a sliding window where all numbers in this window have the same bitwise OR.",
            "Try all possible subarrays and check the difference with K.",
            "Use a sliding window approach with a prefix OR array.",
            "Consider each prefix and for each prefix, try to find the smallest subarray that ends at that prefix that has bitwise OR closest to K.",
            "Use a sliding window to try all possible subarrays."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumTotalDamage(vector<int>& power) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumTotalDamage(int[] power) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumTotalDamage(self, power):\n        \"\"\"\n        :type power: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumTotalDamage(self, power: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumTotalDamage(int* power, int powerSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumTotalDamage(int[] power) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} power\n * @return {number}\n */\nvar maximumTotalDamage = function(power) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumTotalDamage(power: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $power\n     * @return Integer\n     */\n    function maximumTotalDamage($power) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumTotalDamage(_ power: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumTotalDamage(power: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumTotalDamage(List<int> power) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumTotalDamage(power []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} power\n# @return {Integer}\ndef maximum_total_damage(power)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumTotalDamage(power: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_total_damage(power: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-total-damage power)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_total_damage(Power :: [integer()]) -> integer().\nmaximum_total_damage(Power) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_total_damage(power :: [integer]) :: integer\n  def maximum_total_damage(power) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>A magician has various spells.</p>\n\n<p>You are given an array <code>power</code>, where each element represents the damage of a spell. Multiple spells can have the same damage value.</p>\n\n<p>It is a known fact that if a magician decides to cast a spell with a damage of <code>power[i]</code>, they <strong>cannot</strong> cast any spell with a damage of <code>power[i] - 2</code>, <code>power[i] - 1</code>, <code>power[i] + 1</code>, or <code>power[i] + 2</code>.</p>\n\n<p>Each spell can be cast <strong>only once</strong>.</p>\n\n<p>Return the <strong>maximum</strong> possible <em>total damage</em> that a magician can cast.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">power = [1,1,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum possible damage of 6 is produced by casting spells 0, 1, 3 with damage 1, 1, 4.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">power = [7,1,6,6]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">13</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum possible damage of 13 is produced by casting spells 1, 2, 3 with damage 1, 6, 6.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= power.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= power[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,1,3,4]\n[7,1,6,6]",
        "formTitle": "[3186]Maximum Total Damage With Spell Casting",
        "frequency": 0.0,
        "frontendQuestionId": "3186",
        "hints": [
            "If we ever decide to use some spell with power <code>x</code>, then we will use all spells with power <code>x</code>.",
            "Think of dynamic programming.",
            "<code>dp[i][j]</code> represents the maximum damage considering up to the <code>i</code>-th unique spell and <code>j</code> represents the number of spells skipped (up to 3 as per constraints)."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumTotalDamage",
            "params": [
                {
                    "name": "power",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3437",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,1,3,4]",
        "title": "Maximum Total Damage With Spell Casting",
        "titleSlug": "maximum-total-damage-with-spell-casting",
        "infer_hints": [
            "The maximum total damage can be calculated by taking a greedy approach.",
            "Can we perform a depth-first search on this graph?",
            "What if we tried to cast the spells in increasing order of their power?",
            "Sort the power array and try to maximize the total damage.",
            "If you sort the powers, you can use a greedy approach.",
            "Use dynamic programming.",
            "Use dynamic programming.",
            "How to calculate the total damage if we choose the i-th spell?",
            "Can we use dynamic programming to solve this problem?",
            "Use dynamic programming to keep track of the maximum damage we can get if we use the first i spells and j remaining health.",
            "Sort the array in descending order.",
            "You can use a priority queue to keep track of the best spell to use next.",
            "Use a prefix sum array.",
            "Try all possible combinations of spells.",
            "Use dynamic programming.",
            "Think of each spell as a node in a directed graph.",
            "Sort the power array.",
            "Do a depth-first search for each possible first spell to see if it works.",
            "Sort the array and use a heap to keep track of the current maximum damage and its index.",
            "The problem is to maximize the sum of damages."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countOfPeaks(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countOfPeaks(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public IList<int> CountOfPeaks(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countOfPeaks = function(nums, queries) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countOfPeaks(nums: number[], queries: number[][]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function countOfPeaks($nums, $queries) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countOfPeaks(_ nums: [Int], _ queries: [[Int]]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countOfPeaks(nums: IntArray, queries: Array<IntArray>): List<Int> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> countOfPeaks(List<int> nums, List<List<int>> queries) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countOfPeaks(nums []int, queries [][]int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef count_of_peaks(nums, queries)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countOfPeaks(nums: Array[Int], queries: Array[Array[Int]]): List[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_of_peaks(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-of-peaks nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_of_peaks(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\ncount_of_peaks(Nums, Queries) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_of_peaks(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def count_of_peaks(nums, queries) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>A <strong>peak</strong> in an array <code>arr</code> is an element that is <strong>greater</strong> than its previous and next element in <code>arr</code>.</p>\n\n<p>You are given an integer array <code>nums</code> and a 2D integer array <code>queries</code>.</p>\n\n<p>You have to process queries of two types:</p>\n\n<ul>\n\t<li><code>queries[i] = [1, l<sub>i</sub>, r<sub>i</sub>]</code>, determine the count of <strong>peak</strong> elements in the <span data-keyword=\"subarray\">subarray</span> <code>nums[l<sub>i</sub>..r<sub>i</sub>]</code>.<!-- notionvc: 73b20b7c-e1ab-4dac-86d0-13761094a9ae --></li>\n\t<li><code>queries[i] = [2, index<sub>i</sub>, val<sub>i</sub>]</code>, change <code>nums[index<sub>i</sub>]</code> to <code><font face=\"monospace\">val<sub>i</sub></font></code>.</li>\n</ul>\n\n<p>Return an array <code>answer</code> containing the results of the queries of the first type in order.<!-- notionvc: a9ccef22-4061-4b5a-b4cc-a2b2a0e12f30 --></p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>The <strong>first</strong> and the <strong>last</strong> element of an array or a subarray<!-- notionvc: fcffef72-deb5-47cb-8719-3a3790102f73 --> <strong>cannot</strong> be a peak.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,1,4,2,5], queries = [[2,3,4],[1,0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>First query: We change <code>nums[3]</code> to 4 and <code>nums</code> becomes <code>[3,1,4,4,5]</code>.</p>\n\n<p>Second query: The number of peaks in the <code>[3,1,4,4,5]</code> is 0.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,1,4,2,1,5], queries = [[2,2,4],[1,0,2],[1,0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>First query: <code>nums[2]</code> should become 4, but it is already set to 4.</p>\n\n<p>Second query: The number of peaks in the <code>[4,1,4]</code> is 0.</p>\n\n<p>Third query: The second 4 is a peak in the <code>[4,1,4,2,1]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i][0] == 1</code> or <code>queries[i][0] == 2</code></li>\n\t<li>For all <code>i</code> that:\n\t<ul>\n\t\t<li><code>queries[i][0] == 1</code>: <code>0 &lt;= queries[i][1] &lt;= queries[i][2] &lt;= nums.length - 1</code></li>\n\t\t<li><code>queries[i][0] == 2</code>: <code>0 &lt;= queries[i][1] &lt;= nums.length - 1</code>, <code>1 &lt;= queries[i][2] &lt;= 10<sup>5</sup></code></li>\n\t</ul>\n\t</li>\n</ul>\n",
        "exampleTestcases": "[3,1,4,2,5]\n[[2,3,4],[1,0,4]]\n[4,1,4,2,1,5]\n[[2,2,4],[1,0,2],[1,0,4]]",
        "formTitle": "[3187]Peaks in Array",
        "frequency": 0.0,
        "frontendQuestionId": "3187",
        "hints": [
            "Let <code>p[i]</code> be whether <code>nums[i]</code> is a peak in the original array. Namely <code>p[i] = nums[i] > nums[i - 1] && nums[i] > nums[i + 1]</code>.",
            "Updating <code>nums[i]</code>, only affects <code>p[i]</code>, <code>p[i - 1]</code> and <code>p[i + 1]</code>. We can recalculate the 3 values in constant time.",
            "The answer for <code>[l<sub>i</sub>, r<sub>i</sub>]</code> is <code>p[l<sub>i</sub> + 1] + p[l<sub>i</sub> + 2] + 鈥� + p[r<sub>i</sub> - 1]</code> (note that <code>l<sub>i</sub></code> and <code>r<sub>i</sub></code> are not included).",
            "Use some data structures (i.e. segment tree or binary indexed tree) to maintain the subarray sum efficiently."
        ],
        "level": 3,
        "metaData": {
            "name": "countOfPeaks",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "queries",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3438",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,1,4,2,5]\n[[2,3,4],[1,0,4]]",
        "title": "Peaks in Array",
        "titleSlug": "peaks-in-array",
        "infer_hints": [
            "Create a list of all the peaks in the array.",
            "Use a segment tree.",
            "We can use a prefix sum array to solve this problem.  Then, for each query, we can use binary search to find the peak in the subarray.",
            "For each query, check if it's a modification or a count query.",
            "Sort all elements of nums by their values.",
            "Use a prefix sum array.  How many peaks exist between the range [L, R]?",
            "We can solve the problem in O(n) time by using prefix and suffix sum.",
            "Build a binary indexed tree (BIT) for the prefix sum.",
            "How can we calculate the count of peaks in an array in O(n) time complexity?",
            "Build a prefix sum array for the given array.  Then, for each query, you can answer it in O(1) time.",
            "Try to do it in O(N + Q) time.",
            "Use prefix sum and suffix sum.",
            "The answer of the first query is 0.",
            "Can you solve the problem in O(n) time?",
            "The array nums is monotonic.  What can you say about a peak element?",
            "Build a prefix and a suffix array that will help you to count the peaks in the subarray.",
            "Can you use binary search to solve this problem?",
            "We need a way to quickly answer queries of the form \"how many peaks are there in a subarray\".",
            "We need to check every element whether it is a peak or not.",
            "For each element, find out whether it is a peak."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumDiameterAfterMerge(self, edges1, edges2):\n        \"\"\"\n        :type edges1: List[List[int]]\n        :type edges2: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumDiameterAfterMerge(int** edges1, int edges1Size, int* edges1ColSize, int** edges2, int edges2Size, int* edges2ColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} edges1\n * @param {number[][]} edges2\n * @return {number}\n */\nvar minimumDiameterAfterMerge = function(edges1, edges2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumDiameterAfterMerge(edges1: number[][], edges2: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges1\n     * @param Integer[][] $edges2\n     * @return Integer\n     */\n    function minimumDiameterAfterMerge($edges1, $edges2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumDiameterAfterMerge(_ edges1: [[Int]], _ edges2: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumDiameterAfterMerge(edges1: Array<IntArray>, edges2: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumDiameterAfterMerge(List<List<int>> edges1, List<List<int>> edges2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumDiameterAfterMerge(edges1 [][]int, edges2 [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} edges1\n# @param {Integer[][]} edges2\n# @return {Integer}\ndef minimum_diameter_after_merge(edges1, edges2)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumDiameterAfterMerge(edges1: Array[Array[Int]], edges2: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_diameter_after_merge(edges1: Vec<Vec<i32>>, edges2: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-diameter-after-merge edges1 edges2)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_diameter_after_merge(Edges1 :: [[integer()]], Edges2 :: [[integer()]]) -> integer().\nminimum_diameter_after_merge(Edges1, Edges2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_diameter_after_merge(edges1 :: [[integer]], edges2 :: [[integer]]) :: integer\n  def minimum_diameter_after_merge(edges1, edges2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There exist two <strong>undirected </strong>trees with <code>n</code> and <code>m</code> nodes, numbered from <code>0</code> to <code>n - 1</code> and from <code>0</code> to <code>m - 1</code>, respectively. You are given two 2D integer arrays <code>edges1</code> and <code>edges2</code> of lengths <code>n - 1</code> and <code>m - 1</code>, respectively, where <code>edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the first tree and <code>edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the second tree.</p>\n\n<p>You must connect one node from the first tree with another node from the second tree with an edge.</p>\n\n<p>Return the <strong>minimum </strong>possible <strong>diameter </strong>of the resulting tree.</p>\n\n<p>The <strong>diameter</strong> of a tree is the length of the <em>longest</em> path between any two nodes in the tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example11-transformed.png\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a tree of diameter 3 by connecting node 0 from the first tree with any node from the second tree.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/22/example211.png\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a tree of diameter 5 by connecting node 0 from the first tree with node 0 from the second tree.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges1.length == n - 1</code></li>\n\t<li><code>edges2.length == m - 1</code></li>\n\t<li><code>edges1[i].length == edges2[i].length == 2</code></li>\n\t<li><code>edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; m</code></li>\n\t<li>The input is generated such that <code>edges1</code> and <code>edges2</code> represent valid trees.</li>\n</ul>\n",
        "exampleTestcases": "[[0,1],[0,2],[0,3]]\n[[0,1]]\n[[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]\n[[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]",
        "formTitle": "[3203]Find Minimum Diameter After Merging Two Trees",
        "frequency": 0.0,
        "frontendQuestionId": "3203",
        "hints": [
            "Suppose that we connected node <code>a</code> in tree1 with node <code>b</code> in tree2. The diameter length of the resulting tree will be the largest of the following 3 values: \r\n<ol>\r\n<li>The diameter of tree 1.</li>\r\n<li>The diameter of tree 2.</li>\r\n<li>The length of the longest path that starts at node <code>a</code> and that is completely within Tree 1 + The length of the longest path that starts at node <code>b</code> and that is completely within Tree 2 + 1.</li>\r\n</ol> \r\nThe added one in the third value is due to the additional edge that we have added between trees 1 and 2.",
            "Values 1 and 2 are constant regardless of our choice of <code>a</code> and <code>b</code>. Therefore, we need to pick <code>a</code> and <code>b</code> in such a way that minimizes value 3.",
            "If we pick <code>a</code> and <code>b</code> optimally, they will be in the diameters of Tree 1 and Tree 2, respectively. Exactly which nodes of the diameter should we pick?",
            "<code>a</code> is the center of the diameter of tree 1, and <code>b</code> is the center of the diameter of tree 2."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumDiameterAfterMerge",
            "params": [
                {
                    "name": "edges1",
                    "type": "integer[][]"
                },
                {
                    "name": "edges2",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3439",
        "similarQuestions": [
            "[{\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c0f\\u9ad8\\u5ea6\\u6811\", \"isPaidOnly\": false}, {\"title\": \"Tree Diameter\", \"titleSlug\": \"tree-diameter\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6811\\u7684\\u76f4\\u5f84\", \"isPaidOnly\": true}]"
        ],
        "statusSign": " ",
        "testCase": "[[0,1],[0,2],[0,3]]\n[[0,1]]",
        "title": "Find Minimum Diameter After Merging Two Trees",
        "titleSlug": "find-minimum-diameter-after-merging-two-trees",
        "infer_hints": [
            "You can merge the two trees in a way that each node in the merged tree has exactly two children.",
            "Find the longest path in both trees.",
            "Use DFS to find the path with the longest length.",
            "How can you compute the distance between two nodes?",
            "You can merge two trees into one, but the diameter of the new tree will be the sum of the diameters of the original two trees.",
            "Find the longest path in the first tree and the longest path in the second tree.",
            "How can we calculate the diameter of a tree?",
            "Find the longest path in both trees.",
            "You may find that the two trees are similar.",
            "Use a depth-first search to find the longest path in both trees.",
            "If we can find two paths from node 0 to the farthest node x in the first tree and another two paths from node 0 to the farthest node y in the second tree, we can merge the paths to get a diameter.",
            "Find the longest path in each tree, and then find the longest path between two trees.",
            "Find the longest path in each tree separately.",
            "How can you merge the two trees?",
            "If you know the depth of each node, you can merge the two trees in O(n + m) time.",
            "Find the longest path in both trees separately.",
            "We can merge the two trees into one and then find the longest path in the merged tree.",
            "Think of a way to connect the two trees in such a way that you minimize the diameter.",
            "How to calculate the distance between two nodes?",
            "You can use a depth-first search to calculate the depth of the tree."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxTotalReward(vector<int>& rewardValues) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxTotalReward(int[] rewardValues) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxTotalReward(self, rewardValues):\n        \"\"\"\n        :type rewardValues: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxTotalReward(self, rewardValues: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxTotalReward(int* rewardValues, int rewardValuesSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxTotalReward(int[] rewardValues) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} rewardValues\n * @return {number}\n */\nvar maxTotalReward = function(rewardValues) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxTotalReward(rewardValues: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $rewardValues\n     * @return Integer\n     */\n    function maxTotalReward($rewardValues) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxTotalReward(_ rewardValues: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxTotalReward(rewardValues: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxTotalReward(List<int> rewardValues) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxTotalReward(rewardValues []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} reward_values\n# @return {Integer}\ndef max_total_reward(reward_values)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxTotalReward(rewardValues: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_total_reward(reward_values: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-total-reward rewardValues)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_total_reward(RewardValues :: [integer()]) -> integer().\nmax_total_reward(RewardValues) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_total_reward(reward_values :: [integer]) :: integer\n  def max_total_reward(reward_values) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>rewardValues</code> of length <code>n</code>, representing the values of rewards.</p>\n\n<p>Initially, your total reward <code>x</code> is 0, and all indices are <strong>unmarked</strong>. You are allowed to perform the following operation <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose an <strong>unmarked</strong> index <code>i</code> from the range <code>[0, n - 1]</code>.</li>\n\t<li>If <code>rewardValues[i]</code> is <strong>greater</strong> than your current total reward <code>x</code>, then add <code>rewardValues[i]</code> to <code>x</code> (i.e., <code>x = x + rewardValues[i]</code>), and <strong>mark</strong> the index <code>i</code>.</li>\n</ul>\n\n<p>Return an integer denoting the <strong>maximum </strong><em>total reward</em> you can collect by performing the operations optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">rewardValues = [1,1,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">rewardValues = [1,6,4,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">11</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rewardValues.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= rewardValues[i] &lt;= 2000</code></li>\n</ul>\n",
        "exampleTestcases": "[1,1,3,3]\n[1,6,4,3,2]",
        "formTitle": "[3180]Maximum Total Reward Using Operations I",
        "frequency": 0.0,
        "frontendQuestionId": "3180",
        "hints": [
            "Sort the rewards array first.",
            "If we decide to apply some rewards, it's always optimal to apply them in order.",
            "Let <code>dp[i][j]</code> (true/false) be the state after the first <code>i</code> rewards, indicating whether we can get exactly <code>j</code> points.",
            "The transition is given by: <code>dp[i][j] = dp[i - 1][j 鈭� rewardValues[i]]</code> if <code>j 鈭� rewardValues[i] < rewardValues[i]</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maxTotalReward",
            "params": [
                {
                    "name": "rewardValues",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3442",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,1,3,3]",
        "title": "Maximum Total Reward Using Operations I",
        "titleSlug": "maximum-total-reward-using-operations-i",
        "infer_hints": [
            "Sort the rewards in decreasing order.",
            "Try to use a dynamic programming approach to solve this problem.",
            "Can we use dynamic programming to solve this problem?",
            "Use dynamic programming to solve this problem.",
            "How can you find the maximum reward you can get by only considering the first i elements?",
            "Use a simple approach of iterating through the array and marking the largest elements first.",
            "If we sort the rewards by their value, we can always choose the one with the highest value.",
            "Try to solve this problem in a dynamic programming manner.",
            "What is the maximum reward we can get if we choose to mark the ith index?",
            "If we know the optimal way to take the first i rewards, how can we find the optimal way to take the first i+1 rewards?",
            "Try using dynamic programming.",
            "We can use a dynamic programming approach.  Try all possible choices of indices to mark and then recursively compute the maximum total reward for the remaining indices.",
            "The main problem is to sort the array in descending order of rewardValues.",
            "We can use dynamic programming.  The dp state dp[i][j] is the maximum total reward we can get using the first i reward values, and using j operations.",
            "Try to find the optimal way to choose the indices to maximize the total reward.",
            "Sort the array in decreasing order.",
            "Can you solve it with dynamic programming?",
            "How many operations can you perform with the first 3 rewards?",
            "If you sort the array in increasing order, then you only need to go through the array from left to right.",
            "Sort the rewards by their values in descending order."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxTotalReward(vector<int>& rewardValues) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxTotalReward(int[] rewardValues) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxTotalReward(self, rewardValues):\n        \"\"\"\n        :type rewardValues: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxTotalReward(self, rewardValues: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxTotalReward(int* rewardValues, int rewardValuesSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxTotalReward(int[] rewardValues) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} rewardValues\n * @return {number}\n */\nvar maxTotalReward = function(rewardValues) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxTotalReward(rewardValues: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $rewardValues\n     * @return Integer\n     */\n    function maxTotalReward($rewardValues) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxTotalReward(_ rewardValues: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxTotalReward(rewardValues: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxTotalReward(List<int> rewardValues) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxTotalReward(rewardValues []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} reward_values\n# @return {Integer}\ndef max_total_reward(reward_values)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxTotalReward(rewardValues: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_total_reward(reward_values: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-total-reward rewardValues)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_total_reward(RewardValues :: [integer()]) -> integer().\nmax_total_reward(RewardValues) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_total_reward(reward_values :: [integer]) :: integer\n  def max_total_reward(reward_values) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>rewardValues</code> of length <code>n</code>, representing the values of rewards.</p>\n\n<p>Initially, your total reward <code>x</code> is 0, and all indices are <strong>unmarked</strong>. You are allowed to perform the following operation <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose an <strong>unmarked</strong> index <code>i</code> from the range <code>[0, n - 1]</code>.</li>\n\t<li>If <code>rewardValues[i]</code> is <strong>greater</strong> than your current total reward <code>x</code>, then add <code>rewardValues[i]</code> to <code>x</code> (i.e., <code>x = x + rewardValues[i]</code>), and <strong>mark</strong> the index <code>i</code>.</li>\n</ul>\n\n<p>Return an integer denoting the <strong>maximum </strong><em>total reward</em> you can collect by performing the operations optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">rewardValues = [1,1,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">rewardValues = [1,6,4,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">11</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rewardValues.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= rewardValues[i] &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,1,3,3]\n[1,6,4,3,2]",
        "formTitle": "[3181]Maximum Total Reward Using Operations II",
        "frequency": 0.0,
        "frontendQuestionId": "3181",
        "hints": [
            "Sort the rewards array first.",
            "If we decide to apply some rewards, it's always optimal to apply them in order.",
            "The transition is given by: <code>dp[i][j] = dp[i - 1][j 鈭� rewardValues[i]]</code> if <code>j 鈭� rewardValues[i] < rewardValues[i]</code>.",
            "Note that the dp array is a boolean array. We just need 1 bit per element, so we can use a bitset or something similar. We just need a \"stream\" of bits and apply bitwise operations to optimize the computations by a constant factor."
        ],
        "level": 3,
        "metaData": {
            "name": "maxTotalReward",
            "params": [
                {
                    "name": "rewardValues",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3443",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,1,3,3]",
        "title": "Maximum Total Reward Using Operations II",
        "titleSlug": "maximum-total-reward-using-operations-ii",
        "infer_hints": [
            "The maximum total reward will always be the sum of the rewards of the elements that are in the top k largest elements.",
            "How many operations are required to get the maximum reward?",
            "You need to keep track of the total sum of rewards that you have, and the prefix sum of rewards that you have so far.",
            "Try to think about what you are trying to achieve.",
            "How to choose the optimal indices?",
            "If we use a prefix sum array, we can easily find the sum of all reward values from index 0 to i in O(1) time.",
            "Think about how you can split the array into segments and maximize the reward.",
            "Sort the rewardValues array in non-decreasing order.",
            "Consider the optimal way of selecting the indices to mark.",
            "If we sort the array in decreasing order, then we can always choose the largest value and then choose the next largest value and so on.",
            "What if you only have to find the maximum reward instead of the maximum total reward?",
            "Can you do it in O(n log n) time?",
            "We can sort the array and iterate from left to right, trying to mark each index.",
            "Let's try to sort the array in decreasing order.",
            "Think about sorting the rewards in decreasing order.",
            "We can use binary search to find the maximum total reward.",
            "Try to divide the problem into smaller subproblems and solve them independently.",
            "For each prefix of the array, calculate the maximum total reward if we include the prefix and the current index in the optimal way.",
            "We can try to solve this problem using a dynamic programming approach.",
            "Think of this problem as a 1D DP."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long numberOfPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long numberOfPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long NumberOfPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number}\n */\nvar numberOfPairs = function(nums1, nums2, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfPairs(nums1: number[], nums2: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfPairs($nums1, $nums2, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfPairs(nums1: IntArray, nums2: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfPairs(List<int> nums1, List<int> nums2, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfPairs(nums1 []int, nums2 []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer}\ndef number_of_pairs(nums1, nums2, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfPairs(nums1: Array[Int], nums2: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_pairs(nums1: Vec<i32>, nums2: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-pairs nums1 nums2 k)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_pairs(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -> integer().\nnumber_of_pairs(Nums1, Nums2, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_pairs(nums1 :: [integer], nums2 :: [integer], k :: integer) :: integer\n  def number_of_pairs(nums1, nums2, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given 2 integer arrays <code>nums1</code> and <code>nums2</code> of lengths <code>n</code> and <code>m</code> respectively. You are also given a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>A pair <code>(i, j)</code> is called <strong>good</strong> if <code>nums1[i]</code> is divisible by <code>nums2[j] * k</code> (<code>0 &lt;= i &lt;= n - 1</code>, <code>0 &lt;= j &lt;= m - 1</code>).</p>\n\n<p>Return the total number of <strong>good</strong> pairs.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums1 = [1,3,4], nums2 = [1,3,4], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\nThe 5 good pairs are <code>(0, 0)</code>, <code>(1, 0)</code>, <code>(1, 1)</code>, <code>(2, 0)</code>, and <code>(2, 2)</code>.</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums1 = [1,2,4,12], nums2 = [2,4], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The 2 good pairs are <code>(3, 0)</code> and <code>(3, 1)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,3,4]\n[1,3,4]\n1\n[1,2,4,12]\n[2,4]\n3",
        "formTitle": "[3164]Find the Number of Good Pairs II",
        "frequency": 0.0,
        "frontendQuestionId": "3164",
        "hints": [
            "Let <code>f[v]</code> be the number of occurrences of <code>v/k</code> in nums2.",
            "For each value <code>v</code> in nums1, enumerating all its factors <code>d</code> (in <code>sqrt(v)</code> time) and sum up all the <code>f[d]</code> to get the final answer.",
            "It is also possible to improve the complexity from <code>v * sqrt(v)</code> to <code>v * log(v)</code> - How?"
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfPairs",
            "params": [
                {
                    "name": "nums1",
                    "type": "integer[]"
                },
                {
                    "name": "nums2",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3444",
        "similarQuestions": [
            "[{\"title\": \"Count Array Pairs Divisible by K\", \"titleSlug\": \"count-array-pairs-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u53ef\\u4ee5\\u88ab K \\u6574\\u9664\\u7684\\u4e0b\\u6807\\u5bf9\\u6570\\u76ee\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,3,4]\n[1,3,4]\n1",
        "title": "Find the Number of Good Pairs II",
        "titleSlug": "find-the-number-of-good-pairs-ii",
        "infer_hints": [
            "Create a frequency count of each number in nums2.",
            "What is the maximum number of pairs you can have for each number?",
            "Try to solve the problem in O(nlogn) time complexity.",
            "The problem is asking for all possible pairs.  What if we store the number of elements in nums2 that are divisible by each number in nums1?",
            "Can we just use a frequency array to count the number of elements in nums2 that are divisible by nums1[i]?",
            "Create a map to store the frequency of the elements in nums2.",
            "Count the number of pairs (i, j) for each number in nums2.",
            "We need to find the number of pairs (i, j) where nums1[i] is divisible by nums2[j] * k.",
            "If we want to check if a number is divisible by k, what property does it have?",
            "You can do it in O(n log n) by sorting the array.",
            "Do you need to check every pair?  Try using a hash map.",
            "Try to find the number of good pairs in O(n + m) time.",
            "Try to solve it using the approach mentioned in the hint.",
            "Do you need to sort nums2?",
            "How to check if nums1[i] is divisible by nums2[j] * k?",
            "For each pair (i, j), check if the pair is good.",
            "For each pair (i, j), check if nums1[i] is divisible by nums2[j] * k.",
            "You can use the map data structure to solve this problem.",
            "The number of good pairs is related to the number of elements in each array.",
            "Use a map to count the number of elements in nums2 that are divisible by k."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string clearStars(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String clearStars(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def clearStars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def clearStars(self, s: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* clearStars(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string ClearStars(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar clearStars = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function clearStars(s: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function clearStars($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func clearStars(_ s: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun clearStars(s: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String clearStars(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func clearStars(s string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {String}\ndef clear_stars(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def clearStars(s: String): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn clear_stars(s: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (clear-stars s)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec clear_stars(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nclear_stars(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec clear_stars(s :: String.t) :: String.t\n  def clear_stars(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>. It may contain any number of <code>&#39;*&#39;</code> characters. Your task is to remove all <code>&#39;*&#39;</code> characters.</p>\n\n<p>While there is a <code>&#39;*&#39;</code>, do the following operation:</p>\n\n<ul>\n\t<li>Delete the leftmost <code>&#39;*&#39;</code> and the <strong>smallest</strong> non-<code>&#39;*&#39;</code> character to its <em>left</em>. If there are several smallest characters, you can delete any of them.</li>\n</ul>\n\n<p>Return the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span> resulting string after removing all <code>&#39;*&#39;</code> characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;aaba*&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;aab&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We should delete one of the <code>&#39;a&#39;</code> characters with <code>&#39;*&#39;</code>. If we choose <code>s[3]</code>, <code>s</code> becomes the lexicographically smallest.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;abc&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no <code>&#39;*&#39;</code> in the string.<!-- notionvc: ff07e34f-b1d6-41fb-9f83-5d0ba3c1ecde --></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters and <code>&#39;*&#39;</code>.</li>\n\t<li>The input is generated such that it is possible to delete all <code>&#39;*&#39;</code> characters.</li>\n</ul>\n",
        "exampleTestcases": "\"aaba*\"\n\"abc\"",
        "formTitle": "[3170]Lexicographically Minimum String After Removing Stars",
        "frequency": 0.0,
        "frontendQuestionId": "3170",
        "hints": [],
        "level": 2,
        "metaData": {
            "name": "clearStars",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3445",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"aaba*\"",
        "title": "Lexicographically Minimum String After Removing Stars",
        "titleSlug": "lexicographically-minimum-string-after-removing-stars",
        "infer_hints": [
            "Can we remove all the stars and then add the smallest lexicographical character at the end of the string?",
            "Use a stack.",
            "Use a stack to remember the characters we have encountered so far.",
            "Use a stack to store the characters.",
            "Try using a stack.",
            "What if you were to remove all stars first?",
            "What if we could remove all the '*'s first and then remove the smallest characters?",
            "Use a stack to store characters.",
            "Use a stack to remove the minimum characters lexicographically.",
            "Think of the characters as stacks.",
            "Try to use a stack.",
            "For each character, what is the lexicographically smallest string we can get?",
            "Use a stack.",
            "Think of this problem as a stack.",
            "What if we start removing the stars from the left?",
            "Use a stack.",
            "We can use a stack to keep track of the smallest character that we have encountered so far.",
            "What if we don't have any non-'*' characters?",
            "Keep track of the lexicographically smallest string you can form using the characters so far.",
            "If you encounter a '*', remove the smallest character to its left and the next smallest non-'*' character to its right."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number}\n */\nvar numberOfPairs = function(nums1, nums2, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfPairs(nums1: number[], nums2: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfPairs($nums1, $nums2, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfPairs(nums1: IntArray, nums2: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfPairs(List<int> nums1, List<int> nums2, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfPairs(nums1 []int, nums2 []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer}\ndef number_of_pairs(nums1, nums2, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfPairs(nums1: Array[Int], nums2: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_pairs(nums1: Vec<i32>, nums2: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-pairs nums1 nums2 k)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_pairs(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -> integer().\nnumber_of_pairs(Nums1, Nums2, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_pairs(nums1 :: [integer], nums2 :: [integer], k :: integer) :: integer\n  def number_of_pairs(nums1, nums2, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given 2 integer arrays <code>nums1</code> and <code>nums2</code> of lengths <code>n</code> and <code>m</code> respectively. You are also given a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>A pair <code>(i, j)</code> is called <strong>good</strong> if <code>nums1[i]</code> is divisible by <code>nums2[j] * k</code> (<code>0 &lt;= i &lt;= n - 1</code>, <code>0 &lt;= j &lt;= m - 1</code>).</p>\n\n<p>Return the total number of <strong>good</strong> pairs.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums1 = [1,3,4], nums2 = [1,3,4], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\nThe 5 good pairs are <code>(0, 0)</code>, <code>(1, 0)</code>, <code>(1, 1)</code>, <code>(2, 0)</code>, and <code>(2, 2)</code>.</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums1 = [1,2,4,12], nums2 = [2,4], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The 2 good pairs are <code>(3, 0)</code> and <code>(3, 1)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 50</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n",
        "exampleTestcases": "[1,3,4]\n[1,3,4]\n1\n[1,2,4,12]\n[2,4]\n3",
        "formTitle": "[3162]Find the Number of Good Pairs I",
        "frequency": 0.0,
        "frontendQuestionId": "3162",
        "hints": [
            "The constraints are small. Check all pairs."
        ],
        "level": 1,
        "metaData": {
            "name": "numberOfPairs",
            "params": [
                {
                    "name": "nums1",
                    "type": "integer[]"
                },
                {
                    "name": "nums2",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3446",
        "similarQuestions": [
            "[{\"title\": \"Count Array Pairs Divisible by K\", \"titleSlug\": \"count-array-pairs-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u53ef\\u4ee5\\u88ab K \\u6574\\u9664\\u7684\\u4e0b\\u6807\\u5bf9\\u6570\\u76ee\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,3,4]\n[1,3,4]\n1",
        "title": "Find the Number of Good Pairs I",
        "titleSlug": "find-the-number-of-good-pairs-i",
        "infer_hints": [
            "How can you iterate through all the pairs of (i, j)?",
            "What's the difference between two numbers a and b?",
            "How to check if a number is divisible by another number?",
            "Try to solve it in O(n^2) time complexity.",
            "What is the condition to be a good pair?",
            "How to count the number of good pairs?",
            "Use a brute force approach to iterate through each pair (i, j).",
            "Can you count the number of pairs <code>(i, j)</code> for each number in nums1?",
            "The only difference is the multiplication of nums2[j] by k.",
            "Loop over all pairs of (i, j).",
            "Try to find the count of all pairs in a brute force way.",
            "Use a nested loop to iterate through each pair of numbers in the two arrays.",
            "Loop through all the pairs (i, j) and count the number of pairs where nums1[i] is divisible by nums2[j] * k.",
            "If we fix nums2[j], then the problem reduces to finding how many numbers in nums1 are divisible by nums2[j] * k.",
            "Create an array of all possible pairs.",
            "Can we solve this problem with a brute force approach?",
            "Try to brute force it.",
            "How to check if a number is divisible by another number?",
            "Can we use a hash table to count the frequency of numbers in nums2?",
            "Try all pairs of (i, j)."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string clearDigits(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String clearDigits(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def clearDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def clearDigits(self, s: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* clearDigits(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string ClearDigits(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar clearDigits = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function clearDigits(s: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function clearDigits($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func clearDigits(_ s: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun clearDigits(s: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String clearDigits(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func clearDigits(s string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {String}\ndef clear_digits(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def clearDigits(s: String): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn clear_digits(s: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (clear-digits s)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec clear_digits(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nclear_digits(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec clear_digits(s :: String.t) :: String.t\n  def clear_digits(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>.</p>\n\n<p>Your task is to remove <strong>all</strong> digits by doing this operation repeatedly:</p>\n\n<ul>\n\t<li>Delete the <em>first</em> digit and the <strong>closest</strong> <b>non-digit</b> character to its <em>left</em>.</li>\n</ul>\n\n<p>Return the resulting string after removing all digits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;abc&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no digit in the string.<!-- notionvc: ff07e34f-b1d6-41fb-9f83-5d0ba3c1ecde --></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;cb34&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>First, we apply the operation on <code>s[2]</code>, and <code>s</code> becomes <code>&quot;c4&quot;</code>.</p>\n\n<p>Then we apply the operation on <code>s[1]</code>, and <code>s</code> becomes <code>&quot;&quot;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of lowercase English letters and digits.</li>\n\t<li>The input is generated such that it is possible to delete all digits.</li>\n</ul>\n",
        "exampleTestcases": "\"abc\"\n\"cb34\"",
        "formTitle": "[3174]Clear Digits",
        "frequency": 0.0,
        "frontendQuestionId": "3174",
        "hints": [
            "Process string <code>s</code> from left to right, if <code>s[i]</code> is a digit, mark the nearest unmarked non-digit index to its left.",
            "Delete all digits and all marked characters."
        ],
        "level": 1,
        "metaData": {
            "name": "clearDigits",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3447",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"abc\"",
        "title": "Clear Digits",
        "titleSlug": "clear-digits",
        "infer_hints": [
            "If we iterate through the string, we can remove the current character and all digits that appear after it by using a stack.",
            "What if we keep track of the characters we've encountered so far and remove characters that are not part of this list?",
            "We can use a stack to track the previous character.",
            "What if you have a string that has all digits?",
            "You can use a stack to keep track of the characters.",
            "Use a stack to store characters.",
            "Use a stack to keep track of the characters in the string.",
            "Keep track of the last character and the current string.",
            "Use a stack.",
            "You can solve this problem by using a stack.",
            "We can use a stack to keep track of the characters in the string.",
            "Use a stack to store the characters.",
            "We can use a stack to solve this problem.",
            "We can use a stack to solve this problem.",
            "If the string is empty or all characters are digits, return the string.",
            "If you have a character array, how would you know if the character is a digit or not?",
            "If the string consists only of digits, return an empty string.",
            "Use a stack to keep track of the letters.",
            "Can you use a stack to keep track of characters?",
            "If the current character is a digit, we delete it and the previous character.  Otherwise, we keep it."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfChild(int n, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfChild(int n, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfChild(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfChild(self, n: int, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfChild(int n, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfChild(int n, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar numberOfChild = function(n, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfChild(n: number, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfChild($n, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfChild(_ n: Int, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfChild(n: Int, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfChild(int n, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfChild(n int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef number_of_child(n, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfChild(n: Int, k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_child(n: i32, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-child n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_child(N :: integer(), K :: integer()) -> integer().\nnumber_of_child(N, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_child(n :: integer, k :: integer) :: integer\n  def number_of_child(n, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two <strong>positive</strong> integers <code>n</code> and <code>k</code>. There are <code>n</code> children numbered from <code>0</code> to <code>n - 1</code> standing in a queue <em>in order</em> from left to right.</p>\n\n<p>Initially, child 0 holds a ball and the direction of passing the ball is towards the right direction. After each second, the child holding the ball passes it to the child next to them. Once the ball reaches <strong>either</strong> end of the line, i.e. child 0 or child <code>n - 1</code>, the direction of passing is <strong>reversed</strong>.</p>\n\n<p>Return the number of the child who receives the ball after <code>k</code> seconds.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, k = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Time elapsed</th>\n\t\t\t<th>Children</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>0</code></td>\n\t\t\t<td><code>[<u>0</u>, 1, 2]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>1</code></td>\n\t\t\t<td><code>[0, <u>1</u>, 2]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>2</code></td>\n\t\t\t<td><code>[0, 1, <u>2</u>]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>3</code></td>\n\t\t\t<td><code>[0, <u>1</u>, 2]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>4</code></td>\n\t\t\t<td><code>[<u>0</u>, 1, 2]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>5</code></td>\n\t\t\t<td><code>[0, <u>1</u>, 2]</code></td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, k = 6</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Time elapsed</th>\n\t\t\t<th>Children</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>0</code></td>\n\t\t\t<td><code>[<u>0</u>, 1, 2, 3, 4]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>1</code></td>\n\t\t\t<td><code>[0, <u>1</u>, 2, 3, 4]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>2</code></td>\n\t\t\t<td><code>[0, 1, <u>2</u>, 3, 4]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>3</code></td>\n\t\t\t<td><code>[0, 1, 2, <u>3</u>, 4]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>4</code></td>\n\t\t\t<td><code>[0, 1, 2, 3, <u>4</u>]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>5</code></td>\n\t\t\t<td><code>[0, 1, 2, <u>3</u>, 4]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>6</code></td>\n\t\t\t<td><code>[0, 1, <u>2</u>, 3, 4]</code></td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Time elapsed</th>\n\t\t\t<th>Children</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>0</code></td>\n\t\t\t<td><code>[<u>0</u>, 1, 2, 3]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>1</code></td>\n\t\t\t<td><code>[0, <u>1</u>, 2, 3]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>2</code></td>\n\t\t\t<td><code>[0, 1, <u>2</u>, 3]</code></td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n",
        "exampleTestcases": "3\n5\n5\n6\n4\n2",
        "formTitle": "[3178]Find the Child Who Has the Ball After K Seconds",
        "frequency": 0.0,
        "frontendQuestionId": "3178",
        "hints": [
            "The ball will go back to child 0 after <code>2 * (n - 1)</code> seconds and everything is the same as time 0.",
            "So the answer for <code>k</code> is the same as the answer for <code>k % (2 * (n - 1))</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "numberOfChild",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3450",
        "similarQuestions": [
            "[{\"title\": \"Find the Losers of the Circular Game\", \"titleSlug\": \"find-the-losers-of-the-circular-game\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u627e\\u51fa\\u8f6c\\u5708\\u6e38\\u620f\\u8f93\\u5bb6\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "3\n5",
        "title": "Find the Child Who Has the Ball After K Seconds",
        "titleSlug": "find-the-child-who-has-the-ball-after-k-seconds",
        "infer_hints": [
            "Use binary search and bitwise operations.",
            "The direction of the movement of the ball can be represented by a 0 or a 1.",
            "We can simulate the process by creating an array of children and the direction of passing the ball.",
            "Find the pattern.",
            "If we simulate the process, we can see that the child on the right will always receive the ball.",
            "We can simulate the process with a queue.",
            "Consider the queue as an array, and perform a simulation.",
            "How many seconds does it take for the ball to reach child 1?",
            "The ball is passed from child to child in a cycle.",
            "The answer is 0, 1, 2, 0, 2, 1, 4, 3, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, 2, 0, 2, 4, 6, 4, ",
            "Can you simulate the game?",
            "Think of the queue as a circle and try to calculate the direction of movement of the ball at each second.",
            "Use a binary indexed tree (BIT) to keep track of the direction.",
            "Find the pattern in the array.",
            "Use a boolean array to record the direction of passing the ball.",
            "Use recursion.",
            "Use dynamic programming to store the current state.",
            "Think of the children as a node in a tree, where each child has two children.",
            "Think of the children as a linked list.",
            "Can you use recursion?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string compressedString(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String compressedString(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def compressedString(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def compressedString(self, word: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* compressedString(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string CompressedString(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {string}\n */\nvar compressedString = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function compressedString(word: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return String\n     */\n    function compressedString($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func compressedString(_ word: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun compressedString(word: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String compressedString(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func compressedString(word string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {String}\ndef compressed_string(word)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def compressedString(word: String): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn compressed_string(word: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (compressed-string word)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec compressed_string(Word :: unicode:unicode_binary()) -> unicode:unicode_binary().\ncompressed_string(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec compressed_string(word :: String.t) :: String.t\n  def compressed_string(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given a string <code>word</code>, compress it using the following algorithm:</p>\n\n<ul>\n\t<li>Begin with an empty string <code>comp</code>. While <code>word</code> is <strong>not</strong> empty, use the following operation:\n\n\t<ul>\n\t\t<li>Remove a maximum length prefix of <code>word</code> made of a <em>single character</em> <code>c</code> repeating <strong>at most</strong> 9 times.</li>\n\t\t<li>Append the length of the prefix followed by <code>c</code> to <code>comp</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return the string <code>comp</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;abcde&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;1a1b1c1d1e&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, <code>comp = &quot;&quot;</code>. Apply the operation 5 times, choosing <code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, <code>&quot;c&quot;</code>, <code>&quot;d&quot;</code>, and <code>&quot;e&quot;</code> as the prefix in each operation.</p>\n\n<p>For each prefix, append <code>&quot;1&quot;</code> followed by the character to <code>comp</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;aaaaaaaaaaaaaabb&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;9a5a2b&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, <code>comp = &quot;&quot;</code>. Apply the operation 3 times, choosing <code>&quot;aaaaaaaaa&quot;</code>, <code>&quot;aaaaa&quot;</code>, and <code>&quot;bb&quot;</code> as the prefix in each operation.</p>\n\n<ul>\n\t<li>For prefix <code>&quot;aaaaaaaaa&quot;</code>, append <code>&quot;9&quot;</code> followed by <code>&quot;a&quot;</code> to <code>comp</code>.</li>\n\t<li>For prefix <code>&quot;aaaaa&quot;</code>, append <code>&quot;5&quot;</code> followed by <code>&quot;a&quot;</code> to <code>comp</code>.</li>\n\t<li>For prefix <code>&quot;bb&quot;</code>, append <code>&quot;2&quot;</code> followed by <code>&quot;b&quot;</code> to <code>comp</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abcde\"\n\"aaaaaaaaaaaaaabb\"",
        "formTitle": "[3163]String Compression III",
        "frequency": 0.0,
        "frontendQuestionId": "3163",
        "hints": [
            "Each time, just cut the same character in prefix up to at max 9 times. It鈥檚 always better to cut a bigger prefix."
        ],
        "level": 2,
        "metaData": {
            "name": "compressedString",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3451",
        "similarQuestions": [
            "[{\"title\": \"String Compression\", \"titleSlug\": \"string-compression\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u538b\\u7f29\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}, {\"title\": \"String Compression II\", \"titleSlug\": \"string-compression-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u538b\\u7f29\\u5b57\\u7b26\\u4e32 II\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "\"abcde\"",
        "title": "String Compression III",
        "titleSlug": "string-compression-iii",
        "infer_hints": [
            "Try to solve it in one-pass using a greedy algorithm.",
            "Use two pointers to compare the characters in the string.",
            "Can we use a sliding window to keep track of the longest repeated substring?",
            "If the next character is the same, keep going.",
            "What if we used a Trie data structure?",
            "How can we compress the string in place?  We should write the final answer to the string array in-place.  Can we do it backwards?",
            "Keep track of the last character and the number of times it appeared in the string.",
            "Use two pointers to traverse the string.",
            "How many times does a character appear consecutively?",
            "Try to use the sliding window technique.",
            "Find the next character that is different from the current one.",
            "Use two pointers to traverse the string.",
            "Try to use a two pointer approach.",
            "Use two pointers to compare the current character with the next one.",
            "If you can't find any repeating character, append the first character and the length of the word to the result.",
            "Use a two-pointer approach where the two pointers are initially at the start of the string.",
            "Try to find the next character of the current prefix and the number of times it repeats.",
            "Use two pointers to traverse the string.",
            "Use two pointers to compress the string.",
            "If the character is repeated 10 times, you need to append \"10\" instead of \"1\"+\"0\"."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumLength(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumLength = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumLength(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumLength($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumLength(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumLength(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumLength(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_length(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_length(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_length(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_length(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer], k :: integer) :: integer\n  def maximum_length(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> and a <strong>non-negative</strong> integer <code>k</code>. A sequence of integers <code>seq</code> is called <strong>good</strong> if there are <strong>at most</strong> <code>k</code> indices <code>i</code> in the range <code>[0, seq.length - 2]</code> such that <code>seq[i] != seq[i + 1]</code>.</p>\n\n<p>Return the <strong>maximum</strong> possible length of a <strong>good</strong> <span data-keyword=\"subsequence-array\">subsequence</span> of <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,1,1,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum length subsequence is <code>[<u>1</u>,<u>2</u>,<u>1</u>,<u>1</u>,3]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5,1], k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum length subsequence is <code>[<u>1</u>,2,3,4,5,<u>1</u>]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= min(50, nums.length)</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,1,1,3]\n2\n[1,2,3,4,5,1]\n0",
        "formTitle": "[3177]Find the Maximum Length of a Good Subsequence II",
        "frequency": 0.0,
        "frontendQuestionId": "3177",
        "hints": [
            "The absolute values in <code>nums</code> don鈥檛 really matter. So we can remap the set of values to the range <code>[0, n - 1]</code>.",
            "Let <code>dp[i][j]</code> be the length of the longest subsequence till index <code>j</code> with at most <code>i</code> positions such that <code>seq[i] != seq[i + 1]</code>.",
            "For each value <code>x</code> from left to right, update <code>dp[i][x] = max(dp[i][x] + 1, dp[i - 1][y] + 1)</code>, where <code>y != x</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "maximumLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3452",
        "similarQuestions": [
            "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u9012\\u589e\\u5b50\\u5e8f\\u5217\", \"isPaidOnly\": false}, {\"title\": \"Maximum Length of Repeated Subarray\", \"titleSlug\": \"maximum-length-of-repeated-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u91cd\\u590d\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,1,1,3]\n2",
        "title": "Find the Maximum Length of a Good Subsequence II",
        "titleSlug": "find-the-maximum-length-of-a-good-subsequence-ii",
        "infer_hints": [
            "Try a dynamic programming solution.",
            "The maximum length of a good subsequence is the maximum length of a good subsequence that ends at some number.",
            "Keep a sliding window of 2 numbers and a counter of how many other numbers are in the window.",
            "Can you use a stack to track the maximum length subsequence?",
            "The state (i, j) of dp[i][j] is determined by the state (i - 1, j) or (i - 1, j - 1).",
            "We can use a sliding window.",
            "How to count the length of the longest subsequence with at most k distinct elements?",
            "We can use a priority queue (or a stack) to keep track of the most recent positions of the same number.",
            "What if you had an array that was sorted in increasing order?",
            "We need to keep track of the number of times we have seen the same value.",
            "We need to find the maximum length of a good subsequence, so we need to maintain a count of the number of previous numbers we've seen.",
            "You can use a sliding window to keep track of the maximum length of a good subsequence.",
            "Can you optimize the solution to use a sliding window and an array of size 10 to count the frequency of the numbers?",
            "How many good subsequences of length i can we have?  We can count this with a dynamic programming approach.",
            "Keep track of the maximum length subsequence for each element in nums.",
            "Use dynamic programming.",
            "The answer is either 2 or 3.  If it's 3, the last 3 numbers are unique.",
            "Use dynamic programming.  How many subsequences of the first i elements can we end with nums[i]?",
            "If we try to find the longest subsequence at each index, we'll have to go back to previous indices to count the good subsequences.",
            "Use dynamic programming."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<string> validStrings(int n) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public List<String> validStrings(int n) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def validStrings(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def validStrings(self, n: int) -> List[str]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** validStrings(int n, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public IList<string> ValidStrings(int n) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar validStrings = function(n) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function validStrings(n: number): string[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function validStrings($n) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func validStrings(_ n: Int) -> [String] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun validStrings(n: Int): List<String> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<String> validStrings(int n) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func validStrings(n int) []string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @return {String[]}\ndef valid_strings(n)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def validStrings(n: Int): List[String] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn valid_strings(n: i32) -> Vec<String> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (valid-strings n)\n  (-> exact-integer? (listof string?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec valid_strings(N :: integer()) -> [unicode:unicode_binary()].\nvalid_strings(N) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec valid_strings(n :: integer) :: [String.t]\n  def valid_strings(n) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a positive integer <code>n</code>.</p>\n\n<p>A binary string <code>x</code> is <strong>valid</strong> if all <span data-keyword=\"substring-nonempty\">substrings</span> of <code>x</code> of length 2 contain <strong>at least</strong> one <code>&quot;1&quot;</code>.</p>\n\n<p>Return all <strong>valid</strong> strings with length <code>n</code><strong>, </strong>in <em>any</em> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[&quot;010&quot;,&quot;011&quot;,&quot;101&quot;,&quot;110&quot;,&quot;111&quot;]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The valid strings of length 3 are: <code>&quot;010&quot;</code>, <code>&quot;011&quot;</code>, <code>&quot;101&quot;</code>, <code>&quot;110&quot;</code>, and <code>&quot;111&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[&quot;0&quot;,&quot;1&quot;]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The valid strings of length 1 are: <code>&quot;0&quot;</code> and <code>&quot;1&quot;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 18</code></li>\n</ul>\n",
        "exampleTestcases": "3\n1",
        "formTitle": "[3211]Generate Binary Strings Without Adjacent Zeros",
        "frequency": 0.0,
        "frontendQuestionId": "3211",
        "hints": [
            "If we have a string <code>s</code> of length <code>x</code>, we can generate all strings of length <code>x + 1</code>.",
            "If <code>s</code> has 0 as the last character, we can only append 1, whereas if the last character is 1, we can append both 0 and 1.",
            "We can use recursion and backtracking to generate all such strings."
        ],
        "level": 2,
        "metaData": {
            "name": "validStrings",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3453",
        "similarQuestions": [
            "[{\"title\": \"Non-negative Integers without Consecutive Ones\", \"titleSlug\": \"non-negative-integers-without-consecutive-ones\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u4e0d\\u542b\\u8fde\\u7eed1\\u7684\\u975e\\u8d1f\\u6574\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "3",
        "title": "Generate Binary Strings Without Adjacent Zeros",
        "titleSlug": "generate-binary-strings-without-adjacent-zeros",
        "infer_hints": [
            "If the last two digits of the binary string are both 0, what will the next digit be?",
            "If the last two digits are 00, then the next digit can only be 1.",
            "Generate all possible strings of length n, then filter out those with adjacent zeros.",
            "How many binary strings of length n are there without adjacent 0s?",
            "Generate all 2^n strings, then remove the ones that contain adjacent zeros.",
            "The answer can be generated recursively.",
            "Generate all binary strings of length n.",
            "Try to generate all binary strings of length n.",
            "Use recursion.",
            "For every string, we can append a zero or a one.",
            "If <code>n = 1</code>, return <code>[0, 1]</code>.",
            "Use recursion.",
            "If you can generate all the binary strings of length <code>n</code>, you can just add a condition to check if the binary string has any adjacent zeros.",
            "We can use recursion to generate all binary strings of length N.  We can take the current string, append 0 to it and 1 to it and keep going until we reach length N.",
            "How many substrings of length 2 can you find?",
            "We can use recursion and dynamic programming to solve this problem.",
            "Use recursion.",
            "Can we use backtracking to generate all strings?",
            "How to make sure that each string in the output has a 1 in the last position?",
            "Consider the first bit."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumOperations(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minimumOperations(int* nums, int numsSize, int* target, int targetSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinimumOperations(int[] nums, int[] target) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} target\n * @return {number}\n */\nvar minimumOperations = function(nums, target) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumOperations(nums: number[], target: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $target\n     * @return Integer\n     */\n    function minimumOperations($nums, $target) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumOperations(_ nums: [Int], _ target: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumOperations(nums: IntArray, target: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumOperations(List<int> nums, List<int> target) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumOperations(nums []int, target []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} target\n# @return {Integer}\ndef minimum_operations(nums, target)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumOperations(nums: Array[Int], target: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_operations(nums: Vec<i32>, target: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-operations nums target)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_operations(Nums :: [integer()], Target :: [integer()]) -> integer().\nminimum_operations(Nums, Target) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_operations(nums :: [integer], target :: [integer]) :: integer\n  def minimum_operations(nums, target) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two positive integer arrays <code>nums</code> and <code>target</code>, of the same length.</p>\n\n<p>In a single operation, you can select any <span data-keyword=\"subarray\">subarray</span> of <code>nums</code> and increment or decrement each element within that subarray by 1.</p>\n\n<p>Return the <strong>minimum</strong> number of operations required to make <code>nums</code> equal to the array <code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,5,1,2], target = [4,6,2,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We will perform the following operations to make <code>nums</code> equal to <code>target</code>:<br />\n- Increment&nbsp;<code>nums[0..3]</code> by 1, <code>nums = [4,6,2,3]</code>.<br />\n- Increment&nbsp;<code>nums[3..3]</code> by 1, <code>nums = [4,6,2,4]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,3,2], target = [2,1,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We will perform the following operations to make <code>nums</code> equal to <code>target</code>:<br />\n- Increment&nbsp;<code>nums[0..0]</code> by 1, <code>nums = [2,3,2]</code>.<br />\n- Decrement&nbsp;<code>nums[1..1]</code> by 1, <code>nums = [2,2,2]</code>.<br />\n- Decrement&nbsp;<code>nums[1..1]</code> by 1, <code>nums = [2,1,2]</code>.<br />\n- Increment&nbsp;<code>nums[2..2]</code> by 1, <code>nums = [2,1,3]</code>.<br />\n- Increment&nbsp;<code>nums[2..2]</code> by 1, <code>nums = [2,1,4]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length == target.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], target[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[3,5,1,2]\n[4,6,2,4]\n[1,3,2]\n[2,1,4]",
        "formTitle": "[3229]Minimum Operations to Make Array Equal to Target",
        "frequency": 0.0,
        "frontendQuestionId": "3229",
        "hints": [
            "Change <code>nums'[i] = nums[i] - target[i]</code>, so our goal is to make <code>nums'</code> into all 0s.",
            "Divide and conquer."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "target",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3454",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,5,1,2]\n[4,6,2,4]",
        "title": "Minimum Operations to Make Array Equal to Target",
        "titleSlug": "minimum-operations-to-make-array-equal-to-target",
        "infer_hints": [
            "Think of it as finding the sum of absolute differences between the two arrays.",
            "How can we convert the problem into something that we can solve?",
            "Can we calculate the cost to make all elements equal to the average of the two middle elements?",
            "How to find the minimum number of operations to make the array equal to the target?",
            "The problem can be converted to the problem of finding the minimum sum of absolute differences.",
            "For each element, find the number of operations needed to make it equal to the target element.",
            "For each position, the number of operations to change the number from the current number to the target number is either the current number or the target number minus the current number.",
            "For each index i, we can compute how many operations are needed to make nums[i] equal to target[i].",
            "Can you optimize the solution with dynamic programming?",
            "We can calculate the operations for every element, and sum them up.",
            "Find the difference between nums[i] and target[i].",
            "How to find the operations for one index?",
            "For each number, find the minimum operations to make it equal to the target number.",
            "The operations we can perform on the array are the same as the operations on the prefix sums.",
            "How can we make the operations to be minimum?",
            "Do we need to increase or decrease each element?",
            "Use prefix sums to calculate the number of operations required to make each element equal to target[i].",
            "How can we make the array equal to the target?",
            "What if you are allowed to sort the array?",
            "What if we can't make the array equal to the target?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumLength(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumLength(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumLength(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumLength(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumLength(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumLength = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumLength(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumLength($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumLength(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumLength(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumLength(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumLength(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef minimum_length(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumLength(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_length(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-length s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_length(S :: unicode:unicode_binary()) -> integer().\nminimum_length(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_length(s :: String.t) :: integer\n  def minimum_length(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>.</p>\n\n<p>You can perform the following process on <code>s</code> <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the string such that there is <strong>at least</strong> one character to the left of index <code>i</code> that is equal to <code>s[i]</code>, and <strong>at least</strong> one character to the right that is also equal to <code>s[i]</code>.</li>\n\t<li>Delete the <strong>closest</strong> character to the <strong>left</strong> of index <code>i</code> that is equal to <code>s[i]</code>.</li>\n\t<li>Delete the <strong>closest</strong> character to the <strong>right</strong> of index <code>i</code> that is equal to <code>s[i]</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> length of the final string <code>s</code> that you can achieve.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abaacbcbb&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong><br />\nWe do the following operations:</p>\n\n<ul>\n\t<li>Choose index 2, then remove the characters at indices 0 and 3. The resulting string is <code>s = &quot;bacbcbb&quot;</code>.</li>\n\t<li>Choose index 3, then remove the characters at indices 0 and 5. The resulting string is <code>s = &quot;acbcb&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;aa&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong><br />\nWe cannot perform any operations, so we return the length of the original string.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abaacbcbb\"\n\"aa\"",
        "formTitle": "[3223]Minimum Length of String After Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3223",
        "hints": [
            "Only the frequency of each character matters in finding the final answer.",
            "If a character occurs less than 3 times, we cannot perform any process with it.",
            "Suppose there is a character that occurs at least 3 times in the string, we can repeatedly delete two of these characters until there are at most 2 occurrences left of it."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumLength",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3455",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"abaacbcbb\"",
        "title": "Minimum Length of String After Operations",
        "titleSlug": "minimum-length-of-string-after-operations",
        "infer_hints": [
            "Use dynamic programming.",
            "You can use dynamic programming to solve this problem.",
            "If we try to remove all occurrences of a certain character, what can we say about the remaining characters?",
            "You can use a stack to check if the character can be removed or not.",
            "Think of the problem as a graph where each character is a node and an edge between two nodes exists if the two nodes have the same character.",
            "How can you use recursion to solve this problem?",
            "How can you handle the deletion of characters from both sides in a single pass?",
            "Use dynamic programming.",
            "Try to find a dynamic programming solution.",
            "We can use a stack to keep track of the characters in the string.",
            "What if we can perform the operation on multiple groups of characters?",
            "If we choose the index i, we will remove the closest character to the left of index i that is equal to s[i].",
            "If the current character is the same as the next one, we can perform the operation to remove both.",
            "Use a stack to keep track of the characters in the string.",
            "Use dynamic programming.",
            "Use a stack to store the current state of the string.",
            "Use a stack to store the previous characters of the string.",
            "Think about how many times you can perform the operations.",
            "If we have to remove characters that are the same, then we must use all the operations.  Otherwise, we can ignore all the operations.",
            "Can you find out the count of each character in the string?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumLength(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumLength = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumLength(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumLength($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumLength(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumLength(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumLength(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_length(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_length(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_length(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_length(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer], k :: integer) :: integer\n  def maximum_length(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> and a <strong>non-negative</strong> integer <code>k</code>. A sequence of integers <code>seq</code> is called <strong>good</strong> if there are <strong>at most</strong> <code>k</code> indices <code>i</code> in the range <code>[0, seq.length - 2]</code> such that <code>seq[i] != seq[i + 1]</code>.</p>\n\n<p>Return the <strong>maximum</strong> possible length of a <strong>good</strong> <span data-keyword=\"subsequence-array\">subsequence</span> of <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,1,1,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum length subsequence is <code>[<u>1</u>,<u>2</u>,<u>1</u>,<u>1</u>,3]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5,1], k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum length subsequence is <code>[<u>1</u>,2,3,4,5,<u>1</u>]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= min(nums.length, 25)</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,1,1,3]\n2\n[1,2,3,4,5,1]\n0",
        "formTitle": "[3176]Find the Maximum Length of a Good Subsequence I",
        "frequency": 0.0,
        "frontendQuestionId": "3176",
        "hints": [
            "The absolute values in <code>nums</code> don鈥檛 really matter. So we can remap the set of values to the range <code>[0, n - 1]</code>.",
            "Let <code>dp[i][j]</code> be the length of the longest subsequence till index <code>j</code> with at most <code>i</code> positions such that <code>seq[i] != seq[i + 1]</code>.",
            "For each value <code>x</code> from left to right, update <code>dp[i][x] = max(dp[i][x] + 1, dp[i - 1][y] + 1)</code>, where <code>y != x</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3456",
        "similarQuestions": [
            "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u9012\\u589e\\u5b50\\u5e8f\\u5217\", \"isPaidOnly\": false}, {\"title\": \"Maximum Length of Repeated Subarray\", \"titleSlug\": \"maximum-length-of-repeated-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u91cd\\u590d\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,1,1,3]\n2",
        "title": "Find the Maximum Length of a Good Subsequence I",
        "titleSlug": "find-the-maximum-length-of-a-good-subsequence-i",
        "infer_hints": [
            "Use a sliding window to find the maximum length subsequence.",
            "What if you try to find a subsequence with exactly K changes?",
            "Use DP to keep track of the maximum length subsequence for each number.",
            "For each index, store the maximum length of a good subsequence ending at that index.",
            "For each number, find the longest subsequence ending with it.",
            "The idea is to maintain a sliding window with at most K elements.",
            "The problem is about counting the number of subsequences.",
            "Can we use a dynamic programming to solve this problem?",
            "Can we use dynamic programming to solve this?",
            "Use dynamic programming.",
            "Can we use dynamic programming to solve this problem?",
            "Use dynamic programming.",
            "Use a sliding window.",
            "Think about how you can keep track of the maximum length subsequence.",
            "Try all possible subsequences of nums and check if they are good.",
            "We can use a stack to keep track of the last k elements of the current subsequence.",
            "Use dynamic programming.",
            "Keep track of the longest subsequence ending with each number.",
            "You can use dynamic programming.",
            "If we want to choose the longest subsequence, what can we do?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumSum(int[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumSum(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumSum(int[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumSum = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumSum(grid: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumSum($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumSum(_ grid: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumSum(grid: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumSum(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumSum(grid [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_sum(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumSum(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_sum(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-sum grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_sum(Grid :: [[integer()]]) -> integer().\nminimum_sum(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_sum(grid :: [[integer]]) :: integer\n  def minimum_sum(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D <strong>binary</strong> array <code>grid</code>. You need to find 3 <strong>non-overlapping</strong> rectangles having <strong>non-zero</strong> areas with horizontal and vertical sides such that all the 1&#39;s in <code>grid</code> lie inside these rectangles.</p>\n\n<p>Return the <strong>minimum</strong> possible sum of the area of these rectangles.</p>\n\n<p><strong>Note</strong> that the rectangles are allowed to touch.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,1],[1,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/14/example0rect21.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 280px; height: 198px;\" /></p>\n\n<ul>\n\t<li>The 1&#39;s at <code>(0, 0)</code> and <code>(1, 0)</code> are covered by a rectangle of area 2.</li>\n\t<li>The 1&#39;s at <code>(0, 2)</code> and <code>(1, 2)</code> are covered by a rectangle of area 2.</li>\n\t<li>The 1 at <code>(1, 1)</code> is covered by a rectangle of area 1.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,1,0],[0,1,0,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/14/example1rect2.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 356px; height: 198px;\" /></p>\n\n<ul>\n\t<li>The 1&#39;s at <code>(0, 0)</code> and <code>(0, 2)</code> are covered by a rectangle of area 3.</li>\n\t<li>The 1 at <code>(1, 1)</code> is covered by a rectangle of area 1.</li>\n\t<li>The 1 at <code>(1, 3)</code> is covered by a rectangle of area 1.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length, grid[i].length &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> is either 0 or 1.</li>\n\t<li>The input is generated such that there are at least three 1&#39;s in <code>grid</code>.</li>\n</ul>\n",
        "exampleTestcases": "[[1,0,1],[1,1,1]]\n[[1,0,1,0],[0,1,0,1]]",
        "formTitle": "[3197]Find the Minimum Area to Cover All Ones II",
        "frequency": 0.0,
        "frontendQuestionId": "3197",
        "hints": [
            "Consider covering using 2 rectangles. As the rectangles don鈥檛 overlap, one of the rectangles must either be vertically above or horizontally left to the other.",
            "To find the minimum area, check all possible vertical and horizontal splits.",
            "For 3 rectangles, extend the idea to first covering using one rectangle, and then try splitting leftover ones both horizontally and vertically."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumSum",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3459",
        "similarQuestions": [
            "[{\"title\": \"Smallest Rectangle Enclosing Black Pixels\", \"titleSlug\": \"smallest-rectangle-enclosing-black-pixels\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5305\\u542b\\u5168\\u90e8\\u9ed1\\u8272\\u50cf\\u7d20\\u7684\\u6700\\u5c0f\\u77e9\\u5f62\", \"isPaidOnly\": true}]"
        ],
        "statusSign": " ",
        "testCase": "[[1,0,1],[1,1,1]]",
        "title": "Find the Minimum Area to Cover All Ones II",
        "titleSlug": "find-the-minimum-area-to-cover-all-ones-ii",
        "infer_hints": [
            "Use a 4-dimensional array dp to store the minimum area that we can get by using rectangle (i, j) as the bottom-right corner and (x, y) as the top-left corner.",
            "For each pair of columns, try to find the smallest row that covers all 1's in the columns.",
            "We can use dynamic programming to solve this problem.  We need to maintain a 4D array dp[i][j][k][l] where dp[i][j][k][l] is the minimum sum of the area of all rectangles in the submatrix grid[i:k, j:l].",
            "We need to find three rectangles that cover all the 1's.  We can do this in O(N^6) by checking every possible combination of four points.",
            "If we try all possible rectangles, the time complexity will be O(N^4). Can we do better?",
            "The idea is to compute the prefix sum of the 2D array.",
            "The idea is to fix one of the corners of the rectangle and then for each pair of rows, we find the number of ones in the range of the two columns.",
            "We can use dynamic programming.",
            "For each rectangle, we can calculate its area and the number of 1's it covers.",
            "Consider using a brute force approach to iterate over all possible rectangles.",
            "You can precompute the sum of the elements in each column.",
            "Try to use 4 loops to check every possible rectangle.",
            "Try to find the rectangle with the minimum area by checking all possible rectangles.",
            "The 3D problem is reduced to a 2D problem.",
            "We can use a prefix sum 2D array.",
            "You can use a prefix sum array.",
            "Think about the 3 rectangles as a combination of 2 rectangles and a single rectangle.",
            "Try all possible rectangles with three points.",
            "Can we do better than O(n^4)?",
            "Try to calculate the area for all possible rectangles."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfPermutations(int n, int[][] requirements) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfPermutations(self, n, requirements):\n        \"\"\"\n        :type n: int\n        :type requirements: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfPermutations(int n, int** requirements, int requirementsSize, int* requirementsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfPermutations(int n, int[][] requirements) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number[][]} requirements\n * @return {number}\n */\nvar numberOfPermutations = function(n, requirements) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfPermutations(n: number, requirements: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $requirements\n     * @return Integer\n     */\n    function numberOfPermutations($n, $requirements) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfPermutations(_ n: Int, _ requirements: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfPermutations(n: Int, requirements: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfPermutations(int n, List<List<int>> requirements) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfPermutations(n int, requirements [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer[][]} requirements\n# @return {Integer}\ndef number_of_permutations(n, requirements)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfPermutations(n: Int, requirements: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_permutations(n: i32, requirements: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-permutations n requirements)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_permutations(N :: integer(), Requirements :: [[integer()]]) -> integer().\nnumber_of_permutations(N, Requirements) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_permutations(n :: integer, requirements :: [[integer]]) :: integer\n  def number_of_permutations(n, requirements) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer <code>n</code> and a 2D array <code>requirements</code>, where <code>requirements[i] = [end<sub>i</sub>, cnt<sub>i</sub>]</code> represents the end index and the <strong>inversion</strong> count of each requirement.</p>\n\n<p>A pair of indices <code>(i, j)</code> from an integer array <code>nums</code> is called an <strong>inversion</strong> if:</p>\n\n<ul>\n\t<li><code>i &lt; j</code> and <code>nums[i] &gt; nums[j]</code></li>\n</ul>\n\n<p>Return the number of <span data-keyword=\"permutation\">permutations</span> <code>perm</code> of <code>[0, 1, 2, ..., n - 1]</code> such that for <strong>all</strong> <code>requirements[i]</code>, <code>perm[0..end<sub>i</sub>]</code> has exactly <code>cnt<sub>i</sub></code> inversions.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, requirements = [[2,2],[0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two permutations are:</p>\n\n<ul>\n\t<li><code>[2, 0, 1]</code>\n\n\t<ul>\n\t\t<li>Prefix <code>[2, 0, 1]</code> has inversions <code>(0, 1)</code> and <code>(0, 2)</code>.</li>\n\t\t<li>Prefix <code>[2]</code> has 0 inversions.</li>\n\t</ul>\n\t</li>\n\t<li><code>[1, 2, 0]</code>\n\t<ul>\n\t\t<li>Prefix <code>[1, 2, 0]</code> has inversions <code>(0, 2)</code> and <code>(1, 2)</code>.</li>\n\t\t<li>Prefix <code>[1]</code> has 0 inversions.</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, requirements = [[2,2],[1,1],[0,0]]</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only satisfying permutation is <code>[2, 0, 1]</code>:</p>\n\n<ul>\n\t<li>Prefix <code>[2, 0, 1]</code> has inversions <code>(0, 1)</code> and <code>(0, 2)</code>.</li>\n\t<li>Prefix <code>[2, 0]</code> has an inversion <code>(0, 1)</code>.</li>\n\t<li>Prefix <code>[2]</code> has 0 inversions.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, requirements = [[0,0],[1,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only satisfying permutation is <code>[0, 1]</code>:</p>\n\n<ul>\n\t<li>Prefix <code>[0]</code> has 0 inversions.</li>\n\t<li>Prefix <code>[0, 1]</code> has an inversion <code>(0, 1)</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 300</code></li>\n\t<li><code>1 &lt;= requirements.length &lt;= n</code></li>\n\t<li><code>requirements[i] = [end<sub>i</sub>, cnt<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= end<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>0 &lt;= cnt<sub>i</sub> &lt;= 400</code></li>\n\t<li>The input is generated such that there is at least one <code>i</code> such that <code>end<sub>i</sub> == n - 1</code>.</li>\n\t<li>The input is generated such that all <code>end<sub>i</sub></code> are unique.</li>\n</ul>\n",
        "exampleTestcases": "3\n[[2,2],[0,0]]\n3\n[[2,2],[1,1],[0,0]]\n2\n[[0,0],[1,0]]",
        "formTitle": "[3193]Count the Number of Inversions",
        "frequency": 0.0,
        "frontendQuestionId": "3193",
        "hints": [
            "Let <code>dp[i][j]</code> denote the number of arrays of length <code>i</code> with <code>j</code> inversions.",
            "<code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + 鈥� + dp[i - 1][0]</code>.",
            "<code>dp[i][j] = 0</code> if for some <code>x</code>, <code>requirements[x][0] == i</code> and <code>requirements[x][1] != j</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "numberOfPermutations",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "requirements",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3460",
        "similarQuestions": [
            "[{\"title\": \"K Inverse Pairs Array\", \"titleSlug\": \"k-inverse-pairs-array\", \"difficulty\": \"Hard\", \"translatedTitle\": \"K \\u4e2a\\u9006\\u5e8f\\u5bf9\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "3\n[[2,2],[0,0]]",
        "title": "Count the Number of Inversions",
        "titleSlug": "count-the-number-of-inversions",
        "infer_hints": [
            "For each requirement, how many permutations can be formed with this requirement as the last element?",
            "If you know how to solve this problem for an array of 2 elements, can you extend it to solve it for arrays of length 3?",
            "We can use a prefix sum array to count the number of inversions.",
            "Let's try to calculate the number of inversions of a permutation.",
            "We can count the number of inversions in a sorted array.",
            "You can use the \"merge sort\" algorithm to count the inversions.",
            "The number of inversions is exactly the same as the number of elements that are greater than the current element.",
            "The number of inversions is not necessarily symmetric for all prefixes.",
            "You can solve this problem with a divide-and-conquer approach.",
            "Count the number of inversions for each end.",
            "Use dynamic programming to solve this problem.",
            "How to calculate the number of inversions for a subarray?",
            "Use dynamic programming to count the number of inversions.",
            "If we have a permutation, how many inversions can we have?",
            "Count the number of inversions that can be formed between two numbers.",
            "Can we just calculate the number of inversions for each prefix?",
            "Use a dynamic programming approach to solve this problem.",
            "You need to calculate the number of inversions for each prefix and then use dynamic programming to calculate the number of permutations for each prefix.",
            "Can you use dynamic programming?  How does it help?",
            "Try to count the number of inversions for each possible permutation."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumArea(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumArea(int[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumArea(self, grid: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumArea(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumArea(int[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumArea = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumArea(grid: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumArea($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumArea(_ grid: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumArea(grid: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumArea(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumArea(grid [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_area(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumArea(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_area(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-area grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_area(Grid :: [[integer()]]) -> integer().\nminimum_area(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_area(grid :: [[integer]]) :: integer\n  def minimum_area(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D <strong>binary</strong> array <code>grid</code>. Find a rectangle with horizontal and vertical sides with the<strong> smallest</strong> area, such that all the 1&#39;s in <code>grid</code> lie inside this rectangle.</p>\n\n<p>Return the <strong>minimum</strong> possible area of the rectangle.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,1,0],[1,0,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/08/examplerect0.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 279px; height: 198px;\" /></p>\n\n<p>The smallest rectangle has a height of 2 and a width of 3, so it has an area of <code>2 * 3 = 6</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0],[0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/08/examplerect1.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 204px; height: 201px;\" /></p>\n\n<p>The smallest rectangle has both height and width 1, so its area is <code>1 * 1 = 1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length, grid[i].length &lt;= 1000</code></li>\n\t<li><code>grid[i][j]</code> is either 0 or 1.</li>\n\t<li>The input is generated such that there is at least one 1 in <code>grid</code>.</li>\n</ul>\n",
        "exampleTestcases": "[[0,1,0],[1,0,1]]\n[[1,0],[0,0]]",
        "formTitle": "[3195]Find the Minimum Area to Cover All Ones I",
        "frequency": 0.0,
        "frontendQuestionId": "3195",
        "hints": [
            "Find the minimum and maximum coordinates of a cell with a value of 1 in both directions."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumArea",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3461",
        "similarQuestions": [
            "[{\"title\": \"Smallest Rectangle Enclosing Black Pixels\", \"titleSlug\": \"smallest-rectangle-enclosing-black-pixels\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5305\\u542b\\u5168\\u90e8\\u9ed1\\u8272\\u50cf\\u7d20\\u7684\\u6700\\u5c0f\\u77e9\\u5f62\", \"isPaidOnly\": true}]"
        ],
        "statusSign": " ",
        "testCase": "[[0,1,0],[1,0,1]]",
        "title": "Find the Minimum Area to Cover All Ones I",
        "titleSlug": "find-the-minimum-area-to-cover-all-ones-i",
        "infer_hints": [
            "The width of the rectangle can be any value between 1 and the number of columns in the matrix. Can you try to use this width to calculate the height?",
            "For each pair of columns, compute the heights of all possible rectangles that can be formed.",
            "Think of this as finding the maximum area in a histogram.",
            "For each vertical line, we need to find the smallest rectangle it can form.",
            "We can use binary indexed tree to solve this problem.",
            "The minimum area rectangle (of all 1's) is the one which the area is maximum. (The area of a rectangle is defined as the length times the width.)",
            "Use the prefix sum array to get the sum of all 1's in a rectangle.",
            "How to handle the case where there are multiple rectangles with the same area?",
            "The area of a rectangle is the length of one side multiplied by the length of the other side. (And remember, the area of a rectangle is always positive, because the lengths are always positive.)",
            "Try to find a rectangle with minimum area that contains only 1s.",
            "How to find the area of a rectangle given the two corners?",
            "For each pair of rows, calculate the number of columns where both rows are 1.",
            "Use a 2D prefix sum array.",
            "Use a 2D prefix sum array.",
            "If you're iterating over all pairs of cells in the grid, how can you optimize this?",
            "If the grid is of 0s and 1s, can we do better than O(N^2) by using a prefix sum array?",
            "For each row, find the farthest column index j that is to the right of the current column such that grid[i][j] = 1.",
            "For each row, calculate the cumulative sum of the array.",
            "We can solve this by calculating the sum of all possible rectangles and checking each one for all ones.",
            "How can we get the prefix sum of the grid?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool doesAliceWin(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean doesAliceWin(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def doesAliceWin(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def doesAliceWin(self, s: str) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool doesAliceWin(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool DoesAliceWin(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar doesAliceWin = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function doesAliceWin(s: string): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function doesAliceWin($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func doesAliceWin(_ s: String) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun doesAliceWin(s: String): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool doesAliceWin(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func doesAliceWin(s string) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Boolean}\ndef does_alice_win(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def doesAliceWin(s: String): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn does_alice_win(s: String) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (does-alice-win s)\n  (-> string? boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec does_alice_win(S :: unicode:unicode_binary()) -> boolean().\ndoes_alice_win(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec does_alice_win(s :: String.t) :: boolean\n  def does_alice_win(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Alice and Bob are playing a game on a string.</p>\n\n<p>You are given a string <code>s</code>, Alice and Bob will take turns playing the following game where Alice starts <strong>first</strong>:</p>\n\n<ul>\n\t<li>On Alice&#39;s turn, she has to remove any <strong>non-empty</strong> <span data-keyword=\"substring\">substring</span> from <code>s</code> that contains an <strong>odd</strong> number of vowels.</li>\n\t<li>On Bob&#39;s turn, he has to remove any <strong>non-empty</strong> <span data-keyword=\"substring\">substring</span> from <code>s</code> that contains an <strong>even</strong> number of vowels.</li>\n</ul>\n\n<p>The first player who cannot make a move on their turn loses the game. We assume that both Alice and Bob play <strong>optimally</strong>.</p>\n\n<p>Return <code>true</code> if Alice wins the game, and <code>false</code> otherwise.</p>\n\n<p>The English vowels are: <code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, and <code>u</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;leetcoder&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong><br />\nAlice can win the game as follows:</p>\n\n<ul>\n\t<li>Alice plays first, she can delete the underlined substring in <code>s = &quot;<u><strong>leetco</strong></u>der&quot;</code> which contains 3 vowels. The resulting string is <code>s = &quot;der&quot;</code>.</li>\n\t<li>Bob plays second, he can delete the underlined substring in <code>s = &quot;<u><strong>d</strong></u>er&quot;</code> which contains 0 vowels. The resulting string is <code>s = &quot;er&quot;</code>.</li>\n\t<li>Alice plays third, she can delete the whole string <code>s = &quot;<strong><u>er</u></strong>&quot;</code> which contains 1 vowel.</li>\n\t<li>Bob plays fourth, since the string is empty, there is no valid play for Bob. So Alice wins the game.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;bbcd&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong><br />\nThere is no valid play for Alice in her first turn, so Alice loses the game.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"leetcoder\"\n\"bbcd\"",
        "formTitle": "[3227]Vowels Game in a String",
        "frequency": 0.0,
        "frontendQuestionId": "3227",
        "hints": [
            "If there are no vowels in the initial string, then Bob wins.",
            "If the number of vowels in the initial string is odd, then Alice can remove the whole string on her first turn and win.",
            "What if the number of vowels in the initial string is even? What鈥檚 the optimal play for Alice鈥檚 first turn?"
        ],
        "level": 2,
        "metaData": {
            "name": "doesAliceWin",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3462",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"leetcoder\"",
        "title": "Vowels Game in a String",
        "titleSlug": "vowels-game-in-a-string",
        "infer_hints": [
            "Can we use a dynamic programming approach?",
            "Use dynamic programming to solve this problem.",
            "The game can be simplified by finding the number of subsequences of s with even number of vowels.",
            "Let's try to solve this problem using dynamic programming.",
            "Try to solve the problem with dynamic programming.",
            "Can you dp on the count of vowels?",
            "Use dynamic programming to calculate the number of vowels in the prefix of the string for every prefix of the string.",
            "Use dynamic programming to keep track of the number of vowels in each prefix of the string.",
            "If there are two substrings of the same number of vowels, who will remove it?",
            "Use dynamic programming.",
            "How many substrings of the string contain an even number of vowels?",
            "What happens if you take all prefixes of the string?",
            "Consider each substring and count the number of vowels in it.",
            "Consider the count of vowels in the string.",
            "Let's try to think about the dynamic programming approach.",
            "Can you precompute how many vowels each substring contains?",
            "Can you build a DP transition?",
            "You can use a DP approach to solve this problem.",
            "Use dynamic programming.",
            "What is the relation between the number of vowels in a substring and the parity of the number of vowels?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfAlternatingGroups(int[] colors) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfAlternatingGroups(self, colors):\n        \"\"\"\n        :type colors: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfAlternatingGroups(int* colors, int colorsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfAlternatingGroups(int[] colors) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} colors\n * @return {number}\n */\nvar numberOfAlternatingGroups = function(colors) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfAlternatingGroups(colors: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @return Integer\n     */\n    function numberOfAlternatingGroups($colors) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfAlternatingGroups(_ colors: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfAlternatingGroups(colors: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfAlternatingGroups(List<int> colors) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfAlternatingGroups(colors []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} colors\n# @return {Integer}\ndef number_of_alternating_groups(colors)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfAlternatingGroups(colors: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_alternating_groups(colors: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-alternating-groups colors)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_alternating_groups(Colors :: [integer()]) -> integer().\nnumber_of_alternating_groups(Colors) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_alternating_groups(colors :: [integer]) :: integer\n  def number_of_alternating_groups(colors) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is a circle of red and blue tiles. You are given an array of integers <code>colors</code>. The color of tile <code>i</code> is represented by <code>colors[i]</code>:</p>\n\n<ul>\n\t<li><code>colors[i] == 0</code> means that tile <code>i</code> is <strong>red</strong>.</li>\n\t<li><code>colors[i] == 1</code> means that tile <code>i</code> is <strong>blue</strong>.</li>\n</ul>\n\n<p>Every 3 contiguous tiles in the circle with <strong>alternating</strong> colors (the middle tile has a different color from its <strong>left</strong> and <strong>right</strong> tiles) is called an <strong>alternating</strong> group.</p>\n\n<p>Return the number of <strong>alternating</strong> groups.</p>\n\n<p><strong>Note</strong> that since <code>colors</code> represents a <strong>circle</strong>, the <strong>first</strong> and the <strong>last</strong> tiles are considered to be next to each other.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">colors = [1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-53-171.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">colors = [0,1,0,0,1]</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-47-491.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p>Alternating groups:</p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-50-441.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-48-211.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-49-351.png\" style=\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= colors.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= colors[i] &lt;= 1</code></li>\n</ul>\n",
        "exampleTestcases": "[1,1,1]\n[0,1,0,0,1]",
        "formTitle": "[3206]Alternating Groups I",
        "frequency": 0.0,
        "frontendQuestionId": "3206",
        "hints": [
            "For each tile, check that the previous and the next tile have different colors from that tile or not."
        ],
        "level": 1,
        "metaData": {
            "name": "numberOfAlternatingGroups",
            "params": [
                {
                    "name": "colors",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3463",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,1,1]",
        "title": "Alternating Groups I",
        "titleSlug": "alternating-groups-i",
        "infer_hints": [
            "If we can find all groups of 3 tiles, we can just count them.",
            "Try to calculate the number of alternating groups with a prefix.",
            "If the current group is alternating, add one to the result.",
            "The group with the most consecutive alternating elements is the one you want.",
            "The only tricky part is handling the wrap around of the array.",
            "Use the prefix sum array to check the condition for each subarray.",
            "For every two tiles that are not the same, you can count an alternating group.",
            "You can keep track of the previous color and if it's the same as the current color, then it's not an alternating group.",
            "Find the length of the longest subarray that satisfies the condition.",
            "We can use a two-pointer approach where one pointer moves forward to find the next red tile, and the other pointer moves backward to find the next blue tile.",
            "Can we do this in one pass?",
            "Loop through the colors array and count the number of alternating groups.",
            "Use two pointers, one for each color.",
            "You can simulate the process of changing the color.",
            "Consider each consecutive group of 3 tiles.  You can check whether the first 2 are the same color as the first tile.  If they are, then you can check the third one too.  If not, you can check the first and third tiles.",
            "Consider each tile as a group, then the problem is to count the number of groups where all the tiles have the same color.",
            "Iterate over the array.",
            "How many groups are there in a row?",
            "We need to count the number of alternating groups.  We can do this by counting the number of times we change color.",
            "If the current color is the same as the previous one, you've encountered an alternating group."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumTotalCost(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumTotalCost(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumTotalCost(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumTotalCost(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumTotalCost(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumTotalCost(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumTotalCost = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumTotalCost(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumTotalCost($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumTotalCost(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumTotalCost(nums: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumTotalCost(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumTotalCost(nums []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_total_cost(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumTotalCost(nums: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_total_cost(nums: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-total-cost nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_total_cost(Nums :: [integer()]) -> integer().\nmaximum_total_cost(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_total_cost(nums :: [integer]) :: integer\n  def maximum_total_cost(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> with length <code>n</code>.</p>\n\n<p>The <strong>cost</strong> of a <span data-keyword=\"subarray-nonempty\">subarray</span> <code>nums[l..r]</code>, where <code>0 &lt;= l &lt;= r &lt; n</code>, is defined as:</p>\n\n<p><code>cost(l, r) = nums[l] - nums[l + 1] + ... + nums[r] * (&minus;1)<sup>r &minus; l</sup></code></p>\n\n<p>Your task is to <strong>split</strong> <code>nums</code> into subarrays such that the <strong>total</strong> <strong>cost</strong> of the subarrays is <strong>maximized</strong>, ensuring each element belongs to <strong>exactly one</strong> subarray.</p>\n\n<p>Formally, if <code>nums</code> is split into <code>k</code> subarrays, where <code>k &gt; 1</code>, at indices <code>i<sub>1</sub>, i<sub>2</sub>, ..., i<sub>k &minus; 1</sub></code>, where <code>0 &lt;= i<sub>1</sub> &lt; i<sub>2</sub> &lt; ... &lt; i<sub>k - 1</sub> &lt; n - 1</code>, then the total cost will be:</p>\n\n<p><code>cost(0, i<sub>1</sub>) + cost(i<sub>1</sub> + 1, i<sub>2</sub>) + ... + cost(i<sub>k &minus; 1</sub> + 1, n &minus; 1)</code></p>\n\n<p>Return an integer denoting the <em>maximum total cost</em> of the subarrays after splitting the array optimally.</p>\n\n<p><strong>Note:</strong> If <code>nums</code> is not split into subarrays, i.e. <code>k = 1</code>, the total cost is simply <code>cost(0, n - 1)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,-2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>One way to maximize the total cost is by splitting <code>[1, -2, 3, 4]</code> into subarrays <code>[1, -2, 3]</code> and <code>[4]</code>. The total cost will be <code>(1 + 2 + 3) + 4 = 10</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,-1,1,-1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>One way to maximize the total cost is by splitting <code>[1, -1, 1, -1]</code> into subarrays <code>[1, -1]</code> and <code>[1, -1]</code>. The total cost will be <code>(1 + 1) + (1 + 1) = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0]</span></p>\n\n<p><strong>Output:</strong> 0</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We cannot split the array further, so the answer is 0.</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,-1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Selecting the whole array gives a total cost of <code>1 + 1 = 2</code>, which is the maximum.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,-2,3,4]\n[1,-1,1,-1]\n[0]\n[1,-1]",
        "formTitle": "[3196]Maximize Total Cost of Alternating Subarrays",
        "frequency": 0.0,
        "frontendQuestionId": "3196",
        "hints": [
            "The problem can be solved using dynamic programming.",
            "Since we can always start a new subarray, the problem is the same as selecting some elements in the array and flipping their signs to negative to maximize the sum. However, we cannot flip the signs of 2 consecutive elements, and the first element in the array cannot be negative.",
            "Let <code>dp[i][0/1]</code> be the largest sum we can get for prefix <code>nums[0..i]</code>, where <code>dp[i][0]</code> is the maximum if the <code>i<sup>th</sup></code> element wasn't flipped, and <code>dp[i][1]</code> is the maximum if the <code>i<sup>th</sup></code> element was flipped.",
            "Based on the restriction:<br />\r\n<code>dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + nums[i]</code><br />\r\n<code>dp[i][1] = dp[i - 1][0] - nums[i]</code>",
            "The initial state is:<br />\r\n<code>dp[1][0] = nums[0] + nums[1]</code><br />\r\n<code>dp[1][1] = nums[0] - nums[1]</code><br />\r\nand the answer is <code>max(dp[n - 1][0], dp[n - 1][1])</code>.",
            "Can you optimize the space complexity?"
        ],
        "level": 2,
        "metaData": {
            "name": "maximumTotalCost",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3464",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,-2,3,4]",
        "title": "Maximize Total Cost of Alternating Subarrays",
        "titleSlug": "maximize-total-cost-of-alternating-subarrays",
        "infer_hints": [
            "Consider the prefix sum array of nums.",
            "For each index, you can choose to split the array at that index or not.",
            "We can split the array into two subarrays at some index, and we will get two subproblems.",
            "Think of the problem in the context of a prefix sum.",
            "What if we try to split the array at each index?",
            "Do dynamic programming with the dp[i][j] as the maximum total cost of splitting the array up to index i into j subarrays.",
            "Think about how to calculate the cost of splitting an array into two parts.",
            "Consider each element in the array as a segment.",
            "Use dynamic programming to store the cost of splitting the array up to a certain index.",
            "Do a prefix sum.",
            "Consider a prefix sum and a suffix sum.",
            "The optimal answer can be found by considering the sum of all elements and the sum of the elements that can be placed in the first subarray.",
            "For every position, if we decide to take it in the left subarray, we will pay the sum of all numbers up to that position in the left subarray, and the sum of all numbers from that position to the end in the right subarray.",
            "How can we use the prefix sum to optimize the process?",
            "Use dynamic programming to solve the problem.",
            "Calculate the prefix and suffix sum.",
            "Try to find the best partition of the array.",
            "The prefix sum array and the suffix sum array of the array nums can be calculated.",
            "Try to split the array into subarrays such that the total cost is maximized.",
            "Consider the array as an alternating subarray."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long countSubarrays(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long CountSubarrays(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countSubarrays = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countSubarrays(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countSubarrays($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countSubarrays(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countSubarrays(nums: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countSubarrays(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countSubarrays(nums []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_subarrays(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countSubarrays(nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_subarrays(nums: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-subarrays nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_subarrays(Nums :: [integer()], K :: integer()) -> integer().\ncount_subarrays(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_subarrays(nums :: [integer], k :: integer) :: integer\n  def count_subarrays(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return the number of <span data-keyword=\"subarray-nonempty\">subarrays</span> of <code>nums</code> where the bitwise <code>AND</code> of the elements of the subarray equals <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,1,1], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All subarrays contain only 1&#39;s.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,1,2], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Subarrays having an <code>AND</code> value of 1 are: <code>[<u><strong>1</strong></u>,1,2]</code>, <code>[1,<u><strong>1</strong></u>,2]</code>, <code>[<u><strong>1,1</strong></u>,2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Subarrays having an <code>AND</code> value of 2 are: <code>[1,<b><u>2</u></b>,3]</code>, <code>[1,<u><strong>2,3</strong></u>]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,1,1]\n1\n[1,1,2]\n1\n[1,2,3]\n2",
        "formTitle": "[3209]Number of Subarrays With AND Value of K",
        "frequency": 0.0,
        "frontendQuestionId": "3209",
        "hints": [
            "Let鈥檚 say we want to count the number of pairs <code>(l, r)</code> such that <code>nums[l] & nums[l + 1] & 鈥� & nums[r] == k</code>.",
            "Fix the left index <code>l</code>.",
            "Note that if you increase <code>r</code> for a fixed <code>l</code>, then the AND value of the subarray either decreases or remains unchanged.",
            "Therefore, consider using binary search.",
            "To calculate the AND value of a subarray, use sparse tables."
        ],
        "level": 3,
        "metaData": {
            "name": "countSubarrays",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3466",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,1,1]\n1",
        "title": "Number of Subarrays With AND Value of K",
        "titleSlug": "number-of-subarrays-with-and-value-of-k",
        "infer_hints": [
            "We can count the number of subarrays with AND equal to k for each bit separately.",
            "How many subarrays have AND equal to X?",
            "Use a prefix AND of each number and store it in a list.",
            "Try to find the subarrays which have AND equals to K.",
            "For each number, find out how many subarrays that end at that number.",
            "Can we count the number of subarrays for each bit?",
            "Consider all the subarrays.  We can precalculate the number of subarrays ending with each bit of k.",
            "For every bit in the bitwise AND of a subarray, we can count how many subarrays have that bit set and how many have it unset.",
            "Use prefix AND of each element.",
            "Let's find the count of subarrays with AND equal to 0,1,2,...2^32-1.",
            "Use dynamic programming.",
            "Use a bitwise AND operation to compute the bitwise AND of all elements in the subarray.",
            "We can use prefix AND to solve this problem.",
            "We need to find the number of subarrays that have AND of all elements equal to K.",
            "The subarray needs to end at this index.  We can keep track of the number of valid subarrays for each value of AND operation with the prefix of the current index.",
            "Consider a prefix array P, where P[i] is the bitwise AND of all the numbers up to index i.",
            "Think of each bit of the number as a state in a state machine.",
            "The subarray must have AND equal to k.",
            "If we fix the right boundary, how many subarrays are there?",
            "Use a dynamic programming to solve this problem."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string getEncryptedString(string s, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String getEncryptedString(String s, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def getEncryptedString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def getEncryptedString(self, s: str, k: int) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* getEncryptedString(char* s, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string GetEncryptedString(string s, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar getEncryptedString = function(s, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function getEncryptedString(s: string, k: number): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function getEncryptedString($s, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func getEncryptedString(_ s: String, _ k: Int) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun getEncryptedString(s: String, k: Int): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String getEncryptedString(String s, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func getEncryptedString(s string, k int) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef get_encrypted_string(s, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def getEncryptedString(s: String, k: Int): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn get_encrypted_string(s: String, k: i32) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (get-encrypted-string s k)\n  (-> string? exact-integer? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec get_encrypted_string(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nget_encrypted_string(S, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec get_encrypted_string(s :: String.t, k :: integer) :: String.t\n  def get_encrypted_string(s, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>. Encrypt the string using the following algorithm:</p>\n\n<ul>\n\t<li>For each character <code>c</code> in <code>s</code>, replace <code>c</code> with the <code>k<sup>th</sup></code> character after <code>c</code> in the string (in a cyclic manner).</li>\n</ul>\n\n<p>Return the <em>encrypted string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;dart&quot;, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;tdar&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>For <code>i = 0</code>, the 3<sup>rd</sup> character after <code>&#39;d&#39;</code> is <code>&#39;t&#39;</code>.</li>\n\t<li>For <code>i = 1</code>, the 3<sup>rd</sup> character after <code>&#39;a&#39;</code> is <code>&#39;d&#39;</code>.</li>\n\t<li>For <code>i = 2</code>, the 3<sup>rd</sup> character after <code>&#39;r&#39;</code> is <code>&#39;a&#39;</code>.</li>\n\t<li>For <code>i = 3</code>, the 3<sup>rd</sup> character after <code>&#39;t&#39;</code> is <code>&#39;r&#39;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;aaa&quot;, k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;aaa&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>As all the characters are the same, the encrypted string will also be the same.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"dart\"\n3\n\"aaa\"\n1",
        "formTitle": "[3210]Find the Encrypted String",
        "frequency": 0.0,
        "frontendQuestionId": "3210",
        "hints": [
            "Make a new string such that for each character in <code>s</code>, character <code>i</code> will correspond to <code>(i + k) % n</code> character in the original string."
        ],
        "level": 1,
        "metaData": {
            "name": "getEncryptedString",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3468",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"dart\"\n3",
        "title": "Find the Encrypted String",
        "titleSlug": "find-the-encrypted-string",
        "infer_hints": [
            "Convert the characters to their ASCII values.",
            "For each character in the string, find the <code>k<sup>th</sup></code> character after it.",
            "How about a rotation of the alphabet?",
            "Use a map to store the cyclic shift for each character.",
            "Can you find the answer for one character?",
            "You can use a hashmap to store the mapping from character to the next character.",
            "Convert each character to its corresponding ASCII value.",
            "Create a mapping of each character to the character it maps to.",
            "Try to find a pattern in the problem.",
            "Create a map to keep track of the character to its new position.",
            "How about using the ASCII value of each character and converting it back to a character?",
            "How can we handle the cyclic nature of the string?",
            "Use modulo operation to rotate the string.",
            "Can you encrypt a string in one pass?",
            "Use a stack or queue to keep track of the characters.",
            "Try to encrypt each character one by one.",
            "How to calculate the position of the k-th character?",
            "If the string is of length 1, return it.",
            "The result is the same as shifting the string by <code>k</code> places to the right.",
            "What is the relationship between the ASCII values of the characters?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxHeightOfTriangle(int red, int blue) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxHeightOfTriangle(int red, int blue) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxHeightOfTriangle(self, red, blue):\n        \"\"\"\n        :type red: int\n        :type blue: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxHeightOfTriangle(self, red: int, blue: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxHeightOfTriangle(int red, int blue) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxHeightOfTriangle(int red, int blue) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} red\n * @param {number} blue\n * @return {number}\n */\nvar maxHeightOfTriangle = function(red, blue) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxHeightOfTriangle(red: number, blue: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $red\n     * @param Integer $blue\n     * @return Integer\n     */\n    function maxHeightOfTriangle($red, $blue) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxHeightOfTriangle(_ red: Int, _ blue: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxHeightOfTriangle(red: Int, blue: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxHeightOfTriangle(int red, int blue) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxHeightOfTriangle(red int, blue int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} red\n# @param {Integer} blue\n# @return {Integer}\ndef max_height_of_triangle(red, blue)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxHeightOfTriangle(red: Int, blue: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_height_of_triangle(red: i32, blue: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-height-of-triangle red blue)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_height_of_triangle(Red :: integer(), Blue :: integer()) -> integer().\nmax_height_of_triangle(Red, Blue) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_height_of_triangle(red :: integer, blue :: integer) :: integer\n  def max_height_of_triangle(red, blue) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two integers <code>red</code> and <code>blue</code> representing the count of red and blue colored balls. You have to arrange these balls to form a triangle such that the 1<sup>st</sup> row will have 1 ball, the 2<sup>nd</sup> row will have 2 balls, the 3<sup>rd</sup> row will have 3 balls, and so on.</p>\n\n<p>All the balls in a particular row should be the <strong>same</strong> color, and adjacent rows should have <strong>different</strong> colors.</p>\n\n<p>Return the <strong>maximum</strong><em> height of the triangle</em> that can be achieved.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">red = 2, blue = 4</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/16/brb.png\" style=\"width: 300px; height: 240px; padding: 10px;\" /></p>\n\n<p>The only possible arrangement is shown above.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">red = 2, blue = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/16/br.png\" style=\"width: 150px; height: 135px; padding: 10px;\" /><br />\nThe only possible arrangement is shown above.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">red = 1, blue = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">red = 10, blue = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/16/br.png\" style=\"width: 150px; height: 135px; padding: 10px;\" /><br />\nThe only possible arrangement is shown above.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= red, blue &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "2\n4\n2\n1\n1\n1\n10\n1",
        "formTitle": "[3200]Maximum Height of a Triangle",
        "frequency": 0.0,
        "frontendQuestionId": "3200",
        "hints": [
            "Count the max height using both possibilities. That is, red ball as top and blue ball as top.",
            "For counting the max height, use a simple for loop and remove the number of balls required at this level."
        ],
        "level": 1,
        "metaData": {
            "name": "maxHeightOfTriangle",
            "params": [
                {
                    "name": "red",
                    "type": "integer"
                },
                {
                    "name": "blue",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3469",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "2\n4",
        "title": "Maximum Height of a Triangle",
        "titleSlug": "maximum-height-of-a-triangle",
        "infer_hints": [
            "The triangle's height will be the maximum of red and blue balls.",
            "Use dynamic programming.  How can you use the previous rows to calculate the current row?",
            "Use dynamic programming.",
            "This problem is a version of the well-known problem of finding the maximum number of segments that can be made with given lengths.",
            "If you have one color, you can always add one row of that color.  What if you have two colors?",
            "This is a DP problem.  Can you use dynamic programming to solve this?",
            "Think of the triangle as a graph, where the height of the triangle is the distance from the bottom-left cell to the bottom-right cell.",
            "Since you need to keep track of the previous row, what data structure can you use?",
            "What are the possible colors for each cell in the triangle?  You can't have 3 red cells in a row or 3 blue cells in a row.  What if you tried to maximize the number of reds and blues in the triangle?",
            "For each row, we can place a red or blue ball, so there are 2^n possibilities.",
            "We can try to solve this problem with dynamic programming.  We can use a 2D array dp where dp[i][j] is the maximum height of a triangle that ends with a row of length i and j balls of the same color.",
            "You can use the formula 2 * (row - 1) for the maximum height of the triangle.",
            "This problem can be solved using dynamic programming.",
            "Can you calculate the maximum possible height of a triangle if we only have 1 color of balls?",
            "What happens if you always select the color with the most balls?",
            "How many balls of the same color are there in the triangle?",
            "Try all possibilities of the colors for each row.",
            "How many balls are there in the ith row?",
            "Try all possible combinations of the red and blue balls.",
            "For each height, we can try to add a red or a blue ball."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumScore(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumScore(int[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumScore(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumScore(self, grid: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumScore(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumScore(int[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maximumScore = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumScore(grid: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maximumScore($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumScore(_ grid: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumScore(grid: Array<IntArray>): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumScore(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumScore(grid [][]int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef maximum_score(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumScore(grid: Array[Array[Int]]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_score(grid: Vec<Vec<i32>>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-score grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_score(Grid :: [[integer()]]) -> integer().\nmaximum_score(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_score(grid :: [[integer]]) :: integer\n  def maximum_score(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D matrix <code>grid</code> of size <code>n x n</code>. Initially, all cells of the grid are colored white. In one operation, you can select any cell of indices <code>(i, j)</code>, and color black all the cells of the <code>j<sup>th</sup></code> column starting from the top row down to the <code>i<sup>th</sup></code> row.</p>\n\n<p>The grid score is the sum of all <code>grid[i][j]</code> such that cell <code>(i, j)</code> is white and it has a horizontally adjacent black cell.</p>\n\n<p>Return the <strong>maximum</strong> score that can be achieved after some number of operations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,0,0,0,0],[0,0,3,0,0],[0,1,0,0,0],[5,0,0,3,0],[0,0,0,0,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">11</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/11/one.png\" style=\"width: 300px; height: 200px;\" />\n<p>In the first operation, we color all cells in column 1 down to row 3, and in the second operation, we color all cells in column 4 down to the last row. The score of the resulting grid is <code>grid[3][0] + grid[1][2] + grid[3][3]</code> which is equal to 11.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[10,9,0,0,15],[7,1,0,8,0],[5,20,0,11,0],[0,0,0,1,2],[8,12,1,10,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">94</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/11/two-1.png\" style=\"width: 300px; height: 200px;\" />\n<p>We perform operations on 1, 2, and 3 down to rows 1, 4, and 0, respectively. The score of the resulting grid is <code>grid[0][0] + grid[1][0] + grid[2][1] + grid[4][1] + grid[1][3] + grid[2][3] + grid[3][3] + grid[4][3] + grid[0][4]</code> which is equal to 94.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;n == grid.length &lt;= 100</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[[0,0,0,0,0],[0,0,3,0,0],[0,1,0,0,0],[5,0,0,3,0],[0,0,0,0,2]]\n[[10,9,0,0,15],[7,1,0,8,0],[5,20,0,11,0],[0,0,0,1,2],[8,12,1,10,3]]",
        "formTitle": "[3225]Maximum Score From Grid Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3225",
        "hints": [
            "Use dynamic programming.",
            "Solve the problem in O(N^4) using a 3-states dp.",
            "Let <code>dp[i][lastHeight][beforeLastHeight]</code> denote the maximum score if the grid was limited to column <code>i</code>, and the height of column <code>i - 1</code> is <code>lastHeight</code> and the height of column <code>i - 2</code> is <code>beforeLastHeight</code>.",
            "The third state, <code>beforeLastHeight</code>, is used to determine which values of column <code>i - 1</code> will be added to the score.  We can replace this state with another state that only takes two values 0 or 1.",
            "Let <code>dp[i][lastHeight][isBigger]</code> denote the maximum score if the grid was limited to column <code>i</code>, and where the height of column <code>i - 1</code> is <code>lastHeight</code>. Additionally, if <code>isBigger == 1</code>, the number of black cells in column <code>i</code> is assumed to be larger than the number of black cells in column <code>i - 2</code>, and vice versa. Note that if our assumption is wrong, it would lead to a suboptimal score and, therefore, it would not be considered as the final answer."
        ],
        "level": 3,
        "metaData": {
            "name": "maximumScore",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3470",
        "similarQuestions": [
            "[{\"title\": \"Maximum Difference Score in a Grid\", \"titleSlug\": \"maximum-difference-score-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u77e9\\u9635\\u4e2d\\u7684\\u6700\\u5927\\u5f97\\u5206\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[[0,0,0,0,0],[0,0,3,0,0],[0,1,0,0,0],[5,0,0,3,0],[0,0,0,0,2]]",
        "title": "Maximum Score From Grid Operations",
        "titleSlug": "maximum-score-from-grid-operations",
        "infer_hints": [
            "What if we sort the rows and columns in ascending order?",
            "Use a binary search to find the optimal number of operations.",
            "The score can be maximized by adding the largest possible numbers first.",
            "Can we use prefix sum?",
            "You can solve this problem by keeping track of the maximum score you can get by coloring a certain row.",
            "For each column, we can try to choose a row to color black and then calculate the score.",
            "If we want to maximize the score, we need to minimize the sum of all white cells in the column after each operation.",
            "We can color the cells of the j-th column in one operation. Then, the score of the resulting grid is the sum of the values of the cells that were white before the operation and now have a black cell on their left.",
            "Consider prefix and suffix sums for each row and column.",
            "For each row, if the number of white cells in it is greater than the number of black cells, flip the row to get a better score.",
            "How can we make sure we color the minimum number of cells?",
            "Consider each column as a separate 1D array.",
            "Can you use a priority queue to store the cells to be processed?",
            "Try to use the observation of the problem to solve it in linear time.",
            "Sort the row sums and the column sums.",
            "Try to simulate the operations in a way that allows you to keep track of the score at each step.",
            "For each column, we can calculate the sum of all the rows that are above and below black rows, separately.",
            "Try all possible column operation orderings and store the maximum score.",
            "For each column, find the smallest row to start with.",
            "What happens when you color the cells in column 1?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    double minimumAverage(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public double minimumAverage(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumAverage(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: float\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumAverage(self, nums: List[int]) -> float:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "double minimumAverage(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public double MinimumAverage(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumAverage = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumAverage(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Float\n     */\n    function minimumAverage($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumAverage(_ nums: [Int]) -> Double {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumAverage(nums: IntArray): Double {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  double minimumAverage(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumAverage(nums []int) float64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Float}\ndef minimum_average(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumAverage(nums: Array[Int]): Double = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_average(nums: Vec<i32>) -> f64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-average nums)\n  (-> (listof exact-integer?) flonum?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_average(Nums :: [integer()]) -> float().\nminimum_average(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_average(nums :: [integer]) :: float\n  def minimum_average(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You have an array of floating point numbers <code>averages</code> which is initially empty. You are given an array <code>nums</code> of <code>n</code> integers where <code>n</code> is even.</p>\n\n<p>You repeat the following procedure <code>n / 2</code> times:</p>\n\n<ul>\n\t<li>Remove the <strong>smallest</strong> element, <code>minElement</code>, and the <strong>largest</strong> element <code>maxElement</code>,&nbsp;from <code>nums</code>.</li>\n\t<li>Add <code>(minElement + maxElement) / 2</code> to <code>averages</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> element in <code>averages</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [7,8,3,4,15,13,4,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5.5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>step</th>\n\t\t\t<th>nums</th>\n\t\t\t<th>averages</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>[7,8,3,4,15,13,4,1]</td>\n\t\t\t<td>[]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>[7,8,3,4,13,4]</td>\n\t\t\t<td>[8]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>[7,8,4,4]</td>\n\t\t\t<td>[8,8]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>[7,4]</td>\n\t\t\t<td>[8,8,6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>[]</td>\n\t\t\t<td>[8,8,6,5.5]</td>\n\t\t</tr>\n\t</tbody>\n</table>\nThe smallest element of averages, 5.5, is returned.</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,9,8,3,10,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5.5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>step</th>\n\t\t\t<th>nums</th>\n\t\t\t<th>averages</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td><span class=\"example-io\">[1,9,8,3,10,5]</span></td>\n\t\t\t<td>[]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td><span class=\"example-io\">[9,8,3,5]</span></td>\n\t\t\t<td>[5.5]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td><span class=\"example-io\">[8,5]</span></td>\n\t\t\t<td>[5.5,6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>[]</td>\n\t\t\t<td>[5.5,6,6.5]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,7,8,9]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5.0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>step</th>\n\t\t\t<th>nums</th>\n\t\t\t<th>averages</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td><span class=\"example-io\">[1,2,3,7,8,9]</span></td>\n\t\t\t<td>[]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td><span class=\"example-io\">[2,3,7,8]</span></td>\n\t\t\t<td>[5]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td><span class=\"example-io\">[3,7]</span></td>\n\t\t\t<td>[5,5]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td><span class=\"example-io\">[]</span></td>\n\t\t\t<td>[5,5,5]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 50</code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
        "exampleTestcases": "[7,8,3,4,15,13,4,1]\n[1,9,8,3,10,5]\n[1,2,3,7,8,9]",
        "formTitle": "[3194]Minimum Average of Smallest and Largest Elements",
        "frequency": 0.0,
        "frontendQuestionId": "3194",
        "hints": [
            "If <code>nums</code> is sorted, then the elements of <code>averages</code> are <code>(nums[i] + nums[n - i - 1]) / 2</code>  for all <code>i < n / 2</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "minimumAverage",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3471",
        "similarQuestions": [
            "[{\"title\": \"Number of Distinct Averages\", \"titleSlug\": \"number-of-distinct-averages\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u4e0d\\u540c\\u7684\\u5e73\\u5747\\u503c\\u6570\\u76ee\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[7,8,3,4,15,13,4,1]",
        "title": "Minimum Average of Smallest and Largest Elements",
        "titleSlug": "minimum-average-of-smallest-and-largest-elements",
        "infer_hints": [
            "We can use a priority queue to keep track of the smallest and largest elements.",
            "Sort the array first.",
            "How can you ensure that the minimum average is minimized?",
            "For each step, you can remove the smallest and largest element, and add the average of the two elements to the list.",
            "Can we use sorting to make this easier?",
            "How to remove smallest and largest elements from an array?",
            "Sort the array and remove the smallest and largest element at each step.",
            "Sort the array.",
            "How about sorting the array first and then finding the average of the smallest and largest element?",
            "Try to optimize your algorithm.  There are two steps to this problem.  First, sort the array.  Then, calculate the minimum average of the smallest and largest elements for each prefix of the array.",
            "What if we add the smallest element to the largest one?",
            "What is the minimum possible average of two numbers?",
            "Sort the array.",
            "Sort the array first.",
            "Try sorting the array.",
            "We can sort the array in increasing order and use a queue.",
            "The answer will be between the smallest and the largest elements.",
            "What is the smallest possible average of two numbers?",
            "Sort the array and add the minimum and maximum elements alternately.",
            "Keep track of the smallest and largest elements in each step."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOperations(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperations(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOperations(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOperations(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minOperations = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperations(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minOperations($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperations(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperations(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperations(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperations(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_operations(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperations(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations(Nums :: [integer()]) -> integer().\nmin_operations(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer]) :: integer\n  def min_operations(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <span data-keyword=\"binary-array\">binary array</span> <code>nums</code>.</p>\n\n<p>You can do the following operation on the array <strong>any</strong> number of times (possibly zero):</p>\n\n<ul>\n\t<li>Choose <strong>any</strong> 3 <strong>consecutive</strong> elements from the array and <strong>flip</strong> <strong>all</strong> of them.</li>\n</ul>\n\n<p><strong>Flipping</strong> an element means changing its value from 0 to 1, and from 1 to 0.</p>\n\n<p>Return the <strong>minimum</strong> number of operations required to make all elements in <code>nums</code> equal to 1. If it is impossible, return -1.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,1,1,1,0,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong><br />\nWe can do the following operations:</p>\n\n<ul>\n\t<li>Choose the elements at indices 0, 1 and 2. The resulting array is <code>nums = [<u><strong>1</strong></u>,<u><strong>0</strong></u>,<u><strong>0</strong></u>,1,0,0]</code>.</li>\n\t<li>Choose the elements at indices 1, 2 and 3. The resulting array is <code>nums = [1,<u><strong>1</strong></u>,<u><strong>1</strong></u>,<strong><u>0</u></strong>,0,0]</code>.</li>\n\t<li>Choose the elements at indices 3, 4 and 5. The resulting array is <code>nums = [1,1,1,<strong><u>1</u></strong>,<u><strong>1</strong></u>,<u><strong>1</strong></u>]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong><br />\nIt is impossible to make all elements equal to 1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1</code></li>\n</ul>\n",
        "exampleTestcases": "[0,1,1,1,0,0]\n[0,1,1,1]",
        "formTitle": "[3191]Minimum Operations to Make Binary Array Elements Equal to One I",
        "frequency": 0.0,
        "frontendQuestionId": "3191",
        "hints": [
            "If <code>nums[0]</code> is 0, then the only way to change it to 1 is by doing an operation on the first 3 elements of the array.",
            "After Changing <code>nums[0]</code> to 1, use the same logic on the remaining array."
        ],
        "level": 2,
        "metaData": {
            "name": "minOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3475",
        "similarQuestions": [
            "[{\"title\": \"Minimum Number of K Consecutive Bit Flips\", \"titleSlug\": \"minimum-number-of-k-consecutive-bit-flips\", \"difficulty\": \"Hard\", \"translatedTitle\": \"K \\u8fde\\u7eed\\u4f4d\\u7684\\u6700\\u5c0f\\u7ffb\\u8f6c\\u6b21\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[0,1,1,1,0,0]",
        "title": "Minimum Operations to Make Binary Array Elements Equal to One I",
        "titleSlug": "minimum-operations-to-make-binary-array-elements-equal-to-one-i",
        "infer_hints": [
            "For each subarray, the cost to flip it to 1 is either 0, 1, or 2.",
            "Use dynamic programming.",
            "You can do all operations in one pass.",
            "If it is impossible to make all elements equal to 1, what would be the result if we have an array of 0's and 1's?",
            "The answer will be 0 if all elements are 1.  Now, let's see how we can flip the array elements to have all the 1's.",
            "We can count the number of 0's and 1's.  If there are more 1's, we can do the flip operations.  Otherwise, we can flip 0's to 1's.",
            "Consider flipping only two consecutive ones, instead of three.",
            "Use the fact that we only need to flip 0s to 1s.",
            "How many flips are needed to convert all elements in the array to 0 or 1?",
            "The operation of flipping a sequence of three consecutive elements can be performed in two ways.",
            "For each group of 3 consecutive elements, there are 2 possible states they can transform to.",
            "If the array is of the form [0, 0, 0, 1, 1, 1, 0, 0, 0], what is the answer?",
            "Consider the first 3 operations separately. What do you observe?",
            "We can only flip 0s to 1s and 1s to 0s. So, if the current bit is 0, we flip it and the next two bits. If it's already 1, we do nothing and the next two bits.",
            "For each position, there are 3 possibilities: 000, 001, 010, 100, 011, 101, 110, 111.  If we can make it 1, we can only choose 100 or 011 or 110.",
            "Consider the case where the 0s and 1s are separate.",
            "What is the smallest number of operations needed to flip a 0 to 1?",
            "For every three consecutive elements, there are only three possibilities. Think of the three elements as three separate blocks.",
            "The array consists of 0s and 1s.  What is the minimum number of operations to make all the elements equal?",
            "We can perform a single operation on the entire array."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumOperations(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumOperations(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumOperations(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumOperations(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumOperations = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumOperations(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumOperations($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumOperations(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumOperations(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumOperations(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumOperations(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_operations(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumOperations(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_operations(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_operations(Nums :: [integer()]) -> integer().\nminimum_operations(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_operations(nums :: [integer]) :: integer\n  def minimum_operations(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code>. In one operation, you can add or subtract 1 from <strong>any</strong> element of <code>nums</code>.</p>\n\n<p>Return the <strong>minimum</strong> number of operations to make all elements of <code>nums</code> divisible by 3.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All array elements can be made divisible by 3 using 3 operations:</p>\n\n<ul>\n\t<li>Subtract 1 from 1.</li>\n\t<li>Add 1 to 2.</li>\n\t<li>Subtract 1 from 4.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,6,9]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4]\n[3,6,9]",
        "formTitle": "[3190]Find Minimum Operations to Make All Elements Divisible by Three",
        "frequency": 0.0,
        "frontendQuestionId": "3190",
        "hints": [
            "If <code>x % 3 != 0</code> we can always increment or decrement <code>x</code> such that we only need 1 operation.",
            "Add <code>min(nums[i] % 3, 3 - (num[i] % 3))</code> to the count of operations."
        ],
        "level": 1,
        "metaData": {
            "name": "minimumOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3476",
        "similarQuestions": [
            "[{\"title\": \"Minimum Moves to Equal Array Elements\", \"titleSlug\": \"minimum-moves-to-equal-array-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c0f\\u64cd\\u4f5c\\u6b21\\u6570\\u4f7f\\u6570\\u7ec4\\u5143\\u7d20\\u76f8\\u7b49\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,4]",
        "title": "Find Minimum Operations to Make All Elements Divisible by Three",
        "titleSlug": "find-minimum-operations-to-make-all-elements-divisible-by-three",
        "infer_hints": [
            "We can transform the problem to a state where the sum of the array modulo 3 is 0.",
            "Try to find the total sum of all elements and then find the smallest remainder of the total sum when divided by 3.",
            "What if we only take the remainder of the elements when divided by 3?",
            "How many operations are needed to make all elements in the array divisible by 3?",
            "What is the remainder of the sum modulo 3?",
            "Think about the modulo 3 operation.! Think about the modulo 3 operation.",
            "Think about how you can make an element divisible by 3.",
            "The elements can be divided into three groups: elements divisible by 1, 2, and 3.",
            "Find the sum of the array.",
            "What if the number is divisible by 3?",
            "You can always make all elements divisible by 3 by adding or subtracting 1 to each element.  Now, what is the sum of all elements modulo 3?",
            "The remainder of division of each number by 3 is either 0, 1 or 2.",
            "Use a prefix sum array.  How many operations are needed to make all elements divisible by 3?",
            "Keep track of the total sum of the array modulo 3.",
            "Try to find the sum of all the elements modulo 3.",
            "Think of the problem in terms of remainders.",
            "How many operations do we need to make the number 1?",
            "Think about what a sum of modulo 3 can be.",
            "Try to find a mathematical formula for the answer.",
            "If the sum of the array is not divisible by 3, then we can only delete one element to make the sum divisible by 3."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOperations(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperations(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOperations(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOperations(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minOperations = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperations(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minOperations($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperations(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperations(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperations(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperations(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_operations(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperations(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations(Nums :: [integer()]) -> integer().\nmin_operations(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer]) :: integer\n  def min_operations(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <span data-keyword=\"binary-array\">binary array</span> <code>nums</code>.</p>\n\n<p>You can do the following operation on the array <strong>any</strong> number of times (possibly zero):</p>\n\n<ul>\n\t<li>Choose <strong>any</strong> index <code>i</code> from the array and <strong>flip</strong> <strong>all</strong> the elements from index <code>i</code> to the end of the array.</li>\n</ul>\n\n<p><strong>Flipping</strong> an element means changing its value from 0 to 1, and from 1 to 0.</p>\n\n<p>Return the <strong>minimum</strong> number of operations required to make all elements in <code>nums</code> equal to 1.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,1,1,0,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong><br />\nWe can do the following operations:</p>\n\n<ul>\n\t<li>Choose the index <code>i = 1</code><span class=\"example-io\">. The resulting array will be <code>nums = [0,<u><strong>0</strong></u>,<u><strong>0</strong></u>,<u><strong>1</strong></u>,<u><strong>0</strong></u>]</code>.</span></li>\n\t<li>Choose the index <code>i = 0</code><span class=\"example-io\">. The resulting array will be <code>nums = [<u><strong>1</strong></u>,<u><strong>1</strong></u>,<u><strong>1</strong></u>,<u><strong>0</strong></u>,<u><strong>1</strong></u>]</code>.</span></li>\n\t<li>Choose the index <code>i = 4</code><span class=\"example-io\">. The resulting array will be <code>nums = [1,1,1,0,<u><strong>0</strong></u>]</code>.</span></li>\n\t<li>Choose the index <code>i = 3</code><span class=\"example-io\">. The resulting array will be <code>nums = [1,1,1,<u><strong>1</strong></u>,<u><strong>1</strong></u>]</code>.</span></li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,0,0,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong><br />\nWe can do the following operation:</p>\n\n<ul>\n\t<li>Choose the index <code>i = 1</code><span class=\"example-io\">. The resulting array will be <code>nums = [1,<u><strong>1</strong></u>,<u><strong>1</strong></u>,<u><strong>1</strong></u>]</code>.</span></li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1</code></li>\n</ul>\n",
        "exampleTestcases": "[0,1,1,0,1]\n[1,0,0,0]",
        "formTitle": "[3192]Minimum Operations to Make Binary Array Elements Equal to One II",
        "frequency": 0.0,
        "frontendQuestionId": "3192",
        "hints": [
            "The only way to change <code>nums[0]</code> to 1 is by performing an operation with index <code>i = 0</code>.",
            "Iterate from left to right and perform an operation at each index i where nums[i] is 0, and keep track of how many operations are currently performed on the suffix."
        ],
        "level": 2,
        "metaData": {
            "name": "minOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3477",
        "similarQuestions": [
            "[{\"title\": \"Minimum Suffix Flips\", \"titleSlug\": \"minimum-suffix-flips\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c11\\u7684\\u540e\\u7f00\\u7ffb\\u8f6c\\u6b21\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[0,1,1,0,1]",
        "title": "Minimum Operations to Make Binary Array Elements Equal to One II",
        "titleSlug": "minimum-operations-to-make-binary-array-elements-equal-to-one-ii",
        "infer_hints": [
            "You can consider each flip as a range flip.  How can you use this information to optimize your solution?",
            "Can we use the prefix sum to find the next index that needs to be flipped?",
            "If we flip the subarray [i, j], we can think it as the same as if we flip the subarray [0, j], and then flip the subarray [0, i - 1].",
            "If we can flip all the elements to 0, then the answer is just the number of groups of 1s.  Otherwise, we need to flip a group of 0s to 1s.",
            "We can perform the operation on the whole array or on a prefix of the array.",
            "Think of the operation as a sliding window.",
            "Try to solve this problem with a greedy approach.  Now, you need to find the smallest possible number of operations to make the array become non-increasing.",
            "Can we perform the operation in a greedy manner?",
            "What is the prefix sum of an array?",
            "Find the minimum number of operations required to make the array non-increasing.",
            "The minimum number of operations is either the number of ones or the number of zeros.",
            "If we want all elements to be equal to 1, what will be the cost for each flip?",
            "Find the first 1 in the array.",
            "The minimum number of operations to make all elements equal to one is the minimum number of flips of the binary array.",
            "If we want all elements in the array to be equal to 1, what can we do?",
            "For each element in the array, what are the operations to make it equal to the other element?",
            "Try to solve it with a greedy approach.  Now, we want to minimize the number of flips.  Can you think of some observations that can help us with this?",
            "We can solve this problem by making all the elements equal to the smallest element in the array.",
            "Try to flip the first 1s. If it doesn't work, flip the first 0s.",
            "If we need to flip the first <code>i</code> elements, then we can choose whether to do it or not."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def canReachCorner(self, X, Y, circles):\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :type circles: List[List[int]]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool canReachCorner(int X, int Y, int** circles, int circlesSize, int* circlesColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool CanReachCorner(int X, int Y, int[][] circles) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} X\n * @param {number} Y\n * @param {number[][]} circles\n * @return {boolean}\n */\nvar canReachCorner = function(X, Y, circles) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function canReachCorner(X: number, Y: number, circles: number[][]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $X\n     * @param Integer $Y\n     * @param Integer[][] $circles\n     * @return Boolean\n     */\n    function canReachCorner($X, $Y, $circles) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func canReachCorner(_ X: Int, _ Y: Int, _ circles: [[Int]]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun canReachCorner(X: Int, Y: Int, circles: Array<IntArray>): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool canReachCorner(int X, int Y, List<List<int>> circles) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func canReachCorner(X int, Y int, circles [][]int) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} x\n# @param {Integer} y\n# @param {Integer[][]} circles\n# @return {Boolean}\ndef can_reach_corner(x, y, circles)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def canReachCorner(X: Int, Y: Int, circles: Array[Array[Int]]): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn can_reach_corner(x: i32, y: i32, circles: Vec<Vec<i32>>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (can-reach-corner X Y circles)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec can_reach_corner(X :: integer(), Y :: integer(), Circles :: [[integer()]]) -> boolean().\ncan_reach_corner(X, Y, Circles) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec can_reach_corner(x :: integer, y :: integer, circles :: [[integer]]) :: boolean\n  def can_reach_corner(x, y, circles) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two positive integers <code>X</code> and <code>Y</code>, and a 2D array <code>circles</code>, where <code>circles[i] = [x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub>]</code> denotes a circle with center at <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and radius <code>r<sub>i</sub></code>.</p>\n\n<p>There is a rectangle in the coordinate plane with its bottom left corner at the origin and top right corner at the coordinate <code>(X, Y)</code>. You need to check whether there is a path from the bottom left corner to the top right corner such that the <strong>entire path</strong> lies inside the rectangle, <strong>does not</strong> touch or lie inside <strong>any</strong> circle, and touches the rectangle <strong>only</strong> at the two corners.</p>\n\n<p>Return <code>true</code> if such a path exists, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">X = 3, Y = 4, circles = [[2,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/18/example2circle1.png\" style=\"width: 346px; height: 264px;\" /></p>\n\n<p>The black curve shows a possible path between <code>(0, 0)</code> and <code>(3, 4)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">X = 3, Y = 3, circles = [[1,1,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/18/example1circle.png\" style=\"width: 346px; height: 264px;\" /></p>\n\n<p>No path exists from <code>(0, 0)</code> to <code>(3, 3)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">X = 3, Y = 3, circles = [[2,1,1],[1,2,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/18/example0circle.png\" style=\"width: 346px; height: 264px;\" /></p>\n\n<p>No path exists from <code>(0, 0)</code> to <code>(3, 3)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= X, Y &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= circles.length &lt;= 1000</code></li>\n\t<li><code>circles[i].length == 3</code></li>\n\t<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "3\n4\n[[2,1,1]]\n3\n3\n[[1,1,2]]\n3\n3\n[[2,1,1],[1,2,1]]",
        "formTitle": "[3235]Check if the Rectangle Corner Is Reachable",
        "frequency": 0.0,
        "frontendQuestionId": "3235",
        "hints": [
            "Create a graph with <code>n + 4</code> vertices.",
            "Vertices 0 to <code>n - 1</code> represent the circles, vertex <code>n</code> represents upper edge, vertex <code>n + 1</code> represents right edge, vertex <code>n + 2</code> represents lower edge, and vertex <code>n + 3</code> represents left edge.",
            "Add an edge between these vertices if they intersect or touch.",
            "Answer will be <code>false</code> when any of two sides left-right, left-bottom, right-top or top-bottom are reachable using the edges."
        ],
        "level": 3,
        "metaData": {
            "name": "canReachCorner",
            "params": [
                {
                    "name": "X",
                    "type": "integer"
                },
                {
                    "name": "Y",
                    "type": "integer"
                },
                {
                    "name": "circles",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3478",
        "similarQuestions": [
            "[{\"title\": \"Queries on Number of Points Inside a Circle\", \"titleSlug\": \"queries-on-number-of-points-inside-a-circle\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u4e00\\u4e2a\\u5706\\u4e2d\\u70b9\\u7684\\u6570\\u76ee\", \"isPaidOnly\": false}, {\"title\": \"Check if Point Is Reachable\", \"titleSlug\": \"check-if-point-is-reachable\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5224\\u65ad\\u4e00\\u4e2a\\u70b9\\u662f\\u5426\\u53ef\\u4ee5\\u5230\\u8fbe\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "3\n4\n[[2,1,1]]",
        "title": "Check if the Rectangle Corner Is Reachable",
        "titleSlug": "check-if-the-rectangle-corner-is-reachable",
        "infer_hints": [
            "Think of it as a graph where each cell (x, y) is a node and there is an edge to (x+1, y), (x, y+1) if it's possible to move to it.",
            "Check if the rectangle corner is reachable using Dijkstra's algorithm.",
            "Can you solve this problem with the concept of BFS?",
            "Try to simulate the process.",
            "How many cells are there in the grid?",
            "We can simulate the movement of the rectangle.",
            "Can you use Dijkstra's algorithm?",
            "Can we use Dijkstra's algorithm to solve this problem?",
            "Think about the graph as a graph of 4 nodes (the corners of the rectangle) and each circle as an edge.",
            "If you start from the top left corner, you can only go right or down.  Can you find a solution for the rectangle if you can only go right or down?",
            "You can simulate the process.",
            "What if you use BFS to solve this problem?",
            "The rectangle is like a graph.  How can you check if you can reach the top right corner from the bottom left corner?",
            "Check if the rectangle corners are reachable by circles.",
            "For each point (x, y), check if it lies inside any circle.",
            "The robot can only move in the four cardinal directions.",
            "Use BFS.",
            "Can you use a breadth-first search (BFS) to solve this problem?",
            "We can use BFS to check if we can reach the rectangle corner.",
            "Check if the rectangle corner is reachable by BFS or DFS."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfSubstrings(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfSubstrings(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfSubstrings(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfSubstrings = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfSubstrings(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numberOfSubstrings($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfSubstrings(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfSubstrings(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfSubstrings(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfSubstrings(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef number_of_substrings(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfSubstrings(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_substrings(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-substrings s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_substrings(S :: unicode:unicode_binary()) -> integer().\nnumber_of_substrings(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_substrings(s :: String.t) :: integer\n  def number_of_substrings(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a binary string <code>s</code>.</p>\n\n<p>Return the number of <span data-keyword=\"substring-nonempty\">substrings</span> with <strong>dominant</strong> ones.</p>\n\n<p>A string has <strong>dominant</strong> ones if the number of ones in the string is <strong>greater than or equal to</strong> the <strong>square</strong> of the number of zeros in the string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;00011&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substrings with dominant ones are shown in the table below.</p>\n</div>\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>i</th>\n\t\t\t<th>j</th>\n\t\t\t<th>s[i..j]</th>\n\t\t\t<th>Number of Zeros</th>\n\t\t\t<th>Number of Ones</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>3</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>4</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td>01</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>4</td>\n\t\t\t<td>11</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>4</td>\n\t\t\t<td>011</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;101101&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">16</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substrings with <strong>non-dominant</strong> ones are shown in the table below.</p>\n\n<p>Since there are 21 substrings total and 5 of them have non-dominant ones, it follows that there are 16 substrings with dominant ones.</p>\n</div>\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>i</th>\n\t\t\t<th>j</th>\n\t\t\t<th>s[i..j]</th>\n\t\t\t<th>Number of Zeros</th>\n\t\t\t<th>Number of Ones</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>4</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>4</td>\n\t\t\t<td>0110</td>\n\t\t\t<td>2</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>4</td>\n\t\t\t<td>10110</td>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t\t<td>01101</td>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists only of characters <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>\n</ul>\n",
        "exampleTestcases": "\"00011\"\n\"101101\"",
        "formTitle": "[3234]Count the Number of Substrings With Dominant Ones",
        "frequency": 0.0,
        "frontendQuestionId": "3234",
        "hints": [
            "Let us fix the starting index <code>l</code> of the substring and count the number of indices <code>r</code> such that <code>l <= r</code> and the substring <code>s[l..r]</code> has dominant ones.",
            "A substring with dominant ones has at most <code>sqrt(n)</code> zeros.",
            "We cannot iterate over every <code>r</code> and check if the  <code>s[l..r]</code> has dominant ones. Instead, we iterate over the next <code>sqrt(n)</code> zeros to the left of <code>l</code> and count the number of substrings with dominant ones where the current zero is the rightmost zero of the substring."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfSubstrings",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3479",
        "similarQuestions": [
            "[{\"title\": \"Count Binary Substrings\", \"titleSlug\": \"count-binary-substrings\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u8ba1\\u6570\\u4e8c\\u8fdb\\u5236\\u5b50\\u4e32\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "\"00011\"",
        "title": "Count the Number of Substrings With Dominant Ones",
        "titleSlug": "count-the-number-of-substrings-with-dominant-ones",
        "infer_hints": [
            "What is the number of substrings with dominant ones in a string of length N?",
            "Try to count the number of substrings with dominant ones in O(N) time.",
            "If we can find the number of substrings with one dominant one, we can find the number of substrings with two dominant ones, and so on.",
            "For each index i, count the number of substrings ending at i that have dominant ones.",
            "Try to find the number of substrings with dominant ones for a specific substring.",
            "We can use a prefix sum array to get the number of ones and zeros in a substring.",
            "Use a prefix sum array to calculate the number of ones in the subarray [i, j].",
            "Use prefix sums to count the number of ones.",
            "Count the number of 0's and 1's.",
            "The count of dominant substrings can be calculated in O(n) time using prefix sums.",
            "If the current substring has dominant ones, how many substrings can we create from it?",
            "Count the number of substrings that contain exactly k ones.",
            "How many substrings have ones more than the square of zeros?",
            "You can use a prefix sum array to count the number of ones up to each index.",
            "Count the number of substrings that have dominant ones and those that have non-dominant ones separately.",
            "How many substrings have at least one zero in them?",
            "We can do a cumulative sum of ones and zeros and check if the number of ones is at least as many as the square of the number of zeros for every substring.",
            "Find the number of substrings with ones in it.",
            "Use prefix sums to find the number of ones and zeros.",
            "Use a prefix sum array to count the number of ones."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumCost(self, target, words, costs):\n        \"\"\"\n        :type target: str\n        :type words: List[str]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumCost(char* target, char** words, int wordsSize, int* costs, int costsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumCost(string target, string[] words, int[] costs) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} target\n * @param {string[]} words\n * @param {number[]} costs\n * @return {number}\n */\nvar minimumCost = function(target, words, costs) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumCost(target: string, words: string[], costs: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $target\n     * @param String[] $words\n     * @param Integer[] $costs\n     * @return Integer\n     */\n    function minimumCost($target, $words, $costs) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumCost(_ target: String, _ words: [String], _ costs: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumCost(target: String, words: Array<String>, costs: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumCost(String target, List<String> words, List<int> costs) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumCost(target string, words []string, costs []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} target\n# @param {String[]} words\n# @param {Integer[]} costs\n# @return {Integer}\ndef minimum_cost(target, words, costs)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumCost(target: String, words: Array[String], costs: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_cost(target: String, words: Vec<String>, costs: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-cost target words costs)\n  (-> string? (listof string?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_cost(Target :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()], Costs :: [integer()]) -> integer().\nminimum_cost(Target, Words, Costs) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_cost(target :: String.t, words :: [String.t], costs :: [integer]) :: integer\n  def minimum_cost(target, words, costs) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>target</code>, an array of strings <code>words</code>, and an integer array <code>costs</code>, both arrays of the same length.</p>\n\n<p>Imagine an empty string <code>s</code>.</p>\n\n<p>You can perform the following operation any number of times (including <strong>zero</strong>):</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[0, words.length - 1]</code>.</li>\n\t<li>Append <code>words[i]</code> to <code>s</code>.</li>\n\t<li>The cost of operation is <code>costs[i]</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> cost to make <code>s</code> equal to <code>target</code>. If it&#39;s not possible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">target = &quot;abcdef&quot;, words = [&quot;abdef&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;def&quot;,&quot;ef&quot;], costs = [100,1,1,10,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The minimum cost can be achieved by performing the following operations:</p>\n\n<ul>\n\t<li>Select index 1 and append <code>&quot;abc&quot;</code> to <code>s</code> at a cost of 1, resulting in <code>s = &quot;abc&quot;</code>.</li>\n\t<li>Select index 2 and append <code>&quot;d&quot;</code> to <code>s</code> at a cost of 1, resulting in <code>s = &quot;abcd&quot;</code>.</li>\n\t<li>Select index 4 and append <code>&quot;ef&quot;</code> to <code>s</code> at a cost of 5, resulting in <code>s = &quot;abcdef&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">target = &quot;aaaa&quot;, words = [&quot;z&quot;,&quot;zz&quot;,&quot;zzz&quot;], costs = [1,10,100]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It is impossible to make <code>s</code> equal to <code>target</code>, so we return -1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length == costs.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= target.length</code></li>\n\t<li>The total sum of <code>words[i].length</code> is less than or equal to <code>5 * 10<sup>4</sup></code>.</li>\n\t<li><code>target</code> and <code>words[i]</code> consist only of lowercase English letters.</li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "exampleTestcases": "\"abcdef\"\n[\"abdef\",\"abc\",\"d\",\"def\",\"ef\"]\n[100,1,1,10,5]\n\"aaaa\"\n[\"z\",\"zz\",\"zzz\"]\n[1,10,100]",
        "formTitle": "[3213]Construct String with Minimum Cost",
        "frequency": 0.0,
        "frontendQuestionId": "3213",
        "hints": [
            "Use Dynamic Programming along with Aho-Corasick or Hashing."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumCost",
            "params": [
                {
                    "name": "target",
                    "type": "string"
                },
                {
                    "name": "words",
                    "type": "string[]"
                },
                {
                    "name": "costs",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3482",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"abcdef\"\n[\"abdef\",\"abc\",\"d\",\"def\",\"ef\"]\n[100,1,1,10,5]",
        "title": "Construct String with Minimum Cost",
        "titleSlug": "construct-string-with-minimum-cost",
        "infer_hints": [
            "DP + Binary Search",
            "Use dynamic programming.",
            "Use Dynamic Programming (DP).",
            "Use dynamic programming to solve the problem.",
            "We can use Dynamic Programming to solve this problem.  We can initialize a 2D array dp with dp[i][j] as the minimum cost to make s equal to target[i:] with the first j words.",
            "Think about how you can apply the dynamic programming to solve this problem.",
            "Can we use Dynamic Programming to solve this problem?",
            "Try to use dynamic programming.",
            "If we try to construct <code>target</code> by one character at a time, what would be the order of operations?",
            "If we have a target string of length N, how many operations are required to reach the end?",
            "Use Dynamic Programming.",
            "Consider using Dynamic Programming.",
            "Use dynamic programming.",
            "Try dynamic programming.",
            "The idea is to transform the problem into a Dynamic Programming problem.",
            "Try to convert the problem into a dynamic programming problem.",
            "DP[i] is the minimum cost to transform the first i characters of text1 to text2.",
            "Use dynamic programming.",
            "What if we use the smallest cost operation to construct the target string?",
            "The problem is asking to find the minimum cost to convert string A to string B."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfAlternatingGroups(int[] colors, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfAlternatingGroups(self, colors, k):\n        \"\"\"\n        :type colors: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfAlternatingGroups(int* colors, int colorsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfAlternatingGroups(int[] colors, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} colors\n * @param {number} k\n * @return {number}\n */\nvar numberOfAlternatingGroups = function(colors, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfAlternatingGroups(colors: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfAlternatingGroups($colors, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfAlternatingGroups(_ colors: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfAlternatingGroups(colors: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfAlternatingGroups(List<int> colors, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfAlternatingGroups(colors []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} colors\n# @param {Integer} k\n# @return {Integer}\ndef number_of_alternating_groups(colors, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfAlternatingGroups(colors: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_alternating_groups(colors: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-alternating-groups colors k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_alternating_groups(Colors :: [integer()], K :: integer()) -> integer().\nnumber_of_alternating_groups(Colors, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_alternating_groups(colors :: [integer], k :: integer) :: integer\n  def number_of_alternating_groups(colors, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is a circle of red and blue tiles. You are given an array of integers <code>colors</code> and an integer <code>k</code>. The color of tile <code>i</code> is represented by <code>colors[i]</code>:</p>\n\n<ul>\n\t<li><code>colors[i] == 0</code> means that tile <code>i</code> is <strong>red</strong>.</li>\n\t<li><code>colors[i] == 1</code> means that tile <code>i</code> is <strong>blue</strong>.</li>\n</ul>\n\n<p>An <strong>alternating</strong> group is every <code>k</code> contiguous tiles in the circle with <strong>alternating</strong> colors (each tile in the group except the first and last one has a different color from its <strong>left</strong> and <strong>right</strong> tiles).</p>\n\n<p>Return the number of <strong>alternating</strong> groups.</p>\n\n<p><strong>Note</strong> that since <code>colors</code> represents a <strong>circle</strong>, the <strong>first</strong> and the <strong>last</strong> tiles are considered to be next to each other.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">colors = [0,1,0,1,0], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183519.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /></strong></p>\n\n<p>Alternating groups:</p>\n\n<p><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182448.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182844.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-183057.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">colors = [0,1,0,0,1,0,1], k = 6</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183907.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /></strong></p>\n\n<p>Alternating groups:</p>\n\n<p><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184128.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184240.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">colors = [1,1,0,1], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-bgimage=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184516.png\" style=\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= colors.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= colors[i] &lt;= 1</code></li>\n\t<li><code>3 &lt;= k &lt;= colors.length</code></li>\n</ul>\n",
        "exampleTestcases": "[0,1,0,1,0]\n3\n[0,1,0,0,1,0,1]\n6\n[1,1,0,1]\n4",
        "formTitle": "[3208]Alternating Groups II",
        "frequency": 0.0,
        "frontendQuestionId": "3208",
        "hints": [
            "Try to find a tile that has the same color as its next tile (if it exists).",
            "Then try to find maximal alternating groups by starting a single for loop from that tile."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfAlternatingGroups",
            "params": [
                {
                    "name": "colors",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3483",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[0,1,0,1,0]\n3",
        "title": "Alternating Groups II",
        "titleSlug": "alternating-groups-ii",
        "infer_hints": [
            "How many alternating groups of length k are there?  (Hint: Can you use dynamic programming?)",
            "Do a single pass of the array.",
            "We can maintain two states, one for each color.",
            "How can you keep track of the number of alternating groups?",
            "Consider the first two elements.",
            "Think of two pointers and use dynamic programming.",
            "You can use a sliding window approach.  What's the best way to check if a group is alternating?",
            "Do a breadth-first search.",
            "We can simulate the process of coloring tiles.  Do you know a better approach?",
            "What if we only consider the groups that have the same first and last colors?",
            "We can use a stack to keep track of the alternating groups.",
            "How to calculate the length of the longest alternating group?",
            "Use a sliding window to check all possible subarrays.",
            "Use a queue to store the colors of the current alternating group.",
            "For each alternating group, you can either extend it or start a new one.",
            "For each i, you should compare colors[i] and colors[i-k].",
            "Keep track of the number of alternating groups for each tile.",
            "How many alternating groups of length k are there?",
            "For each i, you want to check if the i-th and (i+k)-th tiles are different.",
            "Think about how you can count the alternating groups."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string getSmallestString(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String getSmallestString(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def getSmallestString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def getSmallestString(self, s: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* getSmallestString(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string GetSmallestString(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar getSmallestString = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function getSmallestString(s: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function getSmallestString($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func getSmallestString(_ s: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun getSmallestString(s: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String getSmallestString(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func getSmallestString(s string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {String}\ndef get_smallest_string(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def getSmallestString(s: String): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn get_smallest_string(s: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (get-smallest-string s)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec get_smallest_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nget_smallest_string(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec get_smallest_string(s :: String.t) :: String.t\n  def get_smallest_string(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given a string <code>s</code> containing only digits, return the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest string</span> that can be obtained after swapping <strong>adjacent</strong> digits in <code>s</code> with the same <strong>parity</strong> at most <strong>once</strong>.</p>\n\n<p>Digits have the same parity if both are odd or both are even. For example, 5 and 9, as well as 2 and 4, have the same parity, while 6 and 9 do not.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;45320&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;43520&quot;</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p><code>s[1] == &#39;5&#39;</code> and <code>s[2] == &#39;3&#39;</code> both have the same parity, and swapping them results in the lexicographically smallest string.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;001&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;001&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no need to perform a swap because <code>s</code> is already the lexicographically smallest.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of digits.</li>\n</ul>\n",
        "exampleTestcases": "\"45320\"\n\"001\"",
        "formTitle": "[3216]Lexicographically Smallest String After a Swap",
        "frequency": 0.0,
        "frontendQuestionId": "3216",
        "hints": [
            "Try all possible swaps satisfying the constraints and find the one that results in the lexicographically smallest string."
        ],
        "level": 1,
        "metaData": {
            "name": "getSmallestString",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3484",
        "similarQuestions": [
            "[{\"title\": \"Lexicographically Smallest String After Applying Operations\", \"titleSlug\": \"lexicographically-smallest-string-after-applying-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6267\\u884c\\u64cd\\u4f5c\\u540e\\u5b57\\u5178\\u5e8f\\u6700\\u5c0f\\u7684\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "\"45320\"",
        "title": "Lexicographically Smallest String After a Swap",
        "titleSlug": "lexicographically-smallest-string-after-a-swap",
        "infer_hints": [
            "Try to swap each pair of adjacent digits that are of the same parity.",
            "You can use a greedy algorithm with a priority queue.",
            "Can you perform the swap at most once?",
            "Try to swap the next digit in the string with the one with a larger value.",
            "Consider each digit in the string.",
            "Try every possible swap and keep track of the lexicographically smallest string.",
            "We can check all possible swaps and keep track of the lexicographically smallest string we can get.",
            "What does it mean for a string to be lexicographically smaller than another string?",
            "How to know if swapping is possible?",
            "For each digit in the string, we need to consider the minimum possible digit that can be swapped with it.",
            "The idea is to find a pair of adjacent numbers with the same parity that are larger than the rest of the string.",
            "If the number of digits of the string is even, the answer is the string itself.",
            "Swap the first and second digit.",
            "Can you try a brute-force approach where you try all possible swaps?",
            "Keep track of the smallest lexicographically string you can get after swapping each digit.",
            "Can you solve this problem by using greedy approach?",
            "For each digit, try to swap it with the next digit of the same parity that is smaller than it.",
            "We can solve this problem by checking each possible pair of adjacent digits.",
            "Consider each digit in the string.  There are only 10 ways to choose two adjacent digits.",
            "We can use the fact that the digits in the string are sorted to our advantage."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumLength(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumLength(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumLength(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumLength(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumLength = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumLength(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumLength($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumLength(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumLength(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumLength(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumLength(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_length(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumLength(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_length(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_length(Nums :: [integer()]) -> integer().\nmaximum_length(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer]) :: integer\n  def maximum_length(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "You are given an integer array <code>nums</code>.\n<p>A <span data-keyword=\"subsequence-array\">subsequence</span> <code>sub</code> of <code>nums</code> with length <code>x</code> is called <strong>valid</strong> if it satisfies:</p>\n\n<ul>\n\t<li><code>(sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2] + sub[x - 1]) % 2.</code></li>\n</ul>\n\n<p>Return the length of the <strong>longest</strong> <strong>valid</strong> subsequence of <code>nums</code>.</p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The longest valid subsequence is <code>[1, 2, 3, 4]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,1,1,2,1,2]</span></p>\n\n<p><strong>Output:</strong> 6</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The longest valid subsequence is <code>[1, 2, 1, 2, 1, 2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The longest valid subsequence is <code>[1, 3]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4]\n[1,2,1,1,2,1,2]\n[1,3]",
        "formTitle": "[3201]Find the Maximum Length of Valid Subsequence I",
        "frequency": 0.0,
        "frontendQuestionId": "3201",
        "hints": [
            "The possible sequence either contains all even elements, all odd elements, alternate even odd, or alternate odd even elements.",
            "Considering only the parity of elements, there are only 4 possibilities and we can try all of them.",
            "When selecting an element with any parity, try to select the earliest one."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3490",
        "similarQuestions": [
            "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u9012\\u589e\\u5b50\\u5e8f\\u5217\", \"isPaidOnly\": false}, {\"title\": \"Length of the Longest Subsequence That Sums to Target\", \"titleSlug\": \"length-of-the-longest-subsequence-that-sums-to-target\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u4e3a\\u76ee\\u6807\\u503c\\u7684\\u6700\\u957f\\u5b50\\u5e8f\\u5217\\u7684\\u957f\\u5ea6\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,4]",
        "title": "Find the Maximum Length of Valid Subsequence I",
        "titleSlug": "find-the-maximum-length-of-valid-subsequence-i",
        "infer_hints": [
            "Use a dynamic programming approach.",
            "We can use a dynamic programming to solve this problem.",
            "Use dynamic programming.",
            "For each element, try to find the longest valid subsequence that ends with it.",
            "How to check if a subsequence is valid?",
            "How can we use the previous state to compute the current state?",
            "Use dynamic programming.",
            "Think about how you would use dynamic programming to solve this problem.",
            "Use dynamic programming.",
            "Use dynamic programming.",
            "Use dynamic programming to keep track of the longest subsequence ending at each index that satisfies the condition.",
            "What is the condition for a valid subsequence?",
            "We can use dynamic programming.",
            "How can we make a dynamic programming approach to solve this problem?",
            "Can we use Dynamic Programming (DP) to solve this problem?",
            "Can you calculate the longest valid subsequence for each possible remainder?",
            "Use dynamic programming.",
            "Can you use dynamic programming?",
            "Try to calculate the dp[i] in one pass.",
            "Try to find a DP solution."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumLength(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumLength = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumLength(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumLength($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumLength(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumLength(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumLength(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_length(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_length(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_length(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_length(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer], k :: integer) :: integer\n  def maximum_length(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "You are given an integer array <code>nums</code> and a <strong>positive</strong> integer <code>k</code>.\n<p>A <span data-keyword=\"subsequence-array\">subsequence</span> <code>sub</code> of <code>nums</code> with length <code>x</code> is called <strong>valid</strong> if it satisfies:</p>\n\n<ul>\n\t<li><code>(sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2] + sub[x - 1]) % k.</code></li>\n</ul>\nReturn the length of the <strong>longest</strong> <strong>valid</strong> subsequence of <code>nums</code>.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The longest valid subsequence is <code>[1, 2, 3, 4, 5]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,2,3,1,4], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The longest valid subsequence is <code>[1, 4, 1, 4]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4,5]\n2\n[1,4,2,3,1,4]\n3",
        "formTitle": "[3202]Find the Maximum Length of Valid Subsequence II",
        "frequency": 0.0,
        "frontendQuestionId": "3202",
        "hints": [
            "Fix the value of <code>(subs[0] + subs[1]) % k</code> from the <code>k</code> possible values. Let it be <code>val</code>.",
            "Let <code>dp[i]</code> store the maximum length of a subsequence with its last element <code>x</code> such that <code>x % k == i</code>.",
            "Answer for a subsequence ending at index <code>y</code> is <code>dp[(k + val - (y % k)) % k] + 1</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3491",
        "similarQuestions": [
            "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u9012\\u589e\\u5b50\\u5e8f\\u5217\", \"isPaidOnly\": false}, {\"title\": \"Length of the Longest Subsequence That Sums to Target\", \"titleSlug\": \"length-of-the-longest-subsequence-that-sums-to-target\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u4e3a\\u76ee\\u6807\\u503c\\u7684\\u6700\\u957f\\u5b50\\u5e8f\\u5217\\u7684\\u957f\\u5ea6\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,4,5]\n2",
        "title": "Find the Maximum Length of Valid Subsequence II",
        "titleSlug": "find-the-maximum-length-of-valid-subsequence-ii",
        "infer_hints": [
            "The maximum length of valid subsequence is the sum of lengths of all valid subsequences that end with the same remainder.",
            "The longest valid subsequence is the maximum of the lengths of all valid subsequences.",
            "Do not recompute the prefix sum every time.",
            "Do you know the maximum length of valid subsequence with the modulus of the sum of the subsequence equal to 0?",
            "Can we optimize the solution using dynamic programming?",
            "Think about the relation between the prefix sums and the prefix sums of the reversed array.",
            "Can we use dynamic programming to solve this problem?",
            "Can we calculate the prefix sums?",
            "Can we use dynamic programming?",
            "We need to find the maximum length of the subsequence.",
            "We need to store the longest valid subsequence with the same remainder.",
            "Let dp[i] be the maximum length of valid subsequence with the last element as nums[i].",
            "The sum of two numbers is divisible by K if and only if the sum of their remainder is divisible by K.",
            "We can use a 2D DP to solve this problem.  Try to use the last digit to split the current array.",
            "What is the maximum possible value of (nums[i] + nums[j]) % k?",
            "Use prefix sum array and dp array.",
            "Use a prefix sum array.",
            "Use prefix sums and dynamic programming.",
            "For each index, try to extend all possible valid subsequences ending at that index.",
            "Use a dynamic programming (DP) approach. "
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfSubmatrices(vector<vector<char>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfSubmatrices(char[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfSubmatrices(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfSubmatrices(self, grid: List[List[str]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfSubmatrices(char** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfSubmatrices(char[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numberOfSubmatrices = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfSubmatrices(grid: string[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function numberOfSubmatrices($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfSubmatrices(_ grid: [[Character]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfSubmatrices(grid: Array<CharArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfSubmatrices(List<List<String>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfSubmatrices(grid [][]byte) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Character[][]} grid\n# @return {Integer}\ndef number_of_submatrices(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfSubmatrices(grid: Array[Array[Char]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_submatrices(grid: Vec<Vec<char>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-submatrices grid)\n  (-> (listof (listof char?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_submatrices(Grid :: [[char()]]) -> integer().\nnumber_of_submatrices(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_submatrices(grid :: [[char]]) :: integer\n  def number_of_submatrices(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given a 2D character matrix <code>grid</code>, where <code>grid[i][j]</code> is either <code>&#39;X&#39;</code>, <code>&#39;Y&#39;</code>, or <code>&#39;.&#39;</code>, return the number of <span data-keyword=\"submatrix\">submatrices</span> that contain:</p>\n\n<ul>\n\t<li><code>grid[0][0]</code></li>\n\t<li>an <strong>equal</strong> frequency of <code>&#39;X&#39;</code> and <code>&#39;Y&#39;</code>.</li>\n\t<li><strong>at least</strong> one <code>&#39;X&#39;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;X&quot;,&quot;Y&quot;,&quot;.&quot;],[&quot;Y&quot;,&quot;.&quot;,&quot;.&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/07/examplems.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 175px; height: 350px;\" /></strong></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;Y&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>No submatrix has an equal frequency of <code>&#39;X&#39;</code> and <code>&#39;Y&#39;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>No submatrix has at least one <code>&#39;X&#39;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length, grid[i].length &lt;= 1000</code></li>\n\t<li><code>grid[i][j]</code> is either <code>&#39;X&#39;</code>, <code>&#39;Y&#39;</code>, or <code>&#39;.&#39;</code>.</li>\n</ul>\n",
        "exampleTestcases": "[[\"X\",\"Y\",\".\"],[\"Y\",\".\",\".\"]]\n[[\"X\",\"X\"],[\"X\",\"Y\"]]\n[[\".\",\".\"],[\".\",\".\"]]",
        "formTitle": "[3212]Count Submatrices With Equal Frequency of X and Y",
        "frequency": 0.0,
        "frontendQuestionId": "3212",
        "hints": [
            "Replace <code>鈥橷鈥�</code> with 1, <code>鈥橸鈥�</code> with -1 and <code>鈥�.鈥�</code> with 0.",
            "You need to find how many submatrices <code>grid[0..x][0..y]</code> have a sum of 0 and at least one <code>鈥橷鈥�</code>.",
            "Use prefix sum to calculate submatrices sum."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfSubmatrices",
            "params": [
                {
                    "name": "grid",
                    "type": "character[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3492",
        "similarQuestions": [
            "[{\"title\": \"Maximum Equal Frequency\", \"titleSlug\": \"maximum-equal-frequency\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u5927\\u76f8\\u7b49\\u9891\\u7387\", \"isPaidOnly\": false}, {\"title\": \"Count Submatrices With All Ones\", \"titleSlug\": \"count-submatrices-with-all-ones\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u5168 1 \\u5b50\\u77e9\\u5f62\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[[\"X\",\"Y\",\".\"],[\"Y\",\".\",\".\"]]",
        "title": "Count Submatrices With Equal Frequency of X and Y",
        "titleSlug": "count-submatrices-with-equal-frequency-of-x-and-y",
        "infer_hints": [
            "Consider the cell in the bottom right of the matrix.",
            "The main idea of the solution is to count the number of submatrices that contain the same number of 'X' and 'Y'.",
            "The main idea is to count the number of submatrices which have equal frequency of 'X' and 'Y'.",
            "For each (x, y), we need to find how many submatrices (i, j) that are at the bottom-right of (x, y) and have the same number of 'X's and 'Y's.",
            "You need to check every possible submatrix to find one that satisfies the conditions.",
            "We can preprocess the matrix to get the prefix counts of 'X' and 'Y' at each position.",
            "For each cell (i, j), compute how many cells can be seen from this cell.",
            "Think about using prefix sum.",
            "We can precompute the number of 'Y's on the left and right for each cell.",
            "Use prefix sum and hashmap to solve this problem.",
            "Use the concept of prefix sum and try to count the number of submatrices ending at (i,j) which have equal number of 'X' and 'Y'.",
            "For each cell, you need to count how many cells are in its submatrix with the same frequency of 'X' and 'Y'.",
            "For each submatrix, we can maintain the frequency of 'X' and 'Y' in it.",
            "We need to count the number of submatrices that contain exactly K different integers.  How can we do this?",
            "For each cell, how many cells can be in the bottom right of the submatrix?",
            "Can we precompute for each cell the number of submatrices that end at it and have equal number of 'X' and 'Y'?",
            "Can we solve this problem in O(N^2) time and O(N) space?",
            "Use a 2D prefix sum array.",
            "For each cell (i, j), we can calculate the number of submatrices ending at (i, j) which contain at least one 'X'.",
            "Try to find out how many submatrices of size x * y contain at least one 'X'."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxOperations(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxOperations(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxOperations(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxOperations(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxOperations(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxOperations(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maxOperations = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxOperations(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maxOperations($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxOperations(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxOperations(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxOperations(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxOperations(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef max_operations(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxOperations(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_operations(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-operations s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_operations(S :: unicode:unicode_binary()) -> integer().\nmax_operations(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_operations(s :: String.t) :: integer\n  def max_operations(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <span data-keyword=\"binary-string\">binary string</span> <code>s</code>.</p>\n\n<p>You can perform the following operation on the string <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose <strong>any</strong> index <code>i</code> from the string where <code>i + 1 &lt; s.length</code> such that <code>s[i] == &#39;1&#39;</code> and <code>s[i + 1] == &#39;0&#39;</code>.</li>\n\t<li>Move the character <code>s[i]</code> to the <strong>right</strong> until it reaches the end of the string or another <code>&#39;1&#39;</code>. For example, for <code>s = &quot;010010&quot;</code>, if we choose <code>i = 1</code>, the resulting string will be <code>s = &quot;0<strong><u>001</u></strong>10&quot;</code>.</li>\n</ul>\n\n<p>Return the <strong>maximum</strong> number of operations that you can perform.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;1001101&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can perform the following operations:</p>\n\n<ul>\n\t<li>Choose index <code>i = 0</code>. The resulting string is <code>s = &quot;<u><strong>001</strong></u>1101&quot;</code>.</li>\n\t<li>Choose index <code>i = 4</code>. The resulting string is <code>s = &quot;0011<u><strong>01</strong></u>1&quot;</code>.</li>\n\t<li>Choose index <code>i = 3</code>. The resulting string is <code>s = &quot;001<strong><u>01</u></strong>11&quot;</code>.</li>\n\t<li>Choose index <code>i = 2</code>. The resulting string is <code>s = &quot;00<strong><u>01</u></strong>111&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;00111&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
        "exampleTestcases": "\"1001101\"\n\"00111\"",
        "formTitle": "[3228]Maximum Number of Operations to Move Ones to the End",
        "frequency": 0.0,
        "frontendQuestionId": "3228",
        "hints": [
            "It is optimal to perform the operation on the lowest index possible each time.",
            "Traverse the string from left to right and perform the operation every time it is possible."
        ],
        "level": 2,
        "metaData": {
            "name": "maxOperations",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3493",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"1001101\"",
        "title": "Maximum Number of Operations to Move Ones to the End",
        "titleSlug": "maximum-number-of-operations-to-move-ones-to-the-end",
        "infer_hints": [
            "Try to calculate the number of operations required to move all the ones to the end.",
            "Use a greedy approach to count the number of 1's between 0's.",
            "Can you do this in one pass with O(1) space?",
            "Can we calculate the distance between each '1' and the next '0' and then move the '1's to the end?",
            "The reason to take greedy approach is that if we have two zeros, we can always move one to the right, thus reducing the problem size by 1.",
            "We can use a sliding window approach. We will keep track of the number of '1's between '0's.",
            "Consider how many operations we can perform by moving the ones to the end.",
            "How many ones are there in the string?",
            "We can simulate the process and keep track of the number of ones at each position.",
            "The answer is the minimum number of operations required to move all ones to the right.",
            "How many ones are there in the string?",
            "We can perform operations in a greedy manner.",
            "Use the prefix sum to count the number of zeros after each one.",
            "Count the number of groups of ones, and the number of groups of zeros.",
            "Try to find the optimal way to make all the 1s to the right side.",
            "Can we calculate the number of operations for each index?",
            "Use two pointers to track the ones and zeros.",
            "You can solve this problem using the greedy approach.",
            "Think of the binary string as a list of 1s and 0s.!!!",
            "We can maintain a prefix sum. \r\n\r\nIf the current prefix sum is i, we can move all the ones from position i to the end of the array in one operation."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumCost(int m, int n, int* horizontalCut, int horizontalCutSize, int* verticalCut, int verticalCutSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[]} horizontalCut\n * @param {number[]} verticalCut\n * @return {number}\n */\nvar minimumCost = function(m, n, horizontalCut, verticalCut) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumCost(m: number, n: number, horizontalCut: number[], verticalCut: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[] $horizontalCut\n     * @param Integer[] $verticalCut\n     * @return Integer\n     */\n    function minimumCost($m, $n, $horizontalCut, $verticalCut) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumCost(_ m: Int, _ n: Int, _ horizontalCut: [Int], _ verticalCut: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumCost(m: Int, n: Int, horizontalCut: IntArray, verticalCut: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumCost(int m, int n, List<int> horizontalCut, List<int> verticalCut) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumCost(m int, n int, horizontalCut []int, verticalCut []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[]} horizontal_cut\n# @param {Integer[]} vertical_cut\n# @return {Integer}\ndef minimum_cost(m, n, horizontal_cut, vertical_cut)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumCost(m: Int, n: Int, horizontalCut: Array[Int], verticalCut: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_cost(m: i32, n: i32, horizontal_cut: Vec<i32>, vertical_cut: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-cost m n horizontalCut verticalCut)\n  (-> exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_cost(M :: integer(), N :: integer(), HorizontalCut :: [integer()], VerticalCut :: [integer()]) -> integer().\nminimum_cost(M, N, HorizontalCut, VerticalCut) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_cost(m :: integer, n :: integer, horizontal_cut :: [integer], vertical_cut :: [integer]) :: integer\n  def minimum_cost(m, n, horizontal_cut, vertical_cut) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is an <code>m x n</code> cake that needs to be cut into <code>1 x 1</code> pieces.</p>\n\n<p>You are given integers <code>m</code>, <code>n</code>, and two arrays:</p>\n\n<ul>\n\t<li><code>horizontalCut</code> of size <code>m - 1</code>, where <code>horizontalCut[i]</code> represents the cost to cut along the horizontal line <code>i</code>.</li>\n\t<li><code>verticalCut</code> of size <code>n - 1</code>, where <code>verticalCut[j]</code> represents the cost to cut along the vertical line <code>j</code>.</li>\n</ul>\n\n<p>In one operation, you can choose any piece of cake that is not yet a <code>1 x 1</code> square and perform one of the following cuts:</p>\n\n<ol>\n\t<li>Cut along a horizontal line <code>i</code> at a cost of <code>horizontalCut[i]</code>.</li>\n\t<li>Cut along a vertical line <code>j</code> at a cost of <code>verticalCut[j]</code>.</li>\n</ol>\n\n<p>After the cut, the piece of cake is divided into two distinct pieces.</p>\n\n<p>The cost of a cut depends only on the initial cost of the line and does not change.</p>\n\n<p>Return the <strong>minimum</strong> total cost to cut the entire cake into <code>1 x 1</code> pieces.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">13</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif\" style=\"width: 280px; height: 320px;\" /></p>\n\n<ul>\n\t<li>Perform a cut on the vertical line 0 with cost 5, current total cost is 5.</li>\n\t<li>Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid with cost 1.</li>\n\t<li>Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid with cost 1.</li>\n\t<li>Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid with cost 3.</li>\n\t<li>Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid with cost 3.</li>\n</ul>\n\n<p>The total cost is <code>5 + 1 + 1 + 3 + 3 = 13</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">m = 2, n = 2, horizontalCut = [7], verticalCut = [4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Perform a cut on the horizontal line 0 with cost 7.</li>\n\t<li>Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid with cost 4.</li>\n\t<li>Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid with cost 4.</li>\n</ul>\n\n<p>The total cost is <code>7 + 4 + 4 = 15</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 20</code></li>\n\t<li><code>horizontalCut.length == m - 1</code></li>\n\t<li><code>verticalCut.length == n - 1</code></li>\n\t<li><code>1 &lt;= horizontalCut[i], verticalCut[i] &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
        "exampleTestcases": "3\n2\n[1,3]\n[5]\n2\n2\n[7]\n[4]",
        "formTitle": "[3218]Minimum Cost for Cutting Cake I",
        "frequency": 0.0,
        "frontendQuestionId": "3218",
        "hints": [
            "The intended solution uses Dynamic Programming.",
            "Let <code>dp[sx][sy][tx][ty]</code> denote the minimum cost to cut the rectangle into <code>1 x 1</code> pieces.",
            "Iterate on the row or column on which you will perform the next cut, after the cut, the current rectangle will be decomposed into two sub-rectangles."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumCost",
            "params": [
                {
                    "name": "m",
                    "type": "integer"
                },
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "horizontalCut",
                    "type": "integer[]"
                },
                {
                    "name": "verticalCut",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3494",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "3\n2\n[1,3]\n[5]",
        "title": "Minimum Cost for Cutting Cake I",
        "titleSlug": "minimum-cost-for-cutting-cake-i",
        "infer_hints": [
            "Sort the horizontal and vertical cuts.  You can perform each cut in O(n) time.",
            "We can think about the 1D problem.",
            "Sort the cuts.  Now you have a problem of cutting a line segment in a way that minimizes the cost.",
            "For each cut, you have two choices: cut the cake along the horizontal line or the vertical line.",
            "Use dynamic programming.",
            "Consider the array sorted.",
            "The total cost of cutting the cake will be the sum of the costs of all cuts.",
            "Can we find the optimal cuts along the horizontal and vertical lines?",
            "What if you have 2 cuts?",
            "How can we choose the cuts with minimum total cost?",
            "Try to cut the cake along horizontal or vertical lines first.",
            "We can perform a cut at each of the horizontal and vertical cuts, then take the maximum of the costs.  There are m * n - 1 cuts.  For each cut, we have 2 options, we can cut it at the current cut or we can cut it at the next cut.",
            "What if we sorted all the cuts?",
            "We can use DP for this problem.  Now we need to handle the edge cases.",
            "How about sorting and using a greedy algorithm?",
            "For each horizontal or vertical cut, we can choose to either make the cut or not.",
            "You can use a greedy algorithm with sorting.",
            "The idea is to consider each cut as an edge of a graph.",
            "How can we cut the cake to have the minimum total cost?",
            "For each cut, we can always find the largest cut that will result in the minimum cost."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minChanges(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minChanges(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minChanges(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinChanges(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minChanges = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minChanges(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minChanges($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minChanges(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minChanges(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minChanges(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minChanges(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_changes(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minChanges(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-changes nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_changes(Nums :: [integer()], K :: integer()) -> integer().\nmin_changes(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_changes(nums :: [integer], k :: integer) :: integer\n  def min_changes(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> of size <code>n</code> where <code>n</code> is <strong>even</strong>, and an integer <code>k</code>.</p>\n\n<p>You can perform some changes on the array, where in one change you can replace <strong>any</strong> element in the array with <strong>any</strong> integer in the range from <code>0</code> to <code>k</code>.</p>\n\n<p>You need to perform some changes (possibly none) such that the final array satisfies the following condition:</p>\n\n<ul>\n\t<li>There exists an integer <code>X</code> such that <code>abs(a[i] - a[n - i - 1]) = X</code> for all <code>(0 &lt;= i &lt; n)</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> number of changes required to satisfy the above condition.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,0,1,2,4,3], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong><br />\nWe can perform the following changes:</p>\n\n<ul>\n\t<li>Replace <code>nums[1]</code> by 2. The resulting array is <code>nums = [1,<u><strong>2</strong></u>,1,2,4,3]</code>.</li>\n\t<li>Replace <code>nums[3]</code> by 3. The resulting array is <code>nums = [1,2,1,<u><strong>3</strong></u>,4,3]</code>.</li>\n</ul>\n\n<p>The integer <code>X</code> will be 2.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,1,2,3,3,6,5,4], k = 6</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong><br />\nWe can perform the following operations:</p>\n\n<ul>\n\t<li>Replace <code>nums[3]</code> by 0. The resulting array is <code>nums = [0,1,2,<u><strong>0</strong></u>,3,6,5,4]</code>.</li>\n\t<li>Replace <code>nums[4]</code> by 4. The resulting array is <code>nums = [0,1,2,0,<strong><u>4</u></strong>,6,5,4]</code>.</li>\n</ul>\n\n<p>The integer <code>X</code> will be 4.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>0 &lt;= nums[i] &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,0,1,2,4,3]\n4\n[0,1,2,3,3,6,5,4]\n6",
        "formTitle": "[3224]Minimum Array Changes to Make Differences Equal",
        "frequency": 0.0,
        "frontendQuestionId": "3224",
        "hints": [
            "There are at most <code>k + 1</code> possible values of the integer <code>X</code>.",
            "How do we calculate the minimum number of changes efficiently if we fix the value of <code>X</code> before applying any changes?"
        ],
        "level": 2,
        "metaData": {
            "name": "minChanges",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3498",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,0,1,2,4,3]\n4",
        "title": "Minimum Array Changes to Make Differences Equal",
        "titleSlug": "minimum-array-changes-to-make-differences-equal",
        "infer_hints": [
            "What is the minimum number of changes we need to make to make all the differences equal?",
            "We can sort the array and try to match the values with the middle one.",
            "How many changes are needed to make all the differences between adjacent elements equal?",
            "Can we solve this in O(n) time?",
            "The array is symmetric around the middle. If we could make all elements equal to each other, we would have solved the problem.",
            "Can we sort the array?",
            "You can think of the problem as a graph problem.  If you draw a graph where the nodes are the numbers in the array, and there is an edge between two nodes if their difference is in the range [0, k], then you can use dynamic programming.",
            "Sort the array and then apply binary search.",
            "How can you calculate the difference between two numbers?",
            "Can you use a prefix sum array to help you solve this problem?",
            "Can we use a dynamic programming solution?",
            "We need to consider only the minimum changes to satisfy the condition.",
            "Can you use a greedy approach to solve this problem?",
            "Can we use sorting or prefix sums to solve this?",
            "For every index, you can either make the left element equal to the right element, or make the right element equal to the left element.",
            "For each index, what is the maximum possible difference between the numbers in the two ends of the array?",
            "Use a priority queue.",
            "What is the maximum possible value of abs(a[i] - a[n - i - 1])?",
            "Use dynamic programming.",
            "Do you need to find the absolute difference between the elements at both ends of the array?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minimumCost(int m, int n, int* horizontalCut, int horizontalCutSize, int* verticalCut, int verticalCutSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[]} horizontalCut\n * @param {number[]} verticalCut\n * @return {number}\n */\nvar minimumCost = function(m, n, horizontalCut, verticalCut) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumCost(m: number, n: number, horizontalCut: number[], verticalCut: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[] $horizontalCut\n     * @param Integer[] $verticalCut\n     * @return Integer\n     */\n    function minimumCost($m, $n, $horizontalCut, $verticalCut) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumCost(_ m: Int, _ n: Int, _ horizontalCut: [Int], _ verticalCut: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumCost(m: Int, n: Int, horizontalCut: IntArray, verticalCut: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumCost(int m, int n, List<int> horizontalCut, List<int> verticalCut) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumCost(m int, n int, horizontalCut []int, verticalCut []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[]} horizontal_cut\n# @param {Integer[]} vertical_cut\n# @return {Integer}\ndef minimum_cost(m, n, horizontal_cut, vertical_cut)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumCost(m: Int, n: Int, horizontalCut: Array[Int], verticalCut: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_cost(m: i32, n: i32, horizontal_cut: Vec<i32>, vertical_cut: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-cost m n horizontalCut verticalCut)\n  (-> exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_cost(M :: integer(), N :: integer(), HorizontalCut :: [integer()], VerticalCut :: [integer()]) -> integer().\nminimum_cost(M, N, HorizontalCut, VerticalCut) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_cost(m :: integer, n :: integer, horizontal_cut :: [integer], vertical_cut :: [integer]) :: integer\n  def minimum_cost(m, n, horizontal_cut, vertical_cut) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is an <code>m x n</code> cake that needs to be cut into <code>1 x 1</code> pieces.</p>\n\n<p>You are given integers <code>m</code>, <code>n</code>, and two arrays:</p>\n\n<ul>\n\t<li><code>horizontalCut</code> of size <code>m - 1</code>, where <code>horizontalCut[i]</code> represents the cost to cut along the horizontal line <code>i</code>.</li>\n\t<li><code>verticalCut</code> of size <code>n - 1</code>, where <code>verticalCut[j]</code> represents the cost to cut along the vertical line <code>j</code>.</li>\n</ul>\n\n<p>In one operation, you can choose any piece of cake that is not yet a <code>1 x 1</code> square and perform one of the following cuts:</p>\n\n<ol>\n\t<li>Cut along a horizontal line <code>i</code> at a cost of <code>horizontalCut[i]</code>.</li>\n\t<li>Cut along a vertical line <code>j</code> at a cost of <code>verticalCut[j]</code>.</li>\n</ol>\n\n<p>After the cut, the piece of cake is divided into two distinct pieces.</p>\n\n<p>The cost of a cut depends only on the initial cost of the line and does not change.</p>\n\n<p>Return the <strong>minimum</strong> total cost to cut the entire cake into <code>1 x 1</code> pieces.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">13</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif\" style=\"width: 280px; height: 320px;\" /></p>\n\n<ul>\n\t<li>Perform a cut on the vertical line 0 with cost 5, current total cost is 5.</li>\n\t<li>Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid with cost 1.</li>\n\t<li>Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid with cost 1.</li>\n\t<li>Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid with cost 3.</li>\n\t<li>Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid with cost 3.</li>\n</ul>\n\n<p>The total cost is <code>5 + 1 + 1 + 3 + 3 = 13</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">m = 2, n = 2, horizontalCut = [7], verticalCut = [4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Perform a cut on the horizontal line 0 with cost 7.</li>\n\t<li>Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid with cost 4.</li>\n\t<li>Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid with cost 4.</li>\n</ul>\n\n<p>The total cost is <code>7 + 4 + 4 = 15</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>horizontalCut.length == m - 1</code></li>\n\t<li><code>verticalCut.length == n - 1</code></li>\n\t<li><code>1 &lt;= horizontalCut[i], verticalCut[i] &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
        "exampleTestcases": "3\n2\n[1,3]\n[5]\n2\n2\n[7]\n[4]",
        "formTitle": "[3219]Minimum Cost for Cutting Cake II",
        "frequency": 0.0,
        "frontendQuestionId": "3219",
        "hints": [
            "The intended solution uses a Greedy approach.",
            "At each step, we will perform a cut on the line with the highest cost.",
            "If you perform a horizontal cut, can you count the contribution that it adds to each row cut that comes afterward?"
        ],
        "level": 3,
        "metaData": {
            "name": "minimumCost",
            "params": [
                {
                    "name": "m",
                    "type": "integer"
                },
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "horizontalCut",
                    "type": "integer[]"
                },
                {
                    "name": "verticalCut",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3500",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "3\n2\n[1,3]\n[5]",
        "title": "Minimum Cost for Cutting Cake II",
        "titleSlug": "minimum-cost-for-cutting-cake-ii",
        "infer_hints": [
            "What if you cut the cake at the same point on both horizontal and vertical lines?",
            "Try to find the maximum distance between two cuts.",
            "How can we minimize the total cost of cuts?",
            "Sort the cuts and keep the cost of the previous cut.",
            "What if we try to minimize the maximum cost?",
            "The idea is to cut the cake in the best order to minimize the cost.",
            "The minimum cost of a cut is the sum of the costs of all cuts in the line.",
            "Use dynamic programming.",
            "How many pieces of cake can you cut along a horizontal line?  Do the same for vertical lines.",
            "You can use sorting to keep track of the cuts.",
            "For each cut, consider the maximum difference in the list of cut points.",
            "Consider the maximum area of the rectangle that you can get after the cuts.",
            "We can use DP on the range of the cuts.",
            "Sort the cuts and then try to minimize the cost.",
            "Think about the minimum total cost of a cut.",
            "If we cut the cake into two parts, we can have two choices: the first cut could be on the vertical line, or it could be on the horizontal line.",
            "Think about how you can find the cost of each cut.",
            "If we sort the horizontal and vertical cuts, we can determine the maximum difference in the size of the subgrid.",
            "We can use binary search to find the optimal cut.",
            "Sort the horizontal and vertical cuts and keep track of the cost of each cut."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* modifiedList(vector<int>& nums, ListNode* head) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode modifiedList(int[] nums, ListNode head) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def modifiedList(self, nums, head):\n        \"\"\"\n        :type nums: List[int]\n        :type head: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def modifiedList(self, nums: List[int], head: Optional[ListNode]) -> Optional[ListNode]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* modifiedList(int* nums, int numsSize, struct ListNode* head) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ModifiedList(int[] nums, ListNode head) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {number[]} nums\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar modifiedList = function(nums, head) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction modifiedList(nums: number[], head: ListNode | null): ListNode | null {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function modifiedList($nums, $head) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func modifiedList(_ nums: [Int], _ head: ListNode?) -> ListNode? {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun modifiedList(nums: IntArray, head: ListNode?): ListNode? {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? modifiedList(List<int> nums, ListNode? head) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc modifiedList(nums []int, head *ListNode) *ListNode {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {Integer[]} nums\n# @param {ListNode} head\n# @return {ListNode}\ndef modified_list(nums, head)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def modifiedList(nums: Array[Int], head: ListNode): ListNode = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn modified_list(nums: Vec<i32>, head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (modified-list nums head)\n  (-> (listof exact-integer?) (or/c list-node? #f) (or/c list-node? #f))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec modified_list(Nums :: [integer()], Head :: #list_node{} | null) -> #list_node{} | null.\nmodified_list(Nums, Head) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec modified_list(nums :: [integer], head :: ListNode.t | nil) :: ListNode.t | nil\n  def modified_list(nums, head) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of integers <code>nums</code> and the <code>head</code> of a linked list. Return the <code>head</code> of the modified linked list after <strong>removing</strong> all nodes from the linked list that have a value that exists in <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], head = [1,2,3,4,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[4,5]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample0.png\" style=\"width: 400px; height: 66px;\" /></strong></p>\n\n<p>Remove the nodes with values 1, 2, and 3.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1], head = [1,2,1,2,1,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,2,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample1.png\" style=\"height: 62px; width: 450px;\" /></p>\n\n<p>Remove the nodes with value 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [5], head = [1,2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,2,3,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample2.png\" style=\"width: 400px; height: 83px;\" /></strong></p>\n\n<p>No node has value 5.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>All elements in <code>nums</code> are unique.</li>\n\t<li>The number of nodes in the given list is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li>The input is generated such that there is at least one node in the linked list that has a value not present in <code>nums</code>.</li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n[1,2,3,4,5]\n[1]\n[1,2,1,2,1,2]\n[5]\n[1,2,3,4]",
        "formTitle": "[3217]Delete Nodes From Linked List Present in Array",
        "frequency": 0.0,
        "frontendQuestionId": "3217",
        "hints": [
            "Add all elements of <code>nums</code> into a Set.",
            "Scan the list to check if the current element should be deleted by checking the Set."
        ],
        "level": 2,
        "metaData": {
            "name": "modifiedList",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "head",
                    "type": "ListNode"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3501",
        "similarQuestions": [
            "[{\"title\": \"Remove Linked List Elements\", \"titleSlug\": \"remove-linked-list-elements\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u79fb\\u9664\\u94fe\\u8868\\u5143\\u7d20\", \"isPaidOnly\": false}, {\"title\": \"Delete Node in a Linked List\", \"titleSlug\": \"delete-node-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5220\\u9664\\u94fe\\u8868\\u4e2d\\u7684\\u8282\\u70b9\", \"isPaidOnly\": false}, {\"title\": \"Remove Nodes From Linked List\", \"titleSlug\": \"remove-nodes-from-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u4ece\\u94fe\\u8868\\u4e2d\\u79fb\\u9664\\u8282\\u70b9\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3]\n[1,2,3,4,5]",
        "title": "Delete Nodes From Linked List Present in Array",
        "titleSlug": "delete-nodes-from-linked-list-present-in-array",
        "infer_hints": [
            "How about a recursive solution?",
            "Use a set to keep track of all the elements in nums.",
            "How about removing each node one by one and checking if it is in the array?",
            "How about a hash map?",
            "The linked list is given in reverse order.",
            "How about using a set to check if a node's value is in the array?",
            "Use a hash set to keep track of the values of nodes in the linked list.",
            "Try to use a hash table to record the elements in nums.",
            "How about using a hash set to keep track of the nodes that need to be removed?",
            "What happens when we have to delete the head of the linked list?",
            "Can you traverse the linked list only once?",
            "You can do this in one pass.",
            "The idea is to iterate over the linked list and for each node check if its value is present in the array.",
            "Use a set to check if the value of a node is in nums.",
            "You can use a hashset to keep track of all the values that need to be deleted.",
            "Use a hashset to store the values from the array.",
            "Keep track of nodes that should be removed.",
            "You can solve this problem by creating a hash set of all elements in nums and then iterating over the linked list and removing nodes that are in the hash set.",
            "Iterate through the array and create a set of values that we should remove.",
            "Keep track of the nodes before the current one."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int nonSpecialCount(int l, int r) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int nonSpecialCount(int l, int r) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def nonSpecialCount(self, l, r):\n        \"\"\"\n        :type l: int\n        :type r: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int nonSpecialCount(int l, int r) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NonSpecialCount(int l, int r) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar nonSpecialCount = function(l, r) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function nonSpecialCount(l: number, r: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $l\n     * @param Integer $r\n     * @return Integer\n     */\n    function nonSpecialCount($l, $r) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func nonSpecialCount(_ l: Int, _ r: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun nonSpecialCount(l: Int, r: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int nonSpecialCount(int l, int r) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func nonSpecialCount(l int, r int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef non_special_count(l, r)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def nonSpecialCount(l: Int, r: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn non_special_count(l: i32, r: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (non-special-count l r)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec non_special_count(L :: integer(), R :: integer()) -> integer().\nnon_special_count(L, R) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec non_special_count(l :: integer, r :: integer) :: integer\n  def non_special_count(l, r) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given 2 <strong>positive</strong> integers <code>l</code> and <code>r</code>. For any number <code>x</code>, all positive divisors of <code>x</code> <em>except</em> <code>x</code> are called the <strong>proper divisors</strong> of <code>x</code>.</p>\n\n<p>A number is called <strong>special</strong> if it has exactly 2 <strong>proper divisors</strong>. For example:</p>\n\n<ul>\n\t<li>The number 4 is <em>special</em> because it has proper divisors 1 and 2.</li>\n\t<li>The number 6 is <em>not special</em> because it has proper divisors 1, 2, and 3.</li>\n</ul>\n\n<p>Return the count of numbers in the range <code>[l, r]</code> that are <strong>not</strong> <strong>special</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">l = 5, r = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no special numbers in the range <code>[5, 7]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">l = 4, r = 16</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">11</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The special numbers in the range <code>[4, 16]</code> are 4 and 9.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= l &lt;= r &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "5\n7\n4\n16",
        "formTitle": "[3233]Find the Count of Numbers Which Are Not Special",
        "frequency": 0.0,
        "frontendQuestionId": "3233",
        "hints": [
            "A special number must be a square of a prime number.",
            "We need to find all primes in the range <code>[sqrt(l), sqrt(r)]</code>.",
            "Use sieve to find primes till <code>sqrt(10<sup>9</sup>)</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "nonSpecialCount",
            "params": [
                {
                    "name": "l",
                    "type": "integer"
                },
                {
                    "name": "r",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3507",
        "similarQuestions": [
            "[{\"title\": \"Count Primes\", \"titleSlug\": \"count-primes\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u8ba1\\u6570\\u8d28\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "5\n7",
        "title": "Find the Count of Numbers Which Are Not Special",
        "titleSlug": "find-the-count-of-numbers-which-are-not-special",
        "infer_hints": [
            "The sum of proper divisors of a number is defined as the sum of all the divisors of the number minus the number itself.",
            "Find all divisors of each number in the range.",
            "You may use the following property of prime numbers: If a number n is prime, then all its proper divisors are less than or equal to sqrt(n).",
            "You can use the fact that a number <code>x</code> is not special if and only if it has at least 3 divisors.",
            "You can pre-calculate the count of divisors for all numbers up to 10^9.",
            "A number <code>x</code> is special iff the sum of the divisors of <code>x</code> is equal to <code>2*x</code>.",
            "A number is special if it has exactly two divisors.",
            "Count the number of numbers from 1 to 1000000000.",
            "Use the formula n = (1+sqrt(x))(1+sqrt(x)) to get all divisors of x.",
            "You may need to implement a function that checks whether a number has exactly 2 proper divisors.",
            "Find the number of numbers that have exactly 3 divisors.",
            "Find the count of numbers with exactly one proper divisor.",
            "Find the number of divisors of each number.",
            "Try to find a pattern.",
            "For each number, we need to find its proper divisors.",
            "For each number, find its divisors.",
            "For every number x, count its proper divisors.",
            "For each number, check if it has exactly two proper divisors.",
            "A number <code>x</code> is special if and only if there are exactly two distinct positive divisors of <code>x</code>.",
            "Try to calculate the number of proper divisors of each number in the range."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minChanges(int n, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minChanges(int n, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minChanges(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minChanges(self, n: int, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minChanges(int n, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinChanges(int n, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar minChanges = function(n, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minChanges(n: number, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function minChanges($n, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minChanges(_ n: Int, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minChanges(n: Int, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minChanges(int n, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minChanges(n int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef min_changes(n, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minChanges(n: Int, k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_changes(n: i32, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-changes n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_changes(N :: integer(), K :: integer()) -> integer().\nmin_changes(N, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_changes(n :: integer, k :: integer) :: integer\n  def min_changes(n, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two positive integers <code>n</code> and <code>k</code>.</p>\n\n<p>You can choose <strong>any</strong> bit in the <strong>binary representation</strong> of <code>n</code> that is equal to 1 and change it to 0.</p>\n\n<p>Return the <em>number of changes</em> needed to make <code>n</code> equal to <code>k</code>. If it is impossible, return -1.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 13, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong><br />\nInitially, the binary representations of <code>n</code> and <code>k</code> are <code>n = (1101)<sub>2</sub></code> and <code>k = (0100)<sub>2</sub></code>.<br />\nWe can change the first and fourth bits of <code>n</code>. The resulting integer is <code>n = (<u><strong>0</strong></u>10<u><strong>0</strong></u>)<sub>2</sub> = k</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 21, k = 21</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong><br />\n<code>n</code> and <code>k</code> are already equal, so no changes are needed.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 14, k = 13</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong><br />\nIt is not possible to make <code>n</code> equal to <code>k</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, k &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "exampleTestcases": "13\n4\n21\n21\n14\n13",
        "formTitle": "[3226]Number of Bit Changes to Make Two Integers Equal",
        "frequency": 0.0,
        "frontendQuestionId": "3226",
        "hints": [
            "Find the binary representations of <code>n</code> and <code>k</code>.",
            "Any bit that is equal to 1 in <code>n</code> and equal to 0 in <code>k</code> needs to be changed."
        ],
        "level": 1,
        "metaData": {
            "name": "minChanges",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3508",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "13\n4",
        "title": "Number of Bit Changes to Make Two Integers Equal",
        "titleSlug": "number-of-bit-changes-to-make-two-integers-equal",
        "infer_hints": [
            "What if we have the binary representation of <code>n</code> and <code>k</code>?",
            "How many changes do you need to make if you can change any bit to 1 or 0?",
            "Try to find the smallest number of changes to make <code>n</code> equal to <code>k</code>.",
            "If we are allowed to flip all the bits of n, how many flips are needed to make n equal to k?",
            "Try to find the minimum number of bits to flip to make <code>n</code> equal to <code>k</code>.",
            "Try all possibilities of changing one bit of n.",
            "Think about the bit-by-bit comparison of n and k.",
            "Use bit manipulation to solve this problem.",
            "Try to use bitwise operations.",
            "Try to convert the numbers to their binary representations and count the number of bits that are different.",
            "We can check every bit of n.",
            "Use a bit mask to set the i-th bit of m to 0.",
            "Try to perform bit manipulation operations on the given integers.",
            "Can you perform bitwise AND operation?",
            "Use bit manipulation to solve this problem.",
            "You can flip a bit in n to make it equal to k.  How many flips are needed?",
            "How many changes do we need to make the binary representation of n equal to that of k?",
            "Use bit manipulation to solve this problem.",
            "For each bit in the binary representation of <code>n</code>, try changing it to 1.",
            "How can we make the two numbers equal?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string losingPlayer(int x, int y) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String losingPlayer(int x, int y) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def losingPlayer(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def losingPlayer(self, x: int, y: int) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* losingPlayer(int x, int y) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string LosingPlayer(int x, int y) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} x\n * @param {number} y\n * @return {string}\n */\nvar losingPlayer = function(x, y) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function losingPlayer(x: number, y: number): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @return String\n     */\n    function losingPlayer($x, $y) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func losingPlayer(_ x: Int, _ y: Int) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun losingPlayer(x: Int, y: Int): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String losingPlayer(int x, int y) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func losingPlayer(x int, y int) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} x\n# @param {Integer} y\n# @return {String}\ndef losing_player(x, y)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def losingPlayer(x: Int, y: Int): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn losing_player(x: i32, y: i32) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (losing-player x y)\n  (-> exact-integer? exact-integer? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec losing_player(X :: integer(), Y :: integer()) -> unicode:unicode_binary().\nlosing_player(X, Y) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec losing_player(x :: integer, y :: integer) :: String.t\n  def losing_player(x, y) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two <strong>positive</strong> integers <code>x</code> and <code>y</code>, denoting the number of coins with values 75 and 10 <em>respectively</em>.</p>\n\n<p>Alice and Bob are playing a game. Each turn, starting with <strong>Alice</strong>, the player must pick up coins with a <strong>total</strong> value 115. If the player is unable to do so, they <strong>lose</strong> the game.</p>\n\n<p>Return the <em>name</em> of the player who wins the game if both players play <strong>optimally</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">x = 2, y = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;Alice&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The game ends in a single turn:</p>\n\n<ul>\n\t<li>Alice picks 1 coin with a value of 75 and 4 coins with a value of 10.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">x = 4, y = 11</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;Bob&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The game ends in 2 turns:</p>\n\n<ul>\n\t<li>Alice picks 1 coin with a value of 75 and 4 coins with a value of 10.</li>\n\t<li>Bob picks 1 coin with a value of 75 and 4 coins with a value of 10.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x, y &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "2\n7\n4\n11",
        "formTitle": "[3222]Find the Winning Player in Coin Game",
        "frequency": 0.0,
        "frontendQuestionId": "3222",
        "hints": [
            "The only way to make 115 is to use one coin of value 75 and four coins of value 10. Each turn uses up these many coins.",
            "Hence the number of turns is <code>min(x, y / 4)</code>.",
            "Determine the winner from its parity."
        ],
        "level": 1,
        "metaData": {
            "name": "losingPlayer",
            "params": [
                {
                    "name": "x",
                    "type": "integer"
                },
                {
                    "name": "y",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3511",
        "similarQuestions": [
            "[{\"title\": \"Can I Win\", \"titleSlug\": \"can-i-win\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6211\\u80fd\\u8d62\\u5417\", \"isPaidOnly\": false}, {\"title\": \"Predict the Winner\", \"titleSlug\": \"predict-the-winner\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u9884\\u6d4b\\u8d62\\u5bb6\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "2\n7",
        "title": "Find the Winning Player in Coin Game",
        "titleSlug": "find-the-winning-player-in-coin-game",
        "infer_hints": [
            "If Alice can't pick up 115, what does that mean?",
            "What is the worst case for the number of moves Alice and Bob have to make?",
            "Let's start with a simple brute force solution.",
            "Alice can always win by taking 1 coin from the heap of size 75, or taking 2 coins from the heap of size 100.",
            "Let's consider the states in a bottom-up manner.  Can you use the states dp[i] to represent whether Alice will win with i coins remaining?",
            "Can we use dynamic programming to solve this?",
            "If there is a total of 115 coins, then Alice wins if Bob doesn't pick any coin.",
            "How many coins of 10 are needed to win the game?",
            "Alice can always win by making the first move with one coin of value 10, then Bob can make a move to win the game with 2 coins of value 75.",
            "Alice wins if Bob does not win.",
            "The game is turn based and the next player will lose if there is no way to make the sum to 115.",
            "Alice can always win the game if the number of 75 coins is even.",
            "How to check if the first player to move can win?",
            "The winning strategy for Alice is to take 1 coin of value 75, 2 coins of value 10 and 1 coin of value 50. The winning strategy for Bob is to take 1 coin of value 75 and 1 coin of value 50.",
            "Alice can always win if Bob doesn't have the number 75 or 100.",
            "Can you think of a function dp(i, j) which denotes the result of the game if Alice and Bob play optimally with i 75-coins and j 10-coins?",
            "Can we use dynamic programming?  We can try all possible moves.  For each move, we can find out the result of the game if we make that move.",
            "This is a Nim game.  Now, the question is to determine if Alice or Bob wins the game.",
            "Alice will always win if Bob is playing optimally.",
            "We can use the game theory.  The winning strategy is to choose the coin with the smaller value if it is possible to do so.  If not, we should choose the coin with the larger value."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool canAliceWin(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean canAliceWin(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def canAliceWin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool canAliceWin(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool CanAliceWin(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canAliceWin = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function canAliceWin(nums: number[]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canAliceWin($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func canAliceWin(_ nums: [Int]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun canAliceWin(nums: IntArray): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool canAliceWin(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func canAliceWin(nums []int) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_alice_win(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def canAliceWin(nums: Array[Int]): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn can_alice_win(nums: Vec<i32>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (can-alice-win nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec can_alice_win(Nums :: [integer()]) -> boolean().\ncan_alice_win(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec can_alice_win(nums :: [integer]) :: boolean\n  def can_alice_win(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of <strong>positive</strong> integers <code>nums</code>.</p>\n\n<p>Alice and Bob are playing a game. In the game, Alice can choose <strong>either</strong> all single-digit numbers or all double-digit numbers from <code>nums</code>, and the rest of the numbers are given to Bob. Alice wins if the sum of her numbers is <strong>strictly greater</strong> than the sum of Bob&#39;s numbers.</p>\n\n<p>Return <code>true</code> if Alice can win this game, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,10]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Alice cannot win by choosing either single-digit or double-digit numbers.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5,14]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Alice can win by choosing single-digit numbers which have a sum equal to 15.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [5,5,5,25]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Alice can win by choosing double-digit numbers which have a sum equal to 25.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 99</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4,10]\n[1,2,3,4,5,14]\n[5,5,5,25]",
        "formTitle": "[3232]Find if Digit Game Can Be Won",
        "frequency": 0.0,
        "frontendQuestionId": "3232",
        "hints": [
            "Alice wins if the sum of all single-digit numbers and the sum of all double-digit numbers are different."
        ],
        "level": 1,
        "metaData": {
            "name": "canAliceWin",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3515",
        "similarQuestions": [
            "[{\"title\": \"Find Numbers with Even Number of Digits\", \"titleSlug\": \"find-numbers-with-even-number-of-digits\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u4f4d\\u6570\\u4e3a\\u5076\\u6570\\u7684\\u6570\\u5b57\", \"isPaidOnly\": false}, {\"title\": \"Count Integers With Even Digit Sum\", \"titleSlug\": \"count-integers-with-even-digit-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u5404\\u4f4d\\u6570\\u5b57\\u4e4b\\u548c\\u4e3a\\u5076\\u6570\\u7684\\u6574\\u6570\\u4e2a\\u6570\", \"isPaidOnly\": false}]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,4,10]",
        "title": "Find if Digit Game Can Be Won",
        "titleSlug": "find-if-digit-game-can-be-won",
        "infer_hints": [
            "For every turn, you can either choose a number from the front or from the back.!",
            "Let's try to find the answer for smaller numbers first.",
            "What does the modulo by 9 rule tell us?",
            "The key observation is that if Alice can win, then she can choose any number, and then the sum of the remaining numbers will be divisible by 10.",
            "Think about the game in terms of the sum of the digits.",
            "Use Dynamic Programming.",
            "Can we solve this problem in a bottom-up manner?",
            "If Alice chooses single-digit numbers, she can only win if the sum of the single-digit numbers is greater than the sum of the double-digit numbers. If Alice chooses double-digit numbers, she can only win if the sum of the double-digit numbers is greater than the sum of the single-digit numbers.",
            "How many single-digit numbers are there in total?",
            "Find the sum of the digits of each number in the array.",
            "If Alice can win, she will win if the sum of her numbers is greater than the sum of Bob's numbers.",
            "Use bitwise operation to represent the states.",
            "What can be the sum of Alice's numbers?",
            "If the sum of the digits of a number is divisible by 3, then the number can be split into two subsets such that the sum of the digits in both subsets is divisible by 3.",
            "Use dynamic programming.  Can you compute the sum of numbers Alice can win with?",
            "If Alice has the advantage, then she can choose either all single-digit numbers or all double-digit numbers.",
            "If the sum of the numbers is less than 10, Alice can always win.",
            "Try to find a pattern.",
            "We can make a game where Bob takes the smallest possible number and then Alice takes the smallest possible number.",
            "Use a dynamic programming to check if Alice can win."
        ]
    }
]