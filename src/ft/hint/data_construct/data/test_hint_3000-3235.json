[
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumSetSize(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumSetSize(int[] nums1, int[] nums2) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumSetSize(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumSetSize(self, nums1: List[int], nums2: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumSetSize(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumSetSize(int[] nums1, int[] nums2) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maximumSetSize \u003d function(nums1, nums2) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumSetSize(nums1: number[], nums2: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function maximumSetSize($nums1, $nums2) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumSetSize(_ nums1: [Int], _ nums2: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumSetSize(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumSetSize(List\u003cint\u003e nums1, List\u003cint\u003e nums2) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumSetSize(nums1 []int, nums2 []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef maximum_set_size(nums1, nums2)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumSetSize(nums1: Array[Int], nums2: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_set_size(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-set-size nums1 nums2)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_set_size(Nums1 :: [integer()], Nums2 :: [integer()]) -\u003e integer().\nmaximum_set_size(Nums1, Nums2) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_set_size(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def maximum_set_size(nums1, nums2) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two \u003cstrong\u003e0-indexed\u003c/strong\u003e integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e of even length \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou must remove \u003ccode\u003en / 2\u003c/code\u003e elements from \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003en / 2\u003c/code\u003e elements from \u003ccode\u003enums2\u003c/code\u003e. After the removals, you insert the remaining elements of \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e into a set \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e possible size of the set\u003c/em\u003e \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 \u003d [1,2,1,2], nums2 \u003d [1,1,1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 \u003d [2,2] and nums2 \u003d [1,1]. Therefore, s \u003d {1,2}.\nIt can be shown that 2 is the maximum possible size of the set s after the removals.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 \u003d [1,2,3,4,5,6], nums2 \u003d [2,3,2,3,2,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 \u003d [1,4,5] and nums2 \u003d [2,3,2]. Therefore, s \u003d {1,2,3,4,5}.\nIt can be shown that 5 is the maximum possible size of the set s after the removals.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 \u003d [1,1,2,2,3,3], nums2 \u003d [4,4,5,5,6,6]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 \u003d [1,2,3] and nums2 \u003d [4,5,6]. Therefore, s \u003d {1,2,3,4,5,6}.\nIt can be shown that 6 is the maximum possible size of the set s after the removals.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d nums1.length \u003d\u003d nums2.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u0026lt;\u003d 2 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en\u003c/code\u003e is even.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums1[i], nums2[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,1,2]\n[1,1,1,1]\n[1,2,3,4,5,6]\n[2,3,2,3,2,3]\n[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
    "formTitle": "[3002]Maximum Size of a Set After Removals",
    "frequency": 0.0,
    "frontendQuestionId": "3002",
    "hints": [
      "Removing \u003ccode\u003en / 2\u003c/code\u003e elements from each array is the same as keeping \u003ccode\u003en / 2\u003ccode\u003e elements in each array.",
      "Think of a greedy algorithm.",
      "For each array, we will greedily keep the elements that are only in that array. Once we run out of such elements, we will keep the elements that are common to both arrays."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumSetSize",
      "params": [
        {
          "name": "nums1",
          "type": "integer[]"
        },
        {
          "name": "nums2",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3228",
    "similarQuestions": [
      "[{\"title\": \"Intersection of Two Arrays\", \"titleSlug\": \"intersection-of-two-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u4e24\\u4e2a\\u6570\\u7ec4\\u7684\\u4ea4\\u96c6\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,2,1,2]\n[1,1,1,1]",
    "title": "Maximum Size of a Set After Removals",
    "titleSlug": "maximum-size-of-a-set-after-removals"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxPartitionsAfterOperations(string s, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxPartitionsAfterOperations(String s, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxPartitionsAfterOperations(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxPartitionsAfterOperations(self, s: str, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxPartitionsAfterOperations(char* s, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxPartitionsAfterOperations(string s, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar maxPartitionsAfterOperations \u003d function(s, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxPartitionsAfterOperations(s: string, k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxPartitionsAfterOperations($s, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxPartitionsAfterOperations(_ s: String, _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxPartitionsAfterOperations(s: String, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxPartitionsAfterOperations(String s, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxPartitionsAfterOperations(s string, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_partitions_after_operations(s, k)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxPartitionsAfterOperations(s: String, k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_partitions_after_operations(s: String, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-partitions-after-operations s k)\n  (-\u003e string? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_partitions_after_operations(S :: unicode:unicode_binary(), K :: integer()) -\u003e integer().\nmax_partitions_after_operations(S, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_partitions_after_operations(s :: String.t, k :: integer) :: integer\n  def max_partitions_after_operations(s, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFirst, you are allowed to change \u003cstrong\u003eat most\u003c/strong\u003e \u003cstrong\u003eone\u003c/strong\u003e index in \u003ccode\u003es\u003c/code\u003e to another lowercase English letter.\u003c/p\u003e\n\n\u003cp\u003eAfter that, do the following partitioning operation until \u003ccode\u003es\u003c/code\u003e is \u003cstrong\u003eempty\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose the \u003cstrong\u003elongest\u003c/strong\u003e \u003cstrong\u003eprefix\u003c/strong\u003e of \u003ccode\u003es\u003c/code\u003e containing at most \u003ccode\u003ek\u003c/code\u003e \u003cstrong\u003edistinct\u003c/strong\u003e characters.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eDelete\u003c/strong\u003e the prefix from \u003ccode\u003es\u003c/code\u003e and increase the number of partitions by one. The remaining characters (if any) in \u003ccode\u003es\u003c/code\u003e maintain their initial order.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn an integer denoting the \u003cstrong\u003emaximum\u003c/strong\u003e number of resulting partitions after the operations by optimally choosing at most one index to change.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;accca\u0026quot;, k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe optimal way is to change \u003ccode\u003es[2]\u003c/code\u003e to something other than a and c, for example, b. then it becomes \u003ccode\u003e\u0026quot;acbca\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen we perform the operations:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eThe longest prefix containing at most 2 distinct characters is \u003ccode\u003e\u0026quot;ac\u0026quot;\u003c/code\u003e, we remove it and \u003ccode\u003es\u003c/code\u003e becomes \u003ccode\u003e\u0026quot;bca\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eNow The longest prefix containing at most 2 distinct characters is \u003ccode\u003e\u0026quot;bc\u0026quot;\u003c/code\u003e, so we remove it and \u003ccode\u003es\u003c/code\u003e becomes \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eFinally, we remove \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e and \u003ccode\u003es\u003c/code\u003e becomes empty, so the procedure ends.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eDoing the operations, the string is divided into 3 partitions, so the answer is 3.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;aabaab\u0026quot;, k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eInitially\u0026nbsp;\u003ccode\u003es\u003c/code\u003e\u0026nbsp;contains 2 distinct characters, so whichever character we change, it will contain at most 3 distinct characters, so the longest prefix with at most 3 distinct characters would always be all of it, therefore the answer is 1.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;xxyz\u0026quot;, k \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe optimal way is to change\u0026nbsp;\u003ccode\u003es[0]\u003c/code\u003e\u0026nbsp;or\u0026nbsp;\u003ccode\u003es[1]\u003c/code\u003e\u0026nbsp;to something other than characters in\u0026nbsp;\u003ccode\u003es\u003c/code\u003e, for example, to change\u0026nbsp;\u003ccode\u003es[0]\u003c/code\u003e\u0026nbsp;to\u0026nbsp;\u003ccode\u003ew\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen\u0026nbsp;\u003ccode\u003es\u003c/code\u003e\u0026nbsp;becomes \u003ccode\u003e\u0026quot;wxyz\u0026quot;\u003c/code\u003e, which consists of 4 distinct characters, so as \u003ccode\u003ek\u003c/code\u003e is 1, it will divide into 4 partitions.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 26\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"accca\"\n2\n\"aabaab\"\n3\n\"xxyz\"\n1",
    "formTitle": "[3003]Maximize the Number of Partitions After Operations",
    "frequency": 0.0,
    "frontendQuestionId": "3003",
    "hints": [
      "For each position, try to brute-force the replacements.",
      "To speed up the brute-force solution, we can precompute the following (without changing any index) using prefix sums and binary search:\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003epref[i]\u003c/code\u003e: The number of resulting partitions from the operations by performing the operations on \u003ccode\u003es[0:i]\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003esuff[i]\u003c/code\u003e: The number of resulting partitions from the operations by performing the operations on \u003ccode\u003es[i:n - 1]\u003c/code\u003e, where \u003ccode\u003en \u003d\u003d s.length\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003epartition_start[i]\u003c/code\u003e: The start index of the partition containing the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e index after performing the operations.\u003c/li\u003e\r\n\u003c/ul\u003e",
      "Now, for a position \u003ccode\u003ei\u003c/code\u003e, we can try all possible \u003ccode\u003e25\u003c/code\u003e replacements:\u003cbr /\u003e\r\nFor a replacement, using prefix sums and binary search, we need to find the rightmost index, \u003ccode\u003er\u003c/code\u003e, such that the number of distinct characters in the range \u003ccode\u003e[partition_start[i], r]\u003c/code\u003e is at most \u003ccode\u003ek\u003c/code\u003e.\u003cbr /\u003e\r\nThere are \u003ccode\u003e2\u003c/code\u003e cases:\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003er \u003e\u003d i\u003c/code\u003e: the number of resulting partitions in this case is \u003ccode\u003e1 + pref[partition_start[i] - 1] + suff[r + 1]\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eOtherwise, we need to find the rightmost index \u003ccode\u003er\u003csub\u003e2\u003c/sub\u003e\u003c/code\u003e such that the number of distinct characters in the range \u003ccode\u003e[r:r\u003csub\u003e2\u003c/sub\u003e]\u003c/code\u003e is at most \u003ccode\u003ek\u003c/code\u003e. The answer in this case is \u003ccode\u003e2 + pref[partition_start[i] - 1] + suff[r\u003csub\u003e2\u003c/sub\u003e + 1]\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e",
      "The answer is the maximum among all replacements."
    ],
    "level": 3,
    "metaData": {
      "name": "maxPartitionsAfterOperations",
      "params": [
        {
          "name": "s",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3233",
    "similarQuestions": [
      "[{\"title\": \"Can Make Palindrome from Substring\", \"titleSlug\": \"can-make-palindrome-from-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6784\\u5efa\\u56de\\u6587\\u4e32\\u68c0\\u6d4b\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "\"accca\"\n2",
    "title": "Maximize the Number of Partitions After Operations",
    "titleSlug": "maximize-the-number-of-partitions-after-operations"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long findMaximumNumber(long long k, int x) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long findMaximumNumber(long k, int x) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findMaximumNumber(self, k, x):\n        \"\"\"\n        :type k: int\n        :type x: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def findMaximumNumber(self, k: int, x: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long findMaximumNumber(long long k, int x) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long FindMaximumNumber(long k, int x) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} k\n * @param {number} x\n * @return {number}\n */\nvar findMaximumNumber \u003d function(k, x) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function findMaximumNumber(k: number, x: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $x\n     * @return Integer\n     */\n    function findMaximumNumber($k, $x) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func findMaximumNumber(_ k: Int, _ x: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun findMaximumNumber(k: Long, x: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int findMaximumNumber(int k, int x) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func findMaximumNumber(k int64, x int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} k\n# @param {Integer} x\n# @return {Integer}\ndef find_maximum_number(k, x)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def findMaximumNumber(k: Long, x: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn find_maximum_number(k: i64, x: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (find-maximum-number k x)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec find_maximum_number(K :: integer(), X :: integer()) -\u003e integer().\nfind_maximum_number(K, X) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec find_maximum_number(k :: integer, x :: integer) :: integer\n  def find_maximum_number(k, x) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer \u003ccode\u003ek\u003c/code\u003e and an integer \u003ccode\u003ex\u003c/code\u003e. The price of a number\u0026nbsp;\u003ccode\u003enum\u003c/code\u003e is calculated by the count of \u003cspan data-keyword\u003d\"set-bit\"\u003eset bits\u003c/span\u003e at positions \u003ccode\u003ex\u003c/code\u003e, \u003ccode\u003e2x\u003c/code\u003e, \u003ccode\u003e3x\u003c/code\u003e, etc., in its binary representation, starting from the least significant bit. The following table contains examples of how price is calculated.\u003c/p\u003e\n\n\u003ctable border\u003d\"1\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003ex\u003c/th\u003e\n\t\t\t\u003cth\u003enum\u003c/th\u003e\n\t\t\t\u003cth\u003eBinary Representation\u003c/th\u003e\n\t\t\t\u003cth\u003ePrice\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e13\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e\u003cu\u003e0\u003c/u\u003e\u003cu\u003e0\u003c/u\u003e\u003cu\u003e0\u003c/u\u003e\u003cu\u003e0\u003c/u\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cu\u003e0\u003c/u\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e13\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003cu\u003e0\u003c/u\u003e0\u003cu\u003e0\u003c/u\u003e0\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e1\u003cu\u003e0\u003c/u\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e233\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e1\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e0\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e0\u003cu\u003e0\u003c/u\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e13\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e00\u003cu\u003e0\u003c/u\u003e01\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e01\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e362\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e01\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e01\u003cu\u003e0\u003c/u\u003e10\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe\u0026nbsp;\u003cstrong\u003eaccumulated price\u003c/strong\u003e\u0026nbsp;of\u0026nbsp;\u003ccode\u003enum\u003c/code\u003e\u0026nbsp;is the \u003cb\u003etotal\u003c/b\u003e\u0026nbsp;price of\u0026nbsp;numbers from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003enum\u003c/code\u003e. \u003ccode\u003enum\u003c/code\u003e\u0026nbsp;is considered\u0026nbsp;\u003cstrong\u003echeap\u003c/strong\u003e\u0026nbsp;if its accumulated price\u0026nbsp;is less than or equal to \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cb\u003egreatest\u003c/b\u003e\u0026nbsp;cheap number.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ek \u003d 9, x \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAs shown in the table below, \u003ccode\u003e6\u003c/code\u003e is the greatest cheap number.\u003c/p\u003e\n\n\u003ctable border\u003d\"1\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003ex\u003c/th\u003e\n\t\t\t\u003cth\u003enum\u003c/th\u003e\n\t\t\t\u003cth\u003eBinary Representation\u003c/th\u003e\n\t\t\t\u003cth\u003ePrice\u003c/th\u003e\n\t\t\t\u003cth\u003eAccumulated Price\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e\u003cu\u003e0\u003c/u\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cu\u003e0\u003c/u\u003e\u003cu\u003e0\u003c/u\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e5\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e5\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cu\u003e0\u003c/u\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e7\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e6\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e9\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e7\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e12\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ek \u003d 7, x \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e9\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAs shown in the table below, \u003ccode\u003e9\u003c/code\u003e is the greatest cheap number.\u003c/p\u003e\n\n\u003ctable border\u003d\"1\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003ex\u003c/th\u003e\n\t\t\t\u003cth\u003enum\u003c/th\u003e\n\t\t\t\u003cth\u003eBinary Representation\u003c/th\u003e\n\t\t\t\u003cth\u003ePrice\u003c/th\u003e\n\t\t\t\u003cth\u003eAccumulated Price\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e0\u003cu\u003e0\u003c/u\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e0\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e0\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e1\u003cu\u003e0\u003c/u\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e5\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e1\u003cu\u003e0\u003c/u\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e6\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e1\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e7\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cu\u003e0\u003c/u\u003e1\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e8\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e0\u003cu\u003e0\u003c/u\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e5\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e9\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e0\u003cu\u003e0\u003c/u\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e6\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e10\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e0\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e8\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e15\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d x \u0026lt;\u003d 8\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "9\n1\n7\n2",
    "formTitle": "[3007]Maximum Number That Sum of the Prices Is Less Than or Equal to K",
    "frequency": 0.0,
    "frontendQuestionId": "3007",
    "hints": [
      "Binary search the answer.",
      "In each step of the binary search you should calculate the number of the set bits in the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e position. Then calculate the sum of them."
    ],
    "level": 2,
    "metaData": {
      "name": "findMaximumNumber",
      "params": [
        {
          "name": "k",
          "type": "long"
        },
        {
          "name": "x",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3240",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "9\n1",
    "title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
    "titleSlug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxFrequencyElements(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxFrequencyElements(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxFrequencyElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxFrequencyElements(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxFrequencyElements(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxFrequencyElements(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxFrequencyElements \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxFrequencyElements(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxFrequencyElements($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxFrequencyElements(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxFrequencyElements(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxFrequencyElements(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxFrequencyElements(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_frequency_elements(nums)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxFrequencyElements(nums: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_frequency_elements(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-frequency-elements nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_frequency_elements(Nums :: [integer()]) -\u003e integer().\nmax_frequency_elements(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_frequency_elements(nums :: [integer]) :: integer\n  def max_frequency_elements(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e consisting of \u003cstrong\u003epositive\u003c/strong\u003e integers.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003etotal frequencies\u003c/strong\u003e of elements in\u003c/em\u003e\u003cem\u003e \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e\u0026nbsp;\u003cem\u003esuch that those elements all have the \u003cstrong\u003emaximum\u003c/strong\u003e frequency\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003efrequency\u003c/strong\u003e of an element is the number of occurrences of that element in the array.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,2,3,1,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,3,4,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,2,3,1,4]\n[1,2,3,4,5]",
    "formTitle": "[3005]Count Elements With Maximum Frequency",
    "frequency": 0.0,
    "frontendQuestionId": "3005",
    "hints": [
      "Find frequencies of all elements of the array.",
      "Find the elements that have the maximum frequencies and count their total occurrences."
    ],
    "level": 1,
    "metaData": {
      "name": "maxFrequencyElements",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3242",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,2,2,3,1,4]",
    "title": "Count Elements With Maximum Frequency",
    "titleSlug": "count-elements-with-maximum-frequency"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumArrayLength(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumArrayLength(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumArrayLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumArrayLength(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumArrayLength(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumArrayLength(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumArrayLength \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumArrayLength(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumArrayLength($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumArrayLength(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumArrayLength(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumArrayLength(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumArrayLength(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_array_length(nums)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumArrayLength(nums: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_array_length(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-array-length nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_array_length(Nums :: [integer()]) -\u003e integer().\nminimum_array_length(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_array_length(nums :: [integer]) :: integer\n  def minimum_array_length(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e containing \u003cstrong\u003epositive\u003c/strong\u003e integers.\u003c/p\u003e\n\n\u003cp\u003eYour task is to \u003cstrong\u003eminimize\u003c/strong\u003e the length of \u003ccode\u003enums\u003c/code\u003e by performing the following operations \u003cstrong\u003eany\u003c/strong\u003e number of times (including zero):\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eSelect \u003cstrong\u003etwo\u003c/strong\u003e \u003cstrong\u003edistinct\u003c/strong\u003e indices \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ej\u003c/code\u003e from \u003ccode\u003enums\u003c/code\u003e, such that \u003ccode\u003enums[i] \u0026gt; 0\u003c/code\u003e and \u003ccode\u003enums[j] \u0026gt; 0\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eInsert the result of \u003ccode\u003enums[i] % nums[j]\u003c/code\u003e at the end of \u003ccode\u003enums\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eDelete the elements at indices \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ej\u003c/code\u003e from \u003ccode\u003enums\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean integer denoting the \u003cstrong\u003eminimum\u003c/strong\u003e \u003cstrong\u003elength\u003c/strong\u003e of \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e\u003cem\u003e after performing the operation any number of times.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,4,3,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e One way to minimize the length of the array is as follows:\nOperation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.\nnums becomes [1,1,3].\nOperation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [1,1,3,1], then delete elements at indices 1 and 2.\nnums becomes [1,1].\nOperation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [1,1,0], then delete elements at indices 1 and 0.\nnums becomes [0].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length. \u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [5,5,5,10,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e One way to minimize the length of the array is as follows:\nOperation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.\nnums becomes [5,5,5,5]. \nOperation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3. \nnums becomes [5,5,0]. \nOperation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end and it becomes [5,5,0,0], then delete elements at indices 0 and 1.\nnums becomes [0,0].\nThe length of nums cannot be reduced further. Hence, the answer is 2.\nIt can be shown that 2 is the minimum achievable length. \u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [2,3,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e One way to minimize the length of the array is as follows: \nOperation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [2,3,4,3], then delete elements at indices 1 and 2.\nnums becomes [2,3].\nOperation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [2,3,1], then delete elements at indices 1 and 0.\nnums becomes [1].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length.\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,4,3,1]\n[5,5,5,10,5]\n[2,3,4]",
    "formTitle": "[3012]Minimize Length of Array Using Operations",
    "frequency": 0.0,
    "frontendQuestionId": "3012",
    "hints": [
      "The problem can be solved by considering different cases.",
      "Let the minimum value in \u003ccode\u003enums\u003c/code\u003e be \u003ccode\u003ex\u003c/code\u003e; we can consider the following cases:",
      "If \u003ccode\u003ex\u003c/code\u003e occurs once: The minimum length of \u003ccode\u003enums\u003c/code\u003e achievable in this case is \u003ccode\u003e1\u003c/code\u003e, since every other value, \u003ccode\u003ey\u003c/code\u003e, can be paired with \u003ccode\u003ex\u003c/code\u003e, resulting in deleting \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e, and inserting \u003ccode\u003ex % y \u003d\u003d x\u003c/code\u003e, since \u003ccode\u003ex \u003c y\u003c/code\u003e. So, only \u003ccode\u003ex\u003c/code\u003e remains after the operations.",
      "If there is a value \u003ccode\u003ey\u003c/code\u003e in \u003ccode\u003enums\u003c/code\u003e such that \u003ccode\u003ey % x\u003c/code\u003e is not equal to \u003ccode\u003e0\u003c/code\u003e: The minimum achievable length in this case is \u003ccode\u003e1\u003c/code\u003e as well, because inserting \u003ccode\u003ey % x\u003c/code\u003e creates a new minimum, since \u003ccode\u003ey % x \u003c x\u003c/code\u003e, returning to the first case.",
      "If neither of the previous cases holds, and \u003ccode\u003ex\u003c/code\u003e occurs \u003ccode\u003ecnt\u003c/code\u003e times: The minimum length of \u003ccode\u003enums\u003c/code\u003e achievable in this case is \u003ccode\u003eceil(cnt / 2)\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumArrayLength",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3244",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "[1,4,3,1]",
    "title": "Minimize Length of Array Using Operations",
    "titleSlug": "minimize-length-of-array-using-operations"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e beautifulIndices(string s, string a, string b, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public List\u003cInteger\u003e beautifulIndices(String s, String a, String b, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def beautifulIndices(self, s, a, b, k):\n        \"\"\"\n        :type s: str\n        :type a: str\n        :type b: str\n        :type k: int\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* beautifulIndices(char* s, char* a, char* b, int k, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public IList\u003cint\u003e BeautifulIndices(string s, string a, string b, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @param {string} a\n * @param {string} b\n * @param {number} k\n * @return {number[]}\n */\nvar beautifulIndices \u003d function(s, a, b, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function beautifulIndices(s: string, a: string, b: string, k: number): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $a\n     * @param String $b\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function beautifulIndices($s, $a, $b, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func beautifulIndices(_ s: String, _ a: String, _ b: String, _ k: Int) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun beautifulIndices(s: String, a: String, b: String, k: Int): List\u003cInt\u003e {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e beautifulIndices(String s, String a, String b, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func beautifulIndices(s string, a string, b string, k int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @param {String} a\n# @param {String} b\n# @param {Integer} k\n# @return {Integer[]}\ndef beautiful_indices(s, a, b, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def beautifulIndices(s: String, a: String, b: String, k: Int): List[Int] \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn beautiful_indices(s: String, a: String, b: String, k: i32) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (beautiful-indices s a b k)\n  (-\u003e string? string? string? exact-integer? (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec beautiful_indices(S :: unicode:unicode_binary(), A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), K :: integer()) -\u003e [integer()].\nbeautiful_indices(S, A, B, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec beautiful_indices(s :: String.t, a :: String.t, b :: String.t, k :: integer) :: [integer]\n  def beautiful_indices(s, a, b, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e string \u003ccode\u003es\u003c/code\u003e, a string \u003ccode\u003ea\u003c/code\u003e, a string \u003ccode\u003eb\u003c/code\u003e, and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn index \u003ccode\u003ei\u003c/code\u003e is \u003cstrong\u003ebeautiful\u003c/strong\u003e if:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d i \u0026lt;\u003d s.length - a.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es[i..(i + a.length - 1)] \u003d\u003d a\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThere exists an index \u003ccode\u003ej\u003c/code\u003e such that:\n\t\u003cul\u003e\n\t\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d j \u0026lt;\u003d s.length - b.length\u003c/code\u003e\u003c/li\u003e\n\t\t\u003cli\u003e\u003ccode\u003es[j..(j + b.length - 1)] \u003d\u003d b\u003c/code\u003e\u003c/li\u003e\n\t\t\u003cli\u003e\u003ccode\u003e|j - i| \u0026lt;\u003d k\u003c/code\u003e\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe array that contains beautiful indices in \u003cstrong\u003esorted order from smallest to largest\u003c/strong\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s \u003d \u0026quot;isawsquirrelnearmysquirrelhouseohmy\u0026quot;, a \u003d \u0026quot;my\u0026quot;, b \u003d \u0026quot;squirrel\u0026quot;, k \u003d 15\n\u003cstrong\u003eOutput:\u003c/strong\u003e [16,33]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] \u003d\u003d \u0026quot;my\u0026quot; and there exists an index 4 with s[4..11] \u003d\u003d \u0026quot;squirrel\u0026quot; and |16 - 4| \u0026lt;\u003d 15.\n- The index 33 is beautiful as s[33..34] \u003d\u003d \u0026quot;my\u0026quot; and there exists an index 18 with s[18..25] \u003d\u003d \u0026quot;squirrel\u0026quot; and |33 - 18| \u0026lt;\u003d 15.\nThus we return [16,33] as the result.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s \u003d \u0026quot;abcd\u0026quot;, a \u003d \u0026quot;a\u0026quot;, b \u003d \u0026quot;a\u0026quot;, k \u003d 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] \u003d\u003d \u0026quot;a\u0026quot; and there exists an index 0 with s[0..0] \u003d\u003d \u0026quot;a\u0026quot; and |0 - 0| \u0026lt;\u003d 4.\nThus we return [0] as the result.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d s.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d a.length, b.length \u0026lt;\u003d 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e, \u003ccode\u003ea\u003c/code\u003e, and \u003ccode\u003eb\u003c/code\u003e contain only lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15\n\"abcd\"\n\"a\"\n\"a\"\n4",
    "formTitle": "[3006]Find Beautiful Indices in the Given Array I",
    "frequency": 0.0,
    "frontendQuestionId": "3006",
    "hints": [
      "For each \u003ccode\u003ei\u003c/code\u003e, you can iterate over all \u003ccode\u003ej\u003c/code\u003es and determine if \u003ccode\u003ei\u003c/code\u003e is beautiful or not."
    ],
    "level": 2,
    "metaData": {
      "name": "beautifulIndices",
      "params": [
        {
          "name": "s",
          "type": "string"
        },
        {
          "name": "a",
          "type": "string"
        },
        {
          "name": "b",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3245",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
    "title": "Find Beautiful Indices in the Given Array I",
    "titleSlug": "find-beautiful-indices-in-the-given-array-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int areaOfMaxDiagonal(vector\u003cvector\u003cint\u003e\u003e\u0026 dimensions) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int areaOfMaxDiagonal(int[][] dimensions) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def areaOfMaxDiagonal(self, dimensions):\n        \"\"\"\n        :type dimensions: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int areaOfMaxDiagonal(int** dimensions, int dimensionsSize, int* dimensionsColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int AreaOfMaxDiagonal(int[][] dimensions) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} dimensions\n * @return {number}\n */\nvar areaOfMaxDiagonal \u003d function(dimensions) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function areaOfMaxDiagonal(dimensions: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $dimensions\n     * @return Integer\n     */\n    function areaOfMaxDiagonal($dimensions) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func areaOfMaxDiagonal(_ dimensions: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun areaOfMaxDiagonal(dimensions: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int areaOfMaxDiagonal(List\u003cList\u003cint\u003e\u003e dimensions) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func areaOfMaxDiagonal(dimensions [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} dimensions\n# @return {Integer}\ndef area_of_max_diagonal(dimensions)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def areaOfMaxDiagonal(dimensions: Array[Array[Int]]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn area_of_max_diagonal(dimensions: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (area-of-max-diagonal dimensions)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec area_of_max_diagonal(Dimensions :: [[integer()]]) -\u003e integer().\narea_of_max_diagonal(Dimensions) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec area_of_max_diagonal(dimensions :: [[integer]]) :: integer\n  def area_of_max_diagonal(dimensions) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D \u003cstrong\u003e0-indexed \u003c/strong\u003einteger array \u003ccode\u003edimensions\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor all indices \u003ccode\u003ei\u003c/code\u003e, \u003ccode\u003e0 \u0026lt;\u003d i \u0026lt; dimensions.length\u003c/code\u003e, \u003ccode\u003edimensions[i][0]\u003c/code\u003e represents the length and \u003ccode\u003edimensions[i][1]\u003c/code\u003e represents the width of the rectangle\u003cspan style\u003d\"font-size: 13.3333px;\"\u003e \u003ccode\u003ei\u003c/code\u003e\u003c/span\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003earea\u003c/strong\u003e of the rectangle having the \u003cstrong\u003elongest\u003c/strong\u003e diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the \u003cstrong\u003emaximum\u003c/strong\u003e area.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e dimensions \u003d [[9,3],[8,6]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 48\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nFor index \u003d 0, length \u003d 9 and width \u003d 3. Diagonal length \u003d sqrt(9 * 9 + 3 * 3) \u003d sqrt(90) \u0026asymp;\u003c!-- notionvc: 882cf44c-3b17-428e-9c65-9940810216f1 --\u003e 9.487.\nFor index \u003d 1, length \u003d 8 and width \u003d 6. Diagonal length \u003d sqrt(8 * 8 + 6 * 6) \u003d sqrt(100) \u003d 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area \u003d 8 * 6 \u003d 48.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e dimensions \u003d [[3,4],[4,3]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Length of diagonal is the same for both which is 5, so maximum area \u003d 12.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d dimensions.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e\u003cfont face\u003d\"monospace\"\u003edimensions[i].length \u003d\u003d 2\u003c/font\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e\u003cfont face\u003d\"monospace\"\u003e1 \u0026lt;\u003d dimensions[i][0], dimensions[i][1] \u0026lt;\u003d 100\u003c/font\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[9,3],[8,6]]\n[[3,4],[4,3]]",
    "formTitle": "[3000]Maximum Area of Longest Diagonal Rectangle",
    "frequency": 0.0,
    "frontendQuestionId": "3000",
    "hints": [
      "Diagonal of rectangle is \u003ccode\u003esqrt(length\u003csup\u003e2\u003c/sup\u003e + width\u003csup\u003e2\u003c/sup\u003e)\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "areaOfMaxDiagonal",
      "params": [
        {
          "name": "dimensions",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3251",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[9,3],[8,6]]",
    "title": "Maximum Area of Longest Diagonal Rectangle",
    "titleSlug": "maximum-area-of-longest-diagonal-rectangle"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long minimumCost(vector\u003cint\u003e\u0026 nums, int k, int dist) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumCost(self, nums, k, dist):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type dist: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumCost(self, nums: List[int], k: int, dist: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long minimumCost(int* nums, int numsSize, int k, int dist) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MinimumCost(int[] nums, int k, int dist) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} dist\n * @return {number}\n */\nvar minimumCost \u003d function(nums, k, dist) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumCost(nums: number[], k: number, dist: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $dist\n     * @return Integer\n     */\n    function minimumCost($nums, $k, $dist) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumCost(_ nums: [Int], _ k: Int, _ dist: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumCost(nums: IntArray, k: Int, dist: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumCost(List\u003cint\u003e nums, int k, int dist) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumCost(nums []int, k int, dist int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} dist\n# @return {Integer}\ndef minimum_cost(nums, k, dist)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumCost(nums: Array[Int], k: Int, dist: Int): Long \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_cost(nums: Vec\u003ci32\u003e, k: i32, dist: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-cost nums k dist)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_cost(Nums :: [integer()], K :: integer(), Dist :: integer()) -\u003e integer().\nminimum_cost(Nums, K, Dist) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer], k :: integer, dist :: integer) :: integer\n  def minimum_cost(nums, k, dist) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e array of integers \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, and two \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003ek\u003c/code\u003e and \u003ccode\u003edist\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003ecost\u003c/strong\u003e of an array is the value of its \u003cstrong\u003efirst\u003c/strong\u003e element. For example, the cost of \u003ccode\u003e[1,2,3]\u003c/code\u003e is \u003ccode\u003e1\u003c/code\u003e while the cost of \u003ccode\u003e[3,4,1]\u003c/code\u003e is \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou need to divide \u003ccode\u003enums\u003c/code\u003e into \u003ccode\u003ek\u003c/code\u003e \u003cstrong\u003edisjoint contiguous \u003c/strong\u003e\u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarrays\u003c/span\u003e, such that the difference between the starting index of the \u003cstrong\u003esecond\u003c/strong\u003e subarray and the starting index of the \u003ccode\u003ekth\u003c/code\u003e subarray should be \u003cstrong\u003eless than or equal to\u003c/strong\u003e \u003ccode\u003edist\u003c/code\u003e. In other words, if you divide \u003ccode\u003enums\u003c/code\u003e into the subarrays \u003ccode\u003enums[0..(i\u003csub\u003e1\u003c/sub\u003e - 1)], nums[i\u003csub\u003e1\u003c/sub\u003e..(i\u003csub\u003e2\u003c/sub\u003e - 1)], ..., nums[i\u003csub\u003ek-1\u003c/sub\u003e..(n - 1)]\u003c/code\u003e, then \u003ccode\u003ei\u003csub\u003ek-1\u003c/sub\u003e - i\u003csub\u003e1\u003c/sub\u003e \u0026lt;\u003d dist\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e possible sum of the cost of these\u003c/em\u003e \u003cem\u003esubarrays\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,3,2,6,4,2], k \u003d 3, dist \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because i\u003csub\u003ek-1\u003c/sub\u003e - i\u003csub\u003e1\u003c/sub\u003e is 5 - 2 \u003d 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 \u003d 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [10,1,2,2,2,1], k \u003d 4, dist \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 15\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because i\u003csub\u003ek-1\u003c/sub\u003e - i\u003csub\u003e1\u003c/sub\u003e is 3 - 1 \u003d 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 \u003d 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between i\u003csub\u003ek-1\u003c/sub\u003e and i\u003csub\u003e1\u003c/sub\u003e is 5 - 1 \u003d 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [10,8,18,9], k \u003d 3, dist \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 36\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because i\u003csub\u003ek-1\u003c/sub\u003e - i\u003csub\u003e1\u003c/sub\u003e is 2 - 1 \u003d 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 \u003d 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between i\u003csub\u003ek-1\u003c/sub\u003e and i\u003csub\u003e1\u003c/sub\u003e is 3 - 1 \u003d 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d n \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d k \u0026lt;\u003d n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ek - 2 \u0026lt;\u003d dist \u0026lt;\u003d n - 2\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,3,2,6,4,2]\n3\n3\n[10,1,2,2,2,1]\n4\n3\n[10,8,18,9]\n3\n1",
    "formTitle": "[3013]Divide an Array Into Subarrays With Minimum Cost II",
    "frequency": 0.0,
    "frontendQuestionId": "3013",
    "hints": [
      "For each \u003ccode\u003ei \u003e 0\u003c/code\u003e, try each \u003ccode\u003enums[i]\u003c/code\u003e as the first element of the second subarray. We need to find the sum of \u003ccode\u003ek - 2\u003c/code\u003e smallest values in the index range \u003ccode\u003e[i + 1, min(i + dist, n - 1)]\u003c/code\u003e.",
      "Typically, we use a max heap to maintain the top \u003ccode\u003ek - 2\u003c/code\u003e smallest values dynamically. Here we also have a sliding window, which is the index range \u003ccode\u003e[i + 1, min(i + dist, n - 1)]\u003c/code\u003e. We can use another min heap to put unselected values for future use.",
      "Update the two heaps when iteration over \u003ccode\u003ei\u003c/code\u003e. Ordered/Tree sets are also a good choice since we have to delete elements.",
      "If the max heap鈥檚 size is less than \u003ccode\u003ek - 2\u003c/code\u003e, use the min heap鈥檚 value to fill it. If the maximum value in the max heap is larger than the smallest value in the min heap, swap them in the two heaps."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumCost",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        },
        {
          "name": "dist",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3260",
    "similarQuestions": [
      "[{\"title\": \"Minimum Cost to Cut a Stick\", \"titleSlug\": \"minimum-cost-to-cut-a-stick\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5207\\u68cd\\u5b50\\u7684\\u6700\\u5c0f\\u6210\\u672c\", \"isPaidOnly\": false}, {\"title\": \"Minimum Cost to Split an Array\", \"titleSlug\": \"minimum-cost-to-split-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u62c6\\u5206\\u6570\\u7ec4\\u7684\\u6700\\u5c0f\\u4ee3\\u4ef7\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,3,2,6,4,2]\n3\n3",
    "title": "Divide an Array Into Subarrays With Minimum Cost II",
    "titleSlug": "divide-an-array-into-subarrays-with-minimum-cost-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minOrAfterOperations(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minOrAfterOperations(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minOrAfterOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minOrAfterOperations(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minOrAfterOperations(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinOrAfterOperations(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOrAfterOperations \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minOrAfterOperations(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOrAfterOperations($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minOrAfterOperations(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minOrAfterOperations(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minOrAfterOperations(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minOrAfterOperations(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_or_after_operations(nums, k)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minOrAfterOperations(nums: Array[Int], k: Int): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_or_after_operations(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-or-after-operations nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_or_after_operations(Nums :: [integer()], K :: integer()) -\u003e integer().\nmin_or_after_operations(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_or_after_operations(nums :: [integer], k :: integer) :: integer\n  def min_or_after_operations(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn one operation, you can pick any index \u003ccode\u003ei\u003c/code\u003e of \u003ccode\u003enums\u003c/code\u003e such that \u003ccode\u003e0 \u0026lt;\u003d i \u0026lt; nums.length - 1\u003c/code\u003e and replace \u003ccode\u003enums[i]\u003c/code\u003e and \u003ccode\u003enums[i + 1]\u003c/code\u003e with a single occurrence of \u003ccode\u003enums[i] \u0026amp; nums[i + 1]\u003c/code\u003e, where \u003ccode\u003e\u0026amp;\u003c/code\u003e represents the bitwise \u003ccode\u003eAND\u003c/code\u003e operator.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e possible value of the bitwise \u003c/em\u003e\u003ccode\u003eOR\u003c/code\u003e\u003cem\u003e of the remaining elements of\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e \u003cem\u003eafter applying \u003cstrong\u003eat most\u003c/strong\u003e\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e \u003cem\u003eoperations\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,5,3,2,7], k \u003d 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Let\u0026#39;s do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] \u0026amp; nums[1]) so that nums becomes equal to [1,3,2,7].\n2. Replace nums[2] and nums[3] with (nums[2] \u0026amp; nums[3]) so that nums becomes equal to [1,3,2].\nThe bitwise-or of the final array is 3.\nIt can be shown that 3 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [7,3,15,14,2,8], k \u003d 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Let\u0026#39;s do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] \u0026amp; nums[1]) so that nums becomes equal to [3,15,14,2,8]. \n2. Replace nums[0] and nums[1] with (nums[0] \u0026amp; nums[1]) so that nums becomes equal to [3,14,2,8].\n3. Replace nums[0] and nums[1] with (nums[0] \u0026amp; nums[1]) so that nums becomes equal to [2,2,8].\n4. Replace nums[1] and nums[2] with (nums[1] \u0026amp; nums[2]) so that nums becomes equal to [2,0].\nThe bitwise-or of the final array is 2.\nIt can be shown that 2 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [10,7,10,3,9,14,9,4], k \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 15\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Without applying any operations, the bitwise-or of nums is 15.\nIt can be shown that 15 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt; 2\u003csup\u003e30\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d k \u0026lt; nums.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,5,3,2,7]\n2\n[7,3,15,14,2,8]\n4\n[10,7,10,3,9,14,9,4]\n1",
    "formTitle": "[3022]Minimize OR of Remaining Elements Using Operations",
    "frequency": 0.0,
    "frontendQuestionId": "3022",
    "hints": [
      "From the most significant bit to the least significant bit, maintain the bits that will not be included in the final answer in a variable \u003ccode\u003emask\u003c/code\u003e.",
      "For a fixed bit, add it to \u003ccode\u003emask\u003c/code\u003e then check if there exists some sequence of \u003ccode\u003ek\u003c/code\u003e operations such that \u003ccode\u003emask \u0026 answer \u003d\u003d 0 \u003c/code\u003e where \u003ccode\u003eanswer\u003c/code\u003e is the bitwise-or of the remaining elements of \u003ccode\u003enums\u003c/code\u003e. If there is no such sequence of operations, remove the current bit from \u003ccode\u003emask\u003c/code\u003e. How can we perform this check?",
      "Let \u003ccode\u003ex\u003c/code\u003e be the bitwise-and of all elements of \u003ccode\u003enums\u003c/code\u003e. If \u003ccode\u003ex AND mask !\u003d 0\u003c/code\u003e, there is no sequence of operations that satisfies the condition in the previous hint. This is because even if we perform this operation \u003ccode\u003en - 1\u003c/code\u003e times on the array, we will end up with \u003ccode\u003ex\u003c/code\u003e as the final element.",
      "Otherwise, there exists at least one such sequence. It is sufficient to check if the number of operations in such a sequence is less than \u003ccode\u003ek\u003c/code\u003e. Let鈥檚 calculate the minimum number of operations in such a sequence.",
      "Iterate over the array from left to right, if \u003ccode\u003enums[i] \u0026 mask !\u003d 0\u003c/code\u003e, apply the operation on index \u003ccode\u003ei\u003c/code\u003e.",
      "After iterating over all elements, let \u003ccode\u003ex\u003c/code\u003e be the bitwise-and of all elements of \u003ccode\u003enums\u003c/code\u003e. If \u003ccode\u003ex \u003d\u003d 0\u003c/code\u003e, then we have found the minimum number of operations. Otherwise, It can be proven that we need exactly one more operation so that \u003ccode\u003ex \u003d\u003d 0\u003c/code\u003e.",
      "The condition in the second hint is satisfied if and only if the minimum number of operations is less than or equal to \u003ccode\u003ek\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "minOrAfterOperations",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3261",
    "similarQuestions": [
      "[{\"title\": \"Maximum XOR After Operations \", \"titleSlug\": \"maximum-xor-after-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u64cd\\u4f5c\\u540e\\u7684\\u6700\\u5927\\u5f02\\u6216\\u548c\", \"isPaidOnly\": false}, {\"title\": \"Apply Operations on Array to Maximize Sum of Squares\", \"titleSlug\": \"apply-operations-on-array-to-maximize-sum-of-squares\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5bf9\\u6570\\u7ec4\\u6267\\u884c\\u64cd\\u4f5c\\u4f7f\\u5e73\\u65b9\\u548c\\u6700\\u5927\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[3,5,3,2,7]\n2",
    "title": "Minimize OR of Remaining Elements Using Operations",
    "titleSlug": "minimize-or-of-remaining-elements-using-operations"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumCost(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumCost(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumCost(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumCost(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumCost(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumCost(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumCost \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumCost(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumCost($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumCost(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumCost(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumCost(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumCost(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_cost(nums)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumCost(nums: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_cost(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-cost nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_cost(Nums :: [integer()]) -\u003e integer().\nminimum_cost(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer]) :: integer\n  def minimum_cost(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array of integers \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003ecost\u003c/strong\u003e of an array is the value of its \u003cstrong\u003efirst\u003c/strong\u003e element. For example, the cost of \u003ccode\u003e[1,2,3]\u003c/code\u003e is \u003ccode\u003e1\u003c/code\u003e while the cost of \u003ccode\u003e[3,4,1]\u003c/code\u003e is \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou need to divide \u003ccode\u003enums\u003c/code\u003e into \u003ccode\u003e3\u003c/code\u003e \u003cstrong\u003edisjoint contiguous \u003c/strong\u003e\u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarrays\u003c/span\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e possible \u003cstrong\u003esum\u003c/strong\u003e of the cost of these subarrays\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,3,12]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 \u003d 6.\nThe other possible ways to form 3 subarrays are:\n- [1], [2,3], and [12] at a total cost of 1 + 2 + 12 \u003d 15.\n- [1,2], [3], and [12] at a total cost of 1 + 3 + 12 \u003d 16.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [5,4,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The best possible way to form 3 subarrays is: [5], [4], and [3] at a total cost of 5 + 4 + 3 \u003d 12.\nIt can be shown that 12 is the minimum cost achievable.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [10,3,1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The best possible way to form 3 subarrays is: [10,3], [1], and [1] at a total cost of 10 + 1 + 1 \u003d 12.\nIt can be shown that 12 is the minimum cost achievable.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d n \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,12]\n[5,4,3]\n[10,3,1,1]",
    "formTitle": "[3010]Divide an Array Into Subarrays With Minimum Cost I",
    "frequency": 0.0,
    "frontendQuestionId": "3010",
    "hints": [],
    "level": 1,
    "metaData": {
      "name": "minimumCost",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3263",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,2,3,12]",
    "title": "Divide an Array Into Subarrays With Minimum Cost I",
    "titleSlug": "divide-an-array-into-subarrays-with-minimum-cost-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long maximumPoints(vector\u003cint\u003e\u0026 enemyEnergies, int currentEnergy) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long maximumPoints(int[] enemyEnergies, int currentEnergy) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumPoints(self, enemyEnergies, currentEnergy):\n        \"\"\"\n        :type enemyEnergies: List[int]\n        :type currentEnergy: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumPoints(self, enemyEnergies: List[int], currentEnergy: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long maximumPoints(int* enemyEnergies, int enemyEnergiesSize, int currentEnergy) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MaximumPoints(int[] enemyEnergies, int currentEnergy) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} enemyEnergies\n * @param {number} currentEnergy\n * @return {number}\n */\nvar maximumPoints \u003d function(enemyEnergies, currentEnergy) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumPoints(enemyEnergies: number[], currentEnergy: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $enemyEnergies\n     * @param Integer $currentEnergy\n     * @return Integer\n     */\n    function maximumPoints($enemyEnergies, $currentEnergy) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumPoints(_ enemyEnergies: [Int], _ currentEnergy: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumPoints(enemyEnergies: IntArray, currentEnergy: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumPoints(List\u003cint\u003e enemyEnergies, int currentEnergy) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumPoints(enemyEnergies []int, currentEnergy int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} enemy_energies\n# @param {Integer} current_energy\n# @return {Integer}\ndef maximum_points(enemy_energies, current_energy)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumPoints(enemyEnergies: Array[Int], currentEnergy: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_points(enemy_energies: Vec\u003ci32\u003e, current_energy: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-points enemyEnergies currentEnergy)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_points(EnemyEnergies :: [integer()], CurrentEnergy :: integer()) -\u003e integer().\nmaximum_points(EnemyEnergies, CurrentEnergy) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_points(enemy_energies :: [integer], current_energy :: integer) :: integer\n  def maximum_points(enemy_energies, current_energy) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003eenemyEnergies\u003c/code\u003e denoting the energy values of various enemies.\u003c/p\u003e\n\n\u003cp\u003eYou are also given an integer \u003ccode\u003ecurrentEnergy\u003c/code\u003e denoting the amount of energy you have initially.\u003c/p\u003e\n\n\u003cp\u003eYou start with 0 points, and all the enemies are unmarked initially.\u003c/p\u003e\n\n\u003cp\u003eYou can perform \u003cstrong\u003eeither\u003c/strong\u003e of the following operations \u003cstrong\u003ezero \u003c/strong\u003eor multiple times to gain points:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose an \u003cstrong\u003eunmarked\u003c/strong\u003e enemy, \u003ccode\u003ei\u003c/code\u003e, such that \u003ccode\u003ecurrentEnergy \u0026gt;\u003d enemyEnergies[i]\u003c/code\u003e. By choosing this option:\n\n\t\u003cul\u003e\n\t\t\u003cli\u003eYou gain 1 point.\u003c/li\u003e\n\t\t\u003cli\u003eYour energy is reduced by the enemy\u0026#39;s energy, i.e. \u003ccode\u003ecurrentEnergy \u003d currentEnergy - enemyEnergies[i]\u003c/code\u003e.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eIf you have \u003cstrong\u003eat least\u003c/strong\u003e 1 point, you can choose an \u003cstrong\u003eunmarked\u003c/strong\u003e enemy, \u003ccode\u003ei\u003c/code\u003e. By choosing this option:\n\t\u003cul\u003e\n\t\t\u003cli\u003eYour energy increases by the enemy\u0026#39;s energy, i.e. \u003ccode\u003ecurrentEnergy \u003d currentEnergy + enemyEnergies[i]\u003c/code\u003e.\u003c/li\u003e\n\t\t\u003cli\u003eThe \u003cfont face\u003d\"monospace\"\u003ee\u003c/font\u003enemy \u003ccode\u003ei\u003c/code\u003e is \u003cstrong\u003emarked\u003c/strong\u003e.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn an integer denoting the \u003cstrong\u003emaximum\u003c/strong\u003e points you can get in the end by optimally performing operations.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eenemyEnergies \u003d [3,2,2], currentEnergy \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following operations can be performed to get 3 points, which is the maximum:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFirst operation on enemy 1: \u003ccode\u003epoints\u003c/code\u003e increases by 1, and \u003ccode\u003ecurrentEnergy\u003c/code\u003e decreases by 2. So, \u003ccode\u003epoints \u003d 1\u003c/code\u003e, and \u003ccode\u003ecurrentEnergy \u003d 0\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSecond operation on enemy 0: \u003ccode\u003ecurrentEnergy\u003c/code\u003e increases by 3, and enemy 0 is marked. So, \u003ccode\u003epoints \u003d 1\u003c/code\u003e, \u003ccode\u003ecurrentEnergy \u003d 3\u003c/code\u003e, and marked enemies \u003d \u003ccode\u003e[0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eFirst operation on enemy 2: \u003ccode\u003epoints\u003c/code\u003e increases by 1, and \u003ccode\u003ecurrentEnergy\u003c/code\u003e decreases by 2. So, \u003ccode\u003epoints \u003d 2\u003c/code\u003e, \u003ccode\u003ecurrentEnergy \u003d 1\u003c/code\u003e, and marked enemies \u003d \u003ccode\u003e[0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSecond operation on enemy 2: \u003ccode\u003ecurrentEnergy\u003c/code\u003e increases by 2, and enemy 2 is marked. So, \u003ccode\u003epoints \u003d 2\u003c/code\u003e, \u003ccode\u003ecurrentEnergy \u003d 3\u003c/code\u003e, and marked enemies \u003d \u003ccode\u003e[0, 2]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eFirst operation on enemy 1: \u003ccode\u003epoints\u003c/code\u003e increases by 1, and \u003ccode\u003ecurrentEnergy\u003c/code\u003e decreases by 2. So, \u003ccode\u003epoints \u003d 3\u003c/code\u003e, \u003ccode\u003ecurrentEnergy \u003d 1\u003c/code\u003e, and marked enemies \u003d \u003ccode\u003e[0, 2]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eenemyEnergies \u003d \u003c/span\u003e[2]\u003cspan class\u003d\"example-io\"\u003e, currentEnergy \u003d 10\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ePerforming the first operation 5 times on enemy 0 results in the maximum number of points.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d enemyEnergies.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d enemyEnergies[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d currentEnergy \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,2,2]\n2\n[2]\n10",
    "formTitle": "[3207]Maximum Points After Enemy Battles",
    "frequency": 0.0,
    "frontendQuestionId": "3207",
    "hints": [
      "The problem can be solved greedily.",
      "Mark all the others except the smallest one first.",
      "Use the smallest one to increase the energy.",
      "Note that the initial energy should be no less than the smallest enemy."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumPoints",
      "params": [
        {
          "name": "enemyEnergies",
          "type": "integer[]"
        },
        {
          "name": "currentEnergy",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3264",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[3,2,2]\n2",
    "title": "Maximum Points After Enemy Battles",
    "titleSlug": "maximum-points-after-enemy-battles"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long maximumSubarraySum(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long maximumSubarraySum(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long maximumSubarraySum(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MaximumSubarraySum(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumSubarraySum \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumSubarraySum(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumSubarraySum($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumSubarraySum(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumSubarraySum(nums: IntArray, k: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumSubarraySum(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumSubarraySum(nums []int, k int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_subarray_sum(nums, k)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumSubarraySum(nums: Array[Int], k: Int): Long \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_subarray_sum(nums: Vec\u003ci32\u003e, k: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-subarray-sum nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_subarray_sum(Nums :: [integer()], K :: integer()) -\u003e integer().\nmaximum_subarray_sum(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_subarray_sum(nums :: [integer], k :: integer) :: integer\n  def maximum_subarray_sum(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e and a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarray\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e is called \u003cstrong\u003egood\u003c/strong\u003e if the \u003cstrong\u003eabsolute difference\u003c/strong\u003e between its first and last element is \u003cstrong\u003eexactly\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e, in other words, the subarray \u003ccode\u003enums[i..j]\u003c/code\u003e is good if \u003ccode\u003e|nums[i] - nums[j]| \u003d\u003d k\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e sum of a \u003cstrong\u003egood\u003c/strong\u003e subarray of \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e. \u003cem\u003eIf there are no good subarrays\u003c/em\u003e\u003cem\u003e, return \u003c/em\u003e\u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,3,4,5,6], k \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 11\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The absolute difference between the first and last element\u003c!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --\u003e must be 1 for a good subarray. All the good subarrays are: [1,2], [2,3], [3,4], [4,5], and [5,6]. The maximum subarray sum is 11 for the subarray [5,6].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [-1,3,2,4,5], k \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 11\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The absolute difference between the first and last element\u003c!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --\u003e must be 3 for a good subarray. All the good subarrays are: [-1,3,2], and [2,4,5]. The maximum subarray sum is 11 for the subarray [2,4,5].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [-1,-2,-3,-4], k \u003d 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e -6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The absolute difference between the first and last element\u003c!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --\u003e must be 2 for a good subarray. All the good subarrays are: [-1,-2,-3], and [-2,-3,-4]. The maximum subarray sum is -6 for the subarray [-1,-2,-3].\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,4,5,6]\n1\n[-1,3,2,4,5]\n3\n[-1,-2,-3,-4]\n2",
    "formTitle": "[3026]Maximum Good Subarray Sum",
    "frequency": 0.0,
    "frontendQuestionId": "3026",
    "hints": [
      "Save all the prefix sums into a HashMap.",
      "For the index \u003ccode\u003ei\u003c/code\u003e store the element at index \u003ccode\u003ei + 1\u003c/code\u003e as the key and the prefix sum till \u003ccode\u003ei\u003c/code\u003e as the value.",
      "For each prefix sum ending at \u003ccode\u003enums[i]\u003c/code\u003e, try finding \u003ccode\u003enums[i] - k\u003c/code\u003e and \u003ccode\u003enums[i] + k\u003c/code\u003e in the HashMap and update the answer."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumSubarraySum",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3265",
    "similarQuestions": [
      "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5927\\u5b50\\u6570\\u7ec4\\u548c\", \"isPaidOnly\": false}, {\"title\": \"Maximum Sum of Distinct Subarrays With Length K\", \"titleSlug\": \"maximum-sum-of-distinct-subarrays-with-length-k\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u957f\\u5ea6\\u4e3a K \\u5b50\\u6570\\u7ec4\\u4e2d\\u7684\\u6700\\u5927\\u548c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,2,3,4,5,6]\n1",
    "title": "Maximum Good Subarray Sum",
    "titleSlug": "maximum-good-subarray-sum"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int countMatchingSubarrays(vector\u003cint\u003e\u0026 nums, vector\u003cint\u003e\u0026 pattern) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int countMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countMatchingSubarrays(self, nums, pattern):\n        \"\"\"\n        :type nums: List[int]\n        :type pattern: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countMatchingSubarrays(self, nums: List[int], pattern: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int countMatchingSubarrays(int* nums, int numsSize, int* pattern, int patternSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int CountMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[]} pattern\n * @return {number}\n */\nvar countMatchingSubarrays \u003d function(nums, pattern) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countMatchingSubarrays(nums: number[], pattern: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $pattern\n     * @return Integer\n     */\n    function countMatchingSubarrays($nums, $pattern) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countMatchingSubarrays(_ nums: [Int], _ pattern: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countMatchingSubarrays(nums: IntArray, pattern: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countMatchingSubarrays(List\u003cint\u003e nums, List\u003cint\u003e pattern) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countMatchingSubarrays(nums []int, pattern []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[]} pattern\n# @return {Integer}\ndef count_matching_subarrays(nums, pattern)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countMatchingSubarrays(nums: Array[Int], pattern: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_matching_subarrays(nums: Vec\u003ci32\u003e, pattern: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-matching-subarrays nums pattern)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_matching_subarrays(Nums :: [integer()], Pattern :: [integer()]) -\u003e integer().\ncount_matching_subarrays(Nums, Pattern) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_matching_subarrays(nums :: [integer], pattern :: [integer]) :: integer\n  def count_matching_subarrays(nums, pattern) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e, and a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003epattern\u003c/code\u003e of size \u003ccode\u003em\u003c/code\u003e consisting of integers \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, and \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cspan data-keyword\u003d\"subarray\"\u003esubarray\u003c/span\u003e \u003ccode\u003enums[i..j]\u003c/code\u003e of size \u003ccode\u003em + 1\u003c/code\u003e is said to match the \u003ccode\u003epattern\u003c/code\u003e if the following conditions hold for each element \u003ccode\u003epattern[k]\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i + k + 1] \u0026gt; nums[i + k]\u003c/code\u003e if \u003ccode\u003epattern[k] \u003d\u003d 1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i + k + 1] \u003d\u003d nums[i + k]\u003c/code\u003e if \u003ccode\u003epattern[k] \u003d\u003d 0\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i + k + 1] \u0026lt; nums[i + k]\u003c/code\u003e if \u003ccode\u003epattern[k] \u003d\u003d -1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe\u003cstrong\u003e count\u003c/strong\u003e of subarrays in\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e \u003cem\u003ethat match the\u003c/em\u003e \u003ccode\u003epattern\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,3,4,5,6], pattern \u003d [1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,4,4,1,3,5,5,3], pattern \u003d [1,0,-1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation: \u003c/strong\u003eHere, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m \u003d\u003d pattern.length \u0026lt; n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1 \u0026lt;\u003d pattern[i] \u0026lt;\u003d 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,4,5,6]\n[1,1]\n[1,4,4,1,3,5,5,3]\n[1,0,-1]",
    "formTitle": "[3034]Number of Subarrays That Match a Pattern I",
    "frequency": 0.0,
    "frontendQuestionId": "3034",
    "hints": [
      "Iterate over all indices \u003ccode\u003ei\u003c/code\u003e then, using a second loop, check if the subarray starting at index \u003ccode\u003ei\u003c/code\u003e matches the pattern."
    ],
    "level": 2,
    "metaData": {
      "name": "countMatchingSubarrays",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "pattern",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3269",
    "similarQuestions": [
      "[{\"title\": \"Count the Number of Incremovable Subarrays I\", \"titleSlug\": \"count-the-number-of-incremovable-subarrays-i\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u79fb\\u9664\\u9012\\u589e\\u5b50\\u6570\\u7ec4\\u7684\\u6570\\u76ee I\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,2,3,4,5,6]\n[1,1]",
    "title": "Number of Subarrays That Match a Pattern I",
    "titleSlug": "number-of-subarrays-that-match-a-pattern-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minMovesToCaptureTheQueen(self, a, b, c, d, e, f):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :type d: int\n        :type e: int\n        :type f: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minMovesToCaptureTheQueen(self, a: int, b: int, c: int, d: int, e: int, f: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @param {number} e\n * @param {number} f\n * @return {number}\n */\nvar minMovesToCaptureTheQueen \u003d function(a, b, c, d, e, f) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minMovesToCaptureTheQueen(a: number, b: number, c: number, d: number, e: number, f: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @param Integer $d\n     * @param Integer $e\n     * @param Integer $f\n     * @return Integer\n     */\n    function minMovesToCaptureTheQueen($a, $b, $c, $d, $e, $f) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minMovesToCaptureTheQueen(_ a: Int, _ b: Int, _ c: Int, _ d: Int, _ e: Int, _ f: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minMovesToCaptureTheQueen(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minMovesToCaptureTheQueen(a int, b int, c int, d int, e int, f int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @param {Integer} d\n# @param {Integer} e\n# @param {Integer} f\n# @return {Integer}\ndef min_moves_to_capture_the_queen(a, b, c, d, e, f)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minMovesToCaptureTheQueen(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_moves_to_capture_the_queen(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-moves-to-capture-the-queen a b c d e f)\n  (-\u003e exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_moves_to_capture_the_queen(A :: integer(), B :: integer(), C :: integer(), D :: integer(), E :: integer(), F :: integer()) -\u003e integer().\nmin_moves_to_capture_the_queen(A, B, C, D, E, F) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_moves_to_capture_the_queen(a :: integer, b :: integer, c :: integer, d :: integer, e :: integer, f :: integer) :: integer\n  def min_moves_to_capture_the_queen(a, b, c, d, e, f) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere is a \u003cstrong\u003e1-indexed\u003c/strong\u003e \u003ccode\u003e8 x 8\u003c/code\u003e chessboard containing \u003ccode\u003e3\u003c/code\u003e pieces.\u003c/p\u003e\n\n\u003cp\u003eYou are given \u003ccode\u003e6\u003c/code\u003e integers \u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003eb\u003c/code\u003e, \u003ccode\u003ec\u003c/code\u003e, \u003ccode\u003ed\u003c/code\u003e, \u003ccode\u003ee\u003c/code\u003e, and \u003ccode\u003ef\u003c/code\u003e where:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e(a, b)\u003c/code\u003e denotes the position of the white rook.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e(c, d)\u003c/code\u003e denotes the position of the white bishop.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e(e, f)\u003c/code\u003e denotes the position of the black queen.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eGiven that you can only move the white pieces, return \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of moves required to capture the black queen\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eRooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.\u003c/li\u003e\n\t\u003cli\u003eBishops can move any number of squares diagonally, but cannot jump over other pieces.\u003c/li\u003e\n\t\u003cli\u003eA rook or a bishop can capture the queen if it is located in a square that they can move to.\u003c/li\u003e\n\t\u003cli\u003eThe queen does not move.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/21/ex1.png\" style\u003d\"width: 600px; height: 600px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e a \u003d 1, b \u003d 1, c \u003d 8, d \u003d 8, e \u003d 2, f \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3).\nIt is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/21/ex2.png\" style\u003d\"width: 600px; height: 600px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e a \u003d 5, b \u003d 3, c \u003d 3, d \u003d 4, e \u003d 5, f \u003d 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can capture the black queen in a single move by doing one of the following: \n- Move the white rook to (5, 2).\n- Move the white bishop to (5, 2).\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d a, b, c, d, e, f \u0026lt;\u003d 8\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eNo two pieces are on the same square.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "1\n1\n8\n8\n2\n3\n5\n3\n3\n4\n5\n2",
    "formTitle": "[3001]Minimum Moves to Capture The Queen",
    "frequency": 0.0,
    "frontendQuestionId": "3001",
    "hints": [
      "The minimum number of moves can be either \u003ccode\u003e1\u003c/code\u003e or \u003ccode\u003e2\u003c/code\u003e.",
      "The answer will be \u003ccode\u003e1\u003c/code\u003e if the queen is on the path of the rook or bishop and none of them is in between."
    ],
    "level": 2,
    "metaData": {
      "name": "minMovesToCaptureTheQueen",
      "params": [
        {
          "name": "a",
          "type": "integer"
        },
        {
          "name": "b",
          "type": "integer"
        },
        {
          "name": "c",
          "type": "integer"
        },
        {
          "name": "d",
          "type": "integer"
        },
        {
          "name": "e",
          "type": "integer"
        },
        {
          "name": "f",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3270",
    "similarQuestions": [
      "[{\"title\": \"Available Captures for Rook\", \"titleSlug\": \"available-captures-for-rook\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u53ef\\u4ee5\\u88ab\\u4e00\\u6b65\\u6355\\u83b7\\u7684\\u68cb\\u5b50\\u6570\", \"isPaidOnly\": false}, {\"title\": \"Queens That Can Attack the King\", \"titleSlug\": \"queens-that-can-attack-the-king\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u53ef\\u4ee5\\u653b\\u51fb\\u56fd\\u738b\\u7684\\u7687\\u540e\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "1\n1\n8\n8\n2\n3",
    "title": "Minimum Moves to Capture The Queen",
    "titleSlug": "minimum-moves-to-capture-the-queen"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e countOfPairs(int n, int x, int y) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countOfPairs(self, n, x, y):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :type y: int\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countOfPairs(self, n: int, x: int, y: int) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countOfPairs(int n, int x, int y, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] CountOfPairs(int n, int x, int y) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @return {number[]}\n */\nvar countOfPairs \u003d function(n, x, y) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countOfPairs(n: number, x: number, y: number): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer[]\n     */\n    function countOfPairs($n, $x, $y) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countOfPairs(_ n: Int, _ x: Int, _ y: Int) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countOfPairs(n: Int, x: Int, y: Int): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e countOfPairs(int n, int x, int y) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countOfPairs(n int, x int, y int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer[]}\ndef count_of_pairs(n, x, y)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countOfPairs(n: Int, x: Int, y: Int): Array[Int] \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_of_pairs(n: i32, x: i32, y: i32) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-of-pairs n x y)\n  (-\u003e exact-integer? exact-integer? exact-integer? (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_of_pairs(N :: integer(), X :: integer(), Y :: integer()) -\u003e [integer()].\ncount_of_pairs(N, X, Y) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_of_pairs(n :: integer, x :: integer, y :: integer) :: [integer]\n  def count_of_pairs(n, x, y) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given three \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003en\u003c/code\u003e, \u003ccode\u003ex\u003c/code\u003e, and \u003ccode\u003ey\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn a city, there exist houses numbered \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003en\u003c/code\u003e connected by \u003ccode\u003en\u003c/code\u003e streets. There is a street connecting the house numbered \u003ccode\u003ei\u003c/code\u003e with the house numbered \u003ccode\u003ei + 1\u003c/code\u003e for all \u003ccode\u003e1 \u0026lt;\u003d i \u0026lt;\u003d n - 1\u003c/code\u003e . An additional street connects the house numbered \u003ccode\u003ex\u003c/code\u003e with the house numbered \u003ccode\u003ey\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor each \u003ccode\u003ek\u003c/code\u003e, such that \u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d n\u003c/code\u003e, you need to find the number of \u003cstrong\u003epairs of houses\u003c/strong\u003e \u003ccode\u003e(house\u003csub\u003e1\u003c/sub\u003e, house\u003csub\u003e2\u003c/sub\u003e)\u003c/code\u003e such that the \u003cstrong\u003eminimum\u003c/strong\u003e number of streets that need to be traveled to reach \u003ccode\u003ehouse\u003csub\u003e2\u003c/sub\u003e\u003c/code\u003e from \u003ccode\u003ehouse\u003csub\u003e1\u003c/sub\u003e\u003c/code\u003e is \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ea \u003cstrong\u003e1-indexed\u003c/strong\u003e array \u003c/em\u003e\u003ccode\u003eresult\u003c/code\u003e\u003cem\u003e of length \u003c/em\u003e\u003ccode\u003en\u003c/code\u003e\u003cem\u003e where \u003c/em\u003e\u003ccode\u003eresult[k]\u003c/code\u003e\u003cem\u003e represents the \u003cstrong\u003etotal\u003c/strong\u003e number of pairs of houses such that the \u003cstrong\u003eminimum\u003c/strong\u003e streets required to reach one house from the other is \u003c/em\u003e\u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e can be \u003cstrong\u003eequal\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/20/example2.png\" style\u003d\"width: 474px; height: 197px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n \u003d 3, x \u003d 1, y \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e [6,0,0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Let\u0026#39;s look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/20/example3.png\" style\u003d\"width: 668px; height: 174px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n \u003d 5, x \u003d 2, y \u003d 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e [10,8,2,0,0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e For each distance k the pairs are:\n- For k \u003d\u003d 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k \u003d\u003d 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k \u003d\u003d 3, the pairs are (1, 5), and (5, 1).\n- For k \u003d\u003d 4 and k \u003d\u003d 5, there are no pairs.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/20/example5.png\" style\u003d\"width: 544px; height: 130px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n \u003d 4, x \u003d 1, y \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [6,4,2,0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e For each distance k the pairs are:\n- For k \u003d\u003d 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k \u003d\u003d 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k \u003d\u003d 3, the pairs are (1, 4), and (4, 1).\n- For k \u003d\u003d 4, there are no pairs.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d x, y \u0026lt;\u003d n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n1\n3\n5\n2\n4\n4\n1\n1",
    "formTitle": "[3015]Count the Number of Houses at a Certain Distance I",
    "frequency": 0.0,
    "frontendQuestionId": "3015",
    "hints": [
      "Start from each house, run a BFS to get all the distances from this house to all the other houses."
    ],
    "level": 2,
    "metaData": {
      "name": "countOfPairs",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "x",
          "type": "integer"
        },
        {
          "name": "y",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3271",
    "similarQuestions": [
      "[{\"title\": \"Walls and Gates\", \"titleSlug\": \"walls-and-gates\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5899\\u4e0e\\u95e8\", \"isPaidOnly\": true}]"
    ],
    "statusSign": "鉁�",
    "testCase": "3\n1\n3",
    "title": "Count the Number of Houses at a Certain Distance I",
    "titleSlug": "count-the-number-of-houses-at-a-certain-distance-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e resultGrid(vector\u003cvector\u003cint\u003e\u003e\u0026 image, int threshold) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[][] resultGrid(int[][] image, int threshold) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def resultGrid(self, image, threshold):\n        \"\"\"\n        :type image: List[List[int]]\n        :type threshold: int\n        :rtype: List[List[int]]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def resultGrid(self, image: List[List[int]], threshold: int) -\u003e List[List[int]]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** resultGrid(int** image, int imageSize, int* imageColSize, int threshold, int* returnSize, int** returnColumnSizes) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[][] ResultGrid(int[][] image, int threshold) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} image\n * @param {number} threshold\n * @return {number[][]}\n */\nvar resultGrid \u003d function(image, threshold) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function resultGrid(image: number[][], threshold: number): number[][] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $image\n     * @param Integer $threshold\n     * @return Integer[][]\n     */\n    function resultGrid($image, $threshold) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func resultGrid(_ image: [[Int]], _ threshold: Int) -\u003e [[Int]] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun resultGrid(image: Array\u003cIntArray\u003e, threshold: Int): Array\u003cIntArray\u003e {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cList\u003cint\u003e\u003e resultGrid(List\u003cList\u003cint\u003e\u003e image, int threshold) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func resultGrid(image [][]int, threshold int) [][]int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} image\n# @param {Integer} threshold\n# @return {Integer[][]}\ndef result_grid(image, threshold)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def resultGrid(image: Array[Array[Int]], threshold: Int): Array[Array[Int]] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn result_grid(image: Vec\u003cVec\u003ci32\u003e\u003e, threshold: i32) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (result-grid image threshold)\n  (-\u003e (listof (listof exact-integer?)) exact-integer? (listof (listof exact-integer?)))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec result_grid(Image :: [[integer()]], Threshold :: integer()) -\u003e [[integer()]].\nresult_grid(Image, Threshold) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec result_grid(image :: [[integer]], threshold :: integer) :: [[integer]]\n  def result_grid(image, threshold) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given \u003ccode\u003em x n\u003c/code\u003e grid \u003ccode\u003eimage\u003c/code\u003e which represents a grayscale image, where \u003ccode\u003eimage[i][j]\u003c/code\u003e represents a pixel with intensity in the range \u003ccode\u003e[0..255]\u003c/code\u003e. You are also given a \u003cstrong\u003enon-negative\u003c/strong\u003e integer \u003ccode\u003ethreshold\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTwo pixels are \u003cstrong\u003eadjacent\u003c/strong\u003e if they share an edge.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003eregion\u003c/strong\u003e is a \u003ccode\u003e3 x 3\u003c/code\u003e subgrid where the \u003cstrong\u003eabsolute difference\u003c/strong\u003e in intensity between any two \u003cstrong\u003eadjacent\u003c/strong\u003e pixels is \u003cstrong\u003eless than or equal to\u003c/strong\u003e \u003ccode\u003ethreshold\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll pixels in a region belong to that region, note that a pixel can belong to \u003cstrong\u003emultiple\u003c/strong\u003e regions.\u003c/p\u003e\n\n\u003cp\u003eYou need to calculate a \u003ccode\u003em x n\u003c/code\u003e grid \u003ccode\u003eresult\u003c/code\u003e, where \u003ccode\u003eresult[i][j]\u003c/code\u003e is the \u003cstrong\u003eaverage\u003c/strong\u003e intensity of the regions to which \u003ccode\u003eimage[i][j]\u003c/code\u003e belongs, \u003cstrong\u003erounded down\u003c/strong\u003e to the nearest integer. If \u003ccode\u003eimage[i][j]\u003c/code\u003e belongs to multiple regions, \u003ccode\u003eresult[i][j]\u003c/code\u003e is the \u003cstrong\u003eaverage \u003c/strong\u003eof the\u003cstrong\u003e rounded-down average \u003c/strong\u003eintensities of these regions, \u003cstrong\u003erounded down\u003c/strong\u003e to the nearest integer. If \u003ccode\u003eimage[i][j]\u003c/code\u003e does\u003cstrong\u003e not\u003c/strong\u003e belong to any region, \u003ccode\u003eresult[i][j]\u003c/code\u003e is \u003cstrong\u003eequal to\u003c/strong\u003e \u003ccode\u003eimage[i][j]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the grid \u003ccode\u003eresult\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eimage \u003d [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[[9,9,9,9],[9,9,9,9],[9,9,9,9]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/21/example0corrected.png\" style\u003d\"width: 832px; height: 275px;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are two regions as illustrated above. The average intensity of the first region is 9, while the average intensity of the second region is 9.67 which is rounded down to 9. The average intensity of both of the regions is (9 + 9) / 2 \u003d 9. As all the pixels belong to either region 1, region 2, or both of them, the intensity of every pixel in the result is 9.\u003c/p\u003e\n\n\u003cp\u003ePlease note that the rounded-down values are used when calculating the average of multiple regions, hence the calculation is done using 9 as the average intensity of region 2, not 9.67.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eimage \u003d [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold \u003d 12\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[[25,25,25],[27,27,27],[27,27,27],[30,30,30]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src\u003d\"https://assets.leetcode.com/uploads/2023/12/21/example1corrected.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are two regions as illustrated above. The average intensity of the first region is 25, while the average intensity of the second region is 30. The average intensity of both of the regions is (25 + 30) / 2 \u003d 27.5 which is rounded down to 27.\u003c/p\u003e\n\n\u003cp\u003eAll the pixels in row 0 of the image belong to region 1, hence all the pixels in row 0 in the result are 25. Similarly, all the pixels in row 3 in the result are 30. The pixels in rows 1 and 2 of the image belong to region 1 and region 2, hence their assigned value is 27 in the result.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eimage \u003d [[5,6,7],[8,9,10],[11,12,13]], threshold \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[[5,6,7],[8,9,10],[11,12,13]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is only one \u003ccode\u003e3 x 3\u003c/code\u003e subgrid, while it does not have the condition on difference of adjacent pixels, for example, the difference between \u003ccode\u003eimage[0][0]\u003c/code\u003e and \u003ccode\u003eimage[1][0]\u003c/code\u003e is \u003ccode\u003e|5 - 8| \u003d 3 \u0026gt; threshold \u003d 1\u003c/code\u003e. None of them belong to any valid regions, so the \u003ccode\u003eresult\u003c/code\u003e should be the same as \u003ccode\u003eimage\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d n, m \u0026lt;\u003d 500\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d image[i][j] \u0026lt;\u003d 255\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d threshold \u0026lt;\u003d 255\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[5,6,7,10],[8,9,10,10],[11,12,13,10]]\n3\n[[10,20,30],[15,25,35],[20,30,40],[25,35,45]]\n12\n[[5,6,7],[8,9,10],[11,12,13]]\n1",
    "formTitle": "[3030]Find the Grid of Region Average",
    "frequency": 0.0,
    "frontendQuestionId": "3030",
    "hints": [
      "Try all the \u003ccode\u003e3 * 3\u003c/code\u003e sub-grids to find all the regions.",
      "Keep two 2-D arrays \u003ccode\u003esum\u003c/code\u003e and \u003ccode\u003enum\u003c/code\u003e, for each position \u003ccode\u003e(x, y)\u003c/code\u003e in a region, increase \u003ccode\u003esum[x][y]\u003c/code\u003e by the average sum of the region and increase \u003ccode\u003enum[x][y]\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e.",
      "For each position (x, y), \u003ccode\u003esum[x][y] / num[x][y]\u003c/code\u003e is the answer. Note when \u003ccode\u003enum[x][y] \u003d\u003d 0\u003c/code\u003e, we use the original value in \u003ccode\u003eimage\u003c/code\u003e instead."
    ],
    "level": 2,
    "metaData": {
      "name": "resultGrid",
      "params": [
        {
          "name": "image",
          "type": "integer[][]"
        },
        {
          "name": "threshold",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3272",
    "similarQuestions": [
      "[{\"title\": \"Range Sum Query 2D - Immutable\", \"titleSlug\": \"range-sum-query-2d-immutable\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u4e8c\\u7ef4\\u533a\\u57df\\u548c\\u68c0\\u7d22 - \\u77e9\\u9635\\u4e0d\\u53ef\\u53d8\", \"isPaidOnly\": false}, {\"title\": \"K Radius Subarray Averages\", \"titleSlug\": \"k-radius-subarray-averages\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u534a\\u5f84\\u4e3a k \\u7684\\u5b50\\u6570\\u7ec4\\u5e73\\u5747\\u503c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[[5,6,7,10],[8,9,10,10],[11,12,13,10]]\n3",
    "title": "Find the Grid of Region Average",
    "titleSlug": "find-the-grid-of-region-average"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumPushes(string word) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumPushes(String word) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumPushes(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumPushes(self, word: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumPushes(char* word) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumPushes(string word) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar minimumPushes \u003d function(word) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumPushes(word: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function minimumPushes($word) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumPushes(_ word: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumPushes(word: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumPushes(String word) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumPushes(word string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @return {Integer}\ndef minimum_pushes(word)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumPushes(word: String): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_pushes(word: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-pushes word)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_pushes(Word :: unicode:unicode_binary()) -\u003e integer().\nminimum_pushes(Word) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_pushes(word :: String.t) :: integer\n  def minimum_pushes(word) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003eword\u003c/code\u003e containing \u003cstrong\u003edistinct\u003c/strong\u003e lowercase English letters.\u003c/p\u003e\n\n\u003cp\u003eTelephone keypads have keys mapped with \u003cstrong\u003edistinct\u003c/strong\u003e collections of lowercase English letters, which can be used to form words by pushing them. For example, the key \u003ccode\u003e2\u003c/code\u003e is mapped with \u003ccode\u003e[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;]\u003c/code\u003e, we need to push the key one time to type \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e, two times to type \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e, and three times to type \u003ccode\u003e\u0026quot;c\u0026quot;\u003c/code\u003e \u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIt is allowed to remap the keys numbered \u003ccode\u003e2\u003c/code\u003e to \u003ccode\u003e9\u003c/code\u003e to \u003cstrong\u003edistinct\u003c/strong\u003e collections of letters. The keys can be remapped to \u003cstrong\u003eany\u003c/strong\u003e amount of letters, but each letter \u003cstrong\u003emust\u003c/strong\u003e be mapped to \u003cstrong\u003eexactly\u003c/strong\u003e one key. You need to find the \u003cstrong\u003eminimum\u003c/strong\u003e number of times the keys will be pushed to type the string \u003ccode\u003eword\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of pushes needed to type \u003c/em\u003e\u003ccode\u003eword\u003c/code\u003e \u003cem\u003eafter remapping the keys\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn example mapping of letters to keys on a telephone keypad is given below. Note that \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e#\u003c/code\u003e, and \u003ccode\u003e0\u003c/code\u003e do \u003cstrong\u003enot\u003c/strong\u003e map to any letters.\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png\" style\u003d\"width: 329px; height: 313px;\" /\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e1.png\" style\u003d\"width: 329px; height: 313px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;abcde\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The remapped keypad given in the image provides the minimum cost.\n\u0026quot;a\u0026quot; -\u0026gt; one push on key 2\n\u0026quot;b\u0026quot; -\u0026gt; one push on key 3\n\u0026quot;c\u0026quot; -\u0026gt; one push on key 4\n\u0026quot;d\u0026quot; -\u0026gt; one push on key 5\n\u0026quot;e\u0026quot; -\u0026gt; one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 \u003d 5.\nIt can be shown that no other mapping can provide a lower cost.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e2.png\" style\u003d\"width: 329px; height: 313px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;xycdefghij\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The remapped keypad given in the image provides the minimum cost.\n\u0026quot;x\u0026quot; -\u0026gt; one push on key 2\n\u0026quot;y\u0026quot; -\u0026gt; two pushes on key 2\n\u0026quot;c\u0026quot; -\u0026gt; one push on key 3\n\u0026quot;d\u0026quot; -\u0026gt; two pushes on key 3\n\u0026quot;e\u0026quot; -\u0026gt; one push on key 4\n\u0026quot;f\u0026quot; -\u0026gt; one push on key 5\n\u0026quot;g\u0026quot; -\u0026gt; one push on key 6\n\u0026quot;h\u0026quot; -\u0026gt; one push on key 7\n\u0026quot;i\u0026quot; -\u0026gt; one push on key 8\n\u0026quot;j\u0026quot; -\u0026gt; one push on key 9\nTotal cost is 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 \u003d 12.\nIt can be shown that no other mapping can provide a lower cost.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d word.length \u0026lt;\u003d 26\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists of lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003eAll letters in \u003ccode\u003eword\u003c/code\u003e are distinct.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abcde\"\n\"xycdefghij\"",
    "formTitle": "[3014]Minimum Number of Pushes to Type Word I",
    "frequency": 0.0,
    "frontendQuestionId": "3014",
    "hints": [
      "We have 8 keys in total. We can type 8 characters with one push each, 8 different characters with two pushes each, and so on.",
      "The optimal way is to map letters to keys evenly."
    ],
    "level": 1,
    "metaData": {
      "name": "minimumPushes",
      "params": [
        {
          "name": "word",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3275",
    "similarQuestions": [
      "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7535\\u8bdd\\u53f7\\u7801\\u7684\\u5b57\\u6bcd\\u7ec4\\u5408\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"abcde\"",
    "title": "Minimum Number of Pushes to Type Word I",
    "titleSlug": "minimum-number-of-pushes-to-type-word-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumPushes(string word) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumPushes(String word) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumPushes(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumPushes(self, word: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumPushes(char* word) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumPushes(string word) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar minimumPushes \u003d function(word) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumPushes(word: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function minimumPushes($word) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumPushes(_ word: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumPushes(word: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumPushes(String word) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumPushes(word string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @return {Integer}\ndef minimum_pushes(word)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumPushes(word: String): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_pushes(word: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-pushes word)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_pushes(Word :: unicode:unicode_binary()) -\u003e integer().\nminimum_pushes(Word) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_pushes(word :: String.t) :: integer\n  def minimum_pushes(word) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003eword\u003c/code\u003e containing lowercase English letters.\u003c/p\u003e\n\n\u003cp\u003eTelephone keypads have keys mapped with \u003cstrong\u003edistinct\u003c/strong\u003e collections of lowercase English letters, which can be used to form words by pushing them. For example, the key \u003ccode\u003e2\u003c/code\u003e is mapped with \u003ccode\u003e[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;]\u003c/code\u003e, we need to push the key one time to type \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e, two times to type \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e, and three times to type \u003ccode\u003e\u0026quot;c\u0026quot;\u003c/code\u003e \u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIt is allowed to remap the keys numbered \u003ccode\u003e2\u003c/code\u003e to \u003ccode\u003e9\u003c/code\u003e to \u003cstrong\u003edistinct\u003c/strong\u003e collections of letters. The keys can be remapped to \u003cstrong\u003eany\u003c/strong\u003e amount of letters, but each letter \u003cstrong\u003emust\u003c/strong\u003e be mapped to \u003cstrong\u003eexactly\u003c/strong\u003e one key. You need to find the \u003cstrong\u003eminimum\u003c/strong\u003e number of times the keys will be pushed to type the string \u003ccode\u003eword\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of pushes needed to type \u003c/em\u003e\u003ccode\u003eword\u003c/code\u003e \u003cem\u003eafter remapping the keys\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn example mapping of letters to keys on a telephone keypad is given below. Note that \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e#\u003c/code\u003e, and \u003ccode\u003e0\u003c/code\u003e do \u003cstrong\u003enot\u003c/strong\u003e map to any letters.\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png\" style\u003d\"width: 329px; height: 313px;\" /\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e1.png\" style\u003d\"width: 329px; height: 313px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;abcde\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The remapped keypad given in the image provides the minimum cost.\n\u0026quot;a\u0026quot; -\u0026gt; one push on key 2\n\u0026quot;b\u0026quot; -\u0026gt; one push on key 3\n\u0026quot;c\u0026quot; -\u0026gt; one push on key 4\n\u0026quot;d\u0026quot; -\u0026gt; one push on key 5\n\u0026quot;e\u0026quot; -\u0026gt; one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 \u003d 5.\nIt can be shown that no other mapping can provide a lower cost.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/26/keypadv2e2.png\" style\u003d\"width: 329px; height: 313px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;xyzxyzxyzxyz\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The remapped keypad given in the image provides the minimum cost.\n\u0026quot;x\u0026quot; -\u0026gt; one push on key 2\n\u0026quot;y\u0026quot; -\u0026gt; one push on key 3\n\u0026quot;z\u0026quot; -\u0026gt; one push on key 4\nTotal cost is 1 * 4 + 1 * 4 + 1 * 4 \u003d 12\nIt can be shown that no other mapping can provide a lower cost.\nNote that the key 9 is not mapped to any letter: it is not necessary to map letters to every key, but to map all the letters.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/27/keypadv2.png\" style\u003d\"width: 329px; height: 313px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;aabbccddeeffgghhiiiiii\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 24\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The remapped keypad given in the image provides the minimum cost.\n\u0026quot;a\u0026quot; -\u0026gt; one push on key 2\n\u0026quot;b\u0026quot; -\u0026gt; one push on key 3\n\u0026quot;c\u0026quot; -\u0026gt; one push on key 4\n\u0026quot;d\u0026quot; -\u0026gt; one push on key 5\n\u0026quot;e\u0026quot; -\u0026gt; one push on key 6\n\u0026quot;f\u0026quot; -\u0026gt; one push on key 7\n\u0026quot;g\u0026quot; -\u0026gt; one push on key 8\n\u0026quot;h\u0026quot; -\u0026gt; two pushes on key 9\n\u0026quot;i\u0026quot; -\u0026gt; one push on key 9\nTotal cost is 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 2 * 2 + 6 * 1 \u003d 24.\nIt can be shown that no other mapping can provide a lower cost.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d word.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abcde\"\n\"xyzxyzxyzxyz\"\n\"aabbccddeeffgghhiiiiii\"",
    "formTitle": "[3016]Minimum Number of Pushes to Type Word II",
    "frequency": 0.0,
    "frontendQuestionId": "3016",
    "hints": [
      "We have 8 keys in total. We can type 8 characters with one push each, 8 different characters with two pushes each, and so on.",
      "The optimal way is to map letters to keys evenly.",
      "Sort the letters by frequencies in the word in non-increasing order."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumPushes",
      "params": [
        {
          "name": "word",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3276",
    "similarQuestions": [
      "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7535\\u8bdd\\u53f7\\u7801\\u7684\\u5b57\\u6bcd\\u7ec4\\u5408\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"abcde\"",
    "title": "Minimum Number of Pushes to Type Word II",
    "titleSlug": "minimum-number-of-pushes-to-type-word-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfPairs(vector\u003cvector\u003cint\u003e\u003e\u0026 points) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfPairs(int[][] points) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfPairs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfPairs(self, points: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfPairs(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfPairs(int[][] points) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfPairs \u003d function(points) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfPairs(points: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfPairs($points) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfPairs(_ points: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfPairs(points: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfPairs(List\u003cList\u003cint\u003e\u003e points) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfPairs(points [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_pairs(points)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfPairs(points: Array[Array[Int]]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_pairs(points: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-pairs points)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_pairs(Points :: [[integer()]]) -\u003e integer().\nnumber_of_pairs(Points) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_pairs(points :: [[integer]]) :: integer\n  def number_of_pairs(points) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D array \u003ccode\u003epoints\u003c/code\u003e of size \u003ccode\u003en x 2\u003c/code\u003e representing integer coordinates of some points on a 2D-plane, where \u003ccode\u003epoints[i] \u003d [x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe define the \u003cstrong\u003eright\u003c/strong\u003e direction as positive x-axis (\u003cstrong\u003eincreasing x-coordinate\u003c/strong\u003e) and the \u003cstrong\u003eleft\u003c/strong\u003e direction as negative x-axis (\u003cstrong\u003edecreasing x-coordinate\u003c/strong\u003e). Similarly, we define the \u003cstrong\u003eup\u003c/strong\u003e direction as positive y-axis (\u003cstrong\u003eincreasing y-coordinate\u003c/strong\u003e) and the \u003cstrong\u003edown\u003c/strong\u003e direction as negative y-axis (\u003cstrong\u003edecreasing y-coordinate\u003c/strong\u003e)\u003c/p\u003e\n\n\u003cp\u003eYou have to place \u003ccode\u003en\u003c/code\u003e people, including Alice and Bob, at these points such that there is \u003cstrong\u003eexactly one\u003c/strong\u003e person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice\u0026#39;s position as the \u003cstrong\u003eupper left corner\u003c/strong\u003e and Bob\u0026#39;s position as the \u003cstrong\u003elower right corner\u003c/strong\u003e of the fence (\u003cstrong\u003eNote\u003c/strong\u003e that the fence \u003cstrong\u003emight not\u003c/strong\u003e enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either \u003cstrong\u003einside\u003c/strong\u003e the fence or \u003cstrong\u003eon\u003c/strong\u003e the fence, Alice will be sad.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe number of \u003cstrong\u003epairs of points\u003c/strong\u003e where you can place Alice and Bob, such that Alice \u003cstrong\u003edoes not\u003c/strong\u003e become sad on building the fence\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that Alice can only build a fence with Alice\u0026#39;s position as the upper left corner, and Bob\u0026#39;s position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners \u003ccode\u003e(1, 1)\u003c/code\u003e, \u003ccode\u003e(1, 3)\u003c/code\u003e, \u003ccode\u003e(3, 1)\u003c/code\u003e, and \u003ccode\u003e(3, 3)\u003c/code\u003e, because:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eWith Alice at \u003ccode\u003e(3, 3)\u003c/code\u003e and Bob at \u003ccode\u003e(1, 1)\u003c/code\u003e, Alice\u0026#39;s position is not the upper left corner and Bob\u0026#39;s position is not the lower right corner of the fence.\u003c/li\u003e\n\t\u003cli\u003eWith Alice at \u003ccode\u003e(1, 3)\u003c/code\u003e and Bob at \u003ccode\u003e(1, 1)\u003c/code\u003e, Bob\u0026#39;s position is not the lower right corner of the fence.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/04/example0alicebob-1.png\" style\u003d\"width: 750px; height: 308px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/04/example1alicebob.png\" style\u003d\"width: 376px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e points \u003d [[1,1],[2,2],[3,3]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is no way to place Alice and Bob such that Alice can build a fence with Alice\u0026#39;s position as the upper left corner and Bob\u0026#39;s position as the lower right corner. Hence we return 0. \n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/02/04/example2alicebob.png\" style\u003d\"width: 1321px; height: 363px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e points \u003d [[6,2],[4,4],[2,6]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/02/04/example4alicebob.png\" style\u003d\"width: 1123px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e points \u003d [[3,1],[1,3],[1,1]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epoints[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;\u003d points[i][0], points[i][1] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll \u003ccode\u003epoints[i]\u003c/code\u003e are distinct.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,1],[2,2],[3,3]]\n[[6,2],[4,4],[2,6]]\n[[3,1],[1,3],[1,1]]",
    "formTitle": "[3027]Find the Number of Ways to Place People II",
    "frequency": 0.0,
    "frontendQuestionId": "3027",
    "hints": [
      "Sort the points by x-coordinate in non-decreasing order and break the tie by sorting the y-coordinate in non-increasing order.",
      "Now consider two points upper-left corner \u003ccode\u003epoints[i]\u003c/code\u003e and lower-right corner \u003ccode\u003epoints[j]\u003c/code\u003e, such that \u003ccode\u003ei \u003c j\u003c/code\u003e and \u003ccode\u003epoints[i][0] \u003c\u003d points[j][0]\u003c/code\u003e and \u003ccode\u003epoints[i][1] \u003e\u003d points[j][1]\u003c/code\u003e.",
      "Instead of brute force looping, we can save the largest y-coordinate that is no larger than \u003ccode\u003epoints[i][1]\u003c/code\u003e when looping on \u003ccode\u003ej\u003c/code\u003e, say the value is \u003ccode\u003em\u003c/code\u003e. And if \u003ccode\u003em \u003c points[j][1]\u003c/code\u003e, the upper-left and lower-right corner pair is valid.",
      "The actual values don鈥檛 matter, we can compress all x-coordinates and y-coordinates to the range \u003ccode\u003e[1, n]\u003c/code\u003e. Can we use prefix sum now?"
    ],
    "level": 3,
    "metaData": {
      "name": "numberOfPairs",
      "params": [
        {
          "name": "points",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3277",
    "similarQuestions": [
      "[{\"title\": \"Rectangle Area\", \"titleSlug\": \"rectangle-area\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u77e9\\u5f62\\u9762\\u79ef\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[1,1],[2,2],[3,3]]",
    "title": "Find the Number of Ways to Place People II",
    "titleSlug": "find-the-number-of-ways-to-place-people-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfPairs(vector\u003cvector\u003cint\u003e\u003e\u0026 points) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfPairs(int[][] points) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfPairs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfPairs(self, points: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfPairs(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfPairs(int[][] points) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfPairs \u003d function(points) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfPairs(points: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfPairs($points) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfPairs(_ points: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfPairs(points: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfPairs(List\u003cList\u003cint\u003e\u003e points) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfPairs(points [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_pairs(points)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfPairs(points: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_pairs(points: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-pairs points)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_pairs(Points :: [[integer()]]) -\u003e integer().\nnumber_of_pairs(Points) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_pairs(points :: [[integer]]) :: integer\n  def number_of_pairs(points) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D array \u003ccode\u003epoints\u003c/code\u003e of size \u003ccode\u003en x 2\u003c/code\u003e representing integer coordinates of some points on a 2D plane, where \u003ccode\u003epoints[i] \u003d [x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCount the number of pairs of points \u003ccode\u003e(A, B)\u003c/code\u003e, where\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eA\u003c/code\u003e is on the \u003cstrong\u003eupper left\u003c/strong\u003e side of \u003ccode\u003eB\u003c/code\u003e, and\u003c/li\u003e\n\t\u003cli\u003ethere are no other points in the rectangle (or line) they make (\u003cstrong\u003eincluding the border\u003c/strong\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the count.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epoints \u003d [[1,1],[2,2],[3,3]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src\u003d\"https://assets.leetcode.com/uploads/2024/01/04/example1alicebob.png\" style\u003d\"width: 427px; height: 350px;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is no way to choose \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e so \u003ccode\u003eA\u003c/code\u003e is on the upper left side of \u003ccode\u003eB\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epoints \u003d [[6,2],[4,4],[2,6]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg height\u003d\"365\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/25/t2.jpg\" width\u003d\"1321\" /\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe left one is the pair \u003ccode\u003e(points[1], points[0])\u003c/code\u003e, where \u003ccode\u003epoints[1]\u003c/code\u003e is on the upper left side of \u003ccode\u003epoints[0]\u003c/code\u003e and the rectangle is empty.\u003c/li\u003e\n\t\u003cli\u003eThe middle one is the pair \u003ccode\u003e(points[2], points[1])\u003c/code\u003e, same as the left one it is a valid pair.\u003c/li\u003e\n\t\u003cli\u003eThe right one is the pair \u003ccode\u003e(points[2], points[0])\u003c/code\u003e, where \u003ccode\u003epoints[2]\u003c/code\u003e is on the upper left side of \u003ccode\u003epoints[0]\u003c/code\u003e, but \u003ccode\u003epoints[1]\u003c/code\u003e is inside the rectangle so it\u0026#39;s not a valid pair.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epoints \u003d [[3,1],[1,3],[1,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src\u003d\"https://assets.leetcode.com/uploads/2024/06/25/t3.jpg\" style\u003d\"width: 1269px; height: 350px;\" /\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe left one is the pair \u003ccode\u003e(points[2], points[0])\u003c/code\u003e, where \u003ccode\u003epoints[2]\u003c/code\u003e is on the upper left side of \u003ccode\u003epoints[0]\u003c/code\u003e and there are no other points on the line they form. Note that it is a valid state when the two points form a line.\u003c/li\u003e\n\t\u003cli\u003eThe middle one is the pair \u003ccode\u003e(points[1], points[2])\u003c/code\u003e, it is a valid pair same as the left one.\u003c/li\u003e\n\t\u003cli\u003eThe right one is the pair \u003ccode\u003e(points[1], points[0])\u003c/code\u003e, it is not a valid pair as \u003ccode\u003epoints[2]\u003c/code\u003e is on the border of the rectangle.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epoints[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d points[i][0], points[i][1] \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll \u003ccode\u003epoints[i]\u003c/code\u003e are distinct.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,1],[2,2],[3,3]]\n[[6,2],[4,4],[2,6]]\n[[3,1],[1,3],[1,1]]",
    "formTitle": "[3025]Find the Number of Ways to Place People I",
    "frequency": 0.0,
    "frontendQuestionId": "3025",
    "hints": [
      "We can enumerate all the upper-left and lower-right corners.",
      "If the upper-left corner is \u003ccode\u003e(x1, y1)\u003c/code\u003e and lower-right corner is \u003ccode\u003e(x2, y2)\u003c/code\u003e, check that there is no point \u003ccode\u003e(x, y)\u003c/code\u003e such that \u003ccode\u003ex1 \u003c\u003d x \u003c\u003d x2\u003c/code\u003e and \u003ccode\u003ey2 \u003c\u003d y \u003c\u003d y1\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "numberOfPairs",
      "params": [
        {
          "name": "points",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3278",
    "similarQuestions": [
      "[{\"title\": \"Rectangle Area\", \"titleSlug\": \"rectangle-area\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u77e9\\u5f62\\u9762\\u79ef\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[1,1],[2,2],[3,3]]",
    "title": "Find the Number of Ways to Place People I",
    "titleSlug": "find-the-number-of-ways-to-place-people-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long flowerGame(int n, int m) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long flowerGame(int n, int m) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def flowerGame(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def flowerGame(self, n: int, m: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long flowerGame(int n, int m) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long FlowerGame(int n, int m) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar flowerGame \u003d function(n, m) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function flowerGame(n: number, m: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $m\n     * @return Integer\n     */\n    function flowerGame($n, $m) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func flowerGame(_ n: Int, _ m: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun flowerGame(n: Int, m: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int flowerGame(int n, int m) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func flowerGame(n int, m int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer} m\n# @return {Integer}\ndef flower_game(n, m)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def flowerGame(n: Int, m: Int): Long \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn flower_game(n: i32, m: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (flower-game n m)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec flower_game(N :: integer(), M :: integer()) -\u003e integer().\nflower_game(N, M) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec flower_game(n :: integer, m :: integer) :: integer\n  def flower_game(n, m) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eAlice and Bob are playing a turn-based game on a circular field surrounded by flowers. The circle represents the field, and there are \u003ccode\u003ex\u003c/code\u003e flowers in the clockwise direction between Alice and Bob, and \u003ccode\u003ey\u003c/code\u003e flowers in the anti-clockwise direction between them.\u003c/p\u003e\n\n\u003cp\u003eThe game proceeds as follows:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eAlice takes the first turn.\u003c/li\u003e\n\t\u003cli\u003eIn each turn, a player must choose either the clockwise or anti-clockwise direction and pick one flower from that side.\u003c/li\u003e\n\t\u003cli\u003eAt the end of the turn, if there are no flowers left at all, the \u003cstrong\u003ecurrent\u003c/strong\u003e player captures their opponent and wins the game.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eGiven two integers, \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003em\u003c/code\u003e, the task is to compute the number of possible pairs \u003ccode\u003e(x, y)\u003c/code\u003e that satisfy the conditions:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAlice must win the game according to the described rules.\u003c/li\u003e\n\t\u003cli\u003eThe number of flowers \u003ccode\u003ex\u003c/code\u003e in the clockwise direction must be in the range \u003ccode\u003e[1,n]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe number of flowers \u003ccode\u003ey\u003c/code\u003e in the anti-clockwise direction must be in the range \u003ccode\u003e[1,m]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe number of possible pairs\u003c/em\u003e \u003ccode\u003e(x, y)\u003c/code\u003e \u003cem\u003ethat satisfy the conditions mentioned in the statement\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n \u003d 3, m \u003d 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The following pairs satisfy conditions described in the statement: (1,2), (3,2), (2,1).\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n \u003d 1, m \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e No pairs satisfy the conditions described in the statement.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, m \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n2\n1\n1",
    "formTitle": "[3021]Alice and Bob Playing Flower Game",
    "frequency": 0.0,
    "frontendQuestionId": "3021",
    "hints": [
      "(x, y) is valid if and only if they have different parities."
    ],
    "level": 2,
    "metaData": {
      "name": "flowerGame",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "m",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3279",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "3\n2",
    "title": "Alice and Bob Playing Flower Game",
    "titleSlug": "alice-and-bob-playing-flower-game"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int earliestSecondToMarkIndices(vector\u003cint\u003e\u0026 nums, vector\u003cint\u003e\u0026 changeIndices) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def earliestSecondToMarkIndices(self, nums, changeIndices):\n        \"\"\"\n        :type nums: List[int]\n        :type changeIndices: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int earliestSecondToMarkIndices(int* nums, int numsSize, int* changeIndices, int changeIndicesSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int EarliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[]} changeIndices\n * @return {number}\n */\nvar earliestSecondToMarkIndices \u003d function(nums, changeIndices) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function earliestSecondToMarkIndices(nums: number[], changeIndices: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $changeIndices\n     * @return Integer\n     */\n    function earliestSecondToMarkIndices($nums, $changeIndices) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func earliestSecondToMarkIndices(_ nums: [Int], _ changeIndices: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun earliestSecondToMarkIndices(nums: IntArray, changeIndices: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int earliestSecondToMarkIndices(List\u003cint\u003e nums, List\u003cint\u003e changeIndices) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func earliestSecondToMarkIndices(nums []int, changeIndices []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[]} change_indices\n# @return {Integer}\ndef earliest_second_to_mark_indices(nums, change_indices)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def earliestSecondToMarkIndices(nums: Array[Int], changeIndices: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn earliest_second_to_mark_indices(nums: Vec\u003ci32\u003e, change_indices: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (earliest-second-to-mark-indices nums changeIndices)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec earliest_second_to_mark_indices(Nums :: [integer()], ChangeIndices :: [integer()]) -\u003e integer().\nearliest_second_to_mark_indices(Nums, ChangeIndices) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec earliest_second_to_mark_indices(nums :: [integer], change_indices :: [integer]) :: integer\n  def earliest_second_to_mark_indices(nums, change_indices) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two \u003cstrong\u003e1-indexed\u003c/strong\u003e integer arrays, \u003ccode\u003enums\u003c/code\u003e and, \u003ccode\u003echangeIndices\u003c/code\u003e, having lengths \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003em\u003c/code\u003e, respectively.\u003c/p\u003e\n\n\u003cp\u003eInitially, all indices in \u003ccode\u003enums\u003c/code\u003e are unmarked. Your task is to mark \u003cstrong\u003eall\u003c/strong\u003e indices in \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn each second, \u003ccode\u003es\u003c/code\u003e, in order from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003em\u003c/code\u003e (\u003cstrong\u003einclusive\u003c/strong\u003e), you can perform \u003cstrong\u003eone\u003c/strong\u003e of the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose an index \u003ccode\u003ei\u003c/code\u003e in the range \u003ccode\u003e[1, n]\u003c/code\u003e and \u003cstrong\u003edecrement\u003c/strong\u003e \u003ccode\u003enums[i]\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSet \u003ccode\u003enums[changeIndices[s]]\u003c/code\u003e to any \u003cstrong\u003enon-negative\u003c/strong\u003e value.\u003c/li\u003e\n\t\u003cli\u003eChoose an index \u003ccode\u003ei\u003c/code\u003e in the range \u003ccode\u003e[1, n]\u003c/code\u003e, where \u003ccode\u003enums[i]\u003c/code\u003e is \u003cstrong\u003eequal\u003c/strong\u003e to \u003ccode\u003e0\u003c/code\u003e, and \u003cstrong\u003emark\u003c/strong\u003e index \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eDo nothing.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean integer denoting the \u003cstrong\u003eearliest second\u003c/strong\u003e in the range \u003c/em\u003e\u003ccode\u003e[1, m]\u003c/code\u003e\u003cem\u003e when \u003cstrong\u003eall\u003c/strong\u003e indices in \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e\u003cem\u003e can be marked by choosing operations optimally, or \u003c/em\u003e\u003ccode\u003e-1\u003c/code\u003e\u003cem\u003e if it is impossible.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,2,3], changeIndices \u003d [1,3,2,2,2,2,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Set nums[changeIndices[1]] to 0. nums becomes [0,2,3].\nSecond 2: Set nums[changeIndices[2]] to 0. nums becomes [0,2,0].\nSecond 3: Set nums[changeIndices[3]] to 0. nums becomes [0,0,0].\nSecond 4: Mark index 1, since nums[1] is equal to 0.\nSecond 5: Mark index 2, since nums[2] is equal to 0.\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [0,0,1,2], changeIndices \u003d [1,2,1,2,1,2,1,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 7\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Mark index 1, since nums[1] is equal to 0.\nSecond 2: Mark index 2, since nums[2] is equal to 0.\nSecond 3: Decrement index 4 by one. nums becomes [0,0,1,1].\nSecond 4: Decrement index 4 by one. nums becomes [0,0,1,0].\nSecond 5: Decrement index 3 by one. nums becomes [0,0,0,0].\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nSecond 7: Mark index 4, since nums[4] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 7th second.\nHence, the answer is 7.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,3], changeIndices \u003d [1,2,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\n\u003cstrong\u003eExplanation: \u003c/strong\u003eIn this example, it can be shown that it is impossible to mark all indices, as we don\u0026#39;t have enough seconds. \nHence, the answer is -1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m \u003d\u003d changeIndices.length \u0026lt;\u003d 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d changeIndices[i] \u0026lt;\u003d n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,2,3]\n[1,3,2,2,2,2,3]\n[0,0,1,2]\n[1,2,1,2,1,2,1,2]\n[1,2,3]\n[1,2,3]",
    "formTitle": "[3049]Earliest Second to Mark Indices II",
    "frequency": 0.0,
    "frontendQuestionId": "3049",
    "hints": [
      "We need at least \u003ccode\u003en\u003c/code\u003e seconds, and at most \u003ccode\u003esum(nums[i]) + n\u003c/code\u003e seconds.",
      "We can binary search the earliest second where all indices can be marked.",
      "If there is an operation where we change \u003ccode\u003enums[changeIndices[i]]\u003c/code\u003e to a non-negative value, it is best for it to satisfy the following constraints:\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003enums[changeIndices[i]]\u003c/code\u003e should not be equal to \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003enums[changeIndices[i]]\u003c/code\u003e should be changed to \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eIt should be the first position where \u003ccode\u003echangeIndices[i]\u003c/code\u003e occurs in \u003ccode\u003echangeIndices\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eThere should be another second, \u003ccode\u003ej\u003c/code\u003e, where \u003ccode\u003echangeIndices[i]\u003c/code\u003e will be marked. \u003ccode\u003ej\u003c/code\u003e is in the range \u003ccode\u003e[i + 1, m]\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e",
      "Let \u003ccode\u003etime_needed \u003d sum(nums[i]) + n\u003c/code\u003e. To check if we can mark all indices at some second \u003ccode\u003ex\u003c/code\u003e, we need to make \u003ccode\u003etime_needed \u003c\u003d x\u003c/code\u003e, using non-negative change operations as described previously.",
      "Using a non-negative change operation on some \u003ccode\u003enums[changeIndices[i]]\u003c/code\u003e that satisfies the constraints described previously reduces \u003ccode\u003etime_needed\u003c/code\u003e by \u003ccode\u003enums[changeIndices[i]] - 1\u003c/code\u003e. So, we need to maximize the sum of \u003ccode\u003e(nums[changeIndices[i]] - 1)\u003c/code\u003e while ensuring that the non-negative change operations still satisfy the constraints.",
      "Maximizing the sum of \u003ccode\u003e(nums[changeIndices[i]] - 1)\u003c/code\u003e can be done greedily using a min-priority queue and going in reverse starting from second \u003ccode\u003ex\u003c/code\u003e to second \u003ccode\u003e1\u003c/code\u003e, maximizing the sum of the values in the priority queue and ensuring that for every non-negative change operation on \u003ccode\u003enums[changeIndices[i]]\u003c/code\u003e chosen, there is another second \u003ccode\u003ej\u003c/code\u003e in the range \u003ccode\u003e[i + 1, x]\u003c/code\u003e where \u003ccode\u003echangeIndices[i]\u003c/code\u003e can be marked.",
      "The answer is the first value of \u003ccode\u003ex\u003c/code\u003e in the range \u003ccode\u003e[1, m]\u003c/code\u003e where it is possible to make \u003ccode\u003etime_needed \u003c\u003d x\u003c/code\u003e, or \u003ccode\u003e-1\u003c/code\u003e if there is no such second."
    ],
    "level": 3,
    "metaData": {
      "name": "earliestSecondToMarkIndices",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "changeIndices",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3289",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "[3,2,3]\n[1,3,2,2,2,2,3]",
    "title": "Earliest Second to Mark Indices II",
    "titleSlug": "earliest-second-to-mark-indices-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int countMatchingSubarrays(vector\u003cint\u003e\u0026 nums, vector\u003cint\u003e\u0026 pattern) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int countMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countMatchingSubarrays(self, nums, pattern):\n        \"\"\"\n        :type nums: List[int]\n        :type pattern: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countMatchingSubarrays(self, nums: List[int], pattern: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int countMatchingSubarrays(int* nums, int numsSize, int* pattern, int patternSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int CountMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[]} pattern\n * @return {number}\n */\nvar countMatchingSubarrays \u003d function(nums, pattern) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countMatchingSubarrays(nums: number[], pattern: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $pattern\n     * @return Integer\n     */\n    function countMatchingSubarrays($nums, $pattern) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countMatchingSubarrays(_ nums: [Int], _ pattern: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countMatchingSubarrays(nums: IntArray, pattern: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countMatchingSubarrays(List\u003cint\u003e nums, List\u003cint\u003e pattern) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countMatchingSubarrays(nums []int, pattern []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[]} pattern\n# @return {Integer}\ndef count_matching_subarrays(nums, pattern)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countMatchingSubarrays(nums: Array[Int], pattern: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_matching_subarrays(nums: Vec\u003ci32\u003e, pattern: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-matching-subarrays nums pattern)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_matching_subarrays(Nums :: [integer()], Pattern :: [integer()]) -\u003e integer().\ncount_matching_subarrays(Nums, Pattern) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_matching_subarrays(nums :: [integer], pattern :: [integer]) :: integer\n  def count_matching_subarrays(nums, pattern) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e, and a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003epattern\u003c/code\u003e of size \u003ccode\u003em\u003c/code\u003e consisting of integers \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, and \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cspan data-keyword\u003d\"subarray\"\u003esubarray\u003c/span\u003e \u003ccode\u003enums[i..j]\u003c/code\u003e of size \u003ccode\u003em + 1\u003c/code\u003e is said to match the \u003ccode\u003epattern\u003c/code\u003e if the following conditions hold for each element \u003ccode\u003epattern[k]\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i + k + 1] \u0026gt; nums[i + k]\u003c/code\u003e if \u003ccode\u003epattern[k] \u003d\u003d 1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i + k + 1] \u003d\u003d nums[i + k]\u003c/code\u003e if \u003ccode\u003epattern[k] \u003d\u003d 0\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i + k + 1] \u0026lt; nums[i + k]\u003c/code\u003e if \u003ccode\u003epattern[k] \u003d\u003d -1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe\u003cstrong\u003e count\u003c/strong\u003e of subarrays in\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e \u003cem\u003ethat match the\u003c/em\u003e \u003ccode\u003epattern\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,3,4,5,6], pattern \u003d [1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,4,4,1,3,5,5,3], pattern \u003d [1,0,-1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation: \u003c/strong\u003eHere, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m \u003d\u003d pattern.length \u0026lt; n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1 \u0026lt;\u003d pattern[i] \u0026lt;\u003d 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,4,5,6]\n[1,1]\n[1,4,4,1,3,5,5,3]\n[1,0,-1]",
    "formTitle": "[3036]Number of Subarrays That Match a Pattern II",
    "frequency": 0.0,
    "frontendQuestionId": "3036",
    "hints": [
      "Create a second array \u003ccode\u003enums2\u003c/code\u003e such that \u003ccode\u003enums2[i] \u003d 1\u003c/code\u003e if \u003ccode\u003enums[i + 1] \u003e nums[i]\u003c/code\u003e, \u003ccode\u003enums2[i] \u003d 0\u003c/code\u003e if \u003ccode\u003enums[i + 1] \u003d\u003d nums[i]\u003c/code\u003e, and \u003ccode\u003enums2[i] \u003d -1\u003c/code\u003e if \u003ccode\u003enums[i + 1] \u003c nums[i]\u003c/code\u003e.",
      "The problem becomes: 鈥淐ount the number of subarrays in \u003ccode\u003enums2\u003c/code\u003e that are equal to \u003ccode\u003epattern\u003c/code\u003e.",
      "Use Knuth-Morris-Pratt or Z-Function algorithms."
    ],
    "level": 3,
    "metaData": {
      "name": "countMatchingSubarrays",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "pattern",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3290",
    "similarQuestions": [
      "[{\"title\": \"Match Substring After Replacement\", \"titleSlug\": \"match-substring-after-replacement\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u66ff\\u6362\\u5b57\\u7b26\\u540e\\u5339\\u914d\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,2,3,4,5,6]\n[1,1]",
    "title": "Number of Subarrays That Match a Pattern II",
    "titleSlug": "number-of-subarrays-that-match-a-pattern-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool canSortArray(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean canSortArray(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def canSortArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def canSortArray(self, nums: List[int]) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool canSortArray(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool CanSortArray(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canSortArray \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function canSortArray(nums: number[]): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canSortArray($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func canSortArray(_ nums: [Int]) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun canSortArray(nums: IntArray): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool canSortArray(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func canSortArray(nums []int) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_sort_array(nums)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def canSortArray(nums: Array[Int]): Boolean \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn can_sort_array(nums: Vec\u003ci32\u003e) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (can-sort-array nums)\n  (-\u003e (listof exact-integer?) boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec can_sort_array(Nums :: [integer()]) -\u003e boolean().\ncan_sort_array(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec can_sort_array(nums :: [integer]) :: boolean\n  def can_sort_array(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e array of \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn one \u003cstrong\u003eoperation\u003c/strong\u003e, you can swap any two \u003cstrong\u003eadjacent\u003c/strong\u003e elements if they have the \u003cstrong\u003esame\u003c/strong\u003e number of \u003cspan data-keyword\u003d\"set-bit\"\u003eset bits\u003c/span\u003e. You are allowed to do this operation \u003cstrong\u003eany\u003c/strong\u003e number of times (\u003cstrong\u003eincluding zero\u003c/strong\u003e).\u003c/p\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e \u003cem\u003eif you can sort the array, else return \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [8,4,2,30,15]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Let\u0026#39;s look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation \u0026quot;10\u0026quot;, \u0026quot;100\u0026quot;, and \u0026quot;1000\u0026quot; respectively. The numbers 15 and 30 have four set bits each with binary representation \u0026quot;1111\u0026quot; and \u0026quot;11110\u0026quot;.\nWe can sort the array using 4 operations:\n- Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15].\n- Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15].\n- Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15].\n- Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30].\nThe array has become sorted, hence we return true.\nNote that there may be other sequences of operations which also sort the array.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,3,4,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The array is already sorted, hence we return true.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,16,8,4,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e It can be shown that it is not possible to sort the input array using any number of operations.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 2\u003csup\u003e8\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[8,4,2,30,15]\n[1,2,3,4,5]\n[3,16,8,4,2]",
    "formTitle": "[3011]Find if Array Can Be Sorted",
    "frequency": 0.0,
    "frontendQuestionId": "3011",
    "hints": [
      "Split the array into segments. Each segment contains consecutive elements with the same number of set bits.",
      "From left to right, the previous segment鈥檚 largest element should be smaller than the current segment鈥檚 smallest element."
    ],
    "level": 2,
    "metaData": {
      "name": "canSortArray",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3291",
    "similarQuestions": [
      "[{\"title\": \"Sort Integers by The Number of 1 Bits\", \"titleSlug\": \"sort-integers-by-the-number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6839\\u636e\\u6570\\u5b57\\u4e8c\\u8fdb\\u5236\\u4e0b 1 \\u7684\\u6570\\u76ee\\u6392\\u5e8f\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[8,4,2,30,15]",
    "title": "Find if Array Can Be Sorted",
    "titleSlug": "find-if-array-can-be-sorted"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int earliestSecondToMarkIndices(vector\u003cint\u003e\u0026 nums, vector\u003cint\u003e\u0026 changeIndices) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def earliestSecondToMarkIndices(self, nums, changeIndices):\n        \"\"\"\n        :type nums: List[int]\n        :type changeIndices: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int earliestSecondToMarkIndices(int* nums, int numsSize, int* changeIndices, int changeIndicesSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int EarliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[]} changeIndices\n * @return {number}\n */\nvar earliestSecondToMarkIndices \u003d function(nums, changeIndices) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function earliestSecondToMarkIndices(nums: number[], changeIndices: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $changeIndices\n     * @return Integer\n     */\n    function earliestSecondToMarkIndices($nums, $changeIndices) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func earliestSecondToMarkIndices(_ nums: [Int], _ changeIndices: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun earliestSecondToMarkIndices(nums: IntArray, changeIndices: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int earliestSecondToMarkIndices(List\u003cint\u003e nums, List\u003cint\u003e changeIndices) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func earliestSecondToMarkIndices(nums []int, changeIndices []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[]} change_indices\n# @return {Integer}\ndef earliest_second_to_mark_indices(nums, change_indices)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def earliestSecondToMarkIndices(nums: Array[Int], changeIndices: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn earliest_second_to_mark_indices(nums: Vec\u003ci32\u003e, change_indices: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (earliest-second-to-mark-indices nums changeIndices)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec earliest_second_to_mark_indices(Nums :: [integer()], ChangeIndices :: [integer()]) -\u003e integer().\nearliest_second_to_mark_indices(Nums, ChangeIndices) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec earliest_second_to_mark_indices(nums :: [integer], change_indices :: [integer]) :: integer\n  def earliest_second_to_mark_indices(nums, change_indices) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two \u003cstrong\u003e1-indexed\u003c/strong\u003e integer arrays, \u003ccode\u003enums\u003c/code\u003e and, \u003ccode\u003echangeIndices\u003c/code\u003e, having lengths \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003em\u003c/code\u003e, respectively.\u003c/p\u003e\n\n\u003cp\u003eInitially, all indices in \u003ccode\u003enums\u003c/code\u003e are unmarked. Your task is to mark \u003cstrong\u003eall\u003c/strong\u003e indices in \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn each second, \u003ccode\u003es\u003c/code\u003e, in order from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003em\u003c/code\u003e (\u003cstrong\u003einclusive\u003c/strong\u003e), you can perform \u003cstrong\u003eone\u003c/strong\u003e of the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose an index \u003ccode\u003ei\u003c/code\u003e in the range \u003ccode\u003e[1, n]\u003c/code\u003e and \u003cstrong\u003edecrement\u003c/strong\u003e \u003ccode\u003enums[i]\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIf \u003ccode\u003enums[changeIndices[s]]\u003c/code\u003e is \u003cstrong\u003eequal\u003c/strong\u003e to \u003ccode\u003e0\u003c/code\u003e, \u003cstrong\u003emark\u003c/strong\u003e the index \u003ccode\u003echangeIndices[s]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eDo nothing.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean integer denoting the \u003cstrong\u003eearliest second\u003c/strong\u003e in the range \u003c/em\u003e\u003ccode\u003e[1, m]\u003c/code\u003e\u003cem\u003e when \u003cstrong\u003eall\u003c/strong\u003e indices in \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e\u003cem\u003e can be marked by choosing operations optimally, or \u003c/em\u003e\u003ccode\u003e-1\u003c/code\u003e\u003cem\u003e if it is impossible.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [2,2,0], changeIndices \u003d [2,2,2,2,3,2,2,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 8\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].\nSecond 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].\nSecond 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].\nSecond 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.\nSecond 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.\nSecond 7: Do nothing.\nSecond 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 8th second.\nHence, the answer is 8.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,3], changeIndices \u003d [1,1,1,2,1,1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2].\nSecond 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0].\nSecond 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0.\nSecond 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0].\nSecond 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [0,1], changeIndices \u003d [2,2,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, it is impossible to mark all indices because index 1 isn\u0026#39;t in changeIndices.\nHence, the answer is -1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 2000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m \u003d\u003d changeIndices.length \u0026lt;\u003d 2000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d changeIndices[i] \u0026lt;\u003d n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,2,0]\n[2,2,2,2,3,2,2,1]\n[1,3]\n[1,1,1,2,1,1,1]\n[0,1]\n[2,2,2]",
    "formTitle": "[3048]Earliest Second to Mark Indices I",
    "frequency": 0.0,
    "frontendQuestionId": "3048",
    "hints": [
      "Consider using binary search.",
      "Suppose the \u003ccode\u003eanswer \u003c\u003d x\u003c/code\u003e; we can mark each index as late as possible. Namely, mark each index at the last occurrence in the array \u003ccode\u003echangeIndices[1..x]\u003c/code\u003e.",
      "When marking an index, which is the last occurrence at the second \u003ccode\u003ei\u003c/code\u003e, we check whether we have a sufficient number of decrement operations to mark all the previous indices whose last occurrences have already been marked, and the current index, i.e., \u003ccode\u003ei - sum_of_marked_indices_values - cnt_of_marked_indices \u003e\u003d nums[changeIndices[i]]\u003c/code\u003e.",
      "The answer is the earliest second when all indices can be marked after running the binary search or \u003ccode\u003e-1\u003c/code\u003e if there is no such second."
    ],
    "level": 2,
    "metaData": {
      "name": "earliestSecondToMarkIndices",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "changeIndices",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3292",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "[2,2,0]\n[2,2,2,2,3,2,2,1]",
    "title": "Earliest Second to Mark Indices I",
    "titleSlug": "earliest-second-to-mark-indices-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumTimeToInitialState(string word, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumTimeToInitialState(String word, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumTimeToInitialState(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumTimeToInitialState(self, word: str, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumTimeToInitialState(char* word, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumTimeToInitialState(string word, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumTimeToInitialState \u003d function(word, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumTimeToInitialState(word: string, k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumTimeToInitialState($word, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumTimeToInitialState(_ word: String, _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumTimeToInitialState(word: String, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumTimeToInitialState(String word, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumTimeToInitialState(word string, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_time_to_initial_state(word, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumTimeToInitialState(word: String, k: Int): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_time_to_initial_state(word: String, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-time-to-initial-state word k)\n  (-\u003e string? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_time_to_initial_state(Word :: unicode:unicode_binary(), K :: integer()) -\u003e integer().\nminimum_time_to_initial_state(Word, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_time_to_initial_state(word :: String.t, k :: integer) :: integer\n  def minimum_time_to_initial_state(word, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e string \u003ccode\u003eword\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAt every second, you must perform the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eRemove the first \u003ccode\u003ek\u003c/code\u003e characters of \u003ccode\u003eword\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAdd any \u003ccode\u003ek\u003c/code\u003e characters to the end of \u003ccode\u003eword\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that you do not necessarily need to add the same characters that you removed. However, you must perform \u003cstrong\u003eboth\u003c/strong\u003e operations at every second.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e time greater than zero required for\u003c/em\u003e \u003ccode\u003eword\u003c/code\u003e \u003cem\u003eto revert to its \u003cstrong\u003einitial\u003c/strong\u003e state\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;abacaba\u0026quot;, k \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e At the 1st second, we remove characters \u0026quot;aba\u0026quot; from the prefix of word, and add characters \u0026quot;bac\u0026quot; to the end of word. Thus, word becomes equal to \u0026quot;cababac\u0026quot;.\nAt the 2nd second, we remove characters \u0026quot;cab\u0026quot; from the prefix of word, and add \u0026quot;aba\u0026quot; to the end of word. Thus, word becomes equal to \u0026quot;abacaba\u0026quot; and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;abacaba\u0026quot;, k \u003d 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e At the 1st second, we remove characters \u0026quot;abac\u0026quot; from the prefix of word, and add characters \u0026quot;caba\u0026quot; to the end of word. Thus, word becomes equal to \u0026quot;abacaba\u0026quot; and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;abcbabcd\u0026quot;, k \u003d 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to \u0026quot;abcbabcd\u0026quot; and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d word.length \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d word.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abacaba\"\n3\n\"abacaba\"\n4\n\"abcbabcd\"\n2",
    "formTitle": "[3031]Minimum Time to Revert Word to Initial State II",
    "frequency": 0.0,
    "frontendQuestionId": "3031",
    "hints": [
      "Find the longest suffix which is also a prefix and whose length is a multiple of \u003ccode\u003eK\u003c/code\u003e in \u003ccode\u003eO(N)\u003c/code\u003e.",
      "Use Z-function."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumTimeToInitialState",
      "params": [
        {
          "name": "word",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3296",
    "similarQuestions": [
      "[{\"title\": \"Longest Happy Prefix\", \"titleSlug\": \"longest-happy-prefix\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u957f\\u5feb\\u4e50\\u524d\\u7f00\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "\"abacaba\"\n3",
    "title": "Minimum Time to Revert Word to Initial State II",
    "titleSlug": "minimum-time-to-revert-word-to-initial-state-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumTimeToInitialState(string word, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumTimeToInitialState(String word, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumTimeToInitialState(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumTimeToInitialState(self, word: str, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumTimeToInitialState(char* word, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumTimeToInitialState(string word, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumTimeToInitialState \u003d function(word, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumTimeToInitialState(word: string, k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumTimeToInitialState($word, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumTimeToInitialState(_ word: String, _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumTimeToInitialState(word: String, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumTimeToInitialState(String word, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumTimeToInitialState(word string, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_time_to_initial_state(word, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumTimeToInitialState(word: String, k: Int): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_time_to_initial_state(word: String, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-time-to-initial-state word k)\n  (-\u003e string? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_time_to_initial_state(Word :: unicode:unicode_binary(), K :: integer()) -\u003e integer().\nminimum_time_to_initial_state(Word, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_time_to_initial_state(word :: String.t, k :: integer) :: integer\n  def minimum_time_to_initial_state(word, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e string \u003ccode\u003eword\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAt every second, you must perform the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eRemove the first \u003ccode\u003ek\u003c/code\u003e characters of \u003ccode\u003eword\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAdd any \u003ccode\u003ek\u003c/code\u003e characters to the end of \u003ccode\u003eword\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that you do not necessarily need to add the same characters that you removed. However, you must perform \u003cstrong\u003eboth\u003c/strong\u003e operations at every second.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e time greater than zero required for\u003c/em\u003e \u003ccode\u003eword\u003c/code\u003e \u003cem\u003eto revert to its \u003cstrong\u003einitial\u003c/strong\u003e state\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;abacaba\u0026quot;, k \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e At the 1st second, we remove characters \u0026quot;aba\u0026quot; from the prefix of word, and add characters \u0026quot;bac\u0026quot; to the end of word. Thus, word becomes equal to \u0026quot;cababac\u0026quot;.\nAt the 2nd second, we remove characters \u0026quot;cab\u0026quot; from the prefix of word, and add \u0026quot;aba\u0026quot; to the end of word. Thus, word becomes equal to \u0026quot;abacaba\u0026quot; and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;abacaba\u0026quot;, k \u003d 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e At the 1st second, we remove characters \u0026quot;abac\u0026quot; from the prefix of word, and add characters \u0026quot;caba\u0026quot; to the end of word. Thus, word becomes equal to \u0026quot;abacaba\u0026quot; and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word \u003d \u0026quot;abcbabcd\u0026quot;, k \u003d 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to \u0026quot;abcbabcd\u0026quot; and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d word.length \u0026lt;\u003d 50 \u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d word.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abacaba\"\n3\n\"abacaba\"\n4\n\"abcbabcd\"\n2",
    "formTitle": "[3029]Minimum Time to Revert Word to Initial State I",
    "frequency": 0.0,
    "frontendQuestionId": "3029",
    "hints": [
      "Find the longest suffix which is also a prefix and the length is multiple of \u003ccode\u003ek\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumTimeToInitialState",
      "params": [
        {
          "name": "word",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3297",
    "similarQuestions": [
      "[{\"title\": \"Longest Happy Prefix\", \"titleSlug\": \"longest-happy-prefix\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u957f\\u5feb\\u4e50\\u524d\\u7f00\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "\"abacaba\"\n3",
    "title": "Minimum Time to Revert Word to Initial State I",
    "titleSlug": "minimum-time-to-revert-word-to-initial-state-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxSelectedElements(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxSelectedElements(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxSelectedElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxSelectedElements(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxSelectedElements(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxSelectedElements(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSelectedElements \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxSelectedElements(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSelectedElements($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxSelectedElements(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxSelectedElements(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxSelectedElements(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxSelectedElements(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_selected_elements(nums)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxSelectedElements(nums: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_selected_elements(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-selected-elements nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_selected_elements(Nums :: [integer()]) -\u003e integer().\nmax_selected_elements(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_selected_elements(nums :: [integer]) :: integer\n  def max_selected_elements(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e array \u003ccode\u003enums\u003c/code\u003e consisting of \u003cstrong\u003epositive\u003c/strong\u003e integers.\u003c/p\u003e\n\n\u003cp\u003eInitially, you can increase the value of \u003cstrong\u003eany\u003c/strong\u003e element in the array by \u003cstrong\u003eat most\u003c/strong\u003e \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter that, you need to select \u003cstrong\u003eone or more\u003c/strong\u003e elements from the final array such that those elements are \u003cstrong\u003econsecutive\u003c/strong\u003e when sorted in increasing order. For example, the elements \u003ccode\u003e[3, 4, 5]\u003c/code\u003e are consecutive while \u003ccode\u003e[3, 4, 6]\u003c/code\u003e and \u003ccode\u003e[1, 1, 2, 3]\u003c/code\u003e are not.\u003c!-- notionvc: 312f8c5d-40d0-4cd1-96cc-9e96a846735b --\u003e\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e number of elements that you can select\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [2,1,5,1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can increase the elements at indices 0 and 3. The resulting array is nums \u003d [3,1,5,2,1].\nWe select the elements [\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,5,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,1] and we sort them to obtain [1,2,3], which are consecutive.\nIt can be shown that we cannot select more than 3 consecutive elements.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,4,7,10]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The maximum consecutive elements that we can select is 1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,1,5,1,1]\n[1,4,7,10]",
    "formTitle": "[3041]Maximize Consecutive Elements in an Array After Modification",
    "frequency": 0.0,
    "frontendQuestionId": "3041",
    "hints": [
      "Sort the array and try using dynamic programming.",
      "Let \u003ccode\u003edp[i]\u003c/code\u003e be the length of the longest consecutive elements ending at element at index \u003ccode\u003ei\u003c/code\u003e in the sorted array."
    ],
    "level": 3,
    "metaData": {
      "name": "maxSelectedElements",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3298",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "[2,1,5,1,1]",
    "title": "Maximize Consecutive Elements in an Array After Modification",
    "titleSlug": "maximize-consecutive-elements-in-an-array-after-modification"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumLength(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumLength(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumLength(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumLength(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumLength(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumLength \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumLength(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumLength($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumLength(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumLength(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumLength(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumLength(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_length(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumLength(nums: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_length(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-length nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_length(Nums :: [integer()]) -\u003e integer().\nmaximum_length(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer]) :: integer\n  def maximum_length(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array of \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou need to select a \u003cspan data-keyword\u003d\"subset\"\u003esubset\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e which satisfies the following condition:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eYou can place the selected elements in a \u003cstrong\u003e0-indexed\u003c/strong\u003e array such that it follows the pattern: \u003ccode\u003e[x, x\u003csup\u003e2\u003c/sup\u003e, x\u003csup\u003e4\u003c/sup\u003e, ..., x\u003csup\u003ek/2\u003c/sup\u003e, x\u003csup\u003ek\u003c/sup\u003e, x\u003csup\u003ek/2\u003c/sup\u003e, ..., x\u003csup\u003e4\u003c/sup\u003e, x\u003csup\u003e2\u003c/sup\u003e, x]\u003c/code\u003e (\u003cstrong\u003eNote\u003c/strong\u003e that \u003ccode\u003ek\u003c/code\u003e can be be any \u003cstrong\u003enon-negative\u003c/strong\u003e power of \u003ccode\u003e2\u003c/code\u003e). For example, \u003ccode\u003e[2, 4, 16, 4, 2]\u003c/code\u003e and \u003ccode\u003e[3, 9, 3]\u003c/code\u003e follow the pattern while \u003ccode\u003e[2, 4, 8, 4, 2]\u003c/code\u003e does not.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e number of elements in a subset that satisfies these conditions.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [5,4,1,2,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can select the subset {4,2,2}, which can be placed in the array as [2,4,2] which follows the pattern and 2\u003csup\u003e2\u003c/sup\u003e \u003d\u003d 4. Hence the answer is 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,3,2,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can select the subset {1}, which can be placed in the array as [1] which follows the pattern. Hence the answer is 1. Note that we could have also selected the subsets {2}, {3}, or {4}, there may be multiple subsets which provide the same answer. \n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[5,4,1,2,2]\n[1,3,2,4]",
    "formTitle": "[3020]Find the Maximum Number of Elements in Subset",
    "frequency": 0.0,
    "frontendQuestionId": "3020",
    "hints": [
      "We can select an odd number of \u003ccode\u003e1\u003c/code\u003e鈥檚.",
      "Put all the values into a HashSet. We can start from each \u003ccode\u003ex \u003e 1\u003c/code\u003e as the smallest chosen value and we can find the longest subset by checking the new values (which are the square of the previous value) in the set by brute force.",
      "Note when \u003ccode\u003ex \u003e 1\u003c/code\u003e, \u003ccode\u003ex\u003csup\u003e2\u003c/sup\u003e\u003c/code\u003e, \u003ccode\u003ex\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e, \u003ccode\u003ex\u003csup\u003e8\u003c/sup\u003e\u003c/code\u003e, 鈥� increases very fast, the longest subset with smallest value x cannot be very long. (The length is \u003ccode\u003eO(log(log(10\u003csup\u003e9\u003c/sup\u003e)))\u003c/code\u003e.",
      "Hence we can directly check all lengths less than \u003ccode\u003e10\u003c/code\u003e for all values of \u003ccode\u003ex\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumLength",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3299",
    "similarQuestions": [
      "[{\"title\": \"Longest Consecutive Sequence\", \"titleSlug\": \"longest-consecutive-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u8fde\\u7eed\\u5e8f\\u5217\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[5,4,1,2,2]",
    "title": "Find the Maximum Number of Elements in Subset",
    "titleSlug": "find-the-maximum-number-of-elements-in-subset"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e beautifulIndices(string s, string a, string b, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public List\u003cInteger\u003e beautifulIndices(String s, String a, String b, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def beautifulIndices(self, s, a, b, k):\n        \"\"\"\n        :type s: str\n        :type a: str\n        :type b: str\n        :type k: int\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* beautifulIndices(char* s, char* a, char* b, int k, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public IList\u003cint\u003e BeautifulIndices(string s, string a, string b, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @param {string} a\n * @param {string} b\n * @param {number} k\n * @return {number[]}\n */\nvar beautifulIndices \u003d function(s, a, b, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function beautifulIndices(s: string, a: string, b: string, k: number): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $a\n     * @param String $b\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function beautifulIndices($s, $a, $b, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func beautifulIndices(_ s: String, _ a: String, _ b: String, _ k: Int) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun beautifulIndices(s: String, a: String, b: String, k: Int): List\u003cInt\u003e {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e beautifulIndices(String s, String a, String b, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func beautifulIndices(s string, a string, b string, k int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @param {String} a\n# @param {String} b\n# @param {Integer} k\n# @return {Integer[]}\ndef beautiful_indices(s, a, b, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def beautifulIndices(s: String, a: String, b: String, k: Int): List[Int] \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn beautiful_indices(s: String, a: String, b: String, k: i32) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (beautiful-indices s a b k)\n  (-\u003e string? string? string? exact-integer? (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec beautiful_indices(S :: unicode:unicode_binary(), A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), K :: integer()) -\u003e [integer()].\nbeautiful_indices(S, A, B, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec beautiful_indices(s :: String.t, a :: String.t, b :: String.t, k :: integer) :: [integer]\n  def beautiful_indices(s, a, b, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e string \u003ccode\u003es\u003c/code\u003e, a string \u003ccode\u003ea\u003c/code\u003e, a string \u003ccode\u003eb\u003c/code\u003e, and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn index \u003ccode\u003ei\u003c/code\u003e is \u003cstrong\u003ebeautiful\u003c/strong\u003e if:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d i \u0026lt;\u003d s.length - a.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es[i..(i + a.length - 1)] \u003d\u003d a\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThere exists an index \u003ccode\u003ej\u003c/code\u003e such that:\n\t\u003cul\u003e\n\t\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d j \u0026lt;\u003d s.length - b.length\u003c/code\u003e\u003c/li\u003e\n\t\t\u003cli\u003e\u003ccode\u003es[j..(j + b.length - 1)] \u003d\u003d b\u003c/code\u003e\u003c/li\u003e\n\t\t\u003cli\u003e\u003ccode\u003e|j - i| \u0026lt;\u003d k\u003c/code\u003e\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe array that contains beautiful indices in \u003cstrong\u003esorted order from smallest to largest\u003c/strong\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s \u003d \u0026quot;isawsquirrelnearmysquirrelhouseohmy\u0026quot;, a \u003d \u0026quot;my\u0026quot;, b \u003d \u0026quot;squirrel\u0026quot;, k \u003d 15\n\u003cstrong\u003eOutput:\u003c/strong\u003e [16,33]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] \u003d\u003d \u0026quot;my\u0026quot; and there exists an index 4 with s[4..11] \u003d\u003d \u0026quot;squirrel\u0026quot; and |16 - 4| \u0026lt;\u003d 15.\n- The index 33 is beautiful as s[33..34] \u003d\u003d \u0026quot;my\u0026quot; and there exists an index 18 with s[18..25] \u003d\u003d \u0026quot;squirrel\u0026quot; and |33 - 18| \u0026lt;\u003d 15.\nThus we return [16,33] as the result.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s \u003d \u0026quot;abcd\u0026quot;, a \u003d \u0026quot;a\u0026quot;, b \u003d \u0026quot;a\u0026quot;, k \u003d 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] \u003d\u003d \u0026quot;a\u0026quot; and there exists an index 0 with s[0..0] \u003d\u003d \u0026quot;a\u0026quot; and |0 - 0| \u0026lt;\u003d 4.\nThus we return [0] as the result.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d s.length \u0026lt;\u003d 5 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d a.length, b.length \u0026lt;\u003d 5 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e, \u003ccode\u003ea\u003c/code\u003e, and \u003ccode\u003eb\u003c/code\u003e contain only lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15\n\"abcd\"\n\"a\"\n\"a\"\n4",
    "formTitle": "[3008]Find Beautiful Indices in the Given Array II",
    "frequency": 0.0,
    "frontendQuestionId": "3008",
    "hints": [
      "Use KMP or string hashing."
    ],
    "level": 3,
    "metaData": {
      "name": "beautifulIndices",
      "params": [
        {
          "name": "s",
          "type": "string"
        },
        {
          "name": "a",
          "type": "string"
        },
        {
          "name": "b",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3303",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
    "title": "Find Beautiful Indices in the Given Array II",
    "titleSlug": "find-beautiful-indices-in-the-given-array-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long countPrefixSuffixPairs(vector\u003cstring\u003e\u0026 words) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long countPrefixSuffixPairs(String[] words) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countPrefixSuffixPairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long countPrefixSuffixPairs(char** words, int wordsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long CountPrefixSuffixPairs(string[] words) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar countPrefixSuffixPairs \u003d function(words) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countPrefixSuffixPairs(words: string[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function countPrefixSuffixPairs($words) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countPrefixSuffixPairs(_ words: [String]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countPrefixSuffixPairs(words: Array\u003cString\u003e): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countPrefixSuffixPairs(List\u003cString\u003e words) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countPrefixSuffixPairs(words []string) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String[]} words\n# @return {Integer}\ndef count_prefix_suffix_pairs(words)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countPrefixSuffixPairs(words: Array[String]): Long \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_prefix_suffix_pairs(words: Vec\u003cString\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-prefix-suffix-pairs words)\n  (-\u003e (listof string?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_prefix_suffix_pairs(Words :: [unicode:unicode_binary()]) -\u003e integer().\ncount_prefix_suffix_pairs(Words) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_prefix_suffix_pairs(words :: [String.t]) :: integer\n  def count_prefix_suffix_pairs(words) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e string array \u003ccode\u003ewords\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s define a \u003cstrong\u003eboolean\u003c/strong\u003e function \u003ccode\u003eisPrefixAndSuffix\u003c/code\u003e that takes two strings, \u003ccode\u003estr1\u003c/code\u003e and \u003ccode\u003estr2\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eisPrefixAndSuffix(str1, str2)\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003estr1\u003c/code\u003e is \u003cstrong\u003eboth\u003c/strong\u003e a \u003cspan data-keyword\u003d\"string-prefix\"\u003eprefix\u003c/span\u003e and a \u003cspan data-keyword\u003d\"string-suffix\"\u003esuffix\u003c/span\u003e of \u003ccode\u003estr2\u003c/code\u003e, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor example, \u003ccode\u003eisPrefixAndSuffix(\u0026quot;aba\u0026quot;, \u0026quot;ababa\u0026quot;)\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e because \u003ccode\u003e\u0026quot;aba\u0026quot;\u003c/code\u003e is a prefix of \u003ccode\u003e\u0026quot;ababa\u0026quot;\u003c/code\u003e and also a suffix, but \u003ccode\u003eisPrefixAndSuffix(\u0026quot;abc\u0026quot;, \u0026quot;abcd\u0026quot;)\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean integer denoting the \u003cstrong\u003enumber\u003c/strong\u003e of index pairs \u003c/em\u003e\u003ccode\u003e(i\u003cem\u003e, \u003c/em\u003ej)\u003c/code\u003e\u003cem\u003e such that \u003c/em\u003e\u003ccode\u003ei \u0026lt; j\u003c/code\u003e\u003cem\u003e, and \u003c/em\u003e\u003ccode\u003eisPrefixAndSuffix(words[i], words[j])\u003c/code\u003e\u003cem\u003e is \u003c/em\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words \u003d [\u0026quot;a\u0026quot;,\u0026quot;aba\u0026quot;,\u0026quot;ababa\u0026quot;,\u0026quot;aa\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, the counted index pairs are:\ni \u003d 0 and j \u003d 1 because isPrefixAndSuffix(\u0026quot;a\u0026quot;, \u0026quot;aba\u0026quot;) is true.\ni \u003d 0 and j \u003d 2 because isPrefixAndSuffix(\u0026quot;a\u0026quot;, \u0026quot;ababa\u0026quot;) is true.\ni \u003d 0 and j \u003d 3 because isPrefixAndSuffix(\u0026quot;a\u0026quot;, \u0026quot;aa\u0026quot;) is true.\ni \u003d 1 and j \u003d 2 because isPrefixAndSuffix(\u0026quot;aba\u0026quot;, \u0026quot;ababa\u0026quot;) is true.\nTherefore, the answer is 4.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words \u003d [\u0026quot;pa\u0026quot;,\u0026quot;papa\u0026quot;,\u0026quot;ma\u0026quot;,\u0026quot;mama\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, the counted index pairs are:\ni \u003d 0 and j \u003d 1 because isPrefixAndSuffix(\u0026quot;pa\u0026quot;, \u0026quot;papa\u0026quot;) is true.\ni \u003d 2 and j \u003d 3 because isPrefixAndSuffix(\u0026quot;ma\u0026quot;, \u0026quot;mama\u0026quot;) is true.\nTherefore, the answer is 2.  \u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words \u003d [\u0026quot;abab\u0026quot;,\u0026quot;ab\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation: \u003c/strong\u003eIn this example, the only valid index pair is i \u003d 0 and j \u003d 1, and isPrefixAndSuffix(\u0026quot;abab\u0026quot;, \u0026quot;ab\u0026quot;) is false.\nTherefore, the answer is 0.\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d words.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d words[i].length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewords[i]\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003eThe sum of the lengths of all \u003ccode\u003ewords[i]\u003c/code\u003e does not exceed \u003ccode\u003e5 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[\"a\",\"aba\",\"ababa\",\"aa\"]\n[\"pa\",\"papa\",\"ma\",\"mama\"]\n[\"abab\",\"ab\"]",
    "formTitle": "[3045]Count Prefix and Suffix Pairs II",
    "frequency": 0.0,
    "frontendQuestionId": "3045",
    "hints": [
      "We can use a trie to solve it.",
      "Process all \u003ccode\u003ewords[i]\u003c/code\u003e from left to right. The trie stores the pair \u003ccode\u003e(words[i][j], words[i][words[i].length - j - 1])\u003c/code\u003e as a single character; we process all the words in this way.",
      "During insertion, keep a counter in each trie node, as in a normal trie. If the current node is the end of a word (namely, the pair on that node is \u003ccode\u003e(words[i][words[i].length - 1], words[i][0])\u003c/code\u003e), increase the node\u0027s counter by \u003ccode\u003e1\u003c/code\u003e.",
      "From left to right, insert each word into the trie, and increase our final result by each node\u0027s counter when going down the trie during insertion. This means there was at least one word that is both a prefix and a suffix of the current word before."
    ],
    "level": 3,
    "metaData": {
      "name": "countPrefixSuffixPairs",
      "params": [
        {
          "name": "words",
          "type": "string[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3305",
    "similarQuestions": [
      "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5b9e\\u73b0 Trie (\\u524d\\u7f00\\u6811)\", \"isPaidOnly\": false}, {\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6dfb\\u52a0\\u4e0e\\u641c\\u7d22\\u5355\\u8bcd - \\u6570\\u636e\\u7ed3\\u6784\\u8bbe\\u8ba1\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[\"a\",\"aba\",\"ababa\",\"aa\"]",
    "title": "Count Prefix and Suffix Pairs II",
    "titleSlug": "count-prefix-and-suffix-pairs-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003clong long\u003e unmarkedSumArray(vector\u003cint\u003e\u0026 nums, vector\u003cvector\u003cint\u003e\u003e\u0026 queries) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long[] unmarkedSumArray(int[] nums, int[][] queries) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def unmarkedSumArray(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def unmarkedSumArray(self, nums: List[int], queries: List[List[int]]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* unmarkedSumArray(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long[] UnmarkedSumArray(int[] nums, int[][] queries) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar unmarkedSumArray \u003d function(nums, queries) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function unmarkedSumArray(nums: number[], queries: number[][]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function unmarkedSumArray($nums, $queries) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func unmarkedSumArray(_ nums: [Int], _ queries: [[Int]]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun unmarkedSumArray(nums: IntArray, queries: Array\u003cIntArray\u003e): LongArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e unmarkedSumArray(List\u003cint\u003e nums, List\u003cList\u003cint\u003e\u003e queries) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func unmarkedSumArray(nums []int, queries [][]int) []int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef unmarked_sum_array(nums, queries)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def unmarkedSumArray(nums: Array[Int], queries: Array[Array[Int]]): Array[Long] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn unmarked_sum_array(nums: Vec\u003ci32\u003e, queries: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003ci64\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (unmarked-sum-array nums queries)\n  (-\u003e (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec unmarked_sum_array(Nums :: [integer()], Queries :: [[integer()]]) -\u003e [integer()].\nunmarked_sum_array(Nums, Queries) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec unmarked_sum_array(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def unmarked_sum_array(nums, queries) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e array \u003ccode\u003enums\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e consisting of positive integers.\u003c/p\u003e\n\n\u003cp\u003eYou are also given a 2D array \u003ccode\u003equeries\u003c/code\u003e of size \u003ccode\u003em\u003c/code\u003e where \u003ccode\u003equeries[i] \u003d [index\u003csub\u003ei\u003c/sub\u003e, k\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eInitially all elements of the array are \u003cstrong\u003eunmarked\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou need to apply \u003ccode\u003em\u003c/code\u003e queries on the array in order, where on the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e query you do the following:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eMark the element at index \u003ccode\u003eindex\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e if it is not already marked.\u003c/li\u003e\n\t\u003cli\u003eThen mark \u003ccode\u003ek\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e unmarked elements in the array with the \u003cstrong\u003esmallest\u003c/strong\u003e values. If multiple such elements exist, mark the ones with the smallest indices. And if less than \u003ccode\u003ek\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e unmarked elements exist, then mark all of them.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean array answer of size \u003c/em\u003e\u003ccode\u003em\u003c/code\u003e\u003cem\u003e where \u003c/em\u003e\u003ccode\u003eanswer[i]\u003c/code\u003e\u003cem\u003e is the \u003cstrong\u003esum\u003c/strong\u003e of unmarked elements in the array after the \u003c/em\u003e\u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e\u003cem\u003e query\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003enums \u003d [1,2,2,1,2,3,1], queries \u003d [[1,2],[3,3],[4,2]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e[8,3,0]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe do the following queries on the array:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eMark the element at index \u003ccode\u003e1\u003c/code\u003e, and \u003ccode\u003e2\u003c/code\u003e of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are \u003ccode\u003enums \u003d [\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,2,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,2,3,1]\u003c/code\u003e. The sum of unmarked elements is \u003ccode\u003e2 + 2 + 3 + 1 \u003d 8\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eMark the element at index \u003ccode\u003e3\u003c/code\u003e, since it is already marked we skip it. Then we mark \u003ccode\u003e3\u003c/code\u003e of the smallest unmarked elements with the smallest indices, the marked elements now are \u003ccode\u003enums \u003d [\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,3,\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e]\u003c/code\u003e. The sum of unmarked elements is \u003ccode\u003e3\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eMark the element at index \u003ccode\u003e4\u003c/code\u003e, since it is already marked we skip it. Then we mark \u003ccode\u003e2\u003c/code\u003e of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are \u003ccode\u003enums \u003d [\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,\u003cstrong\u003e\u003cu\u003e3\u003c/u\u003e\u003c/strong\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e. The sum of unmarked elements is \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003enums \u003d [1,4,2,3], queries \u003d [[0,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e[7]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e We do one query which is mark the element at index \u003ccode\u003e0\u003c/code\u003e and mark the smallest element among unmarked elements. The marked elements will be \u003ccode\u003enums \u003d [\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,4,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,3]\u003c/code\u003e, and the sum of unmarked elements is \u003ccode\u003e4 + 3 \u003d 7\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d nums.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003em \u003d\u003d queries.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m \u0026lt;\u003d n \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003equeries[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d index\u003csub\u003ei\u003c/sub\u003e, k\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,2,1,2,3,1]\n[[1,2],[3,3],[4,2]]\n[1,4,2,3]\n[[0,1]]",
    "formTitle": "[3080]Mark Elements on Array by Performing Queries",
    "frequency": 0.0,
    "frontendQuestionId": "3080",
    "hints": [
      "Use another array to keep track of marked indices.",
      "Sort the array \u003ccode\u003enums\u003c/code\u003e to be able to find the smallest unmarked elements quickly in each query."
    ],
    "level": 2,
    "metaData": {
      "name": "unmarkedSumArray",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "queries",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3306",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,2,2,1,2,3,1]\n[[1,2],[3,3],[4,2]]",
    "title": "Mark Elements on Array by Performing Queries",
    "titleSlug": "mark-elements-on-array-by-performing-queries"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long maximumValueSum(vector\u003cint\u003e\u0026 nums, int k, vector\u003cvector\u003cint\u003e\u003e\u0026 edges) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long maximumValueSum(int[] nums, int k, int[][] edges) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumValueSum(self, nums, k, edges):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumValueSum(self, nums: List[int], k: int, edges: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long maximumValueSum(int* nums, int numsSize, int k, int** edges, int edgesSize, int* edgesColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MaximumValueSum(int[] nums, int k, int[][] edges) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number[][]} edges\n * @return {number}\n */\nvar maximumValueSum \u003d function(nums, k, edges) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumValueSum(nums: number[], k: number, edges: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function maximumValueSum($nums, $k, $edges) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumValueSum(_ nums: [Int], _ k: Int, _ edges: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumValueSum(nums: IntArray, k: Int, edges: Array\u003cIntArray\u003e): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumValueSum(List\u003cint\u003e nums, int k, List\u003cList\u003cint\u003e\u003e edges) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumValueSum(nums []int, k int, edges [][]int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer[][]} edges\n# @return {Integer}\ndef maximum_value_sum(nums, k, edges)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumValueSum(nums: Array[Int], k: Int, edges: Array[Array[Int]]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_value_sum(nums: Vec\u003ci32\u003e, k: i32, edges: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-value-sum nums k edges)\n  (-\u003e (listof exact-integer?) exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_value_sum(Nums :: [integer()], K :: integer(), Edges :: [[integer()]]) -\u003e integer().\nmaximum_value_sum(Nums, K, Edges) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_value_sum(nums :: [integer], k :: integer, edges :: [[integer]]) :: integer\n  def maximum_value_sum(nums, k, edges) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere exists an \u003cstrong\u003eundirected\u003c/strong\u003e tree with \u003ccode\u003en\u003c/code\u003e nodes numbered \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e. You are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e 2D integer array \u003ccode\u003eedges\u003c/code\u003e of length \u003ccode\u003en - 1\u003c/code\u003e, where \u003ccode\u003eedges[i] \u003d [u\u003csub\u003ei\u003c/sub\u003e, v\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e indicates that there is an edge between nodes \u003ccode\u003eu\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003ev\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e in the tree. You are also given a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e, and a \u003cstrong\u003e0-indexed\u003c/strong\u003e array of \u003cstrong\u003enon-negative\u003c/strong\u003e integers \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, where \u003ccode\u003enums[i]\u003c/code\u003e represents the \u003cstrong\u003evalue\u003c/strong\u003e of the node numbered \u003ccode\u003ei\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlice wants the sum of values of tree nodes to be \u003cstrong\u003emaximum\u003c/strong\u003e, for which Alice can perform the following operation \u003cstrong\u003eany\u003c/strong\u003e number of times (\u003cstrong\u003eincluding zero\u003c/strong\u003e) on the tree:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose any edge \u003ccode\u003e[u, v]\u003c/code\u003e connecting the nodes \u003ccode\u003eu\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e, and update their values as follows:\n\n\t\u003cul\u003e\n\t\t\u003cli\u003e\u003ccode\u003enums[u] \u003d nums[u] XOR k\u003c/code\u003e\u003c/li\u003e\n\t\t\u003cli\u003e\u003ccode\u003enums[v] \u003d nums[v] XOR k\u003c/code\u003e\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e possible \u003cstrong\u003esum\u003c/strong\u003e of the \u003cstrong\u003evalues\u003c/strong\u003e Alice can achieve by performing the operation \u003cstrong\u003eany\u003c/strong\u003e number of times\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012513.png\" style\u003d\"width: 300px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,1], k \u003d 3, edges \u003d [[0,1],[0,2]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Alice can achieve the maximum sum of 6 using a single operation:\n- Choose the edge [0,2]. nums[0] and nums[2] become: 1 XOR 3 \u003d 2, and the array nums becomes: [1,2,1] -\u0026gt; [2,2,2].\nThe total sum of values is 2 + 2 + 2 \u003d 6.\nIt can be shown that 6 is the maximum achievable sum of values.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/09/screenshot-2024-01-09-220017.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 300px; height: 239px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [2,3], k \u003d 7, edges \u003d [[0,1]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 9\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Alice can achieve the maximum sum of 9 using a single operation:\n- Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 \u003d 5 and nums[1] become: 3 XOR 7 \u003d 4, and the array nums becomes: [2,3] -\u0026gt; [5,4].\nThe total sum of values is 5 + 4 \u003d 9.\nIt can be shown that 9 is the maximum achievable sum of values.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012641.png\" style\u003d\"width: 600px; height: 233px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [7,7,7,7,7,7], k \u003d 3, edges \u003d [[0,1],[0,2],[0,3],[0,4],[0,5]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 42\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The maximum achievable sum is 42 which can be achieved by Alice performing no operations.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 2 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges.length \u003d\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d edges[i][0], edges[i][1] \u0026lt;\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that \u003ccode\u003eedges\u003c/code\u003e represent\u0026nbsp;a valid tree.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,1]\n3\n[[0,1],[0,2]]\n[2,3]\n7\n[[0,1]]\n[7,7,7,7,7,7]\n3\n[[0,1],[0,2],[0,3],[0,4],[0,5]]",
    "formTitle": "[3068]Find the Maximum Sum of Node Values",
    "frequency": 0.0,
    "frontendQuestionId": "3068",
    "hints": [
      "Select any node as the root.",
      "Let \u003ccode\u003edp[x][c]\u003c/code\u003e be the maximum sum we can get for the subtree rooted at node \u003ccode\u003ex\u003c/code\u003e, where \u003ccode\u003ec\u003c/code\u003e is a boolean representing whether the edge between node \u003ccode\u003ex\u003c/code\u003e and its parent (if any) is selected or not.",
      "\u003ccode\u003edp[x][c] \u003d max(sum(dp[y][cy]) + v(nums[x], sum(cy) + c))\u003c/code\u003e\r\nwhere \u003ccode\u003ecy\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e. \r\nWhen \u003ccode\u003esum(cy) + c\u003c/code\u003e is odd, \u003ccode\u003ev(nums[x], sum(cy) + c) \u003d nums[x] XOR k\u003c/code\u003e. \r\nWhen \u003ccode\u003esum(cy) + c\u003c/code\u003e is even, \u003ccode\u003ev(nums[x], sum(cy) + c) \u003d nums[x]\u003c/code\u003e.",
      "There鈥檚 also an easier solution - does the parity of the number of elements where \u003ccode\u003enums[i] XOR k \u003e nums[i]\u003c/code\u003e help?"
    ],
    "level": 3,
    "metaData": {
      "name": "maximumValueSum",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        },
        {
          "name": "edges",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3307",
    "similarQuestions": [
      "[{\"title\": \"Maximum Score After Applying Operations on a Tree\", \"titleSlug\": \"maximum-score-after-applying-operations-on-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5728\\u6811\\u4e0a\\u6267\\u884c\\u64cd\\u4f5c\\u4ee5\\u540e\\u5f97\\u5230\\u7684\\u6700\\u5927\\u5206\\u6570\", \"isPaidOnly\": false}, {\"title\": \"Find Number of Coins to Place in Tree Nodes\", \"titleSlug\": \"find-number-of-coins-to-place-in-tree-nodes\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6811\\u4e2d\\u6bcf\\u4e2a\\u8282\\u70b9\\u653e\\u7f6e\\u7684\\u91d1\\u5e01\\u6570\\u76ee\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,2,1]\n3\n[[0,1],[0,2]]",
    "title": "Find the Maximum Sum of Node Values",
    "titleSlug": "find-the-maximum-sum-of-node-values"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string lastNonEmptyString(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String lastNonEmptyString(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def lastNonEmptyString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def lastNonEmptyString(self, s: str) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* lastNonEmptyString(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string LastNonEmptyString(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar lastNonEmptyString \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function lastNonEmptyString(s: string): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function lastNonEmptyString($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func lastNonEmptyString(_ s: String) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun lastNonEmptyString(s: String): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String lastNonEmptyString(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func lastNonEmptyString(s string) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {String}\ndef last_non_empty_string(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def lastNonEmptyString(s: String): String \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn last_non_empty_string(s: String) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (last-non-empty-string s)\n  (-\u003e string? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec last_non_empty_string(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nlast_non_empty_string(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec last_non_empty_string(s :: String.t) :: String.t\n  def last_non_empty_string(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eConsider performing the following operation until \u003ccode\u003es\u003c/code\u003e becomes \u003cstrong\u003eempty\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor \u003cstrong\u003eevery\u003c/strong\u003e alphabet character from \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e to \u003ccode\u003e\u0026#39;z\u0026#39;\u003c/code\u003e, remove the \u003cstrong\u003efirst\u003c/strong\u003e occurrence of that character in \u003ccode\u003es\u003c/code\u003e (if it exists).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor example, let initially \u003ccode\u003es \u003d \u0026quot;aabcbbca\u0026quot;\u003c/code\u003e. We do the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eRemove the underlined characters \u003ccode\u003es \u003d \u0026quot;\u003cu\u003e\u003cstrong\u003ea\u003c/strong\u003e\u003c/u\u003ea\u003cstrong\u003e\u003cu\u003ebc\u003c/u\u003e\u003c/strong\u003ebbca\u0026quot;\u003c/code\u003e. The resulting string is \u003ccode\u003es \u003d \u0026quot;abbca\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eRemove the underlined characters \u003ccode\u003es \u003d \u0026quot;\u003cu\u003e\u003cstrong\u003eab\u003c/strong\u003e\u003c/u\u003eb\u003cu\u003e\u003cstrong\u003ec\u003c/strong\u003e\u003c/u\u003ea\u0026quot;\u003c/code\u003e. The resulting string is \u003ccode\u003es \u003d \u0026quot;ba\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eRemove the underlined characters \u003ccode\u003es \u003d \u0026quot;\u003cu\u003e\u003cstrong\u003eba\u003c/strong\u003e\u003c/u\u003e\u0026quot;\u003c/code\u003e. The resulting string is \u003ccode\u003es \u003d \u0026quot;\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe value of the string \u003c/em\u003e\u003ccode\u003es\u003c/code\u003e\u003cem\u003e right \u003cstrong\u003ebefore\u003c/strong\u003e applying the \u003cstrong\u003elast\u003c/strong\u003e operation\u003c/em\u003e. In the example above, answer is \u003ccode\u003e\u0026quot;ba\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s \u003d \u0026quot;aabcbbca\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;ba\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Explained in the statement.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s \u003d \u0026quot;abcd\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;abcd\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We do the following operation:\n- Remove the underlined characters s \u003d \u0026quot;\u003cu\u003e\u003cstrong\u003eabcd\u003c/strong\u003e\u003c/u\u003e\u0026quot;. The resulting string is s \u003d \u0026quot;\u0026quot;.\nThe string just before the last operation is \u0026quot;abcd\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 5 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"aabcbbca\"\n\"abcd\"",
    "formTitle": "[3039]Apply Operations to Make String Empty",
    "frequency": 0.0,
    "frontendQuestionId": "3039",
    "hints": [
      "Before the last operation, only the most frequent characters in the original string will remain.",
      "Keep only the last occurence of each of the most frequent characters."
    ],
    "level": 2,
    "metaData": {
      "name": "lastNonEmptyString",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3308",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "\"aabcbbca\"",
    "title": "Apply Operations to Make String Empty",
    "titleSlug": "apply-operations-to-make-string-empty"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int countPrefixSuffixPairs(vector\u003cstring\u003e\u0026 words) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int countPrefixSuffixPairs(String[] words) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countPrefixSuffixPairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int countPrefixSuffixPairs(char** words, int wordsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int CountPrefixSuffixPairs(string[] words) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar countPrefixSuffixPairs \u003d function(words) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countPrefixSuffixPairs(words: string[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function countPrefixSuffixPairs($words) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countPrefixSuffixPairs(_ words: [String]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countPrefixSuffixPairs(words: Array\u003cString\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countPrefixSuffixPairs(List\u003cString\u003e words) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countPrefixSuffixPairs(words []string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String[]} words\n# @return {Integer}\ndef count_prefix_suffix_pairs(words)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countPrefixSuffixPairs(words: Array[String]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_prefix_suffix_pairs(words: Vec\u003cString\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-prefix-suffix-pairs words)\n  (-\u003e (listof string?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_prefix_suffix_pairs(Words :: [unicode:unicode_binary()]) -\u003e integer().\ncount_prefix_suffix_pairs(Words) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_prefix_suffix_pairs(words :: [String.t]) :: integer\n  def count_prefix_suffix_pairs(words) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e string array \u003ccode\u003ewords\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s define a \u003cstrong\u003eboolean\u003c/strong\u003e function \u003ccode\u003eisPrefixAndSuffix\u003c/code\u003e that takes two strings, \u003ccode\u003estr1\u003c/code\u003e and \u003ccode\u003estr2\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eisPrefixAndSuffix(str1, str2)\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003estr1\u003c/code\u003e is \u003cstrong\u003eboth\u003c/strong\u003e a \u003cspan data-keyword\u003d\"string-prefix\"\u003eprefix\u003c/span\u003e and a \u003cspan data-keyword\u003d\"string-suffix\"\u003esuffix\u003c/span\u003e of \u003ccode\u003estr2\u003c/code\u003e, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor example, \u003ccode\u003eisPrefixAndSuffix(\u0026quot;aba\u0026quot;, \u0026quot;ababa\u0026quot;)\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e because \u003ccode\u003e\u0026quot;aba\u0026quot;\u003c/code\u003e is a prefix of \u003ccode\u003e\u0026quot;ababa\u0026quot;\u003c/code\u003e and also a suffix, but \u003ccode\u003eisPrefixAndSuffix(\u0026quot;abc\u0026quot;, \u0026quot;abcd\u0026quot;)\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean integer denoting the \u003cstrong\u003enumber\u003c/strong\u003e of index pairs \u003c/em\u003e\u003ccode\u003e(i, j)\u003c/code\u003e\u003cem\u003e such that \u003c/em\u003e\u003ccode\u003ei \u0026lt; j\u003c/code\u003e\u003cem\u003e, and \u003c/em\u003e\u003ccode\u003eisPrefixAndSuffix(words[i], words[j])\u003c/code\u003e\u003cem\u003e is \u003c/em\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words \u003d [\u0026quot;a\u0026quot;,\u0026quot;aba\u0026quot;,\u0026quot;ababa\u0026quot;,\u0026quot;aa\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, the counted index pairs are:\ni \u003d 0 and j \u003d 1 because isPrefixAndSuffix(\u0026quot;a\u0026quot;, \u0026quot;aba\u0026quot;) is true.\ni \u003d 0 and j \u003d 2 because isPrefixAndSuffix(\u0026quot;a\u0026quot;, \u0026quot;ababa\u0026quot;) is true.\ni \u003d 0 and j \u003d 3 because isPrefixAndSuffix(\u0026quot;a\u0026quot;, \u0026quot;aa\u0026quot;) is true.\ni \u003d 1 and j \u003d 2 because isPrefixAndSuffix(\u0026quot;aba\u0026quot;, \u0026quot;ababa\u0026quot;) is true.\nTherefore, the answer is 4.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words \u003d [\u0026quot;pa\u0026quot;,\u0026quot;papa\u0026quot;,\u0026quot;ma\u0026quot;,\u0026quot;mama\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, the counted index pairs are:\ni \u003d 0 and j \u003d 1 because isPrefixAndSuffix(\u0026quot;pa\u0026quot;, \u0026quot;papa\u0026quot;) is true.\ni \u003d 2 and j \u003d 3 because isPrefixAndSuffix(\u0026quot;ma\u0026quot;, \u0026quot;mama\u0026quot;) is true.\nTherefore, the answer is 2.  \u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words \u003d [\u0026quot;abab\u0026quot;,\u0026quot;ab\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation: \u003c/strong\u003eIn this example, the only valid index pair is i \u003d 0 and j \u003d 1, and isPrefixAndSuffix(\u0026quot;abab\u0026quot;, \u0026quot;ab\u0026quot;) is false.\nTherefore, the answer is 0.\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d words.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d words[i].length \u0026lt;\u003d 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewords[i]\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[\"a\",\"aba\",\"ababa\",\"aa\"]\n[\"pa\",\"papa\",\"ma\",\"mama\"]\n[\"abab\",\"ab\"]",
    "formTitle": "[3042]Count Prefix and Suffix Pairs I",
    "frequency": 0.0,
    "frontendQuestionId": "3042",
    "hints": [
      "Iterate through all index pairs \u003ccode\u003e(i, j)\u003c/code\u003e, such that \u003ccode\u003ei \u003c j\u003c/code\u003e, and check \u003ccode\u003eisPrefixAndSuffix(words[i], words[j])\u003c/code\u003e.",
      "The answer is the total number of pairs where \u003ccode\u003eisPrefixAndSuffix(words[i], words[j]) \u003d\u003d true\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "countPrefixSuffixPairs",
      "params": [
        {
          "name": "words",
          "type": "string[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3309",
    "similarQuestions": [
      "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5b9e\\u73b0 Trie (\\u524d\\u7f00\\u6811)\", \"isPaidOnly\": false}, {\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6dfb\\u52a0\\u4e0e\\u641c\\u7d22\\u5355\\u8bcd - \\u6570\\u636e\\u7ed3\\u6784\\u8bbe\\u8ba1\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[\"a\",\"aba\",\"ababa\",\"aa\"]",
    "title": "Count Prefix and Suffix Pairs I",
    "titleSlug": "count-prefix-and-suffix-pairs-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003clong long\u003e countOfPairs(int n, int x, int y) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long[] countOfPairs(int n, int x, int y) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countOfPairs(self, n, x, y):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :type y: int\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countOfPairs(self, n: int, x: int, y: int) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* countOfPairs(int n, int x, int y, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long[] CountOfPairs(int n, int x, int y) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @return {number[]}\n */\nvar countOfPairs \u003d function(n, x, y) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countOfPairs(n: number, x: number, y: number): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer[]\n     */\n    function countOfPairs($n, $x, $y) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countOfPairs(_ n: Int, _ x: Int, _ y: Int) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countOfPairs(n: Int, x: Int, y: Int): LongArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e countOfPairs(int n, int x, int y) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countOfPairs(n int, x int, y int) []int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer[]}\ndef count_of_pairs(n, x, y)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countOfPairs(n: Int, x: Int, y: Int): Array[Long] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_of_pairs(n: i32, x: i32, y: i32) -\u003e Vec\u003ci64\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-of-pairs n x y)\n  (-\u003e exact-integer? exact-integer? exact-integer? (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_of_pairs(N :: integer(), X :: integer(), Y :: integer()) -\u003e [integer()].\ncount_of_pairs(N, X, Y) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_of_pairs(n :: integer, x :: integer, y :: integer) :: [integer]\n  def count_of_pairs(n, x, y) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given three \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003en\u003c/code\u003e, \u003ccode\u003ex\u003c/code\u003e, and \u003ccode\u003ey\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn a city, there exist houses numbered \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003en\u003c/code\u003e connected by \u003ccode\u003en\u003c/code\u003e streets. There is a street connecting the house numbered \u003ccode\u003ei\u003c/code\u003e with the house numbered \u003ccode\u003ei + 1\u003c/code\u003e for all \u003ccode\u003e1 \u0026lt;\u003d i \u0026lt;\u003d n - 1\u003c/code\u003e . An additional street connects the house numbered \u003ccode\u003ex\u003c/code\u003e with the house numbered \u003ccode\u003ey\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor each \u003ccode\u003ek\u003c/code\u003e, such that \u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d n\u003c/code\u003e, you need to find the number of \u003cstrong\u003epairs of houses\u003c/strong\u003e \u003ccode\u003e(house\u003csub\u003e1\u003c/sub\u003e, house\u003csub\u003e2\u003c/sub\u003e)\u003c/code\u003e such that the \u003cstrong\u003eminimum\u003c/strong\u003e number of streets that need to be traveled to reach \u003ccode\u003ehouse\u003csub\u003e2\u003c/sub\u003e\u003c/code\u003e from \u003ccode\u003ehouse\u003csub\u003e1\u003c/sub\u003e\u003c/code\u003e is \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ea \u003cstrong\u003e1-indexed\u003c/strong\u003e array \u003c/em\u003e\u003ccode\u003eresult\u003c/code\u003e\u003cem\u003e of length \u003c/em\u003e\u003ccode\u003en\u003c/code\u003e\u003cem\u003e where \u003c/em\u003e\u003ccode\u003eresult[k]\u003c/code\u003e\u003cem\u003e represents the \u003cstrong\u003etotal\u003c/strong\u003e number of pairs of houses such that the \u003cstrong\u003eminimum\u003c/strong\u003e streets required to reach one house from the other is \u003c/em\u003e\u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e can be \u003cstrong\u003eequal\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/20/example2.png\" style\u003d\"width: 474px; height: 197px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n \u003d 3, x \u003d 1, y \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e [6,0,0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Let\u0026#39;s look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/20/example3.png\" style\u003d\"width: 668px; height: 174px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n \u003d 5, x \u003d 2, y \u003d 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e [10,8,2,0,0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e For each distance k the pairs are:\n- For k \u003d\u003d 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k \u003d\u003d 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k \u003d\u003d 3, the pairs are (1, 5), and (5, 1).\n- For k \u003d\u003d 4 and k \u003d\u003d 5, there are no pairs.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/20/example5.png\" style\u003d\"width: 544px; height: 130px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n \u003d 4, x \u003d 1, y \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [6,4,2,0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e For each distance k the pairs are:\n- For k \u003d\u003d 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k \u003d\u003d 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k \u003d\u003d 3, the pairs are (1, 4), and (4, 1).\n- For k \u003d\u003d 4, there are no pairs.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d x, y \u0026lt;\u003d n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n1\n3\n5\n2\n4\n4\n1\n1",
    "formTitle": "[3017]Count the Number of Houses at a Certain Distance II",
    "frequency": 0.0,
    "frontendQuestionId": "3017",
    "hints": [
      "If there were no additional street connecting house \u003ccode\u003ex\u003c/code\u003e to house \u003ccode\u003ey\u003c/code\u003e, there would be \u003ccode\u003e2 * (n - i)\u003c/code\u003e pairs of houses at distance \u003ccode\u003ei\u003c/code\u003e.",
      "The shortest distance between house \u003ccode\u003ei\u003c/code\u003e and house \u003ccode\u003ej\u003c/code\u003e (\u003ccode\u003ej \u003c i\u003c/code\u003e) is along one of these paths:\r\n- \u003ccode\u003ei -\u003e j\u003c/code\u003e\r\n- \u003ccode\u003ei -\u003e y---x -\u003e j\u003c/code\u003e",
      "Try to change the distances calculated by path \u003ccode\u003ei -\u003ej\u003c/code\u003e to the other path.",
      "Can we use prefix sums to compute the answer?"
    ],
    "level": 3,
    "metaData": {
      "name": "countOfPairs",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "x",
          "type": "integer"
        },
        {
          "name": "y",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3310",
    "similarQuestions": [
      "[{\"title\": \"Walls and Gates\", \"titleSlug\": \"walls-and-gates\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5899\\u4e0e\\u95e8\", \"isPaidOnly\": true}]"
    ],
    "statusSign": "?",
    "testCase": "3\n1\n3",
    "title": "Count the Number of Houses at a Certain Distance II",
    "titleSlug": "count-the-number-of-houses-at-a-certain-distance-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int returnToBoundaryCount(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int returnToBoundaryCount(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def returnToBoundaryCount(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def returnToBoundaryCount(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int returnToBoundaryCount(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int ReturnToBoundaryCount(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar returnToBoundaryCount \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function returnToBoundaryCount(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function returnToBoundaryCount($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func returnToBoundaryCount(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun returnToBoundaryCount(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int returnToBoundaryCount(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func returnToBoundaryCount(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef return_to_boundary_count(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def returnToBoundaryCount(nums: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn return_to_boundary_count(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (return-to-boundary-count nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec return_to_boundary_count(Nums :: [integer()]) -\u003e integer().\nreturn_to_boundary_count(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec return_to_boundary_count(nums :: [integer]) :: integer\n  def return_to_boundary_count(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eAn ant is on a boundary. It sometimes goes \u003cstrong\u003eleft\u003c/strong\u003e and sometimes \u003cstrong\u003eright\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou are given an array of \u003cstrong\u003enon-zero\u003c/strong\u003e integers \u003ccode\u003enums\u003c/code\u003e. The ant starts reading \u003ccode\u003enums\u003c/code\u003e from the first element of it to its end. At each step, it moves according to the value of the current element:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIf \u003ccode\u003enums[i] \u0026lt; 0\u003c/code\u003e, it moves \u003cstrong\u003eleft\u003c/strong\u003e by\u003c!-- notionvc: 55fee232-4fc9-445f-952a-f1b979415864 --\u003e \u003ccode\u003e-nums[i]\u003c/code\u003e units.\u003c/li\u003e\n\t\u003cli\u003eIf \u003ccode\u003enums[i] \u0026gt; 0\u003c/code\u003e, it moves \u003cstrong\u003eright\u003c/strong\u003e by \u003ccode\u003enums[i]\u003c/code\u003e units.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe number of times the ant \u003cstrong\u003ereturns\u003c/strong\u003e to the boundary.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNotes:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThere is an infinite space on both sides of the boundary.\u003c/li\u003e\n\t\u003cli\u003eWe check whether the ant is on the boundary only after it has moved \u003ccode\u003e|nums[i]|\u003c/code\u003e units. In other words, if the ant crosses the boundary during its movement, it does not count.\u003c!-- notionvc: 5ff95338-8634-4d02-a085-1e83c0be6fcd --\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [2,3,-5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After the first step, the ant is 2 steps to the right of the boundary\u003c!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 --\u003e.\nAfter the second step, the ant is 5 steps to the right of the boundary\u003c!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 --\u003e.\nAfter the third step, the ant is on the boundary.\nSo the answer is 1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,2,-3,-4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After the first step, the ant is 3 steps to the right of the boundary\u003c!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 --\u003e.\nAfter the second step, the ant is 5 steps to the right of the boundary\u003c!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 --\u003e.\nAfter the third step, the ant is 2 steps to the right of the boundary\u003c!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 --\u003e.\nAfter the fourth step, the ant is 2 steps to the left of the boundary\u003c!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 --\u003e.\nThe ant never returned to the boundary, so the answer is 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i] !\u003d 0\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,3,-5]\n[3,2,-3,-4]",
    "formTitle": "[3028]Ant on the Boundary",
    "frequency": 0.0,
    "frontendQuestionId": "3028",
    "hints": [
      "Define a variable and add \u003ccode\u003enums[i]\u003c/code\u003e to it in each step."
    ],
    "level": 1,
    "metaData": {
      "name": "returnToBoundaryCount",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3311",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[2,3,-5]",
    "title": "Ant on the Boundary",
    "titleSlug": "ant-on-the-boundary"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int countKeyChanges(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int countKeyChanges(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countKeyChanges(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countKeyChanges(self, s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int countKeyChanges(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int CountKeyChanges(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countKeyChanges \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countKeyChanges(s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countKeyChanges($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countKeyChanges(_ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countKeyChanges(s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countKeyChanges(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countKeyChanges(s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Integer}\ndef count_key_changes(s)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countKeyChanges(s: String): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_key_changes(s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-key-changes s)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_key_changes(S :: unicode:unicode_binary()) -\u003e integer().\ncount_key_changes(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_key_changes(s :: String.t) :: integer\n  def count_key_changes(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed \u003c/strong\u003estring \u003ccode\u003es\u003c/code\u003e typed by a user. Changing a key is defined as using a key different from the last used key. For example, \u003ccode\u003es \u003d \u0026quot;ab\u0026quot;\u003c/code\u003e has a change of a key while \u003ccode\u003es \u003d \u0026quot;bBBb\u0026quot;\u003c/code\u003e does not have any.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe number of times the user had to change the key. \u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote: \u003c/strong\u003eModifiers like \u003ccode\u003eshift\u003c/code\u003e or \u003ccode\u003ecaps lock\u003c/code\u003e won\u0026#39;t be counted in changing the key that is if a user typed the letter \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e and then the letter \u003ccode\u003e\u0026#39;A\u0026#39;\u003c/code\u003e then it will not be considered as a changing of key.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s \u003d \u0026quot;aAbBcC\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nFrom s[0] \u003d \u0026#39;a\u0026#39; to s[1] \u003d \u0026#39;A\u0026#39;, there is no change of key as caps lock or shift is not counted.\nFrom s[1] \u003d \u0026#39;A\u0026#39; to s[2] \u003d \u0026#39;b\u0026#39;, there is a change of key.\nFrom s[2] \u003d \u0026#39;b\u0026#39; to s[3] \u003d \u0026#39;B\u0026#39;, there is no change of key as caps lock or shift is not counted.\nFrom s[3] \u003d \u0026#39;B\u0026#39; to s[4] \u003d \u0026#39;c\u0026#39;, there is a change of key.\nFrom s[4] \u003d \u0026#39;c\u0026#39; to s[5] \u003d \u0026#39;C\u0026#39;, there is no change of key as caps lock or shift is not counted.\n\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s \u003d \u0026quot;AaAaAaaA\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is no change of key since only the letters \u0026#39;a\u0026#39; and \u0026#39;A\u0026#39; are\u003c!-- notionvc: 8849fe75-f31e-41dc-a2e0-b7d33d8427d2 --\u003e pressed which does not require change of key.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of only upper case and lower case English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"aAbBcC\"\n\"AaAaAaaA\"",
    "formTitle": "[3019]Number of Changing Keys",
    "frequency": 0.0,
    "frontendQuestionId": "3019",
    "hints": [
      "Change all the characters to lowercase and then return the number of indices where the character does not match with the last index character."
    ],
    "level": 1,
    "metaData": {
      "name": "countKeyChanges",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3312",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"aAbBcC\"",
    "title": "Number of Changing Keys",
    "titleSlug": "number-of-changing-keys"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long maximumStrength(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long maximumStrength(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumStrength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumStrength(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long maximumStrength(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MaximumStrength(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumStrength \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumStrength(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumStrength($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumStrength(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumStrength(nums: IntArray, k: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumStrength(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumStrength(nums []int, k int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_strength(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumStrength(nums: Array[Int], k: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_strength(nums: Vec\u003ci32\u003e, k: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-strength nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_strength(Nums :: [integer()], K :: integer()) -\u003e integer().\nmaximum_strength(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_strength(nums :: [integer], k :: integer) :: integer\n  def maximum_strength(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e array of integers \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, and a \u003cstrong\u003epositive\u003c/strong\u003e \u003cstrong\u003eodd\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe strength of \u003ccode\u003ex\u003c/code\u003e subarrays is defined as \u003ccode\u003estrength \u003d sum[1] * x - sum[2] * (x - 1) + sum[3] * (x - 2) - sum[4] * (x - 3) + ... + sum[x] * 1\u003c/code\u003e where \u003ccode\u003esum[i]\u003c/code\u003e is the sum of the elements in the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e subarray. Formally, strength is sum of \u003ccode\u003e(-1)\u003csup\u003ei+1\u003c/sup\u003e * sum[i] * (x - i + 1)\u003c/code\u003e over all \u003ccode\u003ei\u003c/code\u003e\u0026#39;s such that \u003ccode\u003e1 \u0026lt;\u003d i \u0026lt;\u003d x\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou need to select \u003ccode\u003ek\u003c/code\u003e \u003cstrong\u003edisjoint \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarrays\u003c/span\u003e\u003c/strong\u003e from \u003ccode\u003enums\u003c/code\u003e, such that their \u003cstrong\u003estrength\u003c/strong\u003e is \u003cstrong\u003emaximum\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e possible \u003cstrong\u003estrength\u003c/strong\u003e that can be obtained\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that the selected subarrays \u003cstrong\u003edon\u0026#39;t\u003c/strong\u003e need to cover the entire array.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,2,3,-1,2], k \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 22\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is (1 + 2 + 3) * 3 - (-1) * 2 + 2 * 1 \u003d 22.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [12,-2,-2,-2,-2], k \u003d 5\n\u003cstrong\u003eOutput:\u003c/strong\u003e 64\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is 12 * 5 - (-2) * 4 + (-2) * 3 - (-2) * 2 + (-2) * 1 \u003d 64.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [-1,-2,-3], k \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The best possible way to select 1 subarray is: nums[0..0]. The strength is -1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u0026lt;\u003d 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n * k \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ek\u003c/code\u003e is odd.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,-1,2]\n3\n[12,-2,-2,-2,-2]\n5\n[-1,-2,-3]\n1",
    "formTitle": "[3077]Maximum Strength of K Disjoint Subarrays",
    "frequency": 0.0,
    "frontendQuestionId": "3077",
    "hints": [
      "Let \u003ccode\u003edp[i][j][x \u003d\u003d 0/1]\u003c/code\u003e be the maximum strength to select \u003ccode\u003ej\u003c/code\u003e disjoint subarrays from the original array鈥檚 suffix (\u003ccode\u003enums[i..(n - 1)]\u003c/code\u003e), x denotes whether we select the element or not.",
      "Initially \u003ccode\u003edp[n][0][0] \u003d\u003d 0\u003c/code\u003e.",
      "We have \r\n\u003ccode\u003edp[i][j][1] \u003d nums[i] * get(j) + max(dp[i + 1][j - 1][0], dp[i + 1][j][1])\u003c/code\u003e where \u003ccode\u003eget(j) \u003d j\u003c/code\u003e if \u003ccode\u003ej\u003c/code\u003e is odd, otherwise \u003ccode\u003e-j\u003c/code\u003e.",
      "We can select \u003ccode\u003enums[i]\u003c/code\u003e as a separate subarray or select at least \u003ccode\u003enums[i]\u003c/code\u003e and \u003ccode\u003enums[i + 1]\u003c/code\u003e as the first subarray.\r\n\u003ccode\u003edp[i][j][0] \u003d max(dp[i + 1][j][0], dp[i][j][1])\u003c/code\u003e.",
      "The answer is \u003ccode\u003edp[0][k][0]\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "maximumStrength",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3313",
    "similarQuestions": [
      "[{\"title\": \"Partition Array into Disjoint Intervals\", \"titleSlug\": \"partition-array-into-disjoint-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5206\\u5272\\u6570\\u7ec4\", \"isPaidOnly\": false}, {\"title\": \"Maximum Strength of a Group\", \"titleSlug\": \"maximum-strength-of-a-group\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u4e00\\u4e2a\\u5c0f\\u7ec4\\u7684\\u6700\\u5927\\u5b9e\\u529b\\u503c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,2,3,-1,2]\n3",
    "title": "Maximum Strength of K Disjoint Subarrays",
    "titleSlug": "maximum-strength-of-k-disjoint-subarrays"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int mostFrequentPrime(vector\u003cvector\u003cint\u003e\u003e\u0026 mat) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int mostFrequentPrime(int[][] mat) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def mostFrequentPrime(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def mostFrequentPrime(self, mat: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int mostFrequentPrime(int** mat, int matSize, int* matColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MostFrequentPrime(int[][] mat) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} mat\n * @return {number}\n */\nvar mostFrequentPrime \u003d function(mat) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function mostFrequentPrime(mat: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function mostFrequentPrime($mat) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func mostFrequentPrime(_ mat: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun mostFrequentPrime(mat: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int mostFrequentPrime(List\u003cList\u003cint\u003e\u003e mat) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func mostFrequentPrime(mat [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} mat\n# @return {Integer}\ndef most_frequent_prime(mat)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def mostFrequentPrime(mat: Array[Array[Int]]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn most_frequent_prime(mat: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (most-frequent-prime mat)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec most_frequent_prime(Mat :: [[integer()]]) -\u003e integer().\nmost_frequent_prime(Mat) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec most_frequent_prime(mat :: [[integer]]) :: integer\n  def most_frequent_prime(mat) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003ccode\u003em x n\u003c/code\u003e \u003cstrong\u003e0-indexed \u003c/strong\u003e2D\u003cstrong\u003e \u003c/strong\u003ematrix \u003ccode\u003emat\u003c/code\u003e. From every cell, you can create numbers in the following way:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThere could be at most \u003ccode\u003e8\u003c/code\u003e paths from the cells namely: east, south-east, south, south-west, west, north-west, north, and north-east.\u003c/li\u003e\n\t\u003cli\u003eSelect a path from them and append digits in this path to the number being formed by traveling in this direction.\u003c/li\u003e\n\t\u003cli\u003eNote that numbers are generated at every step, for example, if the digits along the path are \u003ccode\u003e1, 9, 1\u003c/code\u003e, then there will be three numbers generated along the way: \u003ccode\u003e1, 19, 191\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe most frequent \u003cspan data-keyword\u003d\"prime-number\"\u003eprime number\u003c/span\u003e \u003cstrong\u003egreater\u003c/strong\u003e than \u003c/em\u003e\u003ccode\u003e10\u003c/code\u003e\u003cem\u003e out of all the numbers created by traversing the matrix or \u003c/em\u003e\u003ccode\u003e-1\u003c/code\u003e\u003cem\u003e if no such prime number exists. If there are multiple prime numbers with the highest frequency, then return the \u003cb\u003elargest\u003c/b\u003e among them.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It is invalid to change the direction during the move.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/02/15/south\" style\u003d\"width: 641px; height: 291px;\" /\u003e \u003c/strong\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e\nInput:\u003c/strong\u003e mat \u003d [[1,1],[9,9],[1,1]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 19\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nFrom cell (0,0) there are 3 possible directions and the numbers greater than 10 which can be created in those directions are:\nEast: [11], South-East: [19], South: [19,191].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [19,191,19,11].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [99,91,91,91,91].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [91,91,99,91,91].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [11,19,191,19].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [11,19,19,191].\nThe most frequent prime number among all the created numbers is 19.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e mat \u003d [[7]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The only number which can be formed is 7. It is a prime number however it is not greater than 10, so return -1.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e mat \u003d [[9,7,8],[4,6,5],[2,8,6]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 97\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nNumbers greater than 10 created from the cell (0,0) in all possible directions are: [97,978,96,966,94,942].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [78,75,76,768,74,79].\nNumbers greater than 10 created from the cell (0,2) in all possible directions are: [85,856,86,862,87,879].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [46,465,48,42,49,47].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [65,66,68,62,64,69,67,68].\nNumbers greater than 10 created from the cell (1,2) in all possible directions are: [56,58,56,564,57,58].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [28,286,24,249,26,268].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [86,82,84,86,867,85].\nNumbers greater than 10 created from the cell (2,2) in all possible directions are: [68,682,66,669,65,658].\nThe most frequent prime number among all the created numbers is 97.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003em \u003d\u003d mat.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d mat[i].length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m, n \u0026lt;\u003d 6\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d mat[i][j] \u0026lt;\u003d 9\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,1],[9,9],[1,1]]\n[[7]]\n[[9,7,8],[4,6,5],[2,8,6]]",
    "formTitle": "[3044]Most Frequent Prime",
    "frequency": 0.0,
    "frontendQuestionId": "3044",
    "hints": [
      "Use recursion to find all possible numbers for each cell and then check for prime."
    ],
    "level": 2,
    "metaData": {
      "name": "mostFrequentPrime",
      "params": [
        {
          "name": "mat",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3314",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[1,1],[9,9],[1,1]]",
    "title": "Most Frequent Prime",
    "titleSlug": "most-frequent-prime"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int sumOfPowers(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int sumOfPowers(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def sumOfPowers(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def sumOfPowers(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int sumOfPowers(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int SumOfPowers(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumOfPowers \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function sumOfPowers(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumOfPowers($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func sumOfPowers(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun sumOfPowers(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int sumOfPowers(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func sumOfPowers(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_of_powers(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def sumOfPowers(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn sum_of_powers(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (sum-of-powers nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec sum_of_powers(Nums :: [integer()], K :: integer()) -\u003e integer().\nsum_of_powers(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec sum_of_powers(nums :: [integer], k :: integer) :: integer\n  def sum_of_powers(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, and a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003epower\u003c/strong\u003e of a \u003cspan data-keyword\u003d\"subsequence-array\"\u003esubsequence\u003c/span\u003e is defined as the \u003cstrong\u003eminimum\u003c/strong\u003e absolute difference between \u003cstrong\u003eany\u003c/strong\u003e two elements in the subsequence.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003esum\u003c/strong\u003e of \u003cstrong\u003epowers\u003c/strong\u003e of \u003cstrong\u003eall\u003c/strong\u003e subsequences of \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e\u003cem\u003e which have length\u003c/em\u003e \u003cstrong\u003e\u003cem\u003eequal to\u003c/em\u003e\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSince the answer may be large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10\u003csup\u003e9 \u003c/sup\u003e+ 7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4], k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are 4 subsequences in \u003ccode\u003enums\u003c/code\u003e which have length 3: \u003ccode\u003e[1,2,3]\u003c/code\u003e, \u003ccode\u003e[1,3,4]\u003c/code\u003e, \u003ccode\u003e[1,2,4]\u003c/code\u003e, and \u003ccode\u003e[2,3,4]\u003c/code\u003e. The sum of powers is \u003ccode\u003e|2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| \u003d 4\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [2,2], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only subsequence in \u003ccode\u003enums\u003c/code\u003e which has length 2 is\u0026nbsp;\u003ccode\u003e[2,2]\u003c/code\u003e. The sum of powers is \u003ccode\u003e|2 - 2| \u003d 0\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [4,3,-1], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e10\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are 3 subsequences in \u003ccode\u003enums\u003c/code\u003e which have length 2: \u003ccode\u003e[4,3]\u003c/code\u003e, \u003ccode\u003e[4,-1]\u003c/code\u003e, and \u003ccode\u003e[3,-1]\u003c/code\u003e. The sum of powers is \u003ccode\u003e|4 - 3| + |4 - (-1)| + |3 - (-1)| \u003d 10\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e8\u003c/sup\u003e \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e8\u003c/sup\u003e \u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d k \u0026lt;\u003d n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,4]\n3\n[2,2]\n2\n[4,3,-1]\n2",
    "formTitle": "[3098]Find the Sum of Subsequence Powers",
    "frequency": 0.0,
    "frontendQuestionId": "3098",
    "hints": [
      "Sort \u003ccode\u003enums\u003c/code\u003e.",
      "There are at most \u003ccode\u003en\u003csup\u003e2\u003c/sup\u003e\u003c/code\u003e distinct differences.",
      "For a particular difference \u003ccode\u003ed\u003c/code\u003e, let \u003ccode\u003edp[len][i][j]\u003c/code\u003e be the number of subsequences of length \u003ccode\u003elen\u003c/code\u003e in the subarray \u003ccode\u003enums[0..i]\u003c/code\u003e where the last element picked was at index \u003ccode\u003ej\u003c/code\u003e.",
      "For each index, we can check if it can be picked if \u003ccode\u003enums[i] - nums[j] \u003c\u003d d\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "sumOfPowers",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3316",
    "similarQuestions": [
      "[{\"title\": \"Number of Subsequences That Satisfy the Given Sum Condition\", \"titleSlug\": \"number-of-subsequences-that-satisfy-the-given-sum-condition\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6ee1\\u8db3\\u6761\\u4ef6\\u7684\\u5b50\\u5e8f\\u5217\\u6570\\u76ee\", \"isPaidOnly\": false}, {\"title\": \"Closest Subsequence Sum\", \"titleSlug\": \"closest-subsequence-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u63a5\\u8fd1\\u76ee\\u6807\\u503c\\u7684\\u5b50\\u5e8f\\u5217\\u548c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,2,3,4]\n3",
    "title": "Find the Sum of Subsequence Powers",
    "titleSlug": "find-the-sum-of-subsequence-powers"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxPalindromesAfterOperations(vector\u003cstring\u003e\u0026 words) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxPalindromesAfterOperations(String[] words) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxPalindromesAfterOperations(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxPalindromesAfterOperations(self, words: List[str]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxPalindromesAfterOperations(char** words, int wordsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxPalindromesAfterOperations(string[] words) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxPalindromesAfterOperations \u003d function(words) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxPalindromesAfterOperations(words: string[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function maxPalindromesAfterOperations($words) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxPalindromesAfterOperations(_ words: [String]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxPalindromesAfterOperations(words: Array\u003cString\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxPalindromesAfterOperations(List\u003cString\u003e words) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxPalindromesAfterOperations(words []string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String[]} words\n# @return {Integer}\ndef max_palindromes_after_operations(words)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxPalindromesAfterOperations(words: Array[String]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_palindromes_after_operations(words: Vec\u003cString\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-palindromes-after-operations words)\n  (-\u003e (listof string?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_palindromes_after_operations(Words :: [unicode:unicode_binary()]) -\u003e integer().\nmax_palindromes_after_operations(Words) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_palindromes_after_operations(words :: [String.t]) :: integer\n  def max_palindromes_after_operations(words) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e string array \u003ccode\u003ewords\u003c/code\u003e having length \u003ccode\u003en\u003c/code\u003e and containing \u003cstrong\u003e0-indexed\u003c/strong\u003e strings.\u003c/p\u003e\n\n\u003cp\u003eYou are allowed to perform the following operation \u003cstrong\u003eany\u003c/strong\u003e number of times (\u003cstrong\u003eincluding\u003c/strong\u003e \u003cstrong\u003ezero\u003c/strong\u003e):\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose integers \u003ccode\u003ei\u003c/code\u003e, \u003ccode\u003ej\u003c/code\u003e, \u003ccode\u003ex\u003c/code\u003e, and \u003ccode\u003ey\u003c/code\u003e such that \u003ccode\u003e0 \u0026lt;\u003d i, j \u0026lt; n\u003c/code\u003e, \u003ccode\u003e0 \u0026lt;\u003d x \u0026lt; words[i].length\u003c/code\u003e, \u003ccode\u003e0 \u0026lt;\u003d y \u0026lt; words[j].length\u003c/code\u003e, and \u003cstrong\u003eswap\u003c/strong\u003e the characters \u003ccode\u003ewords[i][x]\u003c/code\u003e and \u003ccode\u003ewords[j][y]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean integer denoting the \u003cstrong\u003emaximum\u003c/strong\u003e number of \u003cspan data-keyword\u003d\"palindrome-string\"\u003epalindromes\u003c/span\u003e \u003c/em\u003e\u003ccode\u003ewords\u003c/code\u003e\u003cem\u003e can contain, after performing some operations.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ej\u003c/code\u003e may be equal during an operation.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words \u003d [\u0026quot;abbb\u0026quot;,\u0026quot;ba\u0026quot;,\u0026quot;aa\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, one way to get the maximum number of palindromes is:\nChoose i \u003d 0, j \u003d 1, x \u003d 0, y \u003d 0, so we swap words[0][0] and words[1][0]. words becomes [\u0026quot;bbbb\u0026quot;,\u0026quot;aa\u0026quot;,\u0026quot;aa\u0026quot;].\nAll strings in words are now palindromes.\nHence, the maximum number of palindromes achievable is 3.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words \u003d [\u0026quot;abc\u0026quot;,\u0026quot;ab\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation: \u003c/strong\u003eIn this example, one way to get the maximum number of palindromes is: \nChoose i \u003d 0, j \u003d 1, x \u003d 1, y \u003d 0, so we swap words[0][1] and words[1][0]. words becomes [\u0026quot;aac\u0026quot;,\u0026quot;bb\u0026quot;].\nChoose i \u003d 0, j \u003d 0, x \u003d 1, y \u003d 2, so we swap words[0][1] and words[0][2]. words becomes [\u0026quot;aca\u0026quot;,\u0026quot;bb\u0026quot;].\nBoth strings are now palindromes.\nHence, the maximum number of palindromes achievable is 2.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words \u003d [\u0026quot;cd\u0026quot;,\u0026quot;ef\u0026quot;,\u0026quot;a\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this example, there is no need to perform any operation.\nThere is one palindrome in words \u0026quot;a\u0026quot;.\nIt can be shown that it is not possible to get more than one palindrome after any number of operations.\nHence, the answer is 1.\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d words.length \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d words[i].length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewords[i]\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[\"abbb\",\"ba\",\"aa\"]\n[\"abc\",\"ab\"]\n[\"cd\",\"ef\",\"a\"]",
    "formTitle": "[3035]Maximum Palindromes After Operations",
    "frequency": 0.0,
    "frontendQuestionId": "3035",
    "hints": [
      "We can redistribute all the letters freely among the words.",
      "Calculate the frequency of each letter and total the number of matching letter pairs that can be formed from the letters, i.e., \u003ccode\u003etotal \u003d sum(freq[ch] / 2)\u003c/code\u003e for all \u003ccode\u003e\u0027a\u0027 \u003c\u003d ch \u003c\u003d \u0027z\u0027\u003c/code\u003e.",
      "We can greedily try making palindromes from \u003ccode\u003ewords[i]\u003c/code\u003e with the smallest length to \u003ccode\u003ewords[i]\u003c/code\u003e with the longest length.",
      "For the current index, \u003ccode\u003ei\u003c/code\u003e, we try to make \u003ccode\u003ewords[i]\u003c/code\u003e a palindrome. We need \u003ccode\u003elen(words[i]) / 2\u003c/code\u003e matching character pairs, and the letter in the middle (if it exists) can be freely chosen afterward.",
      "We can check if we have enough pairs for index \u003ccode\u003ei\u003c/code\u003e; if we do, we increase the number of palindromes we can make and decrease the number of pairs we have. Otherwise, we end the loop at this index.",
      "The answer is the number of palindromes we were able to make in the end."
    ],
    "level": 2,
    "metaData": {
      "name": "maxPalindromesAfterOperations",
      "params": [
        {
          "name": "words",
          "type": "string[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3317",
    "similarQuestions": [
      "[{\"title\": \"Valid Palindrome\", \"titleSlug\": \"valid-palindrome\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u9a8c\\u8bc1\\u56de\\u6587\\u4e32\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[\"abbb\",\"ba\",\"aa\"]",
    "title": "Maximum Palindromes After Operations",
    "titleSlug": "maximum-palindromes-after-operations"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxOperations(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxOperations(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxOperations(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxOperations(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxOperations(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxOperations \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxOperations(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxOperations($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxOperations(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxOperations(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxOperations(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxOperations(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_operations(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxOperations(nums: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_operations(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-operations nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_operations(Nums :: [integer()]) -\u003e integer().\nmax_operations(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_operations(nums :: [integer]) :: integer\n  def max_operations(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven an array of integers called \u003ccode\u003enums\u003c/code\u003e, you can perform \u003cstrong\u003eany\u003c/strong\u003e of the following operation while \u003ccode\u003enums\u003c/code\u003e contains \u003cstrong\u003eat least\u003c/strong\u003e \u003ccode\u003e2\u003c/code\u003e elements:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose the first two elements of \u003ccode\u003enums\u003c/code\u003e and delete them.\u003c/li\u003e\n\t\u003cli\u003eChoose the last two elements of \u003ccode\u003enums\u003c/code\u003e and delete them.\u003c/li\u003e\n\t\u003cli\u003eChoose the first and the last elements of \u003ccode\u003enums\u003c/code\u003e and delete them.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe\u003cstrong\u003e score\u003c/strong\u003e of the operation is the sum of the deleted elements.\u003c/p\u003e\n\n\u003cp\u003eYour task is to find the \u003cstrong\u003emaximum\u003c/strong\u003e number of operations that can be performed, such that \u003cstrong\u003eall operations have the same score\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e number of operations possible that satisfy the condition mentioned above\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,2,1,2,3,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We perform the following operations:\n- Delete the first two elements, with score 3 + 2 \u003d 5, nums \u003d [1,2,3,4].\n- Delete the first and the last elements, with score 1 + 4 \u003d 5, nums \u003d [2,3].\n- Delete the first and the last elements, with score 2 + 3 \u003d 5, nums \u003d [].\nWe are unable to perform any more operations as nums is empty.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,2,6,1,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We perform the following operations:\n- Delete the first two elements, with score 3 + 2 \u003d 5, nums \u003d [6,1,4].\n- Delete the last two elements, with score 1 + 4 \u003d 5, nums \u003d [6].\nIt can be proven that we can perform at most 2 operations.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d nums.length \u0026lt;\u003d 2000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,2,1,2,3,4]\n[3,2,6,1,4]",
    "formTitle": "[3040]Maximum Number of Operations With the Same Score II",
    "frequency": 0.0,
    "frontendQuestionId": "3040",
    "hints": [
      "After the first operation, the score of other operations is fixed.",
      "For the fixed score use dynamic programming \u003ccode\u003edp[l][r]\u003c/code\u003e to find a maximum number of operations on the subarray \u003ccode\u003enums[l..r]\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "maxOperations",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3318",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "[3,2,1,2,3,4]",
    "title": "Maximum Number of Operations With the Same Score II",
    "titleSlug": "maximum-number-of-operations-with-the-same-score-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxOperations(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxOperations(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxOperations(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxOperations(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxOperations(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxOperations \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxOperations(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxOperations($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxOperations(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxOperations(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxOperations(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxOperations(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_operations(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxOperations(nums: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_operations(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-operations nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_operations(Nums :: [integer()]) -\u003e integer().\nmax_operations(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_operations(nums :: [integer]) :: integer\n  def max_operations(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven an array of integers called \u003ccode\u003enums\u003c/code\u003e, you can perform the following operation while \u003ccode\u003enums\u003c/code\u003e contains \u003cstrong\u003eat least\u003c/strong\u003e \u003ccode\u003e2\u003c/code\u003e elements:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose the first two elements of \u003ccode\u003enums\u003c/code\u003e and delete them.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe\u003cstrong\u003e score\u003c/strong\u003e of the operation is the sum of the deleted elements.\u003c/p\u003e\n\n\u003cp\u003eYour task is to find the \u003cstrong\u003emaximum\u003c/strong\u003e number of operations that can be performed, such that \u003cstrong\u003eall operations have the same score\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e number of operations possible that satisfy the condition mentioned above\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,2,1,4,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We perform the following operations:\n- Delete the first two elements, with score 3 + 2 \u003d 5, nums \u003d [1,4,5].\n- Delete the first two elements, with score 1 + 4 \u003d 5, nums \u003d [5].\nWe are unable to perform any more operations as nums contain only 1 element.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,2,6,1,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We perform the following operations:\n- Delete the first two elements, with score 3 + 2 \u003d 5, nums \u003d [6,1,4].\nWe are unable to perform any more operations as the score of the next operation isn\u0026#39;t the same as the previous one.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d nums.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,2,1,4,5]\n[3,2,6,1,4]",
    "formTitle": "[3038]Maximum Number of Operations With the Same Score I",
    "frequency": 0.0,
    "frontendQuestionId": "3038",
    "hints": [],
    "level": 1,
    "metaData": {
      "name": "maxOperations",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3320",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "[3,2,1,4,5]",
    "title": "Maximum Number of Operations With the Same Score I",
    "titleSlug": "maximum-number-of-operations-with-the-same-score-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string triangleType(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String triangleType(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def triangleType(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def triangleType(self, nums: List[int]) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* triangleType(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string TriangleType(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar triangleType \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function triangleType(nums: number[]): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function triangleType($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func triangleType(_ nums: [Int]) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun triangleType(nums: IntArray): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String triangleType(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func triangleType(nums []int) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {String}\ndef triangle_type(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def triangleType(nums: Array[Int]): String \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn triangle_type(nums: Vec\u003ci32\u003e) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (triangle-type nums)\n  (-\u003e (listof exact-integer?) string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec triangle_type(Nums :: [integer()]) -\u003e unicode:unicode_binary().\ntriangle_type(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec triangle_type(nums :: [integer]) :: String.t\n  def triangle_type(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e of size \u003ccode\u003e3\u003c/code\u003e which can form the sides of a triangle.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eA triangle is called \u003cstrong\u003eequilateral\u003c/strong\u003e if it has all sides of equal length.\u003c/li\u003e\n\t\u003cli\u003eA triangle is called \u003cstrong\u003eisosceles\u003c/strong\u003e if it has exactly two sides of equal length.\u003c/li\u003e\n\t\u003cli\u003eA triangle is called \u003cstrong\u003escalene\u003c/strong\u003e if all its sides are of different lengths.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ea string representing\u003c/em\u003e \u003cem\u003ethe type of triangle that can be formed \u003c/em\u003e\u003cem\u003eor \u003c/em\u003e\u003ccode\u003e\u0026quot;none\u0026quot;\u003c/code\u003e\u003cem\u003e if it \u003cstrong\u003ecannot\u003c/strong\u003e form a triangle.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,3,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;equilateral\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Since all the sides are of equal length, therefore, it will form an equilateral triangle.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,4,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;scalene\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nnums[0] + nums[1] \u003d 3 + 4 \u003d 7, which is greater than nums[2] \u003d 5.\nnums[0] + nums[2] \u003d 3 + 5 \u003d 8, which is greater than nums[1] \u003d 4.\nnums[1] + nums[2] \u003d 4 + 5 \u003d 9, which is greater than nums[0] \u003d 3. \nSince the sum of the two sides is greater than the third side for all three cases, therefore, it can form a triangle.\nAs all the sides are of different lengths, it will form a scalene triangle.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003enums.length \u003d\u003d 3\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,3,3]\n[3,4,5]",
    "formTitle": "[3024]Type of Triangle",
    "frequency": 0.0,
    "frontendQuestionId": "3024",
    "hints": [
      "The condition for a valid triangle is that for any two sides, the sum of their lengths must be greater than the third side.",
      "Simply count the number of unique edge lengths after checking it鈥檚 a valid triangle."
    ],
    "level": 1,
    "metaData": {
      "name": "triangleType",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3321",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[3,3,3]",
    "title": "Type of Triangle",
    "titleSlug": "type-of-triangle"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool isPossibleToSplit(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean isPossibleToSplit(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def isPossibleToSplit(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def isPossibleToSplit(self, nums: List[int]) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool isPossibleToSplit(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool IsPossibleToSplit(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isPossibleToSplit \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function isPossibleToSplit(nums: number[]): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isPossibleToSplit($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func isPossibleToSplit(_ nums: [Int]) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun isPossibleToSplit(nums: IntArray): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool isPossibleToSplit(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func isPossibleToSplit(nums []int) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_possible_to_split(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def isPossibleToSplit(nums: Array[Int]): Boolean \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn is_possible_to_split(nums: Vec\u003ci32\u003e) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (is-possible-to-split nums)\n  (-\u003e (listof exact-integer?) boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec is_possible_to_split(Nums :: [integer()]) -\u003e boolean().\nis_possible_to_split(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec is_possible_to_split(nums :: [integer]) :: boolean\n  def is_possible_to_split(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e of \u003cstrong\u003eeven\u003c/strong\u003e length. You have to split the array into two parts \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e such that:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003enums1.length \u003d\u003d nums2.length \u003d\u003d nums.length / 2\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums1\u003c/code\u003e should contain \u003cstrong\u003edistinct \u003c/strong\u003eelements.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums2\u003c/code\u003e should also contain \u003cstrong\u003edistinct\u003c/strong\u003e elements.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if it is possible to split the array, and \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e \u003cem\u003eotherwise\u003c/em\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,1,2,2,3,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e One of the possible ways to split nums is nums1 \u003d [1,2,3] and nums2 \u003d [1,2,4].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,1,1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The only possible way to split nums is nums1 \u003d [1,1] and nums2 \u003d [1,1]. Both nums1 and nums2 do not contain distinct elements. Therefore, we return false.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums.length % 2 \u003d\u003d 0 \u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,1,2,2,3,4]\n[1,1,1,1]",
    "formTitle": "[3046]Split the Array",
    "frequency": 0.0,
    "frontendQuestionId": "3046",
    "hints": [
      "It鈥檚 impossible if the same number occurs more than twice. So just check the frequency of each value."
    ],
    "level": 1,
    "metaData": {
      "name": "isPossibleToSplit",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3324",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,1,2,2,3,4]",
    "title": "Split the Array",
    "titleSlug": "split-the-array"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long largestSquareArea(vector\u003cvector\u003cint\u003e\u003e\u0026 bottomLeft, vector\u003cvector\u003cint\u003e\u003e\u0026 topRight) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long largestSquareArea(int[][] bottomLeft, int[][] topRight) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def largestSquareArea(self, bottomLeft, topRight):\n        \"\"\"\n        :type bottomLeft: List[List[int]]\n        :type topRight: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def largestSquareArea(self, bottomLeft: List[List[int]], topRight: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long largestSquareArea(int** bottomLeft, int bottomLeftSize, int* bottomLeftColSize, int** topRight, int topRightSize, int* topRightColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long LargestSquareArea(int[][] bottomLeft, int[][] topRight) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} bottomLeft\n * @param {number[][]} topRight\n * @return {number}\n */\nvar largestSquareArea \u003d function(bottomLeft, topRight) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function largestSquareArea(bottomLeft: number[][], topRight: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $bottomLeft\n     * @param Integer[][] $topRight\n     * @return Integer\n     */\n    function largestSquareArea($bottomLeft, $topRight) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func largestSquareArea(_ bottomLeft: [[Int]], _ topRight: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun largestSquareArea(bottomLeft: Array\u003cIntArray\u003e, topRight: Array\u003cIntArray\u003e): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int largestSquareArea(List\u003cList\u003cint\u003e\u003e bottomLeft, List\u003cList\u003cint\u003e\u003e topRight) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func largestSquareArea(bottomLeft [][]int, topRight [][]int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} bottom_left\n# @param {Integer[][]} top_right\n# @return {Integer}\ndef largest_square_area(bottom_left, top_right)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def largestSquareArea(bottomLeft: Array[Array[Int]], topRight: Array[Array[Int]]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn largest_square_area(bottom_left: Vec\u003cVec\u003ci32\u003e\u003e, top_right: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (largest-square-area bottomLeft topRight)\n  (-\u003e (listof (listof exact-integer?)) (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec largest_square_area(BottomLeft :: [[integer()]], TopRight :: [[integer()]]) -\u003e integer().\nlargest_square_area(BottomLeft, TopRight) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec largest_square_area(bottom_left :: [[integer]], top_right :: [[integer]]) :: integer\n  def largest_square_area(bottom_left, top_right) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere exist \u003ccode\u003en\u003c/code\u003e rectangles in a 2D plane. You are given two \u003cstrong\u003e0-indexed\u003c/strong\u003e 2D integer arrays \u003ccode\u003ebottomLeft\u003c/code\u003e and \u003ccode\u003etopRight\u003c/code\u003e, both of size \u003ccode\u003en x 2\u003c/code\u003e, where \u003ccode\u003ebottomLeft[i]\u003c/code\u003e and \u003ccode\u003etopRight[i]\u003c/code\u003e represent the \u003cstrong\u003ebottom-left\u003c/strong\u003e and \u003cstrong\u003etop-right\u003c/strong\u003e coordinates of the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e rectangle respectively.\u003c/p\u003e\n\n\u003cp\u003eYou can select a region formed from the \u003cstrong\u003eintersection\u003c/strong\u003e of\u0026nbsp;two of the given rectangles. You need to find the \u003cstrong\u003elargest \u003c/strong\u003earea of a \u003cstrong\u003esquare\u003c/strong\u003e that can fit \u003cstrong\u003einside\u003c/strong\u003e this region if you select the region optimally.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003elargest \u003c/strong\u003epossible area of a square, or \u003c/em\u003e\u003ccode\u003e0\u003c/code\u003e\u003cem\u003e if there \u003cstrong\u003edo not\u003c/strong\u003e exist any intersecting regions between the rectangles\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/05/example12.png\" style\u003d\"width: 443px; height: 364px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e bottomLeft \u003d [[1,1],[2,2],[3,1]], topRight \u003d [[3,3],[4,4],[6,6]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, or the intersecting region of rectangle 1 and rectangle 2. Hence the largest area is side * side which is 1 * 1 \u003d\u003d 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/04/rectanglesexample2.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 445px; height: 365px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e bottomLeft \u003d [[1,1],[2,2],[1,2]], topRight \u003d [[3,3],[4,4],[3,4]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, the intersecting region of rectangle 1 and rectangle 2, or the intersection region of all 3 rectangles. Hence the largest area is side * side which is 1 * 1 \u003d\u003d 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region.\nNote that the region can be formed by the intersection of more than 2 rectangles.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/04/rectanglesexample3.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 444px; height: 364px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e bottomLeft \u003d [[1,1],[3,3],[3,1]], topRight \u003d [[2,2],[4,4],[4,2]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e No pair of rectangles intersect, hence, we return 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d bottomLeft.length \u003d\u003d topRight.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 10\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ebottomLeft[i].length \u003d\u003d topRight[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d bottomLeft[i][0], bottomLeft[i][1] \u0026lt;\u003d 10\u003csup\u003e7\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d topRight[i][0], topRight[i][1] \u0026lt;\u003d 10\u003csup\u003e7\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ebottomLeft[i][0] \u0026lt; topRight[i][0]\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ebottomLeft[i][1] \u0026lt; topRight[i][1]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,1],[2,2],[3,1]]\n[[3,3],[4,4],[6,6]]\n[[1,1],[2,2],[1,2]]\n[[3,3],[4,4],[3,4]]\n[[1,1],[3,3],[3,1]]\n[[2,2],[4,4],[4,2]]",
    "formTitle": "[3047]Find the Largest Area of Square Inside Two Rectangles",
    "frequency": 0.0,
    "frontendQuestionId": "3047",
    "hints": [
      "Brute Force the intersection area of each pair of rectangles.",
      "Two rectangles will not overlap when the bottom left x coordinate of one rectangle is greater than the top right x coordinate of the other rectangle. The same is true for the y coordinate.",
      "The intersection area (if any) is also a rectangle. Find its corners."
    ],
    "level": 2,
    "metaData": {
      "name": "largestSquareArea",
      "params": [
        {
          "name": "bottomLeft",
          "type": "integer[][]"
        },
        {
          "name": "topRight",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3325",
    "similarQuestions": [
      "[{\"title\": \"Rectangle Area\", \"titleSlug\": \"rectangle-area\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u77e9\\u5f62\\u9762\\u79ef\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[1,1],[2,2],[3,1]]\n[[3,3],[4,4],[6,6]]",
    "title": "Find the Largest Area of Square Inside Two Rectangles",
    "titleSlug": "find-the-largest-area-of-square-inside-two-rectangles"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e countPairsOfConnectableServers(vector\u003cvector\u003cint\u003e\u003e\u0026 edges, int signalSpeed) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] countPairsOfConnectableServers(int[][] edges, int signalSpeed) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countPairsOfConnectableServers(self, edges, signalSpeed):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type signalSpeed: int\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countPairsOfConnectableServers(self, edges: List[List[int]], signalSpeed: int) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countPairsOfConnectableServers(int** edges, int edgesSize, int* edgesColSize, int signalSpeed, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] CountPairsOfConnectableServers(int[][] edges, int signalSpeed) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} edges\n * @param {number} signalSpeed\n * @return {number[]}\n */\nvar countPairsOfConnectableServers \u003d function(edges, signalSpeed) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countPairsOfConnectableServers(edges: number[][], signalSpeed: number): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer $signalSpeed\n     * @return Integer[]\n     */\n    function countPairsOfConnectableServers($edges, $signalSpeed) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countPairsOfConnectableServers(_ edges: [[Int]], _ signalSpeed: Int) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countPairsOfConnectableServers(edges: Array\u003cIntArray\u003e, signalSpeed: Int): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e countPairsOfConnectableServers(List\u003cList\u003cint\u003e\u003e edges, int signalSpeed) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countPairsOfConnectableServers(edges [][]int, signalSpeed int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} edges\n# @param {Integer} signal_speed\n# @return {Integer[]}\ndef count_pairs_of_connectable_servers(edges, signal_speed)\n    \nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countPairsOfConnectableServers(edges: Array[Array[Int]], signalSpeed: Int): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_pairs_of_connectable_servers(edges: Vec\u003cVec\u003ci32\u003e\u003e, signal_speed: i32) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-pairs-of-connectable-servers edges signalSpeed)\n  (-\u003e (listof (listof exact-integer?)) exact-integer? (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_pairs_of_connectable_servers(Edges :: [[integer()]], SignalSpeed :: integer()) -\u003e [integer()].\ncount_pairs_of_connectable_servers(Edges, SignalSpeed) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_pairs_of_connectable_servers(edges :: [[integer]], signal_speed :: integer) :: [integer]\n  def count_pairs_of_connectable_servers(edges, signal_speed) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an unrooted weighted tree with \u003ccode\u003en\u003c/code\u003e vertices representing servers numbered from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e, an array \u003ccode\u003eedges\u003c/code\u003e where \u003ccode\u003eedges[i] \u003d [a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e, weight\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e represents a bidirectional edge between vertices \u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003eb\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e of weight \u003ccode\u003eweight\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e. You are also given an integer \u003ccode\u003esignalSpeed\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTwo servers \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e are \u003cstrong\u003econnectable\u003c/strong\u003e through a server \u003ccode\u003ec\u003c/code\u003e if:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003ea \u0026lt; b\u003c/code\u003e, \u003ccode\u003ea !\u003d c\u003c/code\u003e and \u003ccode\u003eb !\u003d c\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe distance from \u003ccode\u003ec\u003c/code\u003e to \u003ccode\u003ea\u003c/code\u003e is divisible by \u003ccode\u003esignalSpeed\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe distance from \u003ccode\u003ec\u003c/code\u003e to \u003ccode\u003eb\u003c/code\u003e is divisible by \u003ccode\u003esignalSpeed\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe path from \u003ccode\u003ec\u003c/code\u003e to \u003ccode\u003eb\u003c/code\u003e and the path from \u003ccode\u003ec\u003c/code\u003e to \u003ccode\u003ea\u003c/code\u003e do not share any edges.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean integer array\u003c/em\u003e \u003ccode\u003ecount\u003c/code\u003e \u003cem\u003eof length\u003c/em\u003e \u003ccode\u003en\u003c/code\u003e \u003cem\u003ewhere\u003c/em\u003e \u003ccode\u003ecount[i]\u003c/code\u003e \u003cem\u003eis the \u003cstrong\u003enumber\u003c/strong\u003e of server pairs that are \u003cstrong\u003econnectable\u003c/strong\u003e through\u003c/em\u003e \u003cem\u003ethe server\u003c/em\u003e \u003ccode\u003ei\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/21/example22.png\" style\u003d\"width: 438px; height: 243px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e edges \u003d [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,4,6,6,4,0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Since signalSpeed is 1, count[c] is equal to the number of pairs of paths that start at c and do not share any edges.\nIn the case of the given path graph, count[c] is equal to the number of servers to the left of c multiplied by the servers to the right of c.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/21/example11.png\" style\u003d\"width: 495px; height: 484px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e edges \u003d [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e [2,0,0,0,0,0,2]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Through server 0, there are 2 pairs of connectable servers: (4, 5) and (4, 6).\nThrough server 6, there are 2 pairs of connectable servers: (4, 5) and (0, 5).\nIt can be shown that no two servers are connectable through servers other than 0 and 6.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges.length \u003d\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges[i].length \u003d\u003d 3\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e \u0026lt; n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges[i] \u003d [a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e, weight\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e\u003c!-- notionvc: a2623897-1bb1-4c07-84b6-917ffdcd83ec --\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d weight\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d signalSpeed \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that \u003ccode\u003eedges\u003c/code\u003e represents a valid tree.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]]\n1\n[[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]]\n3",
    "formTitle": "[3067]Count Pairs of Connectable Servers in a Weighted Tree Network",
    "frequency": 0.0,
    "frontendQuestionId": "3067",
    "hints": [
      "Take each node as the root of the tree, run DFS, and save for each node \u003ccode\u003ei\u003c/code\u003e, the number of nodes in the subtree rooted at \u003ccode\u003ei\u003c/code\u003e whose distance to the root is divisible by \u003ccode\u003esignalSpeed\u003c/code\u003e.",
      "If the root has \u003ccode\u003em\u003c/code\u003e children named \u003ccode\u003ec\u003csub\u003e1\u003c/sub\u003e, c\u003csub\u003e2\u003c/sub\u003e, 鈥�, c\u003csub\u003em\u003c/sub\u003e\u003c/code\u003e that respectively have \u003ccode\u003enum[c\u003csub\u003e1\u003c/sub\u003e], num[c\u003csub\u003e2\u003c/sub\u003e], 鈥�, num[c\u003csub\u003em\u003c/sub\u003e]\u003c/code\u003e nodes in their subtrees whose distance is divisible by signalSpeed. Then, there are \u003ccode\u003e((S - num[c\u003csub\u003ei\u003c/sub\u003e]) * num[c\u003csub\u003ei\u003c/sub\u003e]) / 2\u003c/code\u003ethat are connectable through the root that we have fixed, where \u003ccode\u003eS\u003c/code\u003e is the sum of \u003ccode\u003enum[c\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "countPairsOfConnectableServers",
      "params": [
        {
          "name": "edges",
          "type": "integer[][]"
        },
        {
          "name": "signalSpeed",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3326",
    "similarQuestions": [
      "[{\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c0f\\u9ad8\\u5ea6\\u6811\", \"isPaidOnly\": false}, {\"title\": \"Sum of Distances in Tree\", \"titleSlug\": \"sum-of-distances-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6811\\u4e2d\\u8ddd\\u79bb\\u4e4b\\u548c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]]\n1",
    "title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
    "titleSlug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long minimumMoves(vector\u003cint\u003e\u0026 nums, int k, int maxChanges) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long minimumMoves(int[] nums, int k, int maxChanges) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumMoves(self, nums, k, maxChanges):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type maxChanges: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumMoves(self, nums: List[int], k: int, maxChanges: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long minimumMoves(int* nums, int numsSize, int k, int maxChanges) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MinimumMoves(int[] nums, int k, int maxChanges) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} maxChanges\n * @return {number}\n */\nvar minimumMoves \u003d function(nums, k, maxChanges) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumMoves(nums: number[], k: number, maxChanges: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $maxChanges\n     * @return Integer\n     */\n    function minimumMoves($nums, $k, $maxChanges) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumMoves(_ nums: [Int], _ k: Int, _ maxChanges: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumMoves(nums: IntArray, k: Int, maxChanges: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumMoves(List\u003cint\u003e nums, int k, int maxChanges) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumMoves(nums []int, k int, maxChanges int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} max_changes\n# @return {Integer}\ndef minimum_moves(nums, k, max_changes)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumMoves(nums: Array[Int], k: Int, maxChanges: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_moves(nums: Vec\u003ci32\u003e, k: i32, max_changes: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-moves nums k maxChanges)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_moves(Nums :: [integer()], K :: integer(), MaxChanges :: integer()) -\u003e integer().\nminimum_moves(Nums, K, MaxChanges) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_moves(nums :: [integer], k :: integer, max_changes :: integer) :: integer\n  def minimum_moves(nums, k, max_changes) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a binary array \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e and a \u003cstrong\u003enon-negative\u003c/strong\u003e integer \u003ccode\u003emaxChanges\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlice plays a game, where the goal is for Alice to pick up \u003ccode\u003ek\u003c/code\u003e ones from \u003ccode\u003enums\u003c/code\u003e using the \u003cstrong\u003eminimum\u003c/strong\u003e number of \u003cstrong\u003emoves\u003c/strong\u003e. When the game starts, Alice picks up any index \u003ccode\u003ealiceIndex\u003c/code\u003e in the range \u003ccode\u003e[0, n - 1]\u003c/code\u003e and stands there. If \u003ccode\u003enums[aliceIndex] \u003d\u003d 1\u003c/code\u003e , Alice picks up the one and \u003ccode\u003enums[aliceIndex]\u003c/code\u003e becomes \u003ccode\u003e0\u003c/code\u003e(this \u003cstrong\u003edoes not\u003c/strong\u003e count as a move). After this, Alice can make \u003cstrong\u003eany\u003c/strong\u003e number of \u003cstrong\u003emoves\u003c/strong\u003e (\u003cstrong\u003eincluding\u003c/strong\u003e \u003cstrong\u003ezero\u003c/strong\u003e) where in each move Alice must perform \u003cstrong\u003eexactly\u003c/strong\u003e one of the following actions:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eSelect any index \u003ccode\u003ej !\u003d aliceIndex\u003c/code\u003e such that \u003ccode\u003enums[j] \u003d\u003d 0\u003c/code\u003e and set \u003ccode\u003enums[j] \u003d 1\u003c/code\u003e. This action can be performed \u003cstrong\u003eat\u003c/strong\u003e \u003cstrong\u003emost\u003c/strong\u003e \u003ccode\u003emaxChanges\u003c/code\u003e times.\u003c/li\u003e\n\t\u003cli\u003eSelect any two adjacent indices \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e (\u003ccode\u003e|x - y| \u003d\u003d 1\u003c/code\u003e) such that \u003ccode\u003enums[x] \u003d\u003d 1\u003c/code\u003e, \u003ccode\u003enums[y] \u003d\u003d 0\u003c/code\u003e, then swap their values (set \u003ccode\u003enums[y] \u003d 1\u003c/code\u003e and \u003ccode\u003enums[x] \u003d 0\u003c/code\u003e). If \u003ccode\u003ey \u003d\u003d aliceIndex\u003c/code\u003e, Alice picks up the one after this move and \u003ccode\u003enums[y]\u003c/code\u003e becomes \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of moves required by Alice to pick \u003cstrong\u003eexactly \u003c/strong\u003e\u003c/em\u003e\u003ccode\u003ek\u003c/code\u003e \u003cem\u003eones\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003enums \u003d [1,1,0,0,0,1,1,0,0,1], k \u003d 3, maxChanges \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e Alice can pick up \u003ccode\u003e3\u003c/code\u003e ones in \u003ccode\u003e3\u003c/code\u003e moves, if Alice performs the following actions in each move when standing at \u003ccode\u003ealiceIndex \u003d\u003d 1\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAt the start of the game Alice picks up the one and \u003ccode\u003enums[1]\u003c/code\u003e becomes \u003ccode\u003e0\u003c/code\u003e. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[1,\u003cstrong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/strong\u003e,0,0,0,1,1,0,0,1]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSelect \u003ccode\u003ej \u003d\u003d 2\u003c/code\u003e and perform an action of the first type. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[1,\u003cstrong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/strong\u003e,1,0,0,1,1,0,0,1]\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eSelect \u003ccode\u003ex \u003d\u003d 2\u003c/code\u003e and \u003ccode\u003ey \u003d\u003d 1\u003c/code\u003e, and perform an action of the second type. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[1,\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,0,0,0,1,1,0,0,1]\u003c/code\u003e. As \u003ccode\u003ey \u003d\u003d aliceIndex\u003c/code\u003e, Alice picks up the one and \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[1,\u003cstrong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/strong\u003e,0,0,0,1,1,0,0,1]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSelect \u003ccode\u003ex \u003d\u003d 0\u003c/code\u003e and \u003ccode\u003ey \u003d\u003d 1\u003c/code\u003e, and perform an action of the second type. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[0,\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,0,0,0,1,1,0,0,1]\u003c/code\u003e. As \u003ccode\u003ey \u003d\u003d aliceIndex\u003c/code\u003e, Alice picks up the one and \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[0,\u003cstrong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/strong\u003e,0,0,0,1,1,0,0,1]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNote that it may be possible for Alice to pick up \u003ccode\u003e3\u003c/code\u003e ones using some other sequence of \u003ccode\u003e3\u003c/code\u003e moves.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003enums \u003d [0,0,0,0], k \u003d 2, maxChanges \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e Alice can pick up \u003ccode\u003e2\u003c/code\u003e ones in \u003ccode\u003e4\u003c/code\u003e moves, if Alice performs the following actions in each move when standing at \u003ccode\u003ealiceIndex \u003d\u003d 0\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eSelect \u003ccode\u003ej \u003d\u003d 1\u003c/code\u003e and perform an action of the first type. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[\u003cstrong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/strong\u003e,1,0,0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSelect \u003ccode\u003ex \u003d\u003d 1\u003c/code\u003e and \u003ccode\u003ey \u003d\u003d 0\u003c/code\u003e, and perform an action of the second type. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,0,0,0]\u003c/code\u003e. As \u003ccode\u003ey \u003d\u003d aliceIndex\u003c/code\u003e, Alice picks up the one and \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[\u003cstrong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/strong\u003e,0,0,0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSelect \u003ccode\u003ej \u003d\u003d 1\u003c/code\u003e again and perform an action of the first type. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[\u003cstrong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/strong\u003e,1,0,0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSelect \u003ccode\u003ex \u003d\u003d 1\u003c/code\u003e and \u003ccode\u003ey \u003d\u003d 0\u003c/code\u003e again, and perform an action of the second type. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,0,0,0]\u003c/code\u003e. As \u003ccode\u003ey \u003d\u003d aliceIndex\u003c/code\u003e, Alice picks up the one and \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[\u003cstrong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/strong\u003e,0,0,0]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt;\u003d 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d maxChanges \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003emaxChanges + sum(nums) \u0026gt;\u003d k\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,1,0,0,0,1,1,0,0,1]\n3\n1\n[0,0,0,0]\n2\n3",
    "formTitle": "[3086]Minimum Moves to Pick K Ones",
    "frequency": 0.0,
    "frontendQuestionId": "3086",
    "hints": [
      "Ones created using a change require \u003ccode\u003e2\u003c/code\u003e moves. Hence except for the immediate neighbors of the index where we move all the ones, we should try to use change operations.",
      "For some subset of ones, it is always better to move the ones to the median position.",
      "We only need to be concerned with the indices where \u003ccode\u003enums[i] \u003d\u003d 1\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumMoves",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        },
        {
          "name": "maxChanges",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3327",
    "similarQuestions": [
      "[{\"title\": \"Minimum Swaps to Group All 1\u0027s Together\", \"titleSlug\": \"minimum-swaps-to-group-all-1s-together\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c11\\u4ea4\\u6362\\u6b21\\u6570\\u6765\\u7ec4\\u5408\\u6240\\u6709\\u7684 1\", \"isPaidOnly\": true}]"
    ],
    "statusSign": "?",
    "testCase": "[1,1,0,0,0,1,1,0,0,1]\n3\n1",
    "title": "Minimum Moves to Pick K Ones",
    "titleSlug": "minimum-moves-to-pick-k-ones"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minOperations(int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minOperations(int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minOperations(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minOperations(self, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minOperations(int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinOperations(int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} k\n * @return {number}\n */\nvar minOperations \u003d function(k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minOperations(k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minOperations(_ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minOperations(k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minOperations(int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minOperations(k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} k\n# @return {Integer}\ndef min_operations(k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minOperations(k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_operations(k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-operations k)\n  (-\u003e exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_operations(K :: integer()) -\u003e integer().\nmin_operations(K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_operations(k :: integer) :: integer\n  def min_operations(k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e. Initially, you have an array \u003ccode\u003enums \u003d [1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can perform \u003cstrong\u003eany\u003c/strong\u003e of the following operations on the array \u003cstrong\u003eany\u003c/strong\u003e number of times (\u003cstrong\u003epossibly zero\u003c/strong\u003e):\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose any element in the array and \u003cstrong\u003eincrease\u003c/strong\u003e its value by \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eDuplicate any element in the array and add it to the end of the array.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of operations required to make the \u003cstrong\u003esum\u003c/strong\u003e of elements of the final array greater than or equal to \u003c/em\u003e\u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ek \u003d 11\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can do the following operations on the array \u003ccode\u003enums \u003d [1]\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIncrease the element by \u003ccode\u003e1\u003c/code\u003e three times. The resulting array is \u003ccode\u003enums \u003d [4]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eDuplicate the element two times. The resulting array is \u003ccode\u003enums \u003d [4,4,4]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe sum of the final array is \u003ccode\u003e4 + 4 + 4 \u003d 12\u003c/code\u003e which is greater than or equal to \u003ccode\u003ek \u003d 11\u003c/code\u003e.\u003cbr /\u003e\nThe total number of operations performed is \u003ccode\u003e3 + 2 \u003d 5\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ek \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe sum of the original array is already greater than or equal to \u003ccode\u003e1\u003c/code\u003e, so no operations are needed.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "11\n1",
    "formTitle": "[3091]Apply Operations to Make Sum of Array Greater Than or Equal to k",
    "frequency": 0.0,
    "frontendQuestionId": "3091",
    "hints": [
      "It is optimal to make all the increase operations first and all the duplicate operations last.",
      "Iterate over all possible number of increase operations that can be done and find the corresponding number of duplicate operations."
    ],
    "level": 2,
    "metaData": {
      "name": "minOperations",
      "params": [
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3328",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "11",
    "title": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
    "titleSlug": "apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int longestCommonPrefix(vector\u003cint\u003e\u0026 arr1, vector\u003cint\u003e\u0026 arr2) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int longestCommonPrefix(int[] arr1, int[] arr2) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def longestCommonPrefix(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def longestCommonPrefix(self, arr1: List[int], arr2: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int longestCommonPrefix(int* arr1, int arr1Size, int* arr2, int arr2Size) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int LongestCommonPrefix(int[] arr1, int[] arr2) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number}\n */\nvar longestCommonPrefix \u003d function(arr1, arr2) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function longestCommonPrefix(arr1: number[], arr2: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @return Integer\n     */\n    function longestCommonPrefix($arr1, $arr2) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func longestCommonPrefix(_ arr1: [Int], _ arr2: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun longestCommonPrefix(arr1: IntArray, arr2: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int longestCommonPrefix(List\u003cint\u003e arr1, List\u003cint\u003e arr2) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func longestCommonPrefix(arr1 []int, arr2 []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @return {Integer}\ndef longest_common_prefix(arr1, arr2)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def longestCommonPrefix(arr1: Array[Int], arr2: Array[Int]): Int \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn longest_common_prefix(arr1: Vec\u003ci32\u003e, arr2: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (longest-common-prefix arr1 arr2)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec longest_common_prefix(Arr1 :: [integer()], Arr2 :: [integer()]) -\u003e integer().\nlongest_common_prefix(Arr1, Arr2) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec longest_common_prefix(arr1 :: [integer], arr2 :: [integer]) :: integer\n  def longest_common_prefix(arr1, arr2) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two arrays with \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003earr1\u003c/code\u003e and \u003ccode\u003earr2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003eprefix\u003c/strong\u003e of a positive integer is an integer formed by one or more of its digits, starting from its \u003cstrong\u003eleftmost\u003c/strong\u003e digit. For example, \u003ccode\u003e123\u003c/code\u003e is a prefix of the integer \u003ccode\u003e12345\u003c/code\u003e, while \u003ccode\u003e234\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003ecommon prefix\u003c/strong\u003e of two integers \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e is an integer \u003ccode\u003ec\u003c/code\u003e, such that \u003ccode\u003ec\u003c/code\u003e is a prefix of both \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e. For example, \u003ccode\u003e5655359\u003c/code\u003e and \u003ccode\u003e56554\u003c/code\u003e have a common prefix \u003ccode\u003e565\u003c/code\u003e while \u003ccode\u003e1223\u003c/code\u003e and \u003ccode\u003e43456\u003c/code\u003e \u003cstrong\u003edo not\u003c/strong\u003e have a common prefix.\u003c/p\u003e\n\n\u003cp\u003eYou need to find the length of the \u003cstrong\u003elongest common prefix\u003c/strong\u003e between all pairs of integers \u003ccode\u003e(x, y)\u003c/code\u003e such that \u003ccode\u003ex\u003c/code\u003e belongs to \u003ccode\u003earr1\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e belongs to \u003ccode\u003earr2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe length of the \u003cstrong\u003elongest\u003c/strong\u003e common prefix among all pairs\u003c/em\u003e.\u003cem\u003e If no common prefix exists among them\u003c/em\u003e, \u003cem\u003ereturn\u003c/em\u003e \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e arr1 \u003d [1,10,100], arr2 \u003d [1000]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are 3 pairs (arr1[i], arr2[j]):\n- The longest common prefix of (1, 1000) is 1.\n- The longest common prefix of (10, 1000) is 10.\n- The longest common prefix of (100, 1000) is 100.\nThe longest common prefix is 100 with a length of 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e arr1 \u003d [1,2,3], arr2 \u003d [4,4,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There exists no common prefix for any pair (arr1[i], arr2[j]), hence we return 0.\nNote that common prefixes between elements of the same array do not count.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d arr1.length, arr2.length \u0026lt;\u003d 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d arr1[i], arr2[i] \u0026lt;\u003d 10\u003csup\u003e8\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,10,100]\n[1000]\n[1,2,3]\n[4,4,4]",
    "formTitle": "[3043]Find the Length of the Longest Common Prefix",
    "frequency": 0.0,
    "frontendQuestionId": "3043",
    "hints": [
      "Put all the possible prefixes of each element in \u003ccode\u003earr1\u003c/code\u003e into a HashSet.",
      "For all the possible prefixes of each element in \u003ccode\u003earr2\u003c/code\u003e, check if it exists in the HashSet."
    ],
    "level": 2,
    "metaData": {
      "name": "longestCommonPrefix",
      "params": [
        {
          "name": "arr1",
          "type": "integer[]"
        },
        {
          "name": "arr2",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3329",
    "similarQuestions": [
      "[{\"title\": \"Longest Common Prefix\", \"titleSlug\": \"longest-common-prefix\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6700\\u957f\\u516c\\u5171\\u524d\\u7f00\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,10,100]\n[1000]",
    "title": "Find the Length of the Longest Common Prefix",
    "titleSlug": "find-the-length-of-the-longest-common-prefix"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e modifiedMatrix(vector\u003cvector\u003cint\u003e\u003e\u0026 matrix) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[][] modifiedMatrix(int[][] matrix) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def modifiedMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def modifiedMatrix(self, matrix: List[List[int]]) -\u003e List[List[int]]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** modifiedMatrix(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[][] ModifiedMatrix(int[][] matrix) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar modifiedMatrix \u003d function(matrix) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function modifiedMatrix(matrix: number[][]): number[][] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function modifiedMatrix($matrix) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func modifiedMatrix(_ matrix: [[Int]]) -\u003e [[Int]] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun modifiedMatrix(matrix: Array\u003cIntArray\u003e): Array\u003cIntArray\u003e {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cList\u003cint\u003e\u003e modifiedMatrix(List\u003cList\u003cint\u003e\u003e matrix) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func modifiedMatrix(matrix [][]int) [][]int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef modified_matrix(matrix)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def modifiedMatrix(matrix: Array[Array[Int]]): Array[Array[Int]] \u003d {\n\n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn modified_matrix(matrix: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (modified-matrix matrix)\n  (-\u003e (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec modified_matrix(Matrix :: [[integer()]]) -\u003e [[integer()]].\nmodified_matrix(Matrix) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec modified_matrix(matrix :: [[integer]]) :: [[integer]]\n  def modified_matrix(matrix) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven a \u003cstrong\u003e0-indexed\u003c/strong\u003e \u003ccode\u003em x n\u003c/code\u003e integer matrix \u003ccode\u003ematrix\u003c/code\u003e, create a new \u003cstrong\u003e0-indexed\u003c/strong\u003e matrix called \u003ccode\u003eanswer\u003c/code\u003e. Make \u003ccode\u003eanswer\u003c/code\u003e equal to \u003ccode\u003ematrix\u003c/code\u003e, then replace each element with the value \u003ccode\u003e-1\u003c/code\u003e with the \u003cstrong\u003emaximum\u003c/strong\u003e element in its respective column.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe matrix\u003c/em\u003e \u003ccode\u003eanswer\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/24/matrix1.png\" style\u003d\"width: 491px; height: 161px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e matrix \u003d [[1,2,-1],[4,-1,6],[7,8,9]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,2,9],[4,8,6],[7,8,9]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The diagram above shows the elements that are changed (in blue).\n- We replace the value in the cell [1][1] with the maximum value in the column 1, that is 8.\n- We replace the value in the cell [0][2] with the maximum value in the column 2, that is 9.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2023/12/24/matrix2.png\" style\u003d\"width: 411px; height: 111px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e matrix \u003d [[3,-1],[5,2]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[3,2],[5,2]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The diagram above shows the elements that are changed (in blue).\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003em \u003d\u003d matrix.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d matrix[i].length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d m, n \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1 \u0026lt;\u003d matrix[i][j] \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that each column contains at least one non-negative integer.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,2,-1],[4,-1,6],[7,8,9]]\n[[3,-1],[5,2]]",
    "formTitle": "[3033]Modify the Matrix",
    "frequency": 0.0,
    "frontendQuestionId": "3033",
    "hints": [],
    "level": 1,
    "metaData": {
      "name": "modifiedMatrix",
      "params": [
        {
          "name": "matrix",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3330",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[1,2,-1],[4,-1,6],[7,8,9]]",
    "title": "Modify the Matrix",
    "titleSlug": "modify-the-matrix"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minOperations(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minOperations(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minOperations(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minOperations(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinOperations(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOperations \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minOperations(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minOperations(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minOperations(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minOperations(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minOperations(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_operations(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-operations nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_operations(Nums :: [integer()], K :: integer()) -\u003e integer().\nmin_operations(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], k :: integer) :: integer\n  def min_operations(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e, and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn one operation, you can remove one occurrence of the smallest element of \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of operations needed so that all elements of the array are greater than or equal to\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [2,11,10,1,3], k \u003d 10\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After one operation, nums becomes equal to [2, 11, 10, 3].\nAfter two operations, nums becomes equal to [11, 10, 3].\nAfter three operations, nums becomes equal to [11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 3 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,1,2,4,9], k \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e All elements of the array are greater than or equal to 1 so we do not need to apply any operations on nums.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,1,2,4,9], k \u003d 9\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e only a single element of nums is greater than or equal to 9 so we need to apply the operations 4 times on nums.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that there is at least one index \u003ccode\u003ei\u003c/code\u003e such that \u003ccode\u003enums[i] \u0026gt;\u003d k\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,11,10,1,3]\n10\n[1,1,2,4,9]\n1\n[1,1,2,4,9]\n9",
    "formTitle": "[3065]Minimum Operations to Exceed Threshold Value I",
    "frequency": 0.0,
    "frontendQuestionId": "3065",
    "hints": [
      "Iterate over \u003ccode\u003enums\u003c/code\u003e and count the number of elements less than \u003ccode\u003ek\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "minOperations",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3331",
    "similarQuestions": [
      "[{\"title\": \"Search Insert Position\", \"titleSlug\": \"search-insert-position\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u641c\\u7d22\\u63d2\\u5165\\u4f4d\\u7f6e\", \"isPaidOnly\": false}, {\"title\": \"Majority Element\", \"titleSlug\": \"majority-element\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u591a\\u6570\\u5143\\u7d20\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[2,11,10,1,3]\n10",
    "title": "Minimum Operations to Exceed Threshold Value I",
    "titleSlug": "minimum-operations-to-exceed-threshold-value-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minOperations(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minOperations(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minOperations(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minOperations(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinOperations(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOperations \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minOperations(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minOperations(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minOperations(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minOperations(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minOperations(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_operations(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-operations nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_operations(Nums :: [integer()], K :: integer()) -\u003e integer().\nmin_operations(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], k :: integer) :: integer\n  def min_operations(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e, and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn one operation, you will:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eTake the two smallest integers \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e in \u003ccode\u003enums\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eRemove \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e from \u003ccode\u003enums\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAdd \u003ccode\u003emin(x, y) * 2 + max(x, y)\u003c/code\u003e anywhere in the array.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that you can only apply the described operation if \u003ccode\u003enums\u003c/code\u003e contains at least two elements.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of operations needed so that all elements of the array are greater than or equal to\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [2,11,10,1,3], k \u003d 10\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3].\nIn the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [1,1,2,4,9], k \u003d 20\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After one operation, nums becomes equal to [2, 4, 9, 3].\nAfter two operations, nums becomes equal to [7, 4, 9].\nAfter three operations, nums becomes equal to [15, 9].\nAfter four operations, nums becomes equal to [33].\nAt this stage, all the elements of nums are greater than 20 so we can stop.\nIt can be shown that 4 is the minimum number of operations needed so that all elements of the array are greater than or equal to 20.\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d nums.length \u0026lt;\u003d 2 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that an answer always exists. That is, there exists some sequence of operations after which all elements of the array are greater than or equal to \u003ccode\u003ek\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,11,10,1,3]\n10\n[1,1,2,4,9]\n20",
    "formTitle": "[3066]Minimum Operations to Exceed Threshold Value II",
    "frequency": 0.0,
    "frontendQuestionId": "3066",
    "hints": [
      "Use priority queue to keep track of minimum elements.",
      "Remove the minimum two elements, perform the operation, and insert the resulting number into the priority queue."
    ],
    "level": 2,
    "metaData": {
      "name": "minOperations",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3332",
    "similarQuestions": [
      "[{\"title\": \"Minimum Operations to Halve Array Sum\", \"titleSlug\": \"minimum-operations-to-halve-array-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5c06\\u6570\\u7ec4\\u548c\\u51cf\\u534a\\u7684\\u6700\\u5c11\\u64cd\\u4f5c\\u6b21\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[2,11,10,1,3]\n10",
    "title": "Minimum Operations to Exceed Threshold Value II",
    "titleSlug": "minimum-operations-to-exceed-threshold-value-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumBoxes(vector\u003cint\u003e\u0026 apple, vector\u003cint\u003e\u0026 capacity) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumBoxes(int[] apple, int[] capacity) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumBoxes(self, apple, capacity):\n        \"\"\"\n        :type apple: List[int]\n        :type capacity: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumBoxes(self, apple: List[int], capacity: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumBoxes(int* apple, int appleSize, int* capacity, int capacitySize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumBoxes(int[] apple, int[] capacity) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} apple\n * @param {number[]} capacity\n * @return {number}\n */\nvar minimumBoxes \u003d function(apple, capacity) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumBoxes(apple: number[], capacity: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $apple\n     * @param Integer[] $capacity\n     * @return Integer\n     */\n    function minimumBoxes($apple, $capacity) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumBoxes(_ apple: [Int], _ capacity: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumBoxes(apple: IntArray, capacity: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumBoxes(List\u003cint\u003e apple, List\u003cint\u003e capacity) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumBoxes(apple []int, capacity []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} apple\n# @param {Integer[]} capacity\n# @return {Integer}\ndef minimum_boxes(apple, capacity)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumBoxes(apple: Array[Int], capacity: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_boxes(apple: Vec\u003ci32\u003e, capacity: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-boxes apple capacity)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_boxes(Apple :: [integer()], Capacity :: [integer()]) -\u003e integer().\nminimum_boxes(Apple, Capacity) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_boxes(apple :: [integer], capacity :: [integer]) :: integer\n  def minimum_boxes(apple, capacity) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003eapple\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e and an array \u003ccode\u003ecapacity\u003c/code\u003e of size \u003ccode\u003em\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThere are \u003ccode\u003en\u003c/code\u003e packs where the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e pack contains \u003ccode\u003eapple[i]\u003c/code\u003e apples. There are \u003ccode\u003em\u003c/code\u003e boxes as well, and the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e box has a capacity of \u003ccode\u003ecapacity[i]\u003c/code\u003e apples.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of boxes you need to select to redistribute these \u003c/em\u003e\u003ccode\u003en\u003c/code\u003e\u003cem\u003e packs of apples into boxes\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that, apples from the same pack can be distributed into different boxes.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e apple \u003d [1,3,2], capacity \u003d [4,3,1,5,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We will use boxes with capacities 4 and 5.\nIt is possible to distribute the apples as the total capacity is greater than or equal to the total number of apples.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e apple \u003d [5,5,5], capacity \u003d [2,4,2,7]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We will need to use all the boxes.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u003d\u003d apple.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m \u003d\u003d capacity.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d apple[i], capacity[i] \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that it\u0026#39;s possible to redistribute packs of apples into boxes.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,3,2]\n[4,3,1,5,2]\n[5,5,5]\n[2,4,2,7]",
    "formTitle": "[3074]Apple Redistribution into Boxes",
    "frequency": 0.0,
    "frontendQuestionId": "3074",
    "hints": [
      "Sort array \u003ccode\u003ecapacity\u003c/code\u003e in non-decreasing order.",
      "Select boxes greedily while the total capacity is smaller than the total number of apples."
    ],
    "level": 1,
    "metaData": {
      "name": "minimumBoxes",
      "params": [
        {
          "name": "apple",
          "type": "integer[]"
        },
        {
          "name": "capacity",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3334",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,3,2]\n[4,3,1,5,2]",
    "title": "Apple Redistribution into Boxes",
    "titleSlug": "apple-redistribution-into-boxes"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumOperationsToWriteY(vector\u003cvector\u003cint\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumOperationsToWriteY(int[][] grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumOperationsToWriteY(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumOperationsToWriteY(self, grid: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumOperationsToWriteY(int** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumOperationsToWriteY(int[][] grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumOperationsToWriteY \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumOperationsToWriteY(grid: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumOperationsToWriteY($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumOperationsToWriteY(_ grid: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumOperationsToWriteY(grid: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumOperationsToWriteY(List\u003cList\u003cint\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumOperationsToWriteY(grid [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_operations_to_write_y(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumOperationsToWriteY(grid: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_operations_to_write_y(grid: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-operations-to-write-y grid)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_operations_to_write_y(Grid :: [[integer()]]) -\u003e integer().\nminimum_operations_to_write_y(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_operations_to_write_y(grid :: [[integer]]) :: integer\n  def minimum_operations_to_write_y(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e \u003ccode\u003en x n\u003c/code\u003e grid where \u003ccode\u003en\u003c/code\u003e is odd, and \u003ccode\u003egrid[r][c]\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, or \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe say that a cell belongs to the Letter \u003cstrong\u003eY\u003c/strong\u003e if it belongs to one of the following:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe diagonal starting at the top-left cell and ending at the center cell of the grid.\u003c/li\u003e\n\t\u003cli\u003eThe diagonal starting at the top-right cell and ending at the center cell of the grid.\u003c/li\u003e\n\t\u003cli\u003eThe vertical line starting at the center cell and ending at the bottom border of the grid.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe Letter \u003cstrong\u003eY\u003c/strong\u003e is written on the grid if and only if:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAll values at cells belonging to the Y are equal.\u003c/li\u003e\n\t\u003cli\u003eAll values at cells not belonging to the Y are equal.\u003c/li\u003e\n\t\u003cli\u003eThe values at cells belonging to the Y are different from the values at cells not belonging to the Y.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of operations needed to write the letter Y on the grid given that in one operation you can change the value at any cell to\u003c/em\u003e \u003ccode\u003e0\u003c/code\u003e\u003cem\u003e,\u003c/em\u003e \u003ccode\u003e1\u003c/code\u003e\u003cem\u003e,\u003c/em\u003e \u003cem\u003eor\u003c/em\u003e \u003ccode\u003e2\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/22/y2.png\" style\u003d\"width: 461px; height: 121px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e grid \u003d [[1,2,2],[1,1,0],[0,1,0]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 1 while those that do not belong to Y are equal to 0.\nIt can be shown that 3 is the minimum number of operations needed to write Y on the grid.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/22/y3.png\" style\u003d\"width: 701px; height: 201px;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e grid \u003d [[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 0 while those that do not belong to Y are equal to 2. \nIt can be shown that 12 is the minimum number of operations needed to write Y on the grid.\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d n \u0026lt;\u003d 49 \u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d grid.length \u003d\u003d grid[i].length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d grid[i][j] \u0026lt;\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en\u003c/code\u003e is odd.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,2,2],[1,1,0],[0,1,0]]\n[[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]",
    "formTitle": "[3071]Minimum Operations to Write the Letter Y on a Grid",
    "frequency": 0.0,
    "frontendQuestionId": "3071",
    "hints": [],
    "level": 2,
    "metaData": {
      "name": "minimumOperationsToWriteY",
      "params": [
        {
          "name": "grid",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3335",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[1,2,2],[1,1,0],[0,1,0]]",
    "title": "Minimum Operations to Write the Letter Y on a Grid",
    "titleSlug": "minimum-operations-to-write-the-letter-y-on-a-grid"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxBottlesDrunk(int numBottles, int numExchange) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxBottlesDrunk(int numBottles, int numExchange) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxBottlesDrunk(self, numBottles, numExchange):\n        \"\"\"\n        :type numBottles: int\n        :type numExchange: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxBottlesDrunk(self, numBottles: int, numExchange: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxBottlesDrunk(int numBottles, int numExchange) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar maxBottlesDrunk \u003d function(numBottles, numExchange) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxBottlesDrunk(numBottles: number, numExchange: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $numBottles\n     * @param Integer $numExchange\n     * @return Integer\n     */\n    function maxBottlesDrunk($numBottles, $numExchange) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxBottlesDrunk(_ numBottles: Int, _ numExchange: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxBottlesDrunk(numBottles: Int, numExchange: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxBottlesDrunk(numBottles int, numExchange int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} num_bottles\n# @param {Integer} num_exchange\n# @return {Integer}\ndef max_bottles_drunk(num_bottles, num_exchange)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxBottlesDrunk(numBottles: Int, numExchange: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_bottles_drunk(num_bottles: i32, num_exchange: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-bottles-drunk numBottles numExchange)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_bottles_drunk(NumBottles :: integer(), NumExchange :: integer()) -\u003e integer().\nmax_bottles_drunk(NumBottles, NumExchange) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_bottles_drunk(num_bottles :: integer, num_exchange :: integer) :: integer\n  def max_bottles_drunk(num_bottles, num_exchange) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two integers \u003ccode\u003enumBottles\u003c/code\u003e and \u003ccode\u003enumExchange\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enumBottles\u003c/code\u003e represents the number of full water bottles that you initially have. In one operation, you can perform one of the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eDrink any number of full water bottles turning them into empty bottles.\u003c/li\u003e\n\t\u003cli\u003eExchange \u003ccode\u003enumExchange\u003c/code\u003e empty bottles with one full water bottle. Then, increase \u003ccode\u003enumExchange\u003c/code\u003e by one.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNote that you cannot exchange multiple batches of empty bottles for the same value of \u003ccode\u003enumExchange\u003c/code\u003e. For example, if \u003ccode\u003enumBottles \u003d\u003d 3\u003c/code\u003e and \u003ccode\u003enumExchange \u003d\u003d 1\u003c/code\u003e, you cannot exchange \u003ccode\u003e3\u003c/code\u003e empty water bottles for \u003ccode\u003e3\u003c/code\u003e full bottles.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e number of water bottles you can drink\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/28/exampleone1.png\" style\u003d\"width: 948px; height: 482px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numBottles \u003d 13, numExchange \u003d 6\n\u003cstrong\u003eOutput:\u003c/strong\u003e 15\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/28/example231.png\" style\u003d\"width: 990px; height: 642px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numBottles \u003d 10, numExchange \u003d 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 13\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d numBottles \u0026lt;\u003d 100 \u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d numExchange \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "13\n6\n10\n3",
    "formTitle": "[3100]Water Bottles II",
    "frequency": 0.0,
    "frontendQuestionId": "3100",
    "hints": [
      "Simulate the process step by step. At each step, drink \u003ccode\u003enumExchange\u003c/code\u003e bottles of water then exchange them for a full bottle. Keep repeating this step until you cannot exchange  bottles anymore."
    ],
    "level": 2,
    "metaData": {
      "name": "maxBottlesDrunk",
      "params": [
        {
          "name": "numBottles",
          "type": "integer"
        },
        {
          "name": "numExchange",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3336",
    "similarQuestions": [
      "[{\"title\": \"Water Bottles\", \"titleSlug\": \"water-bottles\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6362\\u6c34\\u95ee\\u9898\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "13\n6",
    "title": "Water Bottles II",
    "titleSlug": "water-bottles-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long countSubstrings(string s, char c) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long countSubstrings(String s, char c) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countSubstrings(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countSubstrings(self, s: str, c: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long countSubstrings(char* s, char c) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long CountSubstrings(string s, char c) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @param {character} c\n * @return {number}\n */\nvar countSubstrings \u003d function(s, c) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countSubstrings(s: string, c: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $c\n     * @return Integer\n     */\n    function countSubstrings($s, $c) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countSubstrings(_ s: String, _ c: Character) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countSubstrings(s: String, c: Char): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countSubstrings(String s, String c) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countSubstrings(s string, c byte) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @param {Character} c\n# @return {Integer}\ndef count_substrings(s, c)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countSubstrings(s: String, c: Char): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_substrings(s: String, c: char) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-substrings s c)\n  (-\u003e string? char? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_substrings(S :: unicode:unicode_binary(), C :: char()) -\u003e integer().\ncount_substrings(S, C) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_substrings(s :: String.t, c :: char) :: integer\n  def count_substrings(s, c) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e and a character \u003ccode\u003ec\u003c/code\u003e. Return \u003cem\u003ethe total number of \u003cspan data-keyword\u003d\"substring-nonempty\"\u003esubstrings\u003c/span\u003e of \u003c/em\u003e\u003ccode\u003es\u003c/code\u003e\u003cem\u003e that start and end with \u003c/em\u003e\u003ccode\u003ec\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003es \u003d \u0026quot;abada\u0026quot;, c \u003d \u0026quot;a\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e Substrings starting and ending with \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e are: \u003ccode\u003e\u0026quot;\u003cstrong\u003e\u003cu\u003ea\u003c/u\u003e\u003c/strong\u003ebada\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;\u003cu\u003e\u003cstrong\u003eaba\u003c/strong\u003e\u003c/u\u003eda\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;\u003cu\u003e\u003cstrong\u003eabada\u003c/strong\u003e\u003c/u\u003e\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;ab\u003cu\u003e\u003cstrong\u003ea\u003c/strong\u003e\u003c/u\u003eda\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;ab\u003cu\u003e\u003cstrong\u003eada\u003c/strong\u003e\u003c/u\u003e\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;abad\u003cu\u003e\u003cstrong\u003ea\u003c/strong\u003e\u003c/u\u003e\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003es \u003d \u0026quot;zzz\u0026quot;, c \u003d \u0026quot;z\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e There are a total of \u003ccode\u003e6\u003c/code\u003e substrings in \u003ccode\u003es\u003c/code\u003e and all start and end with \u003ccode\u003e\u0026quot;z\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e and \u003ccode\u003ec\u003c/code\u003e consist\u0026nbsp;only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abada\"\n\"a\"\n\"zzz\"\n\"z\"",
    "formTitle": "[3084]Count Substrings Starting and Ending with Given Character",
    "frequency": 0.0,
    "frontendQuestionId": "3084",
    "hints": [
      "Count the number of characters \u003ccode\u003e\u0027c\u0027\u003c/code\u003e in string \u003ccode\u003es\u003c/code\u003e, let鈥檚 call it \u003ccode\u003em\u003c/code\u003e.",
      "We can select \u003ccode\u003e2\u003c/code\u003e numbers \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ej\u003c/code\u003e such that \u003ccode\u003ei \u003c\u003d j\u003c/code\u003e are the start and end indices of substring. Note that \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ej\u003c/code\u003e can be the same.",
      "The answer is \u003ccode\u003em * (m + 1) / 2\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "countSubstrings",
      "params": [
        {
          "name": "s",
          "type": "string"
        },
        {
          "name": "c",
          "type": "character"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3337",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"abada\"\n\"a\"",
    "title": "Count Substrings Starting and Ending with Given Character",
    "titleSlug": "count-substrings-starting-and-ending-with-given-character"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int countSubmatrices(vector\u003cvector\u003cint\u003e\u003e\u0026 grid, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int countSubmatrices(int[][] grid, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countSubmatrices(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countSubmatrices(self, grid: List[List[int]], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int countSubmatrices(int** grid, int gridSize, int* gridColSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int CountSubmatrices(int[][] grid, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number}\n */\nvar countSubmatrices \u003d function(grid, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countSubmatrices(grid: number[][], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer $k\n     * @return Integer\n     */\n    function countSubmatrices($grid, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countSubmatrices(_ grid: [[Int]], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countSubmatrices(grid: Array\u003cIntArray\u003e, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countSubmatrices(List\u003cList\u003cint\u003e\u003e grid, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countSubmatrices(grid [][]int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} grid\n# @param {Integer} k\n# @return {Integer}\ndef count_submatrices(grid, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countSubmatrices(grid: Array[Array[Int]], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_submatrices(grid: Vec\u003cVec\u003ci32\u003e\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-submatrices grid k)\n  (-\u003e (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_submatrices(Grid :: [[integer()]], K :: integer()) -\u003e integer().\ncount_submatrices(Grid, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_submatrices(grid :: [[integer]], k :: integer) :: integer\n  def count_submatrices(grid, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer matrix \u003ccode\u003egrid\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003enumber\u003c/strong\u003e of \u003cspan data-keyword\u003d\"submatrix\"\u003esubmatrices\u003c/span\u003e that contain the top-left element of the\u003c/em\u003e \u003ccode\u003egrid\u003c/code\u003e, \u003cem\u003eand have a sum less than or equal to \u003c/em\u003e\u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/01/example1.png\" style\u003d\"padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e grid \u003d [[7,6,3],[6,6,1]], k \u003d 18\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are only 4 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 18.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/01/example21.png\" style\u003d\"padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e grid \u003d [[7,2,9],[1,5,0],[2,6,6]], k \u003d 20\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are only 6 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 20.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003em \u003d\u003d grid.length \u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d grid[i].length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, m \u0026lt;\u003d 1000 \u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d grid[i][j] \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[7,6,3],[6,6,1]]\n18\n[[7,2,9],[1,5,0],[2,6,6]]\n20",
    "formTitle": "[3070]Count Submatrices with Top-Left Element and Sum Less Than k",
    "frequency": 0.0,
    "frontendQuestionId": "3070",
    "hints": [],
    "level": 2,
    "metaData": {
      "name": "countSubmatrices",
      "params": [
        {
          "name": "grid",
          "type": "integer[][]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3338",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[7,6,3],[6,6,1]]\n18",
    "title": "Count Submatrices with Top-Left Element and Sum Less Than k",
    "titleSlug": "count-submatrices-with-top-left-element-and-sum-less-than-k"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumDistance(vector\u003cvector\u003cint\u003e\u003e\u0026 points) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumDistance(int[][] points) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumDistance(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumDistance(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumDistance(int[][] points) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minimumDistance \u003d function(points) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumDistance(points: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function minimumDistance($points) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumDistance(_ points: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumDistance(points: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumDistance(List\u003cList\u003cint\u003e\u003e points) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumDistance(points [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef minimum_distance(points)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumDistance(points: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_distance(points: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-distance points)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_distance(Points :: [[integer()]]) -\u003e integer().\nminimum_distance(Points) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_distance(points :: [[integer]]) :: integer\n  def minimum_distance(points) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a array \u003ccode\u003epoints\u003c/code\u003e representing integer coordinates of some points on a 2D plane, where \u003ccode\u003epoints[i] \u003d [x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe distance between two points is defined as their \u003cspan data-keyword\u003d\"manhattan-distance\"\u003eManhattan distance\u003c/span\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e possible value for \u003cstrong\u003emaximum\u003c/strong\u003e distance between any two points by removing exactly one point\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epoints \u003d [[3,10],[5,15],[10,2],[4,4]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e12\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe maximum distance after removing each point is the following:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAfter removing the 0\u003csup\u003eth\u003c/sup\u003e point the maximum distance is between points (5, 15) and (10, 2), which is \u003ccode\u003e|5 - 10| + |15 - 2| \u003d 18\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAfter removing the 1\u003csup\u003est\u003c/sup\u003e point the maximum distance is between points (3, 10) and (10, 2), which is \u003ccode\u003e|3 - 10| + |10 - 2| \u003d 15\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAfter removing the 2\u003csup\u003end\u003c/sup\u003e point the maximum distance is between points (5, 15) and (4, 4), which is \u003ccode\u003e|5 - 4| + |15 - 4| \u003d 12\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAfter removing the 3\u003csup\u003erd\u003c/sup\u003e point the maximum distance is between points (5, 15) and (10, 2), which is \u003ccode\u003e|5 - 10| + |15 - 2| \u003d 18\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e12 is the minimum possible maximum distance between any two points after removing exactly one point.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epoints \u003d [[1,1],[1,1],[1,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eRemoving any of the points results in the maximum distance between any two points of 0.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d points.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epoints[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d points[i][0], points[i][1] \u0026lt;\u003d 10\u003csup\u003e8\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[3,10],[5,15],[10,2],[4,4]]\n[[1,1],[1,1],[1,1]]",
    "formTitle": "[3102]Minimize Manhattan Distances",
    "frequency": 0.0,
    "frontendQuestionId": "3102",
    "hints": [
      "Notice that the Manhattan distance between two points \u003ccode\u003e[x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e and \u003ccode\u003e[x\u003csub\u003ej\u003c/sub\u003e, y\u003csub\u003ej\u003c/sub\u003e] is \u003ccode\u003e max({x\u003csub\u003ei\u003c/sub\u003e - x\u003csub\u003ej\u003c/sub\u003e + y\u003csub\u003ei\u003c/sub\u003e - y\u003csub\u003ej\u003c/sub\u003e, x\u003csub\u003ei\u003c/sub\u003e - x\u003csub\u003ej\u003c/sub\u003e - y\u003csub\u003ei\u003c/sub\u003e + y\u003csub\u003ej\u003c/sub\u003e, - x\u003csub\u003ei\u003c/sub\u003e + x\u003csub\u003ej\u003c/sub\u003e + y\u003csub\u003ei\u003c/sub\u003e - y\u003csub\u003ej\u003c/sub\u003e, - x\u003csub\u003ei\u003c/sub\u003e + x\u003csub\u003ej\u003c/sub\u003e - y\u003csub\u003ei\u003c/sub\u003e + y\u003csub\u003ej\u003c/sub\u003e})\u003c/code\u003e\u003c/code\u003e.",
      "If you replace points as \u003ccode\u003e[x\u003csub\u003ei\u003c/sub\u003e - y\u003csub\u003ei\u003c/sub\u003e, x\u003csub\u003ei\u003c/sub\u003e + y\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e then the Manhattan distance is \u003ccode\u003emax(max(x\u003csub\u003ei\u003c/sub\u003e) - min(x\u003csub\u003ei\u003c/sub\u003e), max(y\u003csub\u003ei\u003c/sub\u003e) - min(y\u003csub\u003ei\u003c/sub\u003e))\u003c/code\u003e over all \u003ccode\u003ei\u003c/code\u003e.",
      "After those observations, the problem just becomes a simulation. Create multiset of points \u003ccode\u003e[x\u003csub\u003ei\u003c/sub\u003e - y\u003csub\u003ei\u003c/sub\u003e, x\u003csub\u003ei\u003c/sub\u003e + y\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e, you can iterate on a point you might remove and get the maximum Manhattan distance over all other points."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumDistance",
      "params": [
        {
          "name": "points",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3344",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "[[3,10],[5,15],[10,2],[4,4]]",
    "title": "Minimize Manhattan Distances",
    "titleSlug": "minimize-manhattan-distances"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int sumOfPower(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int sumOfPower(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def sumOfPower(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def sumOfPower(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int sumOfPower(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int SumOfPower(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumOfPower \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function sumOfPower(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumOfPower($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func sumOfPower(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun sumOfPower(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int sumOfPower(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func sumOfPower(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_of_power(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def sumOfPower(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn sum_of_power(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (sum-of-power nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec sum_of_power(Nums :: [integer()], K :: integer()) -\u003e integer().\nsum_of_power(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec sum_of_power(nums :: [integer], k :: integer) :: integer\n  def sum_of_power(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e and a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003epower\u003c/strong\u003e of an array of integers is defined as the number of \u003cspan data-keyword\u003d\"subsequence-array\"\u003esubsequences\u003c/span\u003e with their sum \u003cstrong\u003eequal\u003c/strong\u003e to \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003esum\u003c/strong\u003e of \u003cstrong\u003epower\u003c/strong\u003e of all subsequences of\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eSince the answer may be very large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10\u003csup\u003e9\u003c/sup\u003e + 7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e nums \u003d [1,2,3], k \u003d 3 \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e 6 \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are \u003ccode\u003e5\u003c/code\u003e subsequences of nums with non-zero power:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe subsequence \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e has \u003ccode\u003e2\u003c/code\u003e subsequences with \u003ccode\u003esum \u003d\u003d 3\u003c/code\u003e: \u003ccode\u003e[1,2,\u003cu\u003e3\u003c/u\u003e]\u003c/code\u003e and \u003ccode\u003e[\u003cu\u003e1\u003c/u\u003e,\u003cu\u003e2\u003c/u\u003e,3]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe subsequence \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,2,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e has \u003ccode\u003e1\u003c/code\u003e subsequence with \u003ccode\u003esum \u003d\u003d 3\u003c/code\u003e: \u003ccode\u003e[1,2,\u003cu\u003e3\u003c/u\u003e]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe subsequence \u003ccode\u003e[1,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e has \u003ccode\u003e1\u003c/code\u003e subsequence with \u003ccode\u003esum \u003d\u003d 3\u003c/code\u003e: \u003ccode\u003e[1,2,\u003cu\u003e3\u003c/u\u003e]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe subsequence \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,3]\u003c/code\u003e has \u003ccode\u003e1\u003c/code\u003e subsequence with \u003ccode\u003esum \u003d\u003d 3\u003c/code\u003e: \u003ccode\u003e[\u003cu\u003e1\u003c/u\u003e,\u003cu\u003e2\u003c/u\u003e,3]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe subsequence \u003ccode\u003e[1,2,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e has \u003ccode\u003e1\u003c/code\u003e subsequence with \u003ccode\u003esum \u003d\u003d 3\u003c/code\u003e: \u003ccode\u003e[1,2,\u003cu\u003e3\u003c/u\u003e]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHence the answer is \u003ccode\u003e2 + 1 + 1 + 1 + 1 \u003d 6\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e nums \u003d [2,3,3], k \u003d 5 \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e 4 \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are \u003ccode\u003e3\u003c/code\u003e subsequences of nums with non-zero power:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe subsequence \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e has 2 subsequences with \u003ccode\u003esum \u003d\u003d 5\u003c/code\u003e: \u003ccode\u003e[\u003cu\u003e2\u003c/u\u003e,3,\u003cu\u003e3\u003c/u\u003e]\u003c/code\u003e and \u003ccode\u003e[\u003cu\u003e2\u003c/u\u003e,\u003cu\u003e3\u003c/u\u003e,3]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe subsequence \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,3,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e has 1 subsequence with \u003ccode\u003esum \u003d\u003d 5\u003c/code\u003e: \u003ccode\u003e[\u003cu\u003e2\u003c/u\u003e,3,\u003cu\u003e3\u003c/u\u003e]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe subsequence \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e,3]\u003c/code\u003e has 1 subsequence with \u003ccode\u003esum \u003d\u003d 5\u003c/code\u003e: \u003ccode\u003e[\u003cu\u003e2\u003c/u\u003e,\u003cu\u003e3\u003c/u\u003e,3]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHence the answer is \u003ccode\u003e2 + 1 + 1 \u003d 4\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e nums \u003d [1,2,3], k \u003d 7 \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e 0 \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u0026nbsp;\u003c/strong\u003eThere exists no subsequence with sum \u003ccode\u003e7\u003c/code\u003e. Hence all subsequences of nums have \u003ccode\u003epower \u003d 0\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3]\n3\n[2,3,3]\n5\n[1,2,3]\n7",
    "formTitle": "[3082]Find the Sum of the Power of All Subsequences",
    "frequency": 0.0,
    "frontendQuestionId": "3082",
    "hints": [
      "If there is a subsequence of length \u003ccode\u003ej\u003c/code\u003e with the sum of elements \u003ccode\u003ek\u003c/code\u003e, it contributes \u003ccode\u003e2\u003csup\u003en - j\u003c/sup\u003e\u003c/code\u003e to the answer.",
      "Let \u003ccode\u003edp[i][j]\u003c/code\u003e represent the number of subsequences in the subarray \u003ccode\u003enums[0..i]\u003c/code\u003e which have a sum of \u003ccode\u003ej\u003c/code\u003e.",
      "We can find the \u003ccode\u003edp[i][k]\u003c/code\u003e for all \u003ccode\u003e0 \u003c\u003d i \u003c\u003d n-1\u003c/code\u003e and multiply them with \u003ccode\u003e2\u003csup\u003en - j\u003c/sup\u003e\u003c/code\u003e to get final answer."
    ],
    "level": 3,
    "metaData": {
      "name": "sumOfPower",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3345",
    "similarQuestions": [
      "[{\"title\": \"Number of Subsequences That Satisfy the Given Sum Condition\", \"titleSlug\": \"number-of-subsequences-that-satisfy-the-given-sum-condition\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6ee1\\u8db3\\u6761\\u4ef6\\u7684\\u5b50\\u5e8f\\u5217\\u6570\\u76ee\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,2,3]\n3",
    "title": "Find the Sum of the Power of All Subsequences",
    "titleSlug": "find-the-sum-of-the-power-of-all-subsequences"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string getSmallestString(string s, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String getSmallestString(String s, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def getSmallestString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def getSmallestString(self, s: str, k: int) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* getSmallestString(char* s, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string GetSmallestString(string s, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar getSmallestString \u003d function(s, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function getSmallestString(s: string, k: number): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function getSmallestString($s, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func getSmallestString(_ s: String, _ k: Int) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun getSmallestString(s: String, k: Int): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String getSmallestString(String s, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func getSmallestString(s string, k int) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef get_smallest_string(s, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def getSmallestString(s: String, k: Int): String \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn get_smallest_string(s: String, k: i32) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (get-smallest-string s k)\n  (-\u003e string? exact-integer? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec get_smallest_string(S :: unicode:unicode_binary(), K :: integer()) -\u003e unicode:unicode_binary().\nget_smallest_string(S, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec get_smallest_string(s :: String.t, k :: integer) :: String.t\n  def get_smallest_string(s, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDefine a function \u003ccode\u003edistance(s\u003csub\u003e1\u003c/sub\u003e, s\u003csub\u003e2\u003c/sub\u003e)\u003c/code\u003e between two strings \u003ccode\u003es\u003csub\u003e1\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003es\u003csub\u003e2\u003c/sub\u003e\u003c/code\u003e of the same length \u003ccode\u003en\u003c/code\u003e as:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe\u003cstrong\u003e sum\u003c/strong\u003e of the \u003cstrong\u003eminimum distance\u003c/strong\u003e between \u003ccode\u003es\u003csub\u003e1\u003c/sub\u003e[i]\u003c/code\u003e and \u003ccode\u003es\u003csub\u003e2\u003c/sub\u003e[i]\u003c/code\u003e when the characters from \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e to \u003ccode\u003e\u0026#39;z\u0026#39;\u003c/code\u003e are placed in a \u003cstrong\u003ecyclic\u003c/strong\u003e order, for all \u003ccode\u003ei\u003c/code\u003e in the range \u003ccode\u003e[0, n - 1]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor example, \u003ccode\u003edistance(\u0026quot;ab\u0026quot;, \u0026quot;cd\u0026quot;) \u003d\u003d 4\u003c/code\u003e, and \u003ccode\u003edistance(\u0026quot;a\u0026quot;, \u0026quot;z\u0026quot;) \u003d\u003d 1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can \u003cstrong\u003echange\u003c/strong\u003e any letter of \u003ccode\u003es\u003c/code\u003e to \u003cstrong\u003eany\u003c/strong\u003e other lowercase English letter, \u003cstrong\u003eany\u003c/strong\u003e number of times.\u003c/p\u003e\n\n\u003cp\u003eReturn a string denoting the \u003cstrong\u003e\u003cspan data-keyword\u003d\"lexicographically-smaller-string\"\u003elexicographically smallest\u003c/span\u003e\u003c/strong\u003e string \u003ccode\u003et\u003c/code\u003e you can get after some changes, such that \u003ccode\u003edistance(s, t) \u0026lt;\u003d k\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;zbbz\u0026quot;, k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;aaaz\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eChange \u003ccode\u003es\u003c/code\u003e to \u003ccode\u003e\u0026quot;aaaz\u0026quot;\u003c/code\u003e. The distance between \u003ccode\u003e\u0026quot;zbbz\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;aaaz\u0026quot;\u003c/code\u003e is equal to \u003ccode\u003ek \u003d 3\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;xaxcd\u0026quot;, k \u003d 4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;aawcd\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe distance between \u0026quot;xaxcd\u0026quot; and \u0026quot;aawcd\u0026quot; is equal to k \u003d 4.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;lol\u0026quot;, k \u003d 0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;lol\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s impossible to change any character as \u003ccode\u003ek \u003d 0\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d k \u0026lt;\u003d 2000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"zbbz\"\n3\n\"xaxcd\"\n4\n\"lol\"\n0",
    "formTitle": "[3106]Lexicographically Smallest String After Operations With Constraint",
    "frequency": 0.0,
    "frontendQuestionId": "3106",
    "hints": [
      "The problem can be approached greedily.",
      "For each index in order from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e, we try all letters from \u003ccode\u003e\u0027a\u0027\u003c/code\u003e to \u003ccode\u003e\u0027z\u0027\u003c/code\u003e, selecting the first one as long as the current total distance accumulated is not larger than \u003ccode\u003ek\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "getSmallestString",
      "params": [
        {
          "name": "s",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3346",
    "similarQuestions": [
      "[{\"title\": \"Lexicographically Smallest String After Substring Operation\", \"titleSlug\": \"lexicographically-smallest-string-after-substring-operation\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6267\\u884c\\u5b50\\u4e32\\u64cd\\u4f5c\\u540e\\u7684\\u5b57\\u5178\\u5e8f\\u6700\\u5c0f\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"zbbz\"\n3",
    "title": "Lexicographically Smallest String After Operations With Constraint",
    "titleSlug": "lexicographically-smallest-string-after-operations-with-constraint"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e resultArray(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] resultArray(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def resultArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def resultArray(self, nums: List[int]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultArray(int* nums, int numsSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] ResultArray(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar resultArray \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function resultArray(nums: number[]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function resultArray($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func resultArray(_ nums: [Int]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun resultArray(nums: IntArray): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e resultArray(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func resultArray(nums []int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef result_array(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def resultArray(nums: Array[Int]): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn result_array(nums: Vec\u003ci32\u003e) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (result-array nums)\n  (-\u003e (listof exact-integer?) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec result_array(Nums :: [integer()]) -\u003e [integer()].\nresult_array(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec result_array(nums :: [integer]) :: [integer]\n  def result_array(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e1-indexed\u003c/strong\u003e array of \u003cstrong\u003edistinct\u003c/strong\u003e integers \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou need to distribute all the elements of \u003ccode\u003enums\u003c/code\u003e between two arrays \u003ccode\u003earr1\u003c/code\u003e and \u003ccode\u003earr2\u003c/code\u003e using \u003ccode\u003en\u003c/code\u003e operations. In the first operation, append \u003ccode\u003enums[1]\u003c/code\u003e to \u003ccode\u003earr1\u003c/code\u003e. In the second operation, append \u003ccode\u003enums[2]\u003c/code\u003e to \u003ccode\u003earr2\u003c/code\u003e. Afterwards, in the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e operation:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIf the last element of \u003ccode\u003earr1\u003c/code\u003e is\u003cstrong\u003e greater\u003c/strong\u003e than the last element of \u003ccode\u003earr2\u003c/code\u003e, append \u003ccode\u003enums[i]\u003c/code\u003e to \u003ccode\u003earr1\u003c/code\u003e. Otherwise, append \u003ccode\u003enums[i]\u003c/code\u003e to \u003ccode\u003earr2\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe array \u003ccode\u003eresult\u003c/code\u003e is formed by concatenating the arrays \u003ccode\u003earr1\u003c/code\u003e and \u003ccode\u003earr2\u003c/code\u003e. For example, if \u003ccode\u003earr1 \u003d\u003d [1,2,3]\u003c/code\u003e and \u003ccode\u003earr2 \u003d\u003d [4,5,6]\u003c/code\u003e, then \u003ccode\u003eresult \u003d [1,2,3,4,5,6]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe array\u003c/em\u003e \u003ccode\u003eresult\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [2,1,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [2,3,1]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After the first 2 operations, arr1 \u003d [2] and arr2 \u003d [1].\nIn the 3\u003csup\u003erd\u003c/sup\u003e operation, as the last element of arr1 is greater than the last element of arr2 (2 \u0026gt; 1), append nums[3] to arr1.\nAfter 3 operations, arr1 \u003d [2,3] and arr2 \u003d [1].\nHence, the array result formed by concatenation is [2,3,1].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [5,4,3,8]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [5,3,4,8]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After the first 2 operations, arr1 \u003d [5] and arr2 \u003d [4].\nIn the 3\u003csup\u003erd\u003c/sup\u003e operation, as the last element of arr1 is greater than the last element of arr2 (5 \u0026gt; 4), append nums[3] to arr1, hence arr1 becomes [5,3].\nIn the 4\u003csup\u003eth\u003c/sup\u003e operation, as the last element of arr2 is greater than the last element of arr1 (4 \u0026gt; 3), append nums[4] to arr2, hence arr2 becomes [4,8].\nAfter 4 operations, arr1 \u003d [5,3] and arr2 \u003d [4,8].\nHence, the array result formed by concatenation is [5,3,4,8].\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d n \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll elements in \u003ccode\u003enums\u003c/code\u003e are distinct.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,1,3]\n[5,4,3,8]",
    "formTitle": "[3069]Distribute Elements Into Two Arrays I",
    "frequency": 0.0,
    "frontendQuestionId": "3069",
    "hints": [
      "Divide the array into two arrays by keeping track of the last elements of both subarrays."
    ],
    "level": 1,
    "metaData": {
      "name": "resultArray",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3347",
    "similarQuestions": [
      "[{\"title\": \"Split Array Largest Sum\", \"titleSlug\": \"split-array-largest-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5206\\u5272\\u6570\\u7ec4\\u7684\\u6700\\u5927\\u503c\", \"isPaidOnly\": false}, {\"title\": \"Divide Array Into Equal Pairs\", \"titleSlug\": \"divide-array-into-equal-pairs\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5c06\\u6570\\u7ec4\\u5212\\u5206\\u6210\\u76f8\\u7b49\\u6570\\u5bf9\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[2,1,3]",
    "title": "Distribute Elements Into Two Arrays I",
    "titleSlug": "distribute-elements-into-two-arrays-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e minimumCost(int n, vector\u003cvector\u003cint\u003e\u003e\u0026 edges, vector\u003cvector\u003cint\u003e\u003e\u0026 query) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] minimumCost(int n, int[][] edges, int[][] query) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumCost(self, n, edges, query):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type query: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumCost(self, n: int, edges: List[List[int]], query: List[List[int]]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minimumCost(int n, int** edges, int edgesSize, int* edgesColSize, int** query, int querySize, int* queryColSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] MinimumCost(int n, int[][] edges, int[][] query) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[][]} query\n * @return {number[]}\n */\nvar minimumCost \u003d function(n, edges, query) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumCost(n: number, edges: number[][], query: number[][]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer[][] $query\n     * @return Integer[]\n     */\n    function minimumCost($n, $edges, $query) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumCost(_ n: Int, _ edges: [[Int]], _ query: [[Int]]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumCost(n: Int, edges: Array\u003cIntArray\u003e, query: Array\u003cIntArray\u003e): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e minimumCost(int n, List\u003cList\u003cint\u003e\u003e edges, List\u003cList\u003cint\u003e\u003e query) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumCost(n int, edges [][]int, query [][]int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer[][]} query\n# @return {Integer[]}\ndef minimum_cost(n, edges, query)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumCost(n: Int, edges: Array[Array[Int]], query: Array[Array[Int]]): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_cost(n: i32, edges: Vec\u003cVec\u003ci32\u003e\u003e, query: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-cost n edges query)\n  (-\u003e exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_cost(N :: integer(), Edges :: [[integer()]], Query :: [[integer()]]) -\u003e [integer()].\nminimum_cost(N, Edges, Query) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_cost(n :: integer, edges :: [[integer]], query :: [[integer]]) :: [integer]\n  def minimum_cost(n, edges, query) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere is an undirected weighted graph with \u003ccode\u003en\u003c/code\u003e vertices labeled from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou are given the integer \u003ccode\u003en\u003c/code\u003e and an array \u003ccode\u003eedges\u003c/code\u003e, where \u003ccode\u003eedges[i] \u003d [u\u003csub\u003ei\u003c/sub\u003e, v\u003csub\u003ei\u003c/sub\u003e, w\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e indicates that there is an edge between vertices \u003ccode\u003eu\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003ev\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e with a weight of \u003ccode\u003ew\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It\u0026#39;s important to note that a walk may visit the same edge or vertex more than once.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003ecost\u003c/strong\u003e of a walk starting at node \u003ccode\u003eu\u003c/code\u003e and ending at node \u003ccode\u003ev\u003c/code\u003e is defined as the bitwise \u003ccode\u003eAND\u003c/code\u003e of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is \u003ccode\u003ew\u003csub\u003e0\u003c/sub\u003e, w\u003csub\u003e1\u003c/sub\u003e, w\u003csub\u003e2\u003c/sub\u003e, ..., w\u003csub\u003ek\u003c/sub\u003e\u003c/code\u003e, then the cost is calculated as \u003ccode\u003ew\u003csub\u003e0\u003c/sub\u003e \u0026amp; w\u003csub\u003e1\u003c/sub\u003e \u0026amp; w\u003csub\u003e2\u003c/sub\u003e \u0026amp; ... \u0026amp; w\u003csub\u003ek\u003c/sub\u003e\u003c/code\u003e, where \u003ccode\u003e\u0026amp;\u003c/code\u003e denotes the bitwise \u003ccode\u003eAND\u003c/code\u003e operator.\u003c/p\u003e\n\n\u003cp\u003eYou are also given a 2D array \u003ccode\u003equery\u003c/code\u003e, where \u003ccode\u003equery[i] \u003d [s\u003csub\u003ei\u003c/sub\u003e, t\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e. For each query, you need to find the minimum cost of the walk starting at vertex \u003ccode\u003es\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and ending at vertex \u003ccode\u003et\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e. If there exists no such walk, the answer is \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe array \u003c/em\u003e\u003ccode\u003eanswer\u003c/code\u003e\u003cem\u003e, where \u003c/em\u003e\u003ccode\u003eanswer[i]\u003c/code\u003e\u003cem\u003e denotes the \u003cstrong\u003eminimum\u003c/strong\u003e cost of a walk for query \u003c/em\u003e\u003ccode\u003ei\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 5, edges \u003d [[0,1,7],[1,3,7],[1,2,1]], query \u003d [[0,3],[3,4]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[1,-1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/31/q4_example1-1.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 351px; height: 141px;\" /\u003e\n\u003cp\u003eTo achieve the cost of 1 in the first query, we need to move on the following edges: \u003ccode\u003e0-\u0026gt;1\u003c/code\u003e (weight 7), \u003ccode\u003e1-\u0026gt;2\u003c/code\u003e (weight 1), \u003ccode\u003e2-\u0026gt;1\u003c/code\u003e (weight 1), \u003ccode\u003e1-\u0026gt;3\u003c/code\u003e (weight 7).\u003c/p\u003e\n\n\u003cp\u003eIn the second query, there is no walk between nodes 3 and 4, so the answer is -1.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 3, edges \u003d [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query \u003d [[1,2]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[0]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/01/31/q4_example2e.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 211px; height: 181px;\" /\u003e\n\u003cp\u003eTo achieve the cost of 0 in the first query, we need to move on the following edges: \u003ccode\u003e1-\u0026gt;2\u003c/code\u003e (weight 1), \u003ccode\u003e2-\u0026gt;1\u003c/code\u003e (weight 6), \u003ccode\u003e1-\u0026gt;2\u003c/code\u003e (weight 1).\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d edges.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges[i].length \u003d\u003d 3\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d u\u003csub\u003ei\u003c/sub\u003e, v\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eu\u003csub\u003ei\u003c/sub\u003e !\u003d v\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d w\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d query.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003equery[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d s\u003csub\u003ei\u003c/sub\u003e, t\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003csub\u003ei\u003c/sub\u003e !\u003d\u0026nbsp;t\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "5\n[[0,1,7],[1,3,7],[1,2,1]]\n[[0,3],[3,4]]\n3\n[[0,2,7],[0,1,15],[1,2,6],[1,2,1]]\n[[1,2]]",
    "formTitle": "[3108]Minimum Cost Walk in Weighted Graph",
    "frequency": 0.0,
    "frontendQuestionId": "3108",
    "hints": [
      "The intended solution uses Disjoint Set Union.",
      "Notice that, if \u003ccode\u003eu\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e are not connected then the answer is \u003ccode\u003e-1\u003c/code\u003e, otherwise we can use all the edges from the connected component where both belong to."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumCost",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "edges",
          "type": "integer[][]"
        },
        {
          "name": "query",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3348",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "5\n[[0,1,7],[1,3,7],[1,2,1]]\n[[0,3],[3,4]]",
    "title": "Minimum Cost Walk in Weighted Graph",
    "titleSlug": "minimum-cost-walk-in-weighted-graph"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumLengthSubstring(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumLengthSubstring(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumLengthSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumLengthSubstring(self, s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumLengthSubstring(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumLengthSubstring(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maximumLengthSubstring \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumLengthSubstring(s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maximumLengthSubstring($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumLengthSubstring(_ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumLengthSubstring(s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumLengthSubstring(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumLengthSubstring(s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Integer}\ndef maximum_length_substring(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumLengthSubstring(s: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_length_substring(s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-length-substring s)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_length_substring(S :: unicode:unicode_binary()) -\u003e integer().\nmaximum_length_substring(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_length_substring(s :: String.t) :: integer\n  def maximum_length_substring(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "Given a string \u003ccode\u003es\u003c/code\u003e, return the \u003cstrong\u003emaximum\u003c/strong\u003e length of a \u003cspan data-keyword\u003d\"substring\"\u003esubstring\u003c/span\u003e\u0026nbsp;such that it contains \u003cem\u003eat most two occurrences\u003c/em\u003e of each character.\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;bcbbbcba\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\nThe following substring has a length of 4 and contains at most two occurrences of each character: \u003ccode\u003e\u0026quot;bcbb\u003cu\u003ebcba\u003c/u\u003e\u0026quot;\u003c/code\u003e.\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;aaaa\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\nThe following substring has a length of 2 and contains at most two occurrences of each character: \u003ccode\u003e\u0026quot;\u003cu\u003eaa\u003c/u\u003eaa\u0026quot;\u003c/code\u003e.\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d s.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"bcbbbcba\"\n\"aaaa\"",
    "formTitle": "[3090]Maximum Length Substring With Two Occurrences",
    "frequency": 0.0,
    "frontendQuestionId": "3090",
    "hints": [
      "We can try all substrings by brute-force since the constraints are very small."
    ],
    "level": 1,
    "metaData": {
      "name": "maximumLengthSubstring",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3349",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"bcbbbcba\"",
    "title": "Maximum Length Substring With Two Occurrences",
    "titleSlug": "maximum-length-substring-with-two-occurrences"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e resultArray(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] resultArray(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def resultArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def resultArray(self, nums: List[int]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultArray(int* nums, int numsSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] ResultArray(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar resultArray \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function resultArray(nums: number[]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function resultArray($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func resultArray(_ nums: [Int]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun resultArray(nums: IntArray): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e resultArray(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func resultArray(nums []int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef result_array(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def resultArray(nums: Array[Int]): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn result_array(nums: Vec\u003ci32\u003e) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (result-array nums)\n  (-\u003e (listof exact-integer?) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec result_array(Nums :: [integer()]) -\u003e [integer()].\nresult_array(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec result_array(nums :: [integer]) :: [integer]\n  def result_array(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003e1-indexed\u003c/strong\u003e array of integers \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe define a function \u003ccode\u003egreaterCount\u003c/code\u003e such that \u003ccode\u003egreaterCount(arr, val)\u003c/code\u003e returns the number of elements in \u003ccode\u003earr\u003c/code\u003e that are \u003cstrong\u003estrictly greater\u003c/strong\u003e than \u003ccode\u003eval\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou need to distribute all the elements of \u003ccode\u003enums\u003c/code\u003e between two arrays \u003ccode\u003earr1\u003c/code\u003e and \u003ccode\u003earr2\u003c/code\u003e using \u003ccode\u003en\u003c/code\u003e operations. In the first operation, append \u003ccode\u003enums[1]\u003c/code\u003e to \u003ccode\u003earr1\u003c/code\u003e. In the second operation, append \u003ccode\u003enums[2]\u003c/code\u003e to \u003ccode\u003earr2\u003c/code\u003e. Afterwards, in the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e operation:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIf \u003ccode\u003egreaterCount(arr1, nums[i]) \u0026gt; greaterCount(arr2, nums[i])\u003c/code\u003e, append \u003ccode\u003enums[i]\u003c/code\u003e to \u003ccode\u003earr1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIf \u003ccode\u003egreaterCount(arr1, nums[i]) \u0026lt; greaterCount(arr2, nums[i])\u003c/code\u003e, append \u003ccode\u003enums[i]\u003c/code\u003e to \u003ccode\u003earr2\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIf \u003ccode\u003egreaterCount(arr1, nums[i]) \u003d\u003d greaterCount(arr2, nums[i])\u003c/code\u003e, append \u003ccode\u003enums[i]\u003c/code\u003e to the array with a \u003cstrong\u003elesser\u003c/strong\u003e number of elements.\u003c/li\u003e\n\t\u003cli\u003eIf there is still a tie, append \u003ccode\u003enums[i]\u003c/code\u003e to \u003ccode\u003earr1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe array \u003ccode\u003eresult\u003c/code\u003e is formed by concatenating the arrays \u003ccode\u003earr1\u003c/code\u003e and \u003ccode\u003earr2\u003c/code\u003e. For example, if \u003ccode\u003earr1 \u003d\u003d [1,2,3]\u003c/code\u003e and \u003ccode\u003earr2 \u003d\u003d [4,5,6]\u003c/code\u003e, then \u003ccode\u003eresult \u003d [1,2,3,4,5,6]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe integer array\u003c/em\u003e \u003ccode\u003eresult\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [2,1,3,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [2,3,1,3]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After the first 2 operations, arr1 \u003d [2] and arr2 \u003d [1].\nIn the 3\u003csup\u003erd\u003c/sup\u003e operation, the number of elements greater than 3 is zero in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4\u003csup\u003eth\u003c/sup\u003e operation, the number of elements greater than 3 is zero in both arrays. As the length of arr2 is lesser, hence, append nums[4] to arr2.\nAfter 4 operations, arr1 \u003d [2,3] and arr2 \u003d [1,3].\nHence, the array result formed by concatenation is [2,3,1,3].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [5,14,3,1,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [5,3,1,2,14]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After the first 2 operations, arr1 \u003d [5] and arr2 \u003d [14].\nIn the 3\u003csup\u003erd\u003c/sup\u003e operation, the number of elements greater than 3 is one in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4\u003csup\u003eth\u003c/sup\u003e operation, the number of elements greater than 1 is greater in arr1 than arr2 (2 \u0026gt; 1). Hence, append nums[4] to arr1.\nIn the 5\u003csup\u003eth\u003c/sup\u003e operation, the number of elements greater than 2 is greater in arr1 than arr2 (2 \u0026gt; 1). Hence, append nums[5] to arr1.\nAfter 5 operations, arr1 \u003d [5,3,1,2] and arr2 \u003d [14].\nHence, the array result formed by concatenation is [5,3,1,2,14].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums \u003d [3,3,3,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [3,3,3,3]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e At the end of 4 operations, arr1 \u003d [3,3] and arr2 \u003d [3,3].\nHence, the array result formed by concatenation is [3,3,3,3].\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d n \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,1,3,3]\n[5,14,3,1,2]\n[3,3,3,3]",
    "formTitle": "[3072]Distribute Elements Into Two Arrays II",
    "frequency": 0.0,
    "frontendQuestionId": "3072",
    "hints": [
      "We need a data structure that counts the number of integers greater than a given value \u003ccode\u003ex\u003c/code\u003e and supports insertion.",
      "Use Segment Tree or Binary Indexed Tree by compressing the numbers to the range \u003ccode\u003e[1,n]\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "resultArray",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3350",
    "similarQuestions": [
      "[{\"title\": \"Split Array Largest Sum\", \"titleSlug\": \"split-array-largest-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5206\\u5272\\u6570\\u7ec4\\u7684\\u6700\\u5927\\u503c\", \"isPaidOnly\": false}, {\"title\": \"Divide Array Into Equal Pairs\", \"titleSlug\": \"divide-array-into-equal-pairs\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5c06\\u6570\\u7ec4\\u5212\\u5206\\u6210\\u76f8\\u7b49\\u6570\\u5bf9\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[2,1,3,3]",
    "title": "Distribute Elements Into Two Arrays II",
    "titleSlug": "distribute-elements-into-two-arrays-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long maximumHappinessSum(vector\u003cint\u003e\u0026 happiness, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long maximumHappinessSum(int[] happiness, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumHappinessSum(self, happiness, k):\n        \"\"\"\n        :type happiness: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumHappinessSum(self, happiness: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long maximumHappinessSum(int* happiness, int happinessSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MaximumHappinessSum(int[] happiness, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} happiness\n * @param {number} k\n * @return {number}\n */\nvar maximumHappinessSum \u003d function(happiness, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumHappinessSum(happiness: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $happiness\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumHappinessSum($happiness, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumHappinessSum(_ happiness: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumHappinessSum(happiness: IntArray, k: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumHappinessSum(List\u003cint\u003e happiness, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumHappinessSum(happiness []int, k int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} happiness\n# @param {Integer} k\n# @return {Integer}\ndef maximum_happiness_sum(happiness, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumHappinessSum(happiness: Array[Int], k: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_happiness_sum(happiness: Vec\u003ci32\u003e, k: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-happiness-sum happiness k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_happiness_sum(Happiness :: [integer()], K :: integer()) -\u003e integer().\nmaximum_happiness_sum(Happiness, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_happiness_sum(happiness :: [integer], k :: integer) :: integer\n  def maximum_happiness_sum(happiness, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003ehappiness\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, and a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThere are \u003ccode\u003en\u003c/code\u003e children standing in a queue, where the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e child has \u003cstrong\u003ehappiness value\u003c/strong\u003e \u003ccode\u003ehappiness[i]\u003c/code\u003e. You want to select \u003ccode\u003ek\u003c/code\u003e children from these \u003ccode\u003en\u003c/code\u003e children in \u003ccode\u003ek\u003c/code\u003e turns.\u003c/p\u003e\n\n\u003cp\u003eIn each turn, when you select a child, the \u003cstrong\u003ehappiness value\u003c/strong\u003e of all the children that have \u003cstrong\u003enot\u003c/strong\u003e been selected till now decreases by \u003ccode\u003e1\u003c/code\u003e. Note that the happiness value \u003cstrong\u003ecannot\u003c/strong\u003e become negative and gets decremented \u003cstrong\u003eonly\u003c/strong\u003e if it is positive.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e sum of the happiness values of the selected children you can achieve by selecting \u003c/em\u003e\u003ccode\u003ek\u003c/code\u003e \u003cem\u003echildren\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e happiness \u003d [1,2,3], k \u003d 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can pick 2 children in the following way:\n- Pick the child with the happiness value \u003d\u003d 3. The happiness value of the remaining children becomes [0,1].\n- Pick the child with the happiness value \u003d\u003d 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.\nThe sum of the happiness values of the selected children is 3 + 1 \u003d 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e happiness \u003d [1,1,1,1], k \u003d 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can pick 2 children in the following way:\n- Pick any child with the happiness value \u003d\u003d 1. The happiness value of the remaining children becomes [0,0,0].\n- Pick the child with the happiness value \u003d\u003d 0. The happiness value of the remaining child becomes [0,0].\nThe sum of the happiness values of the selected children is 1 + 0 \u003d 1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e happiness \u003d [2,3,4,5], k \u003d 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can pick 1 child in the following way:\n- Pick the child with the happiness value \u003d\u003d 5. The happiness value of the remaining children becomes [1,2,3].\nThe sum of the happiness values of the selected children is 5.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u003d\u003d happiness.length \u0026lt;\u003d 2 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d happiness[i] \u0026lt;\u003d 10\u003csup\u003e8\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3]\n2\n[1,1,1,1]\n2\n[2,3,4,5]\n1",
    "formTitle": "[3075]Maximize Happiness of Selected Children",
    "frequency": 0.0,
    "frontendQuestionId": "3075",
    "hints": [
      "Since all the unselected numbers are decreasing at the same rate, we should greedily select \u003ccode\u003ek\u003c/code\u003e largest values.",
      "The \u003ccode\u003ei\u003csup\u003eth\u003c/code\u003e largest number (\u003ccode\u003ei \u003d 1, 2, 3,鈥\u003c/code\u003e) should decrease by \u003ccode\u003e(i - 1)\u003c/code\u003e when it is picked.",
      "Add \u003ccode\u003e0\u003c/code\u003e if the decreased value is negative."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumHappinessSum",
      "params": [
        {
          "name": "happiness",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3351",
    "similarQuestions": [
      "[{\"title\": \"Maximum Candies Allocated to K Children\", \"titleSlug\": \"maximum-candies-allocated-to-k-children\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6bcf\\u4e2a\\u5c0f\\u5b69\\u6700\\u591a\\u80fd\\u5206\\u5230\\u591a\\u5c11\\u7cd6\\u679c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,2,3]\n2",
    "title": "Maximize Happiness of Selected Children",
    "titleSlug": "maximize-happiness-of-selected-children"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool isSubstringPresent(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean isSubstringPresent(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def isSubstringPresent(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def isSubstringPresent(self, s: str) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool isSubstringPresent(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool IsSubstringPresent(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isSubstringPresent \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function isSubstringPresent(s: string): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isSubstringPresent($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func isSubstringPresent(_ s: String) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun isSubstringPresent(s: String): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool isSubstringPresent(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func isSubstringPresent(s string) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Boolean}\ndef is_substring_present(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def isSubstringPresent(s: String): Boolean \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn is_substring_present(s: String) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (is-substring-present s)\n  (-\u003e string? boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec is_substring_present(S :: unicode:unicode_binary()) -\u003e boolean().\nis_substring_present(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec is_substring_present(s :: String.t) :: boolean\n  def is_substring_present(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven a\u003cstrong\u003e \u003c/strong\u003estring \u003ccode\u003es\u003c/code\u003e, find any \u003cspan data-keyword\u003d\"substring\"\u003esubstring\u003c/span\u003e of length \u003ccode\u003e2\u003c/code\u003e which is also present in the reverse of \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if such a substring exists, and \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003es \u003d \u0026quot;leetcode\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e Substring \u003ccode\u003e\u0026quot;ee\u0026quot;\u003c/code\u003e is of length \u003ccode\u003e2\u003c/code\u003e which is also present in \u003ccode\u003ereverse(s) \u003d\u003d \u0026quot;edocteel\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003es \u003d \u0026quot;abcba\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e All of the substrings of length \u003ccode\u003e2\u003c/code\u003e \u003ccode\u003e\u0026quot;ab\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;bc\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;cb\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;ba\u0026quot;\u003c/code\u003e are also present in \u003ccode\u003ereverse(s) \u003d\u003d \u0026quot;abcba\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003es \u003d \u0026quot;abcd\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e There is no substring of length \u003ccode\u003e2\u003c/code\u003e in \u003ccode\u003es\u003c/code\u003e, which is also present in the reverse of \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"leetcode\"\n\"abcba\"\n\"abcd\"",
    "formTitle": "[3083]Existence of a Substring in a String and Its Reverse",
    "frequency": 0.0,
    "frontendQuestionId": "3083",
    "hints": [
      "Make a new string by reversing the string \u003ccode\u003es\u003c/code\u003e.",
      "For every substring of length \u003ccode\u003e2\u003c/code\u003e in \u003ccode\u003es\u003c/code\u003e, check if there is a corresponding substring in the reverse of \u003ccode\u003es\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "isSubstringPresent",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3353",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"leetcode\"",
    "title": "Existence of a Substring in a String and Its Reverse",
    "titleSlug": "existence-of-a-substring-in-a-string-and-its-reverse"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string minimizeStringValue(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String minimizeStringValue(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimizeStringValue(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimizeStringValue(self, s: str) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* minimizeStringValue(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string MinimizeStringValue(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar minimizeStringValue \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimizeStringValue(s: string): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function minimizeStringValue($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimizeStringValue(_ s: String) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimizeStringValue(s: String): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String minimizeStringValue(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimizeStringValue(s string) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {String}\ndef minimize_string_value(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimizeStringValue(s: String): String \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimize_string_value(s: String) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimize-string-value s)\n  (-\u003e string? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimize_string_value(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nminimize_string_value(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimize_string_value(s :: String.t) :: String.t\n  def minimize_string_value(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e. \u003ccode\u003es[i]\u003c/code\u003e is either a lowercase English letter or \u003ccode\u003e\u0026#39;?\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor a string \u003ccode\u003et\u003c/code\u003e having length \u003ccode\u003em\u003c/code\u003e containing \u003cstrong\u003eonly\u003c/strong\u003e lowercase English letters, we define the function \u003ccode\u003ecost(i)\u003c/code\u003e for an index \u003ccode\u003ei\u003c/code\u003e\u0026nbsp;as the number of characters \u003cstrong\u003eequal\u003c/strong\u003e to \u003ccode\u003et[i]\u003c/code\u003e\u0026nbsp;that appeared before it, i.e. in the range \u003ccode\u003e[0, i - 1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003evalue\u003c/strong\u003e of \u003ccode\u003et\u003c/code\u003e is the \u003cstrong\u003esum\u003c/strong\u003e of \u003ccode\u003ecost(i)\u003c/code\u003e for all indices \u003ccode\u003ei\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example, for the string \u003ccode\u003et \u003d \u0026quot;aab\u0026quot;\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003ecost(0) \u003d 0\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ecost(1) \u003d 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ecost(2) \u003d 0\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eHence, the value of \u003ccode\u003e\u0026quot;aab\u0026quot;\u003c/code\u003e is \u003ccode\u003e0 + 1 + 0 \u003d 1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYour task is to \u003cstrong\u003ereplace all\u003c/strong\u003e occurrences of \u003ccode\u003e\u0026#39;?\u0026#39;\u003c/code\u003e in \u003ccode\u003es\u003c/code\u003e with any lowercase English letter so that the \u003cstrong\u003evalue\u003c/strong\u003e of \u003ccode\u003es\u003c/code\u003e is \u003cstrong\u003eminimized\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ea string denoting the modified string with replaced occurrences of \u003c/em\u003e\u003ccode\u003e\u0026#39;?\u0026#39;\u003c/code\u003e\u003cem\u003e. If there are multiple strings resulting in the \u003cstrong\u003eminimum value\u003c/strong\u003e, return the \u003cspan data-keyword\u003d\"lexicographically-smaller-string\"\u003elexicographically smallest\u003c/span\u003e one.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e s \u003d \u0026quot;???\u0026quot; \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e \u0026quot;abc\u0026quot; \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e In this example, we can replace the occurrences of \u003ccode\u003e\u0026#39;?\u0026#39;\u003c/code\u003e to make \u003ccode\u003es\u003c/code\u003e equal to \u003ccode\u003e\u0026quot;abc\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor \u003ccode\u003e\u0026quot;abc\u0026quot;\u003c/code\u003e, \u003ccode\u003ecost(0) \u003d 0\u003c/code\u003e, \u003ccode\u003ecost(1) \u003d 0\u003c/code\u003e, and \u003ccode\u003ecost(2) \u003d 0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe value of \u003ccode\u003e\u0026quot;abc\u0026quot;\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSome other modifications of \u003ccode\u003es\u003c/code\u003e that have a value of \u003ccode\u003e0\u003c/code\u003e are \u003ccode\u003e\u0026quot;cba\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;abz\u0026quot;\u003c/code\u003e, and, \u003ccode\u003e\u0026quot;hey\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAmong all of them, we choose the lexicographically smallest.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003es \u003d \u0026quot;a?a?\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e\u0026quot;abac\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e In this example, the occurrences of \u003ccode\u003e\u0026#39;?\u0026#39;\u003c/code\u003e can be replaced to make \u003ccode\u003es\u003c/code\u003e equal to \u003ccode\u003e\u0026quot;abac\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor \u003ccode\u003e\u0026quot;abac\u0026quot;\u003c/code\u003e, \u003ccode\u003ecost(0) \u003d 0\u003c/code\u003e, \u003ccode\u003ecost(1) \u003d 0\u003c/code\u003e, \u003ccode\u003ecost(2) \u003d 1\u003c/code\u003e, and \u003ccode\u003ecost(3) \u003d 0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe value of \u003ccode\u003e\u0026quot;abac\u0026quot;\u003c/code\u003e is\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es[i]\u003c/code\u003e is either a lowercase English letter or \u003ccode\u003e\u0026#39;?\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"???\"\n\"a?a?\"",
    "formTitle": "[3081]Replace Question Marks in String to Minimize Its Value",
    "frequency": 0.0,
    "frontendQuestionId": "3081",
    "hints": [
      "\u003cp\u003eThe cost does not depend on the order of characters. If a character \u003ccode\u003ec\u003c/code\u003e appears \u003ccode\u003ex\u003c/code\u003e times, the cost is exactly \u003ccode\u003e0 + 1 + 2 + 鈥� + (x 鈭� 1) \u003d x * (x 鈭� 1) / 2\u003c/code\u003e.\u003c/p\u003e",
      "\u003cp\u003eWe know the total number of question marks; for each one, we should select the letter with the minimum frequency to replace it.\u003c/p\u003e",
      "\u003cp\u003eThe letter selection can be achieved by a min-heap (or even by brute-forcing the \u003ccode\u003e26\u003c/code\u003e possibilities).\u003c/p\u003e",
      "\u003cp\u003eSo, we know the extra letters we need to replace finally. However, we must put those letters in order from left to right so that the resulting string is the lexicographically smallest one.\u003c/p\u003e"
    ],
    "level": 2,
    "metaData": {
      "name": "minimizeStringValue",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3354",
    "similarQuestions": [
      "[{\"title\": \"Lexicographically Smallest String After Substring Operation\", \"titleSlug\": \"lexicographically-smallest-string-after-substring-operation\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6267\\u884c\\u5b50\\u4e32\\u64cd\\u4f5c\\u540e\\u7684\\u5b57\\u5178\\u5e8f\\u6700\\u5c0f\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "\"???\"",
    "title": "Replace Question Marks in String to Minimize Its Value",
    "titleSlug": "replace-question-marks-in-string-to-minimize-its-value"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumLevels(vector\u003cint\u003e\u0026 possible) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumLevels(int[] possible) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumLevels(self, possible):\n        \"\"\"\n        :type possible: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumLevels(self, possible: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumLevels(int* possible, int possibleSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumLevels(int[] possible) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} possible\n * @return {number}\n */\nvar minimumLevels \u003d function(possible) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumLevels(possible: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $possible\n     * @return Integer\n     */\n    function minimumLevels($possible) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumLevels(_ possible: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumLevels(possible: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumLevels(List\u003cint\u003e possible) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumLevels(possible []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} possible\n# @return {Integer}\ndef minimum_levels(possible)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumLevels(possible: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_levels(possible: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-levels possible)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_levels(Possible :: [integer()]) -\u003e integer().\nminimum_levels(Possible) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_levels(possible :: [integer]) :: integer\n  def minimum_levels(possible) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a binary array \u003ccode\u003epossible\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlice and Bob are playing a game that consists of \u003ccode\u003en\u003c/code\u003e levels. Some of the levels in the game are \u003cstrong\u003eimpossible\u003c/strong\u003e to clear while others can \u003cstrong\u003ealways\u003c/strong\u003e be cleared. In particular, if \u003ccode\u003epossible[i] \u003d\u003d 0\u003c/code\u003e, then the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e level is \u003cstrong\u003eimpossible\u003c/strong\u003e to clear for \u003cstrong\u003eboth\u003c/strong\u003e the players. A player gains \u003ccode\u003e1\u003c/code\u003e point on clearing a level and loses \u003ccode\u003e1\u003c/code\u003e point if the player fails to clear it.\u003c/p\u003e\n\n\u003cp\u003eAt the start of the game, Alice will play some levels in the \u003cstrong\u003egiven order\u003c/strong\u003e starting from the \u003ccode\u003e0\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e level, after which Bob will play for the rest of the levels.\u003c/p\u003e\n\n\u003cp\u003eAlice wants to know the \u003cstrong\u003eminimum\u003c/strong\u003e number of levels she should play to gain more points than Bob, if both players play optimally to \u003cstrong\u003emaximize\u003c/strong\u003e their points.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of levels Alice should play to gain more points\u003c/em\u003e. \u003cem\u003eIf this is \u003cstrong\u003enot\u003c/strong\u003e possible, return\u003c/em\u003e \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that each player must play at least \u003ccode\u003e1\u003c/code\u003e level.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epossible \u003d [1,0,1,0]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s look at all the levels that Alice can play up to:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIf Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has -1 + 1 - 1 \u003d -1 point.\u003c/li\u003e\n\t\u003cli\u003eIf Alice plays till level 1 and Bob plays the rest of the levels, Alice has 1 - 1 \u003d 0 points, while Bob has 1 - 1 \u003d 0 points.\u003c/li\u003e\n\t\u003cli\u003eIf Alice plays till level 2 and Bob plays the rest of the levels, Alice has 1 - 1 + 1 \u003d 1 point, while Bob has -1 point.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAlice must play a minimum of 1 level to gain more points.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epossible \u003d [1,1,1,1,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s look at all the levels that Alice can play up to:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIf Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has 4 points.\u003c/li\u003e\n\t\u003cli\u003eIf Alice plays till level 1 and Bob plays the rest of the levels, Alice has 2 points, while Bob has 3 points.\u003c/li\u003e\n\t\u003cli\u003eIf Alice plays till level 2 and Bob plays the rest of the levels, Alice has 3 points, while Bob has 2 points.\u003c/li\u003e\n\t\u003cli\u003eIf Alice plays till level 3 and Bob plays the rest of the levels, Alice has 4 points, while Bob has 1 point.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAlice must play a minimum of 3 levels to gain more points.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epossible \u003d [0,0]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e-1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only possible way is for both players to play 1 level each. Alice plays level 0 and loses 1 point. Bob plays level 1 and loses 1 point. As both players have equal points, Alice can\u0026#39;t gain more points than Bob.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u003d\u003d possible.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epossible[i]\u003c/code\u003e is either \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,0,1,0]\n[1,1,1,1,1]\n[0,0]",
    "formTitle": "[3096]Minimum Levels to Gain More Points",
    "frequency": 0.0,
    "frontendQuestionId": "3096",
    "hints": [
      "Change all \u003ccode\u003e0\u003c/code\u003e in possible array into \u003ccode\u003e-1\u003c/code\u003e.",
      "We need to find the shortest non-empty prefix of the new possible array such that the sum of elements in it is strictly larger than the remaining part."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumLevels",
      "params": [
        {
          "name": "possible",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3355",
    "similarQuestions": [
      "[{\"title\": \"Minimum Rounds to Complete All Tasks\", \"titleSlug\": \"minimum-rounds-to-complete-all-tasks\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5b8c\\u6210\\u6240\\u6709\\u4efb\\u52a1\\u9700\\u8981\\u7684\\u6700\\u5c11\\u8f6e\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,0,1,0]",
    "title": "Minimum Levels to Gain More Points",
    "titleSlug": "minimum-levels-to-gain-more-points"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cstring\u003e shortestSubstrings(vector\u003cstring\u003e\u0026 arr) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String[] shortestSubstrings(String[] arr) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def shortestSubstrings(self, arr):\n        \"\"\"\n        :type arr: List[str]\n        :rtype: List[str]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def shortestSubstrings(self, arr: List[str]) -\u003e List[str]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** shortestSubstrings(char** arr, int arrSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string[] ShortestSubstrings(string[] arr) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string[]} arr\n * @return {string[]}\n */\nvar shortestSubstrings \u003d function(arr) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function shortestSubstrings(arr: string[]): string[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String[] $arr\n     * @return String[]\n     */\n    function shortestSubstrings($arr) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func shortestSubstrings(_ arr: [String]) -\u003e [String] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun shortestSubstrings(arr: Array\u003cString\u003e): Array\u003cString\u003e {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cString\u003e shortestSubstrings(List\u003cString\u003e arr) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func shortestSubstrings(arr []string) []string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String[]} arr\n# @return {String[]}\ndef shortest_substrings(arr)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def shortestSubstrings(arr: Array[String]): Array[String] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn shortest_substrings(arr: Vec\u003cString\u003e) -\u003e Vec\u003cString\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (shortest-substrings arr)\n  (-\u003e (listof string?) (listof string?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec shortest_substrings(Arr :: [unicode:unicode_binary()]) -\u003e [unicode:unicode_binary()].\nshortest_substrings(Arr) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec shortest_substrings(arr :: [String.t]) :: [String.t]\n  def shortest_substrings(arr) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003earr\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e consisting of \u003cstrong\u003enon-empty\u003c/strong\u003e strings.\u003c/p\u003e\n\n\u003cp\u003eFind a string array \u003ccode\u003eanswer\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e such that:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eanswer[i]\u003c/code\u003e is the \u003cstrong\u003eshortest\u003c/strong\u003e \u003cspan data-keyword\u003d\"substring\"\u003esubstring\u003c/span\u003e of \u003ccode\u003earr[i]\u003c/code\u003e that does \u003cstrong\u003enot\u003c/strong\u003e occur as a substring in any other string in \u003ccode\u003earr\u003c/code\u003e. If multiple such substrings exist, \u003ccode\u003eanswer[i]\u003c/code\u003e should be the \u003cspan data-keyword\u003d\"lexicographically-smaller-string\"\u003elexicographically smallest\u003c/span\u003e. And if no such substring exists, \u003ccode\u003eanswer[i]\u003c/code\u003e should be an empty string.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe array \u003c/em\u003e\u003ccode\u003eanswer\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e arr \u003d [\u0026quot;cab\u0026quot;,\u0026quot;ad\u0026quot;,\u0026quot;bad\u0026quot;,\u0026quot;c\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [\u0026quot;ab\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;ba\u0026quot;,\u0026quot;\u0026quot;]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We have the following:\n- For the string \u0026quot;cab\u0026quot;, the shortest substring that does not occur in any other string is either \u0026quot;ca\u0026quot; or \u0026quot;ab\u0026quot;, we choose the lexicographically smaller substring, which is \u0026quot;ab\u0026quot;.\n- For the string \u0026quot;ad\u0026quot;, there is no substring that does not occur in any other string.\n- For the string \u0026quot;bad\u0026quot;, the shortest substring that does not occur in any other string is \u0026quot;ba\u0026quot;.\n- For the string \u0026quot;c\u0026quot;, there is no substring that does not occur in any other string.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e arr \u003d [\u0026quot;abc\u0026quot;,\u0026quot;bcd\u0026quot;,\u0026quot;abcd\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;abcd\u0026quot;]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We have the following:\n- For the string \u0026quot;abc\u0026quot;, there is no substring that does not occur in any other string.\n- For the string \u0026quot;bcd\u0026quot;, there is no substring that does not occur in any other string.\n- For the string \u0026quot;abcd\u0026quot;, the shortest substring that does not occur in any other string is \u0026quot;abcd\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d arr.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d arr[i].length \u0026lt;\u003d 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003earr[i]\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[\"cab\",\"ad\",\"bad\",\"c\"]\n[\"abc\",\"bcd\",\"abcd\"]",
    "formTitle": "[3076]Shortest Uncommon Substring in an Array",
    "frequency": 0.0,
    "frontendQuestionId": "3076",
    "hints": [
      "Try a brute force solution where you check every substring.",
      "Use a Hash map to keep track of the substrings."
    ],
    "level": 2,
    "metaData": {
      "name": "shortestSubstrings",
      "params": [
        {
          "name": "arr",
          "type": "string[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3356",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[\"cab\",\"ad\",\"bad\",\"c\"]",
    "title": "Shortest Uncommon Substring in an Array",
    "titleSlug": "shortest-uncommon-substring-in-an-array"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumDeletions(string word, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumDeletions(String word, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumDeletions(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumDeletions(self, word: str, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumDeletions(char* word, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumDeletions(string word, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumDeletions \u003d function(word, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumDeletions(word: string, k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumDeletions($word, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumDeletions(_ word: String, _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumDeletions(word: String, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumDeletions(String word, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumDeletions(word string, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_deletions(word, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumDeletions(word: String, k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_deletions(word: String, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-deletions word k)\n  (-\u003e string? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_deletions(Word :: unicode:unicode_binary(), K :: integer()) -\u003e integer().\nminimum_deletions(Word, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_deletions(word :: String.t, k :: integer) :: integer\n  def minimum_deletions(word, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003eword\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe consider \u003ccode\u003eword\u003c/code\u003e to be \u003cstrong\u003ek-special\u003c/strong\u003e if \u003ccode\u003e|freq(word[i]) - freq(word[j])| \u0026lt;\u003d k\u003c/code\u003e for all indices \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ej\u003c/code\u003e in the string.\u003c/p\u003e\n\n\u003cp\u003eHere, \u003ccode\u003efreq(x)\u003c/code\u003e denotes the \u003cspan data-keyword\u003d\"frequency-letter\"\u003efrequency\u003c/span\u003e of the character \u003ccode\u003ex\u003c/code\u003e in \u003ccode\u003eword\u003c/code\u003e, and \u003ccode\u003e|y|\u003c/code\u003e denotes the absolute value of \u003ccode\u003ey\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of characters you need to delete to make\u003c/em\u003e \u003ccode\u003eword\u003c/code\u003e \u003cstrong\u003e\u003cem\u003ek-special\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003eword \u003d \u0026quot;aabcaba\u0026quot;, k \u003d 0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e We can make \u003ccode\u003eword\u003c/code\u003e \u003ccode\u003e0\u003c/code\u003e-special by deleting \u003ccode\u003e2\u003c/code\u003e occurrences of \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e occurrence of \u003ccode\u003e\u0026quot;c\u0026quot;\u003c/code\u003e. Therefore, \u003ccode\u003eword\u003c/code\u003e becomes equal to \u003ccode\u003e\u0026quot;baba\u0026quot;\u003c/code\u003e where \u003ccode\u003efreq(\u0026#39;a\u0026#39;) \u003d\u003d freq(\u0026#39;b\u0026#39;) \u003d\u003d 2\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003eword \u003d \u0026quot;dabdcbdcdcd\u0026quot;, k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e We can make \u003ccode\u003eword\u003c/code\u003e \u003ccode\u003e2\u003c/code\u003e-special by deleting \u003ccode\u003e1\u003c/code\u003e occurrence of \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e occurrence of \u003ccode\u003e\u0026quot;d\u0026quot;\u003c/code\u003e. Therefore, \u003ccode\u003eword\u003c/code\u003e becomes equal to \u0026quot;bdcbdcdcd\u0026quot; where \u003ccode\u003efreq(\u0026#39;b\u0026#39;) \u003d\u003d 2\u003c/code\u003e, \u003ccode\u003efreq(\u0026#39;c\u0026#39;) \u003d\u003d 3\u003c/code\u003e, and \u003ccode\u003efreq(\u0026#39;d\u0026#39;) \u003d\u003d 4\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003eword \u003d \u0026quot;aaabaaa\u0026quot;, k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e We can make \u003ccode\u003eword\u003c/code\u003e \u003ccode\u003e2\u003c/code\u003e-special by deleting \u003ccode\u003e1\u003c/code\u003e occurrence of \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e. Therefore, \u003ccode\u003eword\u003c/code\u003e becomes equal to \u003ccode\u003e\u0026quot;aaaaaa\u0026quot;\u003c/code\u003e where each letter\u0026#39;s frequency is now uniformly \u003ccode\u003e6\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d word.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"aabcaba\"\n0\n\"dabdcbdcdcd\"\n2\n\"aaabaaa\"\n2",
    "formTitle": "[3085]Minimum Deletions to Make String K-Special",
    "frequency": 0.0,
    "frontendQuestionId": "3085",
    "hints": [
      "Count the frequency of each letter.",
      "Suppose we select several characters as the final answer, and let \u003ccode\u003ex\u003c/code\u003e be the character with the smallest frequency in the answer. It can be shown that out of the selected characters, the optimal solution will never delete an occurrence of character \u003ccode\u003ex\u003c/code\u003e to obtain the answer.",
      "We will fix a character \u003ccode\u003ec\u003c/code\u003e and assume that it will be the character with the smallest frequency in the answer. Suppose its frequency is \u003ccode\u003ex\u003c/code\u003e.",
      "Then, for every other character, we will count the number of occurrences that will be deleted. Suppose that the current character has \u003ccode\u003ey\u003c/code\u003e occurrences. \u003col\u003e \u003cli\u003eIf y \u003c x, we need to delete all of them.\u003c/li\u003e \u003cli\u003e if y \u003e x + k, we should delete y - x - k of such character.\u003c/li\u003e \u003cli\u003e Otherwise we don鈥檛 need to delete it.\u003c/li\u003e\u003c/ol\u003e"
    ],
    "level": 2,
    "metaData": {
      "name": "minimumDeletions",
      "params": [
        {
          "name": "word",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3360",
    "similarQuestions": [
      "[{\"title\": \"Minimum Deletions to Make Character Frequencies Unique\", \"titleSlug\": \"minimum-deletions-to-make-character-frequencies-unique\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5b57\\u7b26\\u9891\\u6b21\\u552f\\u4e00\\u7684\\u6700\\u5c0f\\u5220\\u9664\\u6b21\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"aabcaba\"\n0",
    "title": "Minimum Deletions to Make String K-Special",
    "titleSlug": "minimum-deletions-to-make-string-k-special"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string findLatestTime(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String findLatestTime(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findLatestTime(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def findLatestTime(self, s: str) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* findLatestTime(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string FindLatestTime(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar findLatestTime \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function findLatestTime(s: string): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function findLatestTime($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func findLatestTime(_ s: String) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun findLatestTime(s: String): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String findLatestTime(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func findLatestTime(s string) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {String}\ndef find_latest_time(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def findLatestTime(s: String): String \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn find_latest_time(s: String) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (find-latest-time s)\n  (-\u003e string? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec find_latest_time(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nfind_latest_time(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec find_latest_time(s :: String.t) :: String.t\n  def find_latest_time(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e representing a 12-hour format time where some of the digits (possibly none) are replaced with a \u003ccode\u003e\u0026quot;?\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e12-hour times are formatted as \u003ccode\u003e\u0026quot;HH:MM\u0026quot;\u003c/code\u003e, where \u003ccode\u003eHH\u003c/code\u003e is between \u003ccode\u003e00\u003c/code\u003e and \u003ccode\u003e11\u003c/code\u003e, and \u003ccode\u003eMM\u003c/code\u003e is between \u003ccode\u003e00\u003c/code\u003e and \u003ccode\u003e59\u003c/code\u003e. The earliest 12-hour time is \u003ccode\u003e00:00\u003c/code\u003e, and the latest is \u003ccode\u003e11:59\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou have to replace \u003cstrong\u003eall\u003c/strong\u003e the \u003ccode\u003e\u0026quot;?\u0026quot;\u003c/code\u003e characters in \u003ccode\u003es\u003c/code\u003e with digits such that the time we obtain by the resulting string is a \u003cstrong\u003evalid\u003c/strong\u003e 12-hour format time and is the \u003cstrong\u003elatest\u003c/strong\u003e possible.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe resulting string\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;1?:?4\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;11:54\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The latest 12-hour format time we can achieve by replacing \u003ccode\u003e\u0026quot;?\u0026quot;\u003c/code\u003e characters is \u003ccode\u003e\u0026quot;11:54\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;0?:5?\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;09:59\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The latest 12-hour format time we can achieve by replacing \u003ccode\u003e\u0026quot;?\u0026quot;\u003c/code\u003e characters is \u003ccode\u003e\u0026quot;09:59\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003es.length \u003d\u003d 5\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es[2]\u003c/code\u003e is equal to the character \u003ccode\u003e\u0026quot;:\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAll characters except \u003ccode\u003es[2]\u003c/code\u003e are digits or \u003ccode\u003e\u0026quot;?\u0026quot;\u003c/code\u003e characters.\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that there is \u003cstrong\u003eat least\u003c/strong\u003e one time between \u003ccode\u003e\u0026quot;00:00\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;11:59\u0026quot;\u003c/code\u003e that you can obtain after replacing the \u003ccode\u003e\u0026quot;?\u0026quot;\u003c/code\u003e characters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"1?:?4\"\n\"0?:5?\"",
    "formTitle": "[3114]Latest Time You Can Obtain After Replacing Characters",
    "frequency": 0.0,
    "frontendQuestionId": "3114",
    "hints": [
      "Try using a brute force approach.",
      "Iterate over all possible times that can be generated from the string and find the latest one."
    ],
    "level": 1,
    "metaData": {
      "name": "findLatestTime",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3361",
    "similarQuestions": [
      "[{\"title\": \"Latest Time by Replacing Hidden Digits\", \"titleSlug\": \"latest-time-by-replacing-hidden-digits\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u66ff\\u6362\\u9690\\u85cf\\u6570\\u5b57\\u5f97\\u5230\\u7684\\u6700\\u665a\\u65f6\\u95f4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"1?:?4\"",
    "title": "Latest Time You Can Obtain After Replacing Characters",
    "titleSlug": "latest-time-you-can-obtain-after-replacing-characters"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int medianOfUniquenessArray(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int medianOfUniquenessArray(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def medianOfUniquenessArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def medianOfUniquenessArray(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int medianOfUniquenessArray(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MedianOfUniquenessArray(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar medianOfUniquenessArray \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function medianOfUniquenessArray(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function medianOfUniquenessArray($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func medianOfUniquenessArray(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun medianOfUniquenessArray(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int medianOfUniquenessArray(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func medianOfUniquenessArray(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef median_of_uniqueness_array(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def medianOfUniquenessArray(nums: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn median_of_uniqueness_array(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (median-of-uniqueness-array nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec median_of_uniqueness_array(Nums :: [integer()]) -\u003e integer().\nmedian_of_uniqueness_array(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec median_of_uniqueness_array(nums :: [integer]) :: integer\n  def median_of_uniqueness_array(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e. The \u003cstrong\u003euniqueness array\u003c/strong\u003e of \u003ccode\u003enums\u003c/code\u003e is the sorted array that contains the number of distinct elements of all the \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarrays\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e. In other words, it is a sorted array consisting of \u003ccode\u003edistinct(nums[i..j])\u003c/code\u003e, for all \u003ccode\u003e0 \u0026lt;\u003d i \u0026lt;\u003d j \u0026lt; nums.length\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere, \u003ccode\u003edistinct(nums[i..j])\u003c/code\u003e denotes the number of distinct elements in the subarray that starts at index \u003ccode\u003ei\u003c/code\u003e and ends at index \u003ccode\u003ej\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003emedian\u003c/strong\u003e of the \u003cstrong\u003euniqueness array\u003c/strong\u003e of \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that the \u003cstrong\u003emedian\u003c/strong\u003e of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the \u003cstrong\u003esmaller\u003c/strong\u003e of the two values is taken.\u003c!-- notionvc: 7e0f5178-4273-4a82-95ce-3395297921dc --\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe uniqueness array of \u003ccode\u003enums\u003c/code\u003e is \u003ccode\u003e[distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]), distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])]\u003c/code\u003e which is equal to \u003ccode\u003e[1, 1, 1, 2, 2, 3]\u003c/code\u003e. The uniqueness array has a median of 1. Therefore, the answer is 1.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,4,3,4,5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe uniqueness array of \u003ccode\u003enums\u003c/code\u003e is \u003ccode\u003e[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]\u003c/code\u003e. The uniqueness array has a median of 2. Therefore, the answer is 2.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [4,3,5,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe uniqueness array of \u003ccode\u003enums\u003c/code\u003e is \u003ccode\u003e[1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\u003c/code\u003e. The uniqueness array has a median of 2. Therefore, the answer is 2.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3]\n[3,4,3,4,5]\n[4,3,5,4]",
    "formTitle": "[3134]Find the Median of the Uniqueness Array",
    "frequency": 0.0,
    "frontendQuestionId": "3134",
    "hints": [
      "Binary search over the answer.",
      "For a given \u003ccode\u003ex\u003c/code\u003e, you need to check if \u003ccode\u003ex\u003c/code\u003e is the median, to the left of the median, or to the right of the median. You can do that by counting the number of sub-arrays \u003ccode\u003enums[i鈥]\u003c/code\u003e such that \u003ccode\u003edistinct(num[i鈥]) \u003c\u003d x\u003c/code\u003e.",
      "Use the sliding window to solve the counting problem in the hint above."
    ],
    "level": 3,
    "metaData": {
      "name": "medianOfUniquenessArray",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3362",
    "similarQuestions": [
      "[{\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u627e\\u51fa\\u7b2c K \\u5c0f\\u7684\\u6570\\u5bf9\\u8ddd\\u79bb\", \"isPaidOnly\": false}, {\"title\": \"Total Appeal of A String\", \"titleSlug\": \"total-appeal-of-a-string\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5b57\\u7b26\\u4e32\\u7684\\u603b\\u5f15\\u529b\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,2,3]",
    "title": "Find the Median of the Uniqueness Array",
    "titleSlug": "find-the-median-of-the-uniqueness-array"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003clong long\u003e mostFrequentIDs(vector\u003cint\u003e\u0026 nums, vector\u003cint\u003e\u0026 freq) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long[] mostFrequentIDs(int[] nums, int[] freq) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def mostFrequentIDs(self, nums, freq):\n        \"\"\"\n        :type nums: List[int]\n        :type freq: List[int]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def mostFrequentIDs(self, nums: List[int], freq: List[int]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* mostFrequentIDs(int* nums, int numsSize, int* freq, int freqSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long[] MostFrequentIDs(int[] nums, int[] freq) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[]} freq\n * @return {number[]}\n */\nvar mostFrequentIDs \u003d function(nums, freq) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function mostFrequentIDs(nums: number[], freq: number[]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $freq\n     * @return Integer[]\n     */\n    function mostFrequentIDs($nums, $freq) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func mostFrequentIDs(_ nums: [Int], _ freq: [Int]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun mostFrequentIDs(nums: IntArray, freq: IntArray): LongArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e mostFrequentIDs(List\u003cint\u003e nums, List\u003cint\u003e freq) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func mostFrequentIDs(nums []int, freq []int) []int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[]} freq\n# @return {Integer[]}\ndef most_frequent_i_ds(nums, freq)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def mostFrequentIDs(nums: Array[Int], freq: Array[Int]): Array[Long] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn most_frequent_i_ds(nums: Vec\u003ci32\u003e, freq: Vec\u003ci32\u003e) -\u003e Vec\u003ci64\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (most-frequent-i-ds nums freq)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec most_frequent_i_ds(Nums :: [integer()], Freq :: [integer()]) -\u003e [integer()].\nmost_frequent_i_ds(Nums, Freq) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec most_frequent_i_ds(nums :: [integer], freq :: [integer]) :: [integer]\n  def most_frequent_i_ds(nums, freq) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThe problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, \u003ccode\u003enums\u003c/code\u003e and \u003ccode\u003efreq\u003c/code\u003e, of equal length \u003ccode\u003en\u003c/code\u003e. Each element in \u003ccode\u003enums\u003c/code\u003e represents an ID, and the corresponding element in \u003ccode\u003efreq\u003c/code\u003e indicates how many times that ID should be added to or removed from the collection at each step.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eAddition of IDs:\u003c/strong\u003e If \u003ccode\u003efreq[i]\u003c/code\u003e is positive, it means \u003ccode\u003efreq[i]\u003c/code\u003e IDs with the value \u003ccode\u003enums[i]\u003c/code\u003e are added to the collection at step \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eRemoval of IDs:\u003c/strong\u003e If \u003ccode\u003efreq[i]\u003c/code\u003e is negative, it means \u003ccode\u003e-freq[i]\u003c/code\u003e IDs with the value \u003ccode\u003enums[i]\u003c/code\u003e are removed from the collection at step \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn an array \u003ccode\u003eans\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, where \u003ccode\u003eans[i]\u003c/code\u003e represents the \u003cstrong\u003ecount\u003c/strong\u003e of the \u003cem\u003emost frequent ID\u003c/em\u003e in the collection after the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e\u0026nbsp;step. If the collection is empty at any step, \u003ccode\u003eans[i]\u003c/code\u003e should be 0 for that step.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [2,3,2,1], freq \u003d [3,2,-3,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[3,3,2,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAfter step 0, we have 3 IDs with the value of 2. So \u003ccode\u003eans[0] \u003d 3\u003c/code\u003e.\u003cbr /\u003e\nAfter step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So \u003ccode\u003eans[1] \u003d 3\u003c/code\u003e.\u003cbr /\u003e\nAfter step 2, we have 2 IDs with the value of 3. So \u003ccode\u003eans[2] \u003d 2\u003c/code\u003e.\u003cbr /\u003e\nAfter step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So \u003ccode\u003eans[3] \u003d 2\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [5,5,3], freq \u003d [2,-2,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[2,0,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAfter step 0, we have 2 IDs with the value of 5. So \u003ccode\u003eans[0] \u003d 2\u003c/code\u003e.\u003cbr /\u003e\nAfter step 1, there are no IDs. So \u003ccode\u003eans[1] \u003d 0\u003c/code\u003e.\u003cbr /\u003e\nAfter step 2, we have 1 ID with the value of 3. So \u003ccode\u003eans[2] \u003d 1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u003d\u003d freq.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e5\u003c/sup\u003e \u0026lt;\u003d freq[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003efreq[i] !\u003d 0\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated\u003c!-- notionvc: a136b55a-f319-4fa6-9247-11be9f3b1db8 --\u003e such that the occurrences of an ID will not be negative in any step.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,3,2,1]\n[3,2,-3,1]\n[5,5,3]\n[2,-2,1]",
    "formTitle": "[3092]Most Frequent IDs",
    "frequency": 0.0,
    "frontendQuestionId": "3092",
    "hints": [
      "Use an ordered set for maintaining the occurrences of each ID.",
      "After step \u003ccode\u003ei\u003c/code\u003e find the occurrences of \u003ccode\u003enums[i]\u003c/code\u003e.",
      "Change the occurrences of \u003ccode\u003enums[i]\u003c/code\u003e in the ordered set."
    ],
    "level": 2,
    "metaData": {
      "name": "mostFrequentIDs",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "freq",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3363",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "[2,3,2,1]\n[3,2,-3,1]",
    "title": "Most Frequent IDs",
    "titleSlug": "most-frequent-ids"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumValueSum(vector\u003cint\u003e\u0026 nums, vector\u003cint\u003e\u0026 andValues) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumValueSum(int[] nums, int[] andValues) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumValueSum(self, nums, andValues):\n        \"\"\"\n        :type nums: List[int]\n        :type andValues: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumValueSum(self, nums: List[int], andValues: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumValueSum(int* nums, int numsSize, int* andValues, int andValuesSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumValueSum(int[] nums, int[] andValues) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[]} andValues\n * @return {number}\n */\nvar minimumValueSum \u003d function(nums, andValues) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumValueSum(nums: number[], andValues: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $andValues\n     * @return Integer\n     */\n    function minimumValueSum($nums, $andValues) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumValueSum(_ nums: [Int], _ andValues: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumValueSum(nums: IntArray, andValues: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumValueSum(List\u003cint\u003e nums, List\u003cint\u003e andValues) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumValueSum(nums []int, andValues []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[]} and_values\n# @return {Integer}\ndef minimum_value_sum(nums, and_values)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumValueSum(nums: Array[Int], andValues: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_value_sum(nums: Vec\u003ci32\u003e, and_values: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-value-sum nums andValues)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_value_sum(Nums :: [integer()], AndValues :: [integer()]) -\u003e integer().\nminimum_value_sum(Nums, AndValues) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_value_sum(nums :: [integer], and_values :: [integer]) :: integer\n  def minimum_value_sum(nums, and_values) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two arrays \u003ccode\u003enums\u003c/code\u003e and \u003ccode\u003eandValues\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003em\u003c/code\u003e respectively.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003evalue\u003c/strong\u003e of an array is equal to the \u003cstrong\u003elast\u003c/strong\u003e element of that array.\u003c/p\u003e\n\n\u003cp\u003eYou have to divide \u003ccode\u003enums\u003c/code\u003e into \u003ccode\u003em\u003c/code\u003e \u003cstrong\u003edisjoint contiguous\u003c/strong\u003e \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarrays\u003c/span\u003e such that for the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e subarray \u003ccode\u003e[l\u003csub\u003ei\u003c/sub\u003e, r\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e, the bitwise \u003ccode\u003eAND\u003c/code\u003e of the subarray elements is equal to \u003ccode\u003eandValues[i]\u003c/code\u003e, in other words, \u003ccode\u003enums[l\u003csub\u003ei\u003c/sub\u003e] \u0026amp; nums[l\u003csub\u003ei\u003c/sub\u003e + 1] \u0026amp; ... \u0026amp; nums[r\u003csub\u003ei\u003c/sub\u003e] \u003d\u003d andValues[i]\u003c/code\u003e for all \u003ccode\u003e1 \u0026lt;\u003d i \u0026lt;\u003d m\u003c/code\u003e, where \u003ccode\u003e\u0026amp;\u003c/code\u003e represents the bitwise \u003ccode\u003eAND\u003c/code\u003e operator.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e possible sum of the \u003cstrong\u003evalues\u003c/strong\u003e of the \u003c/em\u003e\u003ccode\u003em\u003c/code\u003e\u003cem\u003e subarrays \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e\u003cem\u003e is divided into\u003c/em\u003e. \u003cem\u003eIf it is not possible to divide \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e\u003cem\u003e into \u003c/em\u003e\u003ccode\u003em\u003c/code\u003e\u003cem\u003e subarrays satisfying these conditions, return\u003c/em\u003e \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,4,3,3,2], andValues \u003d [0,3,3,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e12\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only possible way to divide \u003ccode\u003enums\u003c/code\u003e is:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e[1,4]\u003c/code\u003e as \u003ccode\u003e1 \u0026amp; 4 \u003d\u003d 0\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e[3]\u003c/code\u003e as the bitwise \u003ccode\u003eAND\u003c/code\u003e of a single element subarray is that element itself.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e[3]\u003c/code\u003e as the bitwise \u003ccode\u003eAND\u003c/code\u003e of a single element subarray is that element itself.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e[2]\u003c/code\u003e as the bitwise \u003ccode\u003eAND\u003c/code\u003e of a single element subarray is that element itself.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe sum of the values for these subarrays is \u003ccode\u003e4 + 3 + 3 + 2 \u003d 12\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [2,3,5,7,7,7,5], andValues \u003d [0,7,5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e17\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are three ways to divide \u003ccode\u003enums\u003c/code\u003e:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e[[2,3,5],[7,7,7],[5]]\u003c/code\u003e with the sum of the values \u003ccode\u003e5 + 7 + 5 \u003d\u003d 17\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e[[2,3,5,7],[7,7],[5]]\u003c/code\u003e with the sum of the values \u003ccode\u003e7 + 7 + 5 \u003d\u003d 19\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e[[2,3,5,7,7],[7],[5]]\u003c/code\u003e with the sum of the values \u003ccode\u003e7 + 7 + 5 \u003d\u003d 19\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe minimum possible sum of the values is \u003ccode\u003e17\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4], andValues \u003d [2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e-1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe bitwise \u003ccode\u003eAND\u003c/code\u003e of the entire array \u003ccode\u003enums\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e. As there is no possible way to divide \u003ccode\u003enums\u003c/code\u003e into a single subarray to have the bitwise \u003ccode\u003eAND\u003c/code\u003e of elements \u003ccode\u003e2\u003c/code\u003e, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m \u003d\u003d andValues.length \u0026lt;\u003d min(n, 10)\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt; 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d andValues[j] \u0026lt; 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,4,3,3,2]\n[0,3,3,2]\n[2,3,5,7,7,7,5]\n[0,7,5]\n[1,2,3,4]\n[2]",
    "formTitle": "[3117]Minimum Sum of Values by Dividing Array",
    "frequency": 0.0,
    "frontendQuestionId": "3117",
    "hints": [
      "Let \u003ccode\u003edp[i][j]\u003c/code\u003e be the optimal answer to split  \u003ccode\u003enums[0..(i - 1)]\u003c/code\u003e into the first \u003ccode\u003ej\u003c/code\u003e andValues.",
      "\u003ccode\u003edp[i][j] \u003d min(dp[(i - z)][j - 1]) + nums[i - 1]\u003c/code\u003e over all \u003ccode\u003ex \u003c\u003d z \u003c\u003d y\u003c/code\u003e and \u003ccode\u003edp[0][0] \u003d 0\u003c/code\u003e, where \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e are the longest and shortest subarrays ending with \u003ccode\u003enums[i - 1]\u003c/code\u003e and the bitwise-and of all the values in it is \u003ccode\u003eandValues[j - 1]\u003c/code\u003e.",
      "The answer is \u003ccode\u003edp[n][m]\u003c/code\u003e.",
      "To calculate \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e, we can use binary search (or sliding window). Note that the more values we have, the smaller the \u003ccode\u003eAND\u003c/code\u003e value is.",
      "To calculate the result, we need to support RMQ (range minimum query). Segment tree is one way to do it in \u003ccode\u003eO(log(n))\u003c/code\u003e. But we can use Monotonic Queue since the ranges are indeed 鈥渟liding to right鈥� which can be reduced to the classical minimum value in sliding window problem, for a \u003ccode\u003eO(n)\u003c/code\u003e solution."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumValueSum",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "andValues",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3364",
    "similarQuestions": [
      "[{\"title\": \"Minimum Cost to Split an Array\", \"titleSlug\": \"minimum-cost-to-split-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u62c6\\u5206\\u6570\\u7ec4\\u7684\\u6700\\u5c0f\\u4ee3\\u4ef7\", \"isPaidOnly\": false}, {\"title\": \"Split With Minimum Sum\", \"titleSlug\": \"split-with-minimum-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6700\\u5c0f\\u548c\\u5206\\u5272\", \"isPaidOnly\": false}, {\"title\": \"Find Subarray With Bitwise OR Closest to K\", \"titleSlug\": \"find-subarray-with-bitwise-or-closest-to-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u627e\\u5230\\u6309\\u4f4d\\u6216\\u6700\\u63a5\\u8fd1 K \\u7684\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,4,3,3,2]\n[0,3,3,2]",
    "title": "Minimum Sum of Values by Dividing Array",
    "titleSlug": "minimum-sum-of-values-by-dividing-array"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int sumOfEncryptedInt(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int sumOfEncryptedInt(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def sumOfEncryptedInt(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def sumOfEncryptedInt(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int sumOfEncryptedInt(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int SumOfEncryptedInt(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfEncryptedInt \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function sumOfEncryptedInt(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfEncryptedInt($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func sumOfEncryptedInt(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun sumOfEncryptedInt(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int sumOfEncryptedInt(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func sumOfEncryptedInt(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_encrypted_int(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def sumOfEncryptedInt(nums: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn sum_of_encrypted_int(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (sum-of-encrypted-int nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec sum_of_encrypted_int(Nums :: [integer()]) -\u003e integer().\nsum_of_encrypted_int(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec sum_of_encrypted_int(nums :: [integer]) :: integer\n  def sum_of_encrypted_int(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e containing \u003cstrong\u003epositive\u003c/strong\u003e integers. We define a function \u003ccode\u003eencrypt\u003c/code\u003e such that \u003ccode\u003eencrypt(x)\u003c/code\u003e replaces \u003cstrong\u003eevery\u003c/strong\u003e digit in \u003ccode\u003ex\u003c/code\u003e with the \u003cstrong\u003elargest\u003c/strong\u003e digit in \u003ccode\u003ex\u003c/code\u003e. For example, \u003ccode\u003eencrypt(523) \u003d 555\u003c/code\u003e and \u003ccode\u003eencrypt(213) \u003d 333\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003esum \u003c/strong\u003eof encrypted elements\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003enums \u003d [1,2,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The encrypted elements are\u0026nbsp;\u003ccode\u003e[1,2,3]\u003c/code\u003e. The sum of encrypted elements is \u003ccode\u003e1 + 2 + 3 \u003d\u003d 6\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003enums \u003d [10,21,31]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"\u003e66\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The encrypted elements are \u003ccode\u003e[11,22,33]\u003c/code\u003e. The sum of encrypted elements is \u003ccode\u003e11 + 22 + 33 \u003d\u003d 66\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3]\n[10,21,31]",
    "formTitle": "[3079]Find the Sum of Encrypted Integers",
    "frequency": 0.0,
    "frontendQuestionId": "3079",
    "hints": [
      "Encrypted numbers are of the form \u003ccode\u003e11鈥�1 * maxDigit\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "sumOfEncryptedInt",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3367",
    "similarQuestions": [
      "[{\"title\": \"Encrypt and Decrypt Strings\", \"titleSlug\": \"encrypt-and-decrypt-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u52a0\\u5bc6\\u89e3\\u5bc6\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,2,3]",
    "title": "Find the Sum of Encrypted Integers",
    "titleSlug": "find-the-sum-of-encrypted-integers"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int sumOfTheDigitsOfHarshadNumber(int x) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int sumOfTheDigitsOfHarshadNumber(int x) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def sumOfTheDigitsOfHarshadNumber(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def sumOfTheDigitsOfHarshadNumber(self, x: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int sumOfTheDigitsOfHarshadNumber(int x) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int SumOfTheDigitsOfHarshadNumber(int x) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar sumOfTheDigitsOfHarshadNumber \u003d function(x) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function sumOfTheDigitsOfHarshadNumber(x: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function sumOfTheDigitsOfHarshadNumber($x) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func sumOfTheDigitsOfHarshadNumber(_ x: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun sumOfTheDigitsOfHarshadNumber(x: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int sumOfTheDigitsOfHarshadNumber(int x) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func sumOfTheDigitsOfHarshadNumber(x int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} x\n# @return {Integer}\ndef sum_of_the_digits_of_harshad_number(x)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def sumOfTheDigitsOfHarshadNumber(x: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn sum_of_the_digits_of_harshad_number(x: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (sum-of-the-digits-of-harshad-number x)\n  (-\u003e exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec sum_of_the_digits_of_harshad_number(X :: integer()) -\u003e integer().\nsum_of_the_digits_of_harshad_number(X) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec sum_of_the_digits_of_harshad_number(x :: integer) :: integer\n  def sum_of_the_digits_of_harshad_number(x) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eAn integer divisible by the \u003cstrong\u003esum\u003c/strong\u003e of its digits is said to be a \u003cstrong\u003eHarshad\u003c/strong\u003e number. You are given an integer \u003ccode\u003ex\u003c/code\u003e. Return\u003cem\u003e the sum of the digits \u003c/em\u003eof\u003cem\u003e \u003c/em\u003e\u003ccode\u003ex\u003c/code\u003e\u003cem\u003e \u003c/em\u003eif\u003cem\u003e \u003c/em\u003e\u003ccode\u003ex\u003c/code\u003e\u003cem\u003e \u003c/em\u003eis a \u003cstrong\u003eHarshad\u003c/strong\u003e number, otherwise, return\u003cem\u003e \u003c/em\u003e\u003ccode\u003e-1\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ex \u003d 18\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e9\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe sum of digits of \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003e9\u003c/code\u003e. \u003ccode\u003e18\u003c/code\u003e is divisible by \u003ccode\u003e9\u003c/code\u003e. So \u003ccode\u003e18\u003c/code\u003e is a Harshad number and the answer is \u003ccode\u003e9\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ex \u003d 23\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e-1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe sum of digits of \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003e5\u003c/code\u003e. \u003ccode\u003e23\u003c/code\u003e is not divisible by \u003ccode\u003e5\u003c/code\u003e. So \u003ccode\u003e23\u003c/code\u003e is not a Harshad number and the answer is \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d x \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "18\n23",
    "formTitle": "[3099]Harshad Number",
    "frequency": 0.0,
    "frontendQuestionId": "3099",
    "hints": [
      "Use a while loop and divide \u003ccode\u003ex\u003c/code\u003e to \u003ccode\u003e10\u003c/code\u003e to find the sum of the digits of \u003ccode\u003ex\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "sumOfTheDigitsOfHarshadNumber",
      "params": [
        {
          "name": "x",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3371",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "18",
    "title": "Harshad Number",
    "titleSlug": "harshad-number"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int longestMonotonicSubarray(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int longestMonotonicSubarray(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def longestMonotonicSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def longestMonotonicSubarray(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int longestMonotonicSubarray(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int LongestMonotonicSubarray(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestMonotonicSubarray \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function longestMonotonicSubarray(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestMonotonicSubarray($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func longestMonotonicSubarray(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun longestMonotonicSubarray(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int longestMonotonicSubarray(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func longestMonotonicSubarray(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef longest_monotonic_subarray(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def longestMonotonicSubarray(nums: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn longest_monotonic_subarray(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (longest-monotonic-subarray nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec longest_monotonic_subarray(Nums :: [integer()]) -\u003e integer().\nlongest_monotonic_subarray(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec longest_monotonic_subarray(nums :: [integer]) :: integer\n  def longest_monotonic_subarray(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array of integers \u003ccode\u003enums\u003c/code\u003e. Return \u003cem\u003ethe length of the \u003cstrong\u003elongest\u003c/strong\u003e \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarray\u003c/span\u003e of \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e\u003cem\u003e which is either \u003cstrong\u003e\u003cspan data-keyword\u003d\"strictly-increasing-array\"\u003estrictly increasing\u003c/span\u003e\u003c/strong\u003e or \u003cstrong\u003e\u003cspan data-keyword\u003d\"strictly-decreasing-array\"\u003estrictly decreasing\u003c/span\u003e\u003c/strong\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,4,3,3,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe strictly increasing subarrays of \u003ccode\u003enums\u003c/code\u003e are \u003ccode\u003e[1]\u003c/code\u003e, \u003ccode\u003e[2]\u003c/code\u003e, \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[4]\u003c/code\u003e, and \u003ccode\u003e[1,4]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe strictly decreasing subarrays of \u003ccode\u003enums\u003c/code\u003e are \u003ccode\u003e[1]\u003c/code\u003e, \u003ccode\u003e[2]\u003c/code\u003e, \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[4]\u003c/code\u003e, \u003ccode\u003e[3,2]\u003c/code\u003e, and \u003ccode\u003e[4,3]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHence, we return \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,3,3,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe strictly increasing subarrays of \u003ccode\u003enums\u003c/code\u003e are \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[3]\u003c/code\u003e, and \u003ccode\u003e[3]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe strictly decreasing subarrays of \u003ccode\u003enums\u003c/code\u003e are \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[3]\u003c/code\u003e, and \u003ccode\u003e[3]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHence, we return \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,2,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe strictly increasing subarrays of \u003ccode\u003enums\u003c/code\u003e are \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[2]\u003c/code\u003e, and \u003ccode\u003e[1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe strictly decreasing subarrays of \u003ccode\u003enums\u003c/code\u003e are \u003ccode\u003e[3]\u003c/code\u003e, \u003ccode\u003e[2]\u003c/code\u003e, \u003ccode\u003e[1]\u003c/code\u003e, \u003ccode\u003e[3,2]\u003c/code\u003e, \u003ccode\u003e[2,1]\u003c/code\u003e, and \u003ccode\u003e[3,2,1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHence, we return \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,4,3,3,2]\n[3,3,3,3]\n[3,2,1]",
    "formTitle": "[3105]Longest Strictly Increasing or Strictly Decreasing Subarray",
    "frequency": 0.0,
    "frontendQuestionId": "3105",
    "hints": [],
    "level": 1,
    "metaData": {
      "name": "longestMonotonicSubarray",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3372",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,4,3,3,2]",
    "title": "Longest Strictly Increasing or Strictly Decreasing Subarray",
    "titleSlug": "longest-strictly-increasing-or-strictly-decreasing-subarray"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumPrimeDifference(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumPrimeDifference(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumPrimeDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumPrimeDifference(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumPrimeDifference(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumPrimeDifference(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumPrimeDifference \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumPrimeDifference(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumPrimeDifference($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumPrimeDifference(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumPrimeDifference(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumPrimeDifference(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumPrimeDifference(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_prime_difference(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumPrimeDifference(nums: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_prime_difference(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-prime-difference nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_prime_difference(Nums :: [integer()]) -\u003e integer().\nmaximum_prime_difference(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_prime_difference(nums :: [integer]) :: integer\n  def maximum_prime_difference(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn an integer that is the \u003cstrong\u003emaximum\u003c/strong\u003e distance between the \u003cstrong\u003eindices\u003c/strong\u003e of two (not necessarily different) prime numbers in \u003ccode\u003enums\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [4,2,9,5,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e \u003ccode\u003enums[1]\u003c/code\u003e, \u003ccode\u003enums[3]\u003c/code\u003e, and \u003ccode\u003enums[4]\u003c/code\u003e are prime. So the answer is \u003ccode\u003e|4 - 1| \u003d 3\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [4,8,2,8]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e \u003ccode\u003enums[2]\u003c/code\u003e is prime. Because there is just one prime number, the answer is \u003ccode\u003e|2 - 2| \u003d 0\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 3 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that the number of prime numbers in the \u003ccode\u003enums\u003c/code\u003e is at least one.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[4,2,9,5,3]\n[4,8,2,8]",
    "formTitle": "[3115]Maximum Prime Difference",
    "frequency": 0.0,
    "frontendQuestionId": "3115",
    "hints": [
      "Find all prime numbers in the \u003ccode\u003enums\u003c/code\u003e.",
      "Find the first and the last prime number in the \u003ccode\u003enums\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumPrimeDifference",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3373",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[4,2,9,5,3]",
    "title": "Maximum Prime Difference",
    "titleSlug": "maximum-prime-difference"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long countAlternatingSubarrays(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long countAlternatingSubarrays(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countAlternatingSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countAlternatingSubarrays(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long countAlternatingSubarrays(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long CountAlternatingSubarrays(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countAlternatingSubarrays \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countAlternatingSubarrays(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countAlternatingSubarrays($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countAlternatingSubarrays(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countAlternatingSubarrays(nums: IntArray): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countAlternatingSubarrays(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countAlternatingSubarrays(nums []int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_alternating_subarrays(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countAlternatingSubarrays(nums: Array[Int]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_alternating_subarrays(nums: Vec\u003ci32\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-alternating-subarrays nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_alternating_subarrays(Nums :: [integer()]) -\u003e integer().\ncount_alternating_subarrays(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_alternating_subarrays(nums :: [integer]) :: integer\n  def count_alternating_subarrays(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cspan data-keyword\u003d\"binary-array\"\u003ebinary array\u003c/span\u003e \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe call a \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarray\u003c/span\u003e \u003cstrong\u003ealternating\u003c/strong\u003e if \u003cstrong\u003eno\u003c/strong\u003e two \u003cstrong\u003eadjacent\u003c/strong\u003e elements in the subarray have the \u003cstrong\u003esame\u003c/strong\u003e value.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe number of alternating subarrays in \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [0,1,1,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following subarrays are alternating: \u003ccode\u003e[0]\u003c/code\u003e, \u003ccode\u003e[1]\u003c/code\u003e, \u003ccode\u003e[1]\u003c/code\u003e, \u003ccode\u003e[1]\u003c/code\u003e, and \u003ccode\u003e[0,1]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,0,1,0]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e10\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eEvery subarray of the array is alternating. There are 10 possible subarrays that we can choose.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i]\u003c/code\u003e is either \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[0,1,1,1]\n[1,0,1,0]",
    "formTitle": "[3101]Count Alternating Subarrays",
    "frequency": 0.0,
    "frontendQuestionId": "3101",
    "hints": [
      "Try using dynamic programming.",
      "Let \u003ccode\u003edp[i]\u003c/code\u003e be the number of alternating subarrays ending at index \u003ccode\u003ei\u003c/code\u003e.",
      "The final answer is the sum of \u003ccode\u003edp[i]\u003c/code\u003e over all  indices \u003ccode\u003ei\u003c/code\u003e from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "countAlternatingSubarrays",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3374",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[0,1,1,1]",
    "title": "Count Alternating Subarrays",
    "titleSlug": "count-alternating-subarrays"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long findKthSmallest(vector\u003cint\u003e\u0026 coins, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long findKthSmallest(int[] coins, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findKthSmallest(self, coins, k):\n        \"\"\"\n        :type coins: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def findKthSmallest(self, coins: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long findKthSmallest(int* coins, int coinsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long FindKthSmallest(int[] coins, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} coins\n * @param {number} k\n * @return {number}\n */\nvar findKthSmallest \u003d function(coins, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function findKthSmallest(coins: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthSmallest($coins, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func findKthSmallest(_ coins: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun findKthSmallest(coins: IntArray, k: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int findKthSmallest(List\u003cint\u003e coins, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func findKthSmallest(coins []int, k int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} coins\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_smallest(coins, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def findKthSmallest(coins: Array[Int], k: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn find_kth_smallest(coins: Vec\u003ci32\u003e, k: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (find-kth-smallest coins k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec find_kth_smallest(Coins :: [integer()], K :: integer()) -\u003e integer().\nfind_kth_smallest(Coins, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec find_kth_smallest(coins :: [integer], k :: integer) :: integer\n  def find_kth_smallest(coins, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003ecoins\u003c/code\u003e representing coins of different denominations and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou have an infinite number of coins of each denomination. However, you are \u003cstrong\u003enot allowed\u003c/strong\u003e to combine coins of different denominations.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003ccode\u003ek\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e \u003cstrong\u003esmallest\u003c/strong\u003e amount that can be made using these coins.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003ecoins \u003d [3,6,9], k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e 9\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The given coins can make the following amounts:\u003cbr /\u003e\nCoin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.\u003cbr /\u003e\nCoin 6 produces multiples of 6: 6, 12, 18, 24, etc.\u003cbr /\u003e\nCoin 9 produces multiples of 9: 9, 18, 27, 36, etc.\u003cbr /\u003e\nAll of the coins combined produce: 3, 6, \u003cu\u003e\u003cstrong\u003e9\u003c/strong\u003e\u003c/u\u003e, 12, 15, etc.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e coins \u003d [5,2], k \u003d 7\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e 12 \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The given coins can make the following amounts:\u003cbr /\u003e\nCoin 5 produces multiples of 5: 5, 10, 15, 20, etc.\u003cbr /\u003e\nCoin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.\u003cbr /\u003e\nAll of the coins combined produce: 2, 4, 5, 6, 8, 10, \u003cu\u003e\u003cstrong\u003e12\u003c/strong\u003e\u003c/u\u003e, 14, 15, etc.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d coins.length \u0026lt;\u003d 15\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d coins[i] \u0026lt;\u003d 25\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 2 * 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ecoins\u003c/code\u003e contains pairwise distinct integers.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,6,9]\n3\n[5,2]\n7",
    "formTitle": "[3116]Kth Smallest Amount With Single Denomination Combination",
    "frequency": 0.0,
    "frontendQuestionId": "3116",
    "hints": [
      "Binary search the answer \u003ccode\u003ex\u003c/code\u003e.",
      "Use the inclusion-exclusion principle to count the number of distinct amounts that can be made up to \u003ccode\u003ex\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "findKthSmallest",
      "params": [
        {
          "name": "coins",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3375",
    "similarQuestions": [
      "[{\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u4e58\\u6cd5\\u8868\\u4e2d\\u7b2ck\\u5c0f\\u7684\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[3,6,9]\n3",
    "title": "Kth Smallest Amount With Single Denomination Combination",
    "titleSlug": "kth-smallest-amount-with-single-denomination-combination"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e stringIndices(vector\u003cstring\u003e\u0026 wordsContainer, vector\u003cstring\u003e\u0026 wordsQuery) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] stringIndices(String[] wordsContainer, String[] wordsQuery) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def stringIndices(self, wordsContainer, wordsQuery):\n        \"\"\"\n        :type wordsContainer: List[str]\n        :type wordsQuery: List[str]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def stringIndices(self, wordsContainer: List[str], wordsQuery: List[str]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* stringIndices(char** wordsContainer, int wordsContainerSize, char** wordsQuery, int wordsQuerySize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] StringIndices(string[] wordsContainer, string[] wordsQuery) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string[]} wordsContainer\n * @param {string[]} wordsQuery\n * @return {number[]}\n */\nvar stringIndices \u003d function(wordsContainer, wordsQuery) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function stringIndices(wordsContainer: string[], wordsQuery: string[]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String[] $wordsContainer\n     * @param String[] $wordsQuery\n     * @return Integer[]\n     */\n    function stringIndices($wordsContainer, $wordsQuery) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func stringIndices(_ wordsContainer: [String], _ wordsQuery: [String]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun stringIndices(wordsContainer: Array\u003cString\u003e, wordsQuery: Array\u003cString\u003e): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e stringIndices(List\u003cString\u003e wordsContainer, List\u003cString\u003e wordsQuery) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func stringIndices(wordsContainer []string, wordsQuery []string) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String[]} words_container\n# @param {String[]} words_query\n# @return {Integer[]}\ndef string_indices(words_container, words_query)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def stringIndices(wordsContainer: Array[String], wordsQuery: Array[String]): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn string_indices(words_container: Vec\u003cString\u003e, words_query: Vec\u003cString\u003e) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (string-indices wordsContainer wordsQuery)\n  (-\u003e (listof string?) (listof string?) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec string_indices(WordsContainer :: [unicode:unicode_binary()], WordsQuery :: [unicode:unicode_binary()]) -\u003e [integer()].\nstring_indices(WordsContainer, WordsQuery) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec string_indices(words_container :: [String.t], words_query :: [String.t]) :: [integer]\n  def string_indices(words_container, words_query) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two arrays of strings \u003ccode\u003ewordsContainer\u003c/code\u003e and \u003ccode\u003ewordsQuery\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor each \u003ccode\u003ewordsQuery[i]\u003c/code\u003e, you need to find a string from \u003ccode\u003ewordsContainer\u003c/code\u003e that has the \u003cstrong\u003elongest common suffix\u003c/strong\u003e with \u003ccode\u003ewordsQuery[i]\u003c/code\u003e. If there are two or more strings in \u003ccode\u003ewordsContainer\u003c/code\u003e that share the longest common suffix, find the string that is the \u003cstrong\u003esmallest\u003c/strong\u003e in length. If there are two or more such strings that have the \u003cstrong\u003esame\u003c/strong\u003e smallest length, find the one that occurred \u003cstrong\u003eearlier\u003c/strong\u003e in \u003ccode\u003ewordsContainer\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean array of integers \u003c/em\u003e\u003ccode\u003eans\u003c/code\u003e\u003cem\u003e, where \u003c/em\u003e\u003ccode\u003eans[i]\u003c/code\u003e\u003cem\u003e is the index of the string in \u003c/em\u003e\u003ccode\u003ewordsContainer\u003c/code\u003e\u003cem\u003e that has the \u003cstrong\u003elongest common suffix\u003c/strong\u003e with \u003c/em\u003e\u003ccode\u003ewordsQuery[i]\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ewordsContainer \u003d [\u0026quot;abcd\u0026quot;,\u0026quot;bcd\u0026quot;,\u0026quot;xbcd\u0026quot;], wordsQuery \u003d [\u0026quot;cd\u0026quot;,\u0026quot;bcd\u0026quot;,\u0026quot;xyz\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[1,1,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s look at each \u003ccode\u003ewordsQuery[i]\u003c/code\u003e separately:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor \u003ccode\u003ewordsQuery[0] \u003d \u0026quot;cd\u0026quot;\u003c/code\u003e, strings from \u003ccode\u003ewordsContainer\u003c/code\u003e that share the longest common suffix \u003ccode\u003e\u0026quot;cd\u0026quot;\u003c/code\u003e are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\u003c/li\u003e\n\t\u003cli\u003eFor \u003ccode\u003ewordsQuery[1] \u003d \u0026quot;bcd\u0026quot;\u003c/code\u003e, strings from \u003ccode\u003ewordsContainer\u003c/code\u003e that share the longest common suffix \u003ccode\u003e\u0026quot;bcd\u0026quot;\u003c/code\u003e are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\u003c/li\u003e\n\t\u003cli\u003eFor \u003ccode\u003ewordsQuery[2] \u003d \u0026quot;xyz\u0026quot;\u003c/code\u003e, there is no string from \u003ccode\u003ewordsContainer\u003c/code\u003e that shares a common suffix. Hence the longest common suffix is \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e, that is shared with strings at index 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ewordsContainer \u003d [\u0026quot;abcdefgh\u0026quot;,\u0026quot;poiuygh\u0026quot;,\u0026quot;ghghgh\u0026quot;], wordsQuery \u003d [\u0026quot;gh\u0026quot;,\u0026quot;acbfgh\u0026quot;,\u0026quot;acbfegh\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[2,0,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s look at each \u003ccode\u003ewordsQuery[i]\u003c/code\u003e separately:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor \u003ccode\u003ewordsQuery[0] \u003d \u0026quot;gh\u0026quot;\u003c/code\u003e, strings from \u003ccode\u003ewordsContainer\u003c/code\u003e that share the longest common suffix \u003ccode\u003e\u0026quot;gh\u0026quot;\u003c/code\u003e are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\u003c/li\u003e\n\t\u003cli\u003eFor \u003ccode\u003ewordsQuery[1] \u003d \u0026quot;acbfgh\u0026quot;\u003c/code\u003e, only the string at index 0 shares the longest common suffix \u003ccode\u003e\u0026quot;fgh\u0026quot;\u003c/code\u003e. Hence it is the answer, even though the string at index 2 is shorter.\u003c/li\u003e\n\t\u003cli\u003eFor \u003ccode\u003ewordsQuery[2] \u003d \u0026quot;acbfegh\u0026quot;\u003c/code\u003e, strings from \u003ccode\u003ewordsContainer\u003c/code\u003e that share the longest common suffix \u003ccode\u003e\u0026quot;gh\u0026quot;\u003c/code\u003e are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d wordsContainer.length, wordsQuery.length \u0026lt;\u003d 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d wordsContainer[i].length \u0026lt;\u003d 5 * 10\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d wordsQuery[i].length \u0026lt;\u003d 5 * 10\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewordsContainer[i]\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewordsQuery[i]\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003eSum of \u003ccode\u003ewordsContainer[i].length\u003c/code\u003e is at most \u003ccode\u003e5 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSum of \u003ccode\u003ewordsQuery[i].length\u003c/code\u003e is at most \u003ccode\u003e5 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[\"abcd\",\"bcd\",\"xbcd\"]\n[\"cd\",\"bcd\",\"xyz\"]\n[\"abcdefgh\",\"poiuygh\",\"ghghgh\"]\n[\"gh\",\"acbfgh\",\"acbfegh\"]",
    "formTitle": "[3093]Longest Common Suffix Queries",
    "frequency": 0.0,
    "frontendQuestionId": "3093",
    "hints": [
      "If we reverse the strings, the problem changes to finding the longest common prefix.",
      "Build a Trie, each node is a letter and only saves the best word鈥檚 index in each node, based on the criteria."
    ],
    "level": 3,
    "metaData": {
      "name": "stringIndices",
      "params": [
        {
          "name": "wordsContainer",
          "type": "string[]"
        },
        {
          "name": "wordsQuery",
          "type": "string[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3376",
    "similarQuestions": [
      "[{\"title\": \"Longest Common Prefix\", \"titleSlug\": \"longest-common-prefix\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6700\\u957f\\u516c\\u5171\\u524d\\u7f00\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[\"abcd\",\"bcd\",\"xbcd\"]\n[\"cd\",\"bcd\",\"xyz\"]",
    "title": "Longest Common Suffix Queries",
    "titleSlug": "longest-common-suffix-queries"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int scoreOfString(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int scoreOfString(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def scoreOfString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def scoreOfString(self, s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int scoreOfString(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int ScoreOfString(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar scoreOfString \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function scoreOfString(s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function scoreOfString($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func scoreOfString(_ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun scoreOfString(s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int scoreOfString(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func scoreOfString(s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Integer}\ndef score_of_string(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def scoreOfString(s: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn score_of_string(s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (score-of-string s)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec score_of_string(S :: unicode:unicode_binary()) -\u003e integer().\nscore_of_string(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec score_of_string(s :: String.t) :: integer\n  def score_of_string(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e. The \u003cstrong\u003escore\u003c/strong\u003e of a string is defined as the sum of the absolute difference between the \u003cstrong\u003eASCII\u003c/strong\u003e values of adjacent characters.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003escore\u003c/strong\u003e of\u003cem\u003e \u003c/em\u003e\u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;hello\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e13\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eASCII\u003c/strong\u003e values of the characters in \u003ccode\u003es\u003c/code\u003e are: \u003ccode\u003e\u0026#39;h\u0026#39; \u003d 104\u003c/code\u003e, \u003ccode\u003e\u0026#39;e\u0026#39; \u003d 101\u003c/code\u003e, \u003ccode\u003e\u0026#39;l\u0026#39; \u003d 108\u003c/code\u003e, \u003ccode\u003e\u0026#39;o\u0026#39; \u003d 111\u003c/code\u003e. So, the score of \u003ccode\u003es\u003c/code\u003e would be \u003ccode\u003e|104 - 101| + |101 - 108| + |108 - 108| + |108 - 111| \u003d 3 + 7 + 0 + 3 \u003d 13\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;zaz\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e50\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eASCII\u003c/strong\u003e values of the characters in \u003ccode\u003es\u003c/code\u003e are: \u003ccode\u003e\u0026#39;z\u0026#39; \u003d 122\u003c/code\u003e, \u003ccode\u003e\u0026#39;a\u0026#39; \u003d 97\u003c/code\u003e. So, the score of \u003ccode\u003es\u003c/code\u003e would be \u003ccode\u003e|122 - 97| + |97 - 122| \u003d 25 + 25 \u003d 50\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d s.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"hello\"\n\"zaz\"",
    "formTitle": "[3110]Score of a String",
    "frequency": 0.0,
    "frontendQuestionId": "3110",
    "hints": [
      "Sum the difference between all the adjacent characters by just taking the absolute difference of their ASCII values."
    ],
    "level": 1,
    "metaData": {
      "name": "scoreOfString",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3379",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"hello\"",
    "title": "Score of a String",
    "titleSlug": "score-of-a-string"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumSubarrayLength(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumSubarrayLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumSubarrayLength(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumSubarrayLength(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumSubarrayLength \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumSubarrayLength(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumSubarrayLength($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumSubarrayLength(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumSubarrayLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumSubarrayLength(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumSubarrayLength(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_subarray_length(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumSubarrayLength(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_subarray_length(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-subarray-length nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_subarray_length(Nums :: [integer()], K :: integer()) -\u003e integer().\nminimum_subarray_length(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_subarray_length(nums :: [integer], k :: integer) :: integer\n  def minimum_subarray_length(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e of \u003cstrong\u003enon-negative\u003c/strong\u003e integers and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn array is called \u003cstrong\u003especial\u003c/strong\u003e if the bitwise \u003ccode\u003eOR\u003c/code\u003e of all of its elements is \u003cstrong\u003eat least\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe length of the \u003cstrong\u003eshortest\u003c/strong\u003e \u003cstrong\u003especial\u003c/strong\u003e \u003cstrong\u003enon-empty\u003c/strong\u003e \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarray\u003c/span\u003e of\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e, \u003cem\u003eor return\u003c/em\u003e \u003ccode\u003e-1\u003c/code\u003e \u003cem\u003eif no special subarray exists\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe subarray \u003ccode\u003e[3]\u003c/code\u003e has \u003ccode\u003eOR\u003c/code\u003e value of \u003ccode\u003e3\u003c/code\u003e. Hence, we return \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [2,1,8], k \u003d 10\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe subarray \u003ccode\u003e[2,1,8]\u003c/code\u003e has \u003ccode\u003eOR\u003c/code\u003e value of \u003ccode\u003e11\u003c/code\u003e. Hence, we return \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2], k \u003d 0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe subarray \u003ccode\u003e[1]\u003c/code\u003e has \u003ccode\u003eOR\u003c/code\u003e value of \u003ccode\u003e1\u003c/code\u003e. Hence, we return \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 2 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3]\n2\n[2,1,8]\n10\n[1,2]\n0",
    "formTitle": "[3097]Shortest Subarray With OR at Least K II",
    "frequency": 0.0,
    "frontendQuestionId": "3097",
    "hints": [
      "For each \u003ccode\u003enums[i]\u003c/code\u003e, we can maintain each subarray鈥檚 bitwise \u003ccode\u003eOR\u003c/code\u003e result ending with it.",
      "The property of bitwise \u003ccode\u003eOR\u003c/code\u003e is that it never unsets any bits and only sets new bits",
      "So the number of different results for each \u003ccode\u003enums[i]\u003c/code\u003e is at most the number of bits 32."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumSubarrayLength",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3380",
    "similarQuestions": [
      "[{\"title\": \"Maximum Size Subarray Sum Equals k\", \"titleSlug\": \"maximum-size-subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u7b49\\u4e8e k \\u7684\\u6700\\u957f\\u5b50\\u6570\\u7ec4\\u957f\\u5ea6\", \"isPaidOnly\": true}, {\"title\": \"Shortest Subarray with Sum at Least K\", \"titleSlug\": \"shortest-subarray-with-sum-at-least-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u548c\\u81f3\\u5c11\\u4e3a K \\u7684\\u6700\\u77ed\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,2,3]\n2",
    "title": "Shortest Subarray With OR at Least K II",
    "titleSlug": "shortest-subarray-with-or-at-least-k-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumSubarrayLength(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumSubarrayLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumSubarrayLength(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumSubarrayLength(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumSubarrayLength \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumSubarrayLength(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumSubarrayLength($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumSubarrayLength(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumSubarrayLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumSubarrayLength(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumSubarrayLength(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_subarray_length(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumSubarrayLength(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_subarray_length(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-subarray-length nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_subarray_length(Nums :: [integer()], K :: integer()) -\u003e integer().\nminimum_subarray_length(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_subarray_length(nums :: [integer], k :: integer) :: integer\n  def minimum_subarray_length(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e of \u003cstrong\u003enon-negative\u003c/strong\u003e integers and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn array is called \u003cstrong\u003especial\u003c/strong\u003e if the bitwise \u003ccode\u003eOR\u003c/code\u003e of all of its elements is \u003cstrong\u003eat least\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe length of the \u003cstrong\u003eshortest\u003c/strong\u003e \u003cstrong\u003especial\u003c/strong\u003e \u003cstrong\u003enon-empty\u003c/strong\u003e \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarray\u003c/span\u003e of\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e, \u003cem\u003eor return\u003c/em\u003e \u003ccode\u003e-1\u003c/code\u003e \u003cem\u003eif no special subarray exists\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe subarray \u003ccode\u003e[3]\u003c/code\u003e has \u003ccode\u003eOR\u003c/code\u003e value of \u003ccode\u003e3\u003c/code\u003e. Hence, we return \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [2,1,8], k \u003d 10\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe subarray \u003ccode\u003e[2,1,8]\u003c/code\u003e has \u003ccode\u003eOR\u003c/code\u003e value of \u003ccode\u003e11\u003c/code\u003e. Hence, we return \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2], k \u003d 0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe subarray \u003ccode\u003e[1]\u003c/code\u003e has \u003ccode\u003eOR\u003c/code\u003e value of \u003ccode\u003e1\u003c/code\u003e. Hence, we return \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d k \u0026lt; 64\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3]\n2\n[2,1,8]\n10\n[1,2]\n0",
    "formTitle": "[3095]Shortest Subarray With OR at Least K I",
    "frequency": 0.0,
    "frontendQuestionId": "3095",
    "hints": [
      "The constraints are small. Brute force checking all the subarrays."
    ],
    "level": 1,
    "metaData": {
      "name": "minimumSubarrayLength",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3381",
    "similarQuestions": [
      "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u957f\\u5ea6\\u6700\\u5c0f\\u7684\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}, {\"title\": \"Shortest Subarray with Sum at Least K\", \"titleSlug\": \"shortest-subarray-with-sum-at-least-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u548c\\u81f3\\u5c11\\u4e3a K \\u7684\\u6700\\u77ed\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[1,2,3]\n2",
    "title": "Shortest Subarray With OR at Least K I",
    "titleSlug": "shortest-subarray-with-or-at-least-k-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long numberOfSubarrays(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long numberOfSubarrays(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfSubarrays(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long numberOfSubarrays(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long NumberOfSubarrays(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numberOfSubarrays \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfSubarrays(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function numberOfSubarrays($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfSubarrays(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfSubarrays(nums: IntArray): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfSubarrays(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfSubarrays(nums []int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef number_of_subarrays(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfSubarrays(nums: Array[Int]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_subarrays(nums: Vec\u003ci32\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-subarrays nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_subarrays(Nums :: [integer()]) -\u003e integer().\nnumber_of_subarrays(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_subarrays(nums :: [integer]) :: integer\n  def number_of_subarrays(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array of \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the number of \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarrays\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e, where the \u003cstrong\u003efirst\u003c/strong\u003e and the \u003cstrong\u003elast\u003c/strong\u003e elements of the subarray are \u003cem\u003eequal\u003c/em\u003e to the \u003cstrong\u003elargest\u003c/strong\u003e element in the subarray.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,4,3,3,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,4,3,3,2]\u003c/code\u003e, with its largest element 1. The first element is 1 and the last element is also 1.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[1,\u003cu\u003e\u003cstrong\u003e4\u003c/strong\u003e\u003c/u\u003e,3,3,2]\u003c/code\u003e, with its largest element 4. The first element is 4 and the last element is also 4.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[1,4,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e,3,2]\u003c/code\u003e, with its largest element 3. The first element is 3 and the last element is also 3.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[1,4,3,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e,2]\u003c/code\u003e, with its largest element 3. The first element is 3 and the last element is also 3.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[1,4,3,3,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e, with its largest element 2. The first element is 2 and the last element is also 2.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[1,4,\u003cu\u003e\u003cstrong\u003e3,3\u003c/strong\u003e\u003c/u\u003e,2]\u003c/code\u003e, with its largest element 3. The first element is 3 and the last element is also 3.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHence, we return 6.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,3,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e,3,3]\u003c/code\u003e, with its largest element 3. The first element is 3 and the last element is also 3.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[3,\u003cstrong\u003e\u003cu\u003e3\u003c/u\u003e\u003c/strong\u003e,3]\u003c/code\u003e, with its largest element 3. The first element is 3 and the last element is also 3.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[3,3,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e, with its largest element 3. The first element is 3 and the last element is also 3.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[\u003cstrong\u003e\u003cu\u003e3,3\u003c/u\u003e\u003c/strong\u003e,3]\u003c/code\u003e, with its largest element 3. The first element is 3 and the last element is also 3.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[3,\u003cu\u003e\u003cstrong\u003e3,3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e, with its largest element 3. The first element is 3 and the last element is also 3.\u003c/li\u003e\n\t\u003cli\u003esubarray \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e3,3,3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e, with its largest element 3. The first element is 3 and the last element is also 3.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHence, we return 6.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is a single subarray of \u003ccode\u003enums\u003c/code\u003e which is \u003ccode\u003e[\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e]\u003c/code\u003e, with its largest element 1. The first element is 1 and the last element is also 1.\u003c/p\u003e\n\n\u003cp\u003eHence, we return 1.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,4,3,3,2]\n[3,3,3]\n[1]",
    "formTitle": "[3113]Find the Number of Subarrays Where Boundary Elements Are Maximum",
    "frequency": 0.0,
    "frontendQuestionId": "3113",
    "hints": [
      "For each element \u003ccode\u003enums[i]\u003c/code\u003e, we can count the number of valid subarrays ending with it.",
      "For each index \u003ccode\u003ei\u003c/code\u003e, find the nearest index \u003ccode\u003ej\u003c/code\u003e on its left \u003ccode\u003e(j \u003c i)\u003c/code\u003e such that \u003ccode\u003enums[j] \u003c nums[i]\u003c/code\u003e. This can be done via a monotonic stack.",
      "For each index \u003ccode\u003ei\u003c/code\u003e, find the number of indices \u003ccode\u003ek\u003c/code\u003e in the window \u003ccode\u003e[j + 1, i]\u003c/code\u003e such that \u003ccode\u003enums[k] \u003d\u003d nums[i]\u003c/code\u003e, this is the number of the valid subarrays ending with \u003ccode\u003enums[i]\u003c/code\u003e. This can be done by sliding window.",
      "Sum the answer of all the indices \u003ccode\u003ei\u003c/code\u003e to get the final result.",
      "Is it possible to use DSU as an alternate solution?"
    ],
    "level": 3,
    "metaData": {
      "name": "numberOfSubarrays",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3382",
    "similarQuestions": [
      "[{\"title\": \"Number of Subarrays with Bounded Maximum\", \"titleSlug\": \"number-of-subarrays-with-bounded-maximum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u533a\\u95f4\\u5b50\\u6570\\u7ec4\\u4e2a\\u6570\", \"isPaidOnly\": false}, {\"title\": \"Count Subarrays With Fixed Bounds\", \"titleSlug\": \"count-subarrays-with-fixed-bounds\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u5b9a\\u754c\\u5b50\\u6570\\u7ec4\\u7684\\u6570\\u76ee\", \"isPaidOnly\": false}, {\"title\": \"Count Subarrays Where Max Element Appears at Least K Times\", \"titleSlug\": \"count-subarrays-where-max-element-appears-at-least-k-times\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u6700\\u5927\\u5143\\u7d20\\u51fa\\u73b0\\u81f3\\u5c11 K \\u6b21\\u7684\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[1,4,3,3,2]",
    "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
    "titleSlug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumEnergy(vector\u003cint\u003e\u0026 energy, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumEnergy(int[] energy, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumEnergy(self, energy, k):\n        \"\"\"\n        :type energy: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumEnergy(self, energy: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumEnergy(int* energy, int energySize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumEnergy(int[] energy, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} energy\n * @param {number} k\n * @return {number}\n */\nvar maximumEnergy \u003d function(energy, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumEnergy(energy: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $energy\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumEnergy($energy, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumEnergy(_ energy: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumEnergy(energy: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumEnergy(List\u003cint\u003e energy, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumEnergy(energy []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} energy\n# @param {Integer} k\n# @return {Integer}\ndef maximum_energy(energy, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumEnergy(energy: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_energy(energy: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-energy energy k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_energy(Energy :: [integer()], K :: integer()) -\u003e integer().\nmaximum_energy(Energy, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_energy(energy :: [integer], k :: integer) :: integer\n  def maximum_energy(energy, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eIn a mystic dungeon, \u003ccode\u003en\u003c/code\u003e magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.\u003c/p\u003e\n\n\u003cp\u003eYou have been cursed in such a way that after absorbing energy from magician \u003ccode\u003ei\u003c/code\u003e, you will be instantly transported to magician \u003ccode\u003e(i + k)\u003c/code\u003e. This process will be repeated until you reach the magician where \u003ccode\u003e(i + k)\u003c/code\u003e does not exist.\u003c/p\u003e\n\n\u003cp\u003eIn other words, you will choose a starting point and then teleport with \u003ccode\u003ek\u003c/code\u003e jumps until you reach the end of the magicians\u0026#39; sequence, \u003cstrong\u003eabsorbing all the energy\u003c/strong\u003e during the journey.\u003c/p\u003e\n\n\u003cp\u003eYou are given an array \u003ccode\u003eenergy\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e. Return the \u003cstrong\u003emaximum\u003c/strong\u003e possible energy you can gain.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e energy \u003d [5,2,-10,-5,1], k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e We can gain a total energy of 3 by starting from magician 1 absorbing 2 + 1 \u003d 3.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e energy \u003d [-2,-3,-1], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e\u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e -1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e We can gain a total energy of -1 by starting from magician 2.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d energy.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1000 \u0026lt;\u003d energy[i] \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d energy.length - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n鈥嬧�嬧�嬧�嬧�嬧��",
    "exampleTestcases": "[5,2,-10,-5,1]\n3\n[-2,-3,-1]\n2",
    "formTitle": "[3147]Taking Maximum Energy From the Mystic Dungeon",
    "frequency": 0.0,
    "frontendQuestionId": "3147",
    "hints": [
      "Let \u003ccode\u003edp[i]\u003c/code\u003e denote the energy we gain starting from index \u003ccode\u003ei\u003c/code\u003e.",
      "We can notice, that \u003ccode\u003e dp[i] \u003d dp[i + k] + energy[i]\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumEnergy",
      "params": [
        {
          "name": "energy",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3383",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[5,2,-10,-5,1]\n3",
    "title": "Taking Maximum Energy From the Mystic Dungeon",
    "titleSlug": "taking-maximum-energy-from-the-mystic-dungeon"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumOperationsToMakeKPeriodic(string word, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumOperationsToMakeKPeriodic(String word, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumOperationsToMakeKPeriodic(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumOperationsToMakeKPeriodic(char* word, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumOperationsToMakeKPeriodic(string word, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumOperationsToMakeKPeriodic \u003d function(word, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumOperationsToMakeKPeriodic(word: string, k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumOperationsToMakeKPeriodic($word, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumOperationsToMakeKPeriodic(_ word: String, _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumOperationsToMakeKPeriodic(word: String, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumOperationsToMakeKPeriodic(String word, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumOperationsToMakeKPeriodic(word string, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_operations_to_make_k_periodic(word, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumOperationsToMakeKPeriodic(word: String, k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_operations_to_make_k_periodic(word: String, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-operations-to-make-k-periodic word k)\n  (-\u003e string? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_operations_to_make_k_periodic(Word :: unicode:unicode_binary(), K :: integer()) -\u003e integer().\nminimum_operations_to_make_k_periodic(Word, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_operations_to_make_k_periodic(word :: String.t, k :: integer) :: integer\n  def minimum_operations_to_make_k_periodic(word, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003eword\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e, and an integer \u003ccode\u003ek\u003c/code\u003e such that \u003ccode\u003ek\u003c/code\u003e divides \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn one operation, you can pick any two indices \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ej\u003c/code\u003e, that are divisible by \u003ccode\u003ek\u003c/code\u003e, then replace the \u003cspan data-keyword\u003d\"substring\"\u003esubstring\u003c/span\u003e of length \u003ccode\u003ek\u003c/code\u003e starting at \u003ccode\u003ei\u003c/code\u003e with the substring of length \u003ccode\u003ek\u003c/code\u003e starting at \u003ccode\u003ej\u003c/code\u003e. That is, replace the substring \u003ccode\u003eword[i..i + k - 1]\u003c/code\u003e with the substring \u003ccode\u003eword[j..j + k - 1]\u003c/code\u003e.\u003c!-- notionvc: 49ac84f7-0724-452a-ab43-0c5e53f1db33 --\u003e\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of operations required to make\u003c/em\u003e \u003ccode\u003eword\u003c/code\u003e \u003cem\u003e\u003cstrong\u003ek-periodic\u003c/strong\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe say that \u003ccode\u003eword\u003c/code\u003e is \u003cstrong\u003ek-periodic\u003c/strong\u003e if there is some string \u003ccode\u003es\u003c/code\u003e of length \u003ccode\u003ek\u003c/code\u003e such that \u003ccode\u003eword\u003c/code\u003e can be obtained by concatenating \u003ccode\u003es\u003c/code\u003e an arbitrary number of times. For example, if \u003ccode\u003eword \u003d\u003d \u0026ldquo;ababab\u0026rdquo;\u003c/code\u003e, then \u003ccode\u003eword\u003c/code\u003e is 2-periodic for \u003ccode\u003es \u003d \u0026quot;ab\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003eword \u003d \u0026quot;leetcodeleet\u0026quot;, k \u003d 4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\nfont-family: Menlo,sans-serif;\nfont-size: 0.85rem;\n\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can obtain a 4-periodic string by picking i \u003d 4 and j \u003d 0. After this operation, word becomes equal to \u0026quot;leetleetleet\u0026quot;.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003eword \u003d \u0026quot;\u003c/span\u003eleetcoleet\u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e\u0026quot;, k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can obtain a 2-periodic string by applying the operations in the table below.\u003c/p\u003e\n\n\u003ctable border\u003d\"1\" bordercolor\u003d\"#ccc\" cellpadding\u003d\"5\" cellspacing\u003d\"0\" height\u003d\"146\" style\u003d\"border-collapse:collapse; text-align: center; vertical-align: middle;\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003ei\u003c/th\u003e\n\t\t\t\u003cth\u003ej\u003c/th\u003e\n\t\t\t\u003cth\u003eword\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd style\u003d\"padding: 5px 15px;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd style\u003d\"padding: 5px 15px;\"\u003e2\u003c/td\u003e\n\t\t\t\u003ctd style\u003d\"padding: 5px 15px;\"\u003eetetcoleet\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd style\u003d\"padding: 5px 15px;\"\u003e4\u003c/td\u003e\n\t\t\t\u003ctd style\u003d\"padding: 5px 15px;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd style\u003d\"padding: 5px 15px;\"\u003eetetetleet\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd style\u003d\"padding: 5px 15px;\"\u003e6\u003c/td\u003e\n\t\t\t\u003ctd style\u003d\"padding: 5px 15px;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd style\u003d\"padding: 5px 15px;\"\u003eetetetetet\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cdiv id\u003d\"gtx-trans\" style\u003d\"position: absolute; left: 107px; top: 238.5px;\"\u003e\n\u003cdiv class\u003d\"gtx-trans-icon\"\u003e\u0026nbsp;\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u003d\u003d word.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d word.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ek\u003c/code\u003e divides \u003ccode\u003eword.length\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"leetcodeleet\"\n4\n\"leetcoleet\"\n2",
    "formTitle": "[3137]Minimum Number of Operations to Make Word K-Periodic",
    "frequency": 0.0,
    "frontendQuestionId": "3137",
    "hints": [
      "Calculate the frequency of each substring of length \u003ccode\u003ek\u003c/code\u003e that starts at an index that is divisible by \u003ccode\u003ek\u003c/code\u003e.",
      "The period of the final string will be the substring with the highest frequency."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumOperationsToMakeKPeriodic",
      "params": [
        {
          "name": "word",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3384",
    "similarQuestions": [
      "[{\"title\": \"Maximum Repeating Substring\", \"titleSlug\": \"maximum-repeating-substring\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6700\\u5927\\u91cd\\u590d\\u5b50\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "\"leetcodeleet\"\n4",
    "title": "Minimum Number of Operations to Make Word K-Periodic",
    "titleSlug": "minimum-number-of-operations-to-make-word-k-periodic"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cbool\u003e findAnswer(int n, vector\u003cvector\u003cint\u003e\u003e\u0026 edges) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean[] findAnswer(int n, int[][] edges) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findAnswer(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def findAnswer(self, n: int, edges: List[List[int]]) -\u003e List[bool]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* findAnswer(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool[] FindAnswer(int n, int[][] edges) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {boolean[]}\n */\nvar findAnswer \u003d function(n, edges) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function findAnswer(n: number, edges: number[][]): boolean[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Boolean[]\n     */\n    function findAnswer($n, $edges) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func findAnswer(_ n: Int, _ edges: [[Int]]) -\u003e [Bool] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun findAnswer(n: Int, edges: Array\u003cIntArray\u003e): BooleanArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cbool\u003e findAnswer(int n, List\u003cList\u003cint\u003e\u003e edges) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func findAnswer(n int, edges [][]int) []bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Boolean[]}\ndef find_answer(n, edges)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def findAnswer(n: Int, edges: Array[Array[Int]]): Array[Boolean] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn find_answer(n: i32, edges: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003cbool\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (find-answer n edges)\n  (-\u003e exact-integer? (listof (listof exact-integer?)) (listof boolean?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec find_answer(N :: integer(), Edges :: [[integer()]]) -\u003e [boolean()].\nfind_answer(N, Edges) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec find_answer(n :: integer, edges :: [[integer]]) :: [boolean]\n  def find_answer(n, edges) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an undirected weighted graph of \u003ccode\u003en\u003c/code\u003e nodes numbered from 0 to \u003ccode\u003en - 1\u003c/code\u003e. The graph consists of \u003ccode\u003em\u003c/code\u003e edges represented by a 2D array \u003ccode\u003eedges\u003c/code\u003e, where \u003ccode\u003eedges[i] \u003d [a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e, w\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e indicates that there is an edge between nodes \u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003eb\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e with weight \u003ccode\u003ew\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eConsider all the shortest paths from node 0 to node \u003ccode\u003en - 1\u003c/code\u003e in the graph. You need to find a \u003cstrong\u003eboolean\u003c/strong\u003e array \u003ccode\u003eanswer\u003c/code\u003e where \u003ccode\u003eanswer[i]\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e if the edge \u003ccode\u003eedges[i]\u003c/code\u003e is part of \u003cstrong\u003eat least\u003c/strong\u003e one shortest path. Otherwise, \u003ccode\u003eanswer[i]\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the array \u003ccode\u003eanswer\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that the graph may not be connected.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/05/graph35drawio-1.png\" style\u003d\"height: 129px; width: 250px;\" /\u003e\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 6, edges \u003d [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[true,true,true,false,true,true,true,false]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following are \u003cstrong\u003eall\u003c/strong\u003e the shortest paths between nodes 0 and 5:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe path \u003ccode\u003e0 -\u0026gt; 1 -\u0026gt; 5\u003c/code\u003e: The sum of weights is \u003ccode\u003e4 + 1 \u003d 5\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe path \u003ccode\u003e0 -\u0026gt; 2 -\u0026gt; 3 -\u0026gt; 5\u003c/code\u003e: The sum of weights is \u003ccode\u003e1 + 1 + 3 \u003d 5\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe path \u003ccode\u003e0 -\u0026gt; 2 -\u0026gt; 3 -\u0026gt; 1 -\u0026gt; 5\u003c/code\u003e: The sum of weights is \u003ccode\u003e1 + 1 + 2 + 1 \u003d 5\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/05/graphhhh.png\" style\u003d\"width: 185px; height: 136px;\" /\u003e\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 4, edges \u003d [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[true,false,false,true]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is one shortest path between nodes 0 and 3, which is the path \u003ccode\u003e0 -\u0026gt; 2 -\u0026gt; 3\u003c/code\u003e with the sum of weights \u003ccode\u003e1 + 2 \u003d 3\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003em \u003d\u003d edges.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m \u0026lt;\u003d min(5 * 10\u003csup\u003e4\u003c/sup\u003e, n * (n - 1) / 2)\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e \u0026lt; n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e !\u003d b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d w\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThere are no repeated edges.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "6\n[[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]\n4\n[[2,0,1],[0,1,1],[0,3,4],[3,2,2]]",
    "formTitle": "[3123]Find Edges in Shortest Paths",
    "frequency": 0.0,
    "frontendQuestionId": "3123",
    "hints": [
      "Find all the shortest paths starting from nodes 0 and \u003ccode\u003en - 1\u003c/code\u003e to all other nodes.",
      "How to use the above calculated shortest paths to check if an edge is part of at least one shortest path from 0 to \u003ccode\u003en - 1\u003c/code\u003e?"
    ],
    "level": 3,
    "metaData": {
      "name": "findAnswer",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "edges",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3386",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "6\n[[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]",
    "title": "Find Edges in Shortest Paths",
    "titleSlug": "find-edges-in-shortest-paths"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long minOperationsToMakeMedianK(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long minOperationsToMakeMedianK(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minOperationsToMakeMedianK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minOperationsToMakeMedianK(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long minOperationsToMakeMedianK(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MinOperationsToMakeMedianK(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOperationsToMakeMedianK \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minOperationsToMakeMedianK(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperationsToMakeMedianK($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minOperationsToMakeMedianK(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minOperationsToMakeMedianK(nums: IntArray, k: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minOperationsToMakeMedianK(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minOperationsToMakeMedianK(nums []int, k int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations_to_make_median_k(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minOperationsToMakeMedianK(nums: Array[Int], k: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_operations_to_make_median_k(nums: Vec\u003ci32\u003e, k: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-operations-to-make-median-k nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_operations_to_make_median_k(Nums :: [integer()], K :: integer()) -\u003e integer().\nmin_operations_to_make_median_k(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_operations_to_make_median_k(nums :: [integer], k :: integer) :: integer\n  def min_operations_to_make_median_k(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e and a \u003cstrong\u003enon-negative\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e. In one operation, you can increase or decrease any element by 1.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e number of operations needed to make the \u003cstrong\u003emedian\u003c/strong\u003e of \u003ccode\u003enums\u003c/code\u003e \u003cem\u003eequal\u003c/em\u003e to \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the larger of the two values is taken.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [2,5,6,8,5], k \u003d 4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can subtract one from \u003ccode\u003enums[1]\u003c/code\u003e and \u003ccode\u003enums[4]\u003c/code\u003e to obtain \u003ccode\u003e[2, 4, 6, 8, 4]\u003c/code\u003e. The median of the resulting array is equal to \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [2,5,6,8,5], k \u003d 7\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can add one to \u003ccode\u003enums[1]\u003c/code\u003e twice and add one to \u003ccode\u003enums[2]\u003c/code\u003e once to obtain \u003ccode\u003e[2, 7, 7, 8, 5]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4,5,6], k \u003d 4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe median of the array is already equal to \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 2 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,5,6,8,5]\n4\n[2,5,6,8,5]\n7\n[1,2,3,4,5,6]\n4",
    "formTitle": "[3107]Minimum Operations to Make Median of Array Equal to K",
    "frequency": 0.0,
    "frontendQuestionId": "3107",
    "hints": [
      "Sort \u003ccode\u003enums\u003c/code\u003e in non-descending order.",
      "For all the smaller values on the left side of the median, change them to \u003ccode\u003ek\u003c/code\u003e if they are larger than \u003ccode\u003ek\u003c/code\u003e.",
      "For all the larger values on the right side of the median, change them to \u003ccode\u003ek\u003c/code\u003e if they are smaller than \u003ccode\u003ek\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "minOperationsToMakeMedianK",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3387",
    "similarQuestions": [
      "[{\"title\": \"Find Median from Data Stream\", \"titleSlug\": \"find-median-from-data-stream\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6570\\u636e\\u6d41\\u7684\\u4e2d\\u4f4d\\u6570\", \"isPaidOnly\": false}, {\"title\": \"Sliding Window Median\", \"titleSlug\": \"sliding-window-median\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6ed1\\u52a8\\u7a97\\u53e3\\u4e2d\\u4f4d\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[2,5,6,8,5]\n4",
    "title": "Minimum Operations to Make Median of Array Equal to K",
    "titleSlug": "minimum-operations-to-make-median-of-array-equal-to-k"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long numberOfRightTriangles(vector\u003cvector\u003cint\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long numberOfRightTriangles(int[][] grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfRightTriangles(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfRightTriangles(self, grid: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long numberOfRightTriangles(int** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long NumberOfRightTriangles(int[][] grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar numberOfRightTriangles \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfRightTriangles(grid: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function numberOfRightTriangles($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfRightTriangles(_ grid: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfRightTriangles(grid: Array\u003cIntArray\u003e): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfRightTriangles(List\u003cList\u003cint\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfRightTriangles(grid [][]int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef number_of_right_triangles(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfRightTriangles(grid: Array[Array[Int]]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_right_triangles(grid: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-right-triangles grid)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_right_triangles(Grid :: [[integer()]]) -\u003e integer().\nnumber_of_right_triangles(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_right_triangles(grid :: [[integer]]) :: integer\n  def number_of_right_triangles(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D boolean matrix \u003ccode\u003egrid\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn an integer that is the number of \u003cstrong\u003eright triangles\u003c/strong\u003e that can be made with the 3 elements of \u003ccode\u003egrid\u003c/code\u003e such that \u003cstrong\u003eall\u003c/strong\u003e of them have a value of 1.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eA collection of 3 elements of \u003ccode\u003egrid\u003c/code\u003e is a \u003cstrong\u003eright triangle\u003c/strong\u003e if one of its elements is in the \u003cstrong\u003esame row\u003c/strong\u003e with another\u003c!-- notionvc: 6133ebe2-45aa-4346-9c28-03193b794c49 --\u003e element and in the \u003cstrong\u003esame column\u003c/strong\u003e with the third element. The 3 elements do not have to be next to each other.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv style\u003d\"display:flex; gap: 12px;\"\u003e\n\u003ctable border\u003d\"1\" cellspacing\u003d\"3\" style\u003d\"border-collapse: separate; text-align: center;\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ctable border\u003d\"1\" cellspacing\u003d\"3\" style\u003d\"border-collapse: separate; text-align: center;\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[0,1,0],[0,1,1],[0,1,0]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are two right triangles.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv style\u003d\"display:flex; gap: 12px;\"\u003e\n\u003ctable border\u003d\"1\" cellspacing\u003d\"3\" style\u003d\"border-collapse: separate; text-align: center;\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1,0,0,0],[0,1,0,1],[1,0,0,0]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are no right triangles.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv style\u003d\"display:flex; gap: 12px;\"\u003e\n\u003ctable border\u003d\"1\" cellspacing\u003d\"3\" style\u003d\"border-collapse: separate; text-align: center;\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ctable border\u003d\"1\" cellspacing\u003d\"3\" style\u003d\"border-collapse: separate; text-align: center;\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #b30000; --darkreader-inline-border-right: #b30000; --darkreader-inline-border-bottom: #b30000; --darkreader-inline-border-left: #b30000;\"\u003e1\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\t\u003ctd data-darkreader-inline-border-bottom\u003d\"\" data-darkreader-inline-border-left\u003d\"\" data-darkreader-inline-border-right\u003d\"\" data-darkreader-inline-border-top\u003d\"\" style\u003d\"padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #8c8273; --darkreader-inline-border-right: #8c8273; --darkreader-inline-border-bottom: #8c8273; --darkreader-inline-border-left: #8c8273;\"\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1,0,1],[1,0,0],[1,0,0]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u0026nbsp;\u003c/strong\u003e2\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are two right triangles.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d grid.length \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d grid[i].length \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d grid[i][j] \u0026lt;\u003d 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[0,1,0],[0,1,1],[0,1,0]]\n[[1,0,0,0],[0,1,0,1],[1,0,0,0]]\n[[1,0,1],[1,0,0],[1,0,0]]",
    "formTitle": "[3128]Right Triangles",
    "frequency": 0.0,
    "frontendQuestionId": "3128",
    "hints": [
      "If \u003ccode\u003egrid[x][y]\u003c/code\u003e is 1, it can form a right triangle with an element of \u003ccode\u003egrid\u003c/code\u003e with value 1 in the same row and an element of \u003ccode\u003egrid\u003c/code\u003e with value 1 in the same column.",
      "So we just need to count the number of 1s in each row and column.",
      "For each \u003ccode\u003ex, y\u003c/code\u003e with \u003ccode\u003egrid[x][y] \u003d 1\u003c/code\u003e if there are \u003ccode\u003erow[x]\u003c/code\u003e 1s in the row \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ecol[y]\u003c/code\u003e 1s in column \u003ccode\u003ey\u003c/code\u003e, the answer should be added by \u003ccode\u003e(row[x] - 1) * (col[y] - 1)\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "numberOfRightTriangles",
      "params": [
        {
          "name": "grid",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3388",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[[0,1,0],[0,1,1],[0,1,0]]",
    "title": "Right Triangles",
    "titleSlug": "right-triangles"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e minimumTime(int n, vector\u003cvector\u003cint\u003e\u003e\u0026 edges, vector\u003cint\u003e\u0026 disappear) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] minimumTime(int n, int[][] edges, int[] disappear) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumTime(self, n, edges, disappear):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type disappear: List[int]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumTime(self, n: int, edges: List[List[int]], disappear: List[int]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minimumTime(int n, int** edges, int edgesSize, int* edgesColSize, int* disappear, int disappearSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] MinimumTime(int n, int[][] edges, int[] disappear) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[]} disappear\n * @return {number[]}\n */\nvar minimumTime \u003d function(n, edges, disappear) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumTime(n: number, edges: number[][], disappear: number[]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer[] $disappear\n     * @return Integer[]\n     */\n    function minimumTime($n, $edges, $disappear) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumTime(_ n: Int, _ edges: [[Int]], _ disappear: [Int]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumTime(n: Int, edges: Array\u003cIntArray\u003e, disappear: IntArray): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e minimumTime(int n, List\u003cList\u003cint\u003e\u003e edges, List\u003cint\u003e disappear) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumTime(n int, edges [][]int, disappear []int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer[]} disappear\n# @return {Integer[]}\ndef minimum_time(n, edges, disappear)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumTime(n: Int, edges: Array[Array[Int]], disappear: Array[Int]): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_time(n: i32, edges: Vec\u003cVec\u003ci32\u003e\u003e, disappear: Vec\u003ci32\u003e) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-time n edges disappear)\n  (-\u003e exact-integer? (listof (listof exact-integer?)) (listof exact-integer?) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_time(N :: integer(), Edges :: [[integer()]], Disappear :: [integer()]) -\u003e [integer()].\nminimum_time(N, Edges, Disappear) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_time(n :: integer, edges :: [[integer]], disappear :: [integer]) :: [integer]\n  def minimum_time(n, edges, disappear) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere is an undirected graph of \u003ccode\u003en\u003c/code\u003e nodes. You are given a 2D array \u003ccode\u003eedges\u003c/code\u003e, where \u003ccode\u003eedges[i] \u003d [u\u003csub\u003ei\u003c/sub\u003e, v\u003csub\u003ei\u003c/sub\u003e, length\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e describes an edge between node \u003ccode\u003eu\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and node \u003ccode\u003ev\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e with a traversal time of \u003ccode\u003elength\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e units.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, you are given an array \u003ccode\u003edisappear\u003c/code\u003e, where \u003ccode\u003edisappear[i]\u003c/code\u003e denotes the time when the node \u003ccode\u003ei\u003c/code\u003e disappears from the graph and you won\u0026#39;t be able to visit it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNotice\u003c/strong\u003e that the graph might be disconnected and might contain multiple edges.\u003c/p\u003e\n\n\u003cp\u003eReturn the array \u003ccode\u003eanswer\u003c/code\u003e, with \u003ccode\u003eanswer[i]\u003c/code\u003e denoting the \u003cstrong\u003eminimum\u003c/strong\u003e units of time required to reach node \u003ccode\u003ei\u003c/code\u003e from node 0. If node \u003ccode\u003ei\u003c/code\u003e is \u003cstrong\u003eunreachable\u003c/strong\u003e from node 0 then \u003ccode\u003eanswer[i]\u003c/code\u003e is \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg 10px\u003d\"\" alt\u003d\"\" padding:\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/09/example1.png\" style\u003d\"width: 350px; height: 210px;\" /\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e n \u003d 3, edges \u003d [[0,1,2],[1,2,1],[0,2,4]], disappear \u003d [1,1,5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e [0,-1,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor node 0, we don\u0026#39;t need any time as it is our starting point.\u003c/li\u003e\n\t\u003cli\u003eFor node 1, we need at least 2 units of time to traverse \u003ccode\u003eedges[0]\u003c/code\u003e. Unfortunately, it disappears at that moment, so we won\u0026#39;t be able to visit it.\u003c/li\u003e\n\t\u003cli\u003eFor node 2, we need at least 4 units of time to traverse \u003ccode\u003eedges[2]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg 10px\u003d\"\" alt\u003d\"\" padding:\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/09/example2.png\" style\u003d\"width: 350px; height: 210px;\" /\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e n \u003d 3, edges \u003d [[0,1,2],[1,2,1],[0,2,4]], disappear \u003d [1,3,5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e [0,2,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor node 0, we don\u0026#39;t need any time as it is the starting point.\u003c/li\u003e\n\t\u003cli\u003eFor node 1, we need at least 2 units of time to traverse \u003ccode\u003eedges[0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eFor node 2, we need at least 3 units of time to traverse \u003ccode\u003eedges[0]\u003c/code\u003e and \u003ccode\u003eedges[1]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 2, edges \u003d [[0,1,1]], disappear \u003d [1,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[0,-1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eExactly when we reach node 1, it disappears.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u0026lt;\u003d 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d edges.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges[i] \u003d\u003d [u\u003csub\u003ei\u003c/sub\u003e, v\u003csub\u003ei\u003c/sub\u003e, length\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d u\u003csub\u003ei\u003c/sub\u003e, v\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d length\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003edisappear.length \u003d\u003d n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d disappear[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n[[0,1,2],[1,2,1],[0,2,4]]\n[1,1,5]\n3\n[[0,1,2],[1,2,1],[0,2,4]]\n[1,3,5]\n2\n[[0,1,1]]\n[1,1]",
    "formTitle": "[3112]Minimum Time to Visit Disappearing Nodes",
    "frequency": 0.0,
    "frontendQuestionId": "3112",
    "hints": [
      "Use Dijkstra鈥檚 algorithm, but only visit nodes if you can reach them before disappearance."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumTime",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "edges",
          "type": "integer[][]"
        },
        {
          "name": "disappear",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3389",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "3\n[[0,1,2],[1,2,1],[0,2,4]]\n[1,1,5]",
    "title": "Minimum Time to Visit Disappearing Nodes",
    "titleSlug": "minimum-time-to-visit-disappearing-nodes"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minRectanglesToCoverPoints(vector\u003cvector\u003cint\u003e\u003e\u0026 points, int w) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minRectanglesToCoverPoints(int[][] points, int w) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minRectanglesToCoverPoints(self, points, w):\n        \"\"\"\n        :type points: List[List[int]]\n        :type w: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minRectanglesToCoverPoints(self, points: List[List[int]], w: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minRectanglesToCoverPoints(int** points, int pointsSize, int* pointsColSize, int w) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinRectanglesToCoverPoints(int[][] points, int w) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} points\n * @param {number} w\n * @return {number}\n */\nvar minRectanglesToCoverPoints \u003d function(points, w) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minRectanglesToCoverPoints(points: number[][], w: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @param Integer $w\n     * @return Integer\n     */\n    function minRectanglesToCoverPoints($points, $w) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minRectanglesToCoverPoints(_ points: [[Int]], _ w: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minRectanglesToCoverPoints(points: Array\u003cIntArray\u003e, w: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minRectanglesToCoverPoints(List\u003cList\u003cint\u003e\u003e points, int w) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minRectanglesToCoverPoints(points [][]int, w int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} points\n# @param {Integer} w\n# @return {Integer}\ndef min_rectangles_to_cover_points(points, w)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minRectanglesToCoverPoints(points: Array[Array[Int]], w: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_rectangles_to_cover_points(points: Vec\u003cVec\u003ci32\u003e\u003e, w: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-rectangles-to-cover-points points w)\n  (-\u003e (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_rectangles_to_cover_points(Points :: [[integer()]], W :: integer()) -\u003e integer().\nmin_rectangles_to_cover_points(Points, W) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_rectangles_to_cover_points(points :: [[integer]], w :: integer) :: integer\n  def min_rectangles_to_cover_points(points, w) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D integer array \u003ccode\u003epoints\u003c/code\u003e, where \u003ccode\u003epoints[i] \u003d [x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e. You are also given an integer \u003ccode\u003ew\u003c/code\u003e. Your task is to \u003cstrong\u003ecover\u003c/strong\u003e \u003cstrong\u003eall\u003c/strong\u003e the given points with rectangles.\u003c/p\u003e\n\n\u003cp\u003eEach rectangle has its lower end at some point \u003ccode\u003e(x\u003csub\u003e1\u003c/sub\u003e, 0)\u003c/code\u003e and its upper end at some point \u003ccode\u003e(x\u003csub\u003e2\u003c/sub\u003e, y\u003csub\u003e2\u003c/sub\u003e)\u003c/code\u003e, where \u003ccode\u003ex\u003csub\u003e1\u003c/sub\u003e \u0026lt;\u003d x\u003csub\u003e2\u003c/sub\u003e\u003c/code\u003e, \u003ccode\u003ey\u003csub\u003e2\u003c/sub\u003e \u0026gt;\u003d 0\u003c/code\u003e, and the condition \u003ccode\u003ex\u003csub\u003e2\u003c/sub\u003e - x\u003csub\u003e1\u003c/sub\u003e \u0026lt;\u003d w\u003c/code\u003e \u003cstrong\u003emust\u003c/strong\u003e be satisfied for each rectangle.\u003c/p\u003e\n\n\u003cp\u003eA point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.\u003c/p\u003e\n\n\u003cp\u003eReturn an integer denoting the \u003cstrong\u003eminimum\u003c/strong\u003e number of rectangles needed so that each point is covered by \u003cstrong\u003eat least one\u003c/strong\u003e rectangle\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e A point may be covered by more than one rectangle.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-33-05.png\" style\u003d\"width: 205px; height: 300px;\" /\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003epoints \u003d [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe image above shows one possible placement of rectangles to cover the points:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eA rectangle with a lower end at \u003ccode\u003e(1, 0)\u003c/code\u003e and its upper end at \u003ccode\u003e(2, 8)\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eA rectangle with a lower end at \u003ccode\u003e(3, 0)\u003c/code\u003e and its upper end at \u003ccode\u003e(4, 8)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-18-59-12.png\" style\u003d\"width: 260px; height: 250px;\" /\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003epoints \u003d [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe image above shows one possible placement of rectangles to cover the points:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eA rectangle with a lower end at \u003ccode\u003e(0, 0)\u003c/code\u003e and its upper end at \u003ccode\u003e(2, 2)\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eA rectangle with a lower end at \u003ccode\u003e(3, 0)\u003c/code\u003e and its upper end at \u003ccode\u003e(5, 5)\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eA rectangle with a lower end at \u003ccode\u003e(6, 0)\u003c/code\u003e and its upper end at \u003ccode\u003e(6, 6)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-24-03.png\" style\u003d\"height: 150px; width: 127px;\" /\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\" style\u003d\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003epoints \u003d [[2,3],[1,2]], w \u003d 0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe image above shows one possible placement of rectangles to cover the points:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eA rectangle with a lower end at \u003ccode\u003e(1, 0)\u003c/code\u003e and its upper end at \u003ccode\u003e(1, 2)\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eA rectangle with a lower end at \u003ccode\u003e(2, 0)\u003c/code\u003e and its upper end at \u003ccode\u003e(2, 3)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d points.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epoints[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d x\u003csub\u003ei\u003c/sub\u003e \u003d\u003d points[i][0] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d y\u003csub\u003ei\u003c/sub\u003e \u003d\u003d points[i][1] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d w \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll pairs \u003ccode\u003e(x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e)\u003c/code\u003e are distinct.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]]\n1\n[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]\n2\n[[2,3],[1,2]]\n0",
    "formTitle": "[3111]Minimum Rectangles to Cover Points",
    "frequency": 0.0,
    "frontendQuestionId": "3111",
    "hints": [
      "The \u003ccode\u003ey\u003c/code\u003e values don\u0027t matter; only the \u003ccode\u003ex\u003c/code\u003e values matter.",
      "Sort all the points by \u003ccode\u003ex\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.",
      "Each time, select the smallest \u003ccode\u003ex\u003c/code\u003e value, \u003ccode\u003ex\u003csub\u003e0\u003c/sub\u003e\u003c/code\u003e, from the unselected points, and then select all the points with \u003ccode\u003ex\u003c/code\u003e values not larger than \u003ccode\u003ex\u003csub\u003e0\u003c/sub\u003e + w\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "minRectanglesToCoverPoints",
      "params": [
        {
          "name": "points",
          "type": "integer[][]"
        },
        {
          "name": "w",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3390",
    "similarQuestions": [
      "[{\"title\": \"Minimum Area Rectangle\", \"titleSlug\": \"minimum-area-rectangle\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c0f\\u9762\\u79ef\\u77e9\\u5f62\", \"isPaidOnly\": false}, {\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u63a5\\u8fd1\\u539f\\u70b9\\u7684 K \\u4e2a\\u70b9\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]]\n1",
    "title": "Minimum Rectangles to Cover Points",
    "titleSlug": "minimum-rectangles-to-cover-points"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxScore(vector\u003cvector\u003cint\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxScore(List\u003cList\u003cInteger\u003e\u003e grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxScore(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxScore(self, grid: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxScore(int** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxScore(IList\u003cIList\u003cint\u003e\u003e grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxScore \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxScore(grid: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxScore($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxScore(_ grid: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxScore(grid: List\u003cList\u003cInt\u003e\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxScore(List\u003cList\u003cint\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxScore(grid [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef max_score(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxScore(grid: List[List[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_score(grid: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-score grid)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_score(Grid :: [[integer()]]) -\u003e integer().\nmax_score(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_score(grid :: [[integer]]) :: integer\n  def max_score(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an \u003ccode\u003em x n\u003c/code\u003e matrix \u003ccode\u003egrid\u003c/code\u003e consisting of \u003cstrong\u003epositive\u003c/strong\u003e integers. You can move from a cell in the matrix to \u003cstrong\u003eany\u003c/strong\u003e other cell that is either to the bottom or to the right (not necessarily adjacent). The score of a move from a cell with the value \u003ccode\u003ec1\u003c/code\u003e to a cell with the value \u003ccode\u003ec2\u003c/code\u003e is \u003ccode\u003ec2 - c1\u003c/code\u003e.\u003c!-- notionvc: 8819ca04-8606-4ecf-815b-fb77bc63b851 --\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can start at \u003cstrong\u003eany\u003c/strong\u003e cell, and you have to make \u003cstrong\u003eat least\u003c/strong\u003e one move.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003emaximum\u003c/strong\u003e total score you can achieve.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/14/grid1.png\" style\u003d\"width: 240px; height: 240px;\" /\u003e\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e9\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e We start at the cell \u003ccode\u003e(0, 1)\u003c/code\u003e, and we perform the following moves:\u003cbr /\u003e\n- Move from the cell \u003ccode\u003e(0, 1)\u003c/code\u003e to \u003ccode\u003e(2, 1)\u003c/code\u003e with a score of \u003ccode\u003e7 - 5 \u003d 2\u003c/code\u003e.\u003cbr /\u003e\n- Move from the cell \u003ccode\u003e(2, 1)\u003c/code\u003e to \u003ccode\u003e(2, 2)\u003c/code\u003e with a score of \u003ccode\u003e14 - 7 \u003d 7\u003c/code\u003e.\u003cbr /\u003e\nThe total score is \u003ccode\u003e2 + 7 \u003d 9\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/08/moregridsdrawio-1.png\" style\u003d\"width: 180px; height: 116px;\" /\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[4,3,2],[3,2,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e-1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e We start at the cell \u003ccode\u003e(0, 0)\u003c/code\u003e, and we perform one move: \u003ccode\u003e(0, 0)\u003c/code\u003e to \u003ccode\u003e(0, 1)\u003c/code\u003e. The score is \u003ccode\u003e3 - 4 \u003d -1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003em \u003d\u003d grid.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d grid[i].length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d m, n \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e4 \u0026lt;\u003d m * n \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d grid[i][j] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]\n[[4,3,2],[3,2,1]]",
    "formTitle": "[3148]Maximum Difference Score in a Grid",
    "frequency": 0.0,
    "frontendQuestionId": "3148",
    "hints": [
      "Any path from a cell \u003ccode\u003e(x1, y1)\u003c/code\u003e to another cell \u003ccode\u003e(x2, y2)\u003c/code\u003e will always have a score of \u003ccode\u003egrid[x2][y2] - grid[x1][y1]\u003c/code\u003e.",
      "Let鈥檚 say we fix the starting cell \u003ccode\u003e(x1, y1)\u003c/code\u003e, how to the find a cell \u003ccode\u003e(x2, y2)\u003c/code\u003e such that the value \u003ccode\u003egrid[x2][y2] - grid[x1][y1]\u003c/code\u003e is the maximum possible?"
    ],
    "level": 2,
    "metaData": {
      "name": "maxScore",
      "params": [
        {
          "name": "grid",
          "type": "list\u003clist\u003cinteger\u003e\u003e"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3391",
    "similarQuestions": [
      "[{\"title\": \"Maximum Score From Grid Operations\", \"titleSlug\": \"maximum-score-from-grid-operations\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u7f51\\u683c\\u56fe\\u64cd\\u4f5c\\u540e\\u7684\\u6700\\u5927\\u5206\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]",
    "title": "Maximum Difference Score in a Grid",
    "titleSlug": "maximum-difference-score-in-a-grid"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long minEnd(int n, int x) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long minEnd(int n, int x) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minEnd(self, n, x):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minEnd(self, n: int, x: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long minEnd(int n, int x) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MinEnd(int n, int x) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number} x\n * @return {number}\n */\nvar minEnd \u003d function(n, x) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minEnd(n: number, x: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @return Integer\n     */\n    function minEnd($n, $x) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minEnd(_ n: Int, _ x: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minEnd(n: Int, x: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minEnd(int n, int x) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minEnd(n int, x int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer} x\n# @return {Integer}\ndef min_end(n, x)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minEnd(n: Int, x: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_end(n: i32, x: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-end n x)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_end(N :: integer(), X :: integer()) -\u003e integer().\nmin_end(N, X) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_end(n :: integer, x :: integer) :: integer\n  def min_end(n, x) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two integers \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003ex\u003c/code\u003e. You have to construct an array of \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003enums\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e where for every \u003ccode\u003e0 \u0026lt;\u003d i \u0026lt; n - 1\u003c/code\u003e, \u003ccode\u003enums[i + 1]\u003c/code\u003e is \u003cstrong\u003egreater than\u003c/strong\u003e \u003ccode\u003enums[i]\u003c/code\u003e, and the result of the bitwise \u003ccode\u003eAND\u003c/code\u003e operation between all elements of \u003ccode\u003enums\u003c/code\u003e is \u003ccode\u003ex\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e possible value of \u003ccode\u003enums[n - 1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 3, x \u003d 4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enums\u003c/code\u003e can be \u003ccode\u003e[4,5,6]\u003c/code\u003e and its last element is 6.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 2, x \u003d 7\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e15\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enums\u003c/code\u003e can be \u003ccode\u003e[7,15]\u003c/code\u003e and its last element is 15.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, x \u0026lt;\u003d 10\u003csup\u003e8\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n4\n2\n7",
    "formTitle": "[3133]Minimum Array End",
    "frequency": 0.0,
    "frontendQuestionId": "3133",
    "hints": [
      "Each element of the array should be obtained by 鈥渕erging鈥� \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e where \u003ccode\u003ev \u003d 0, 1, 2, 鈥�(n - 1)\u003c/code\u003e.",
      "To merge \u003ccode\u003ex\u003c/code\u003e with another number \u003ccode\u003ev\u003c/code\u003e, keep the set bits of \u003ccode\u003ex\u003c/code\u003e untouched, for all the other bits, fill the set bits of \u003ccode\u003ev\u003c/code\u003e from right to left in order one by one.",
      "So the final answer is the 鈥渕erge鈥� of \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003en - 1\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "minEnd",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "x",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3394",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "3\n4",
    "title": "Minimum Array End",
    "titleSlug": "minimum-array-end"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minAnagramLength(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minAnagramLength(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minAnagramLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minAnagramLength(self, s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minAnagramLength(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinAnagramLength(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minAnagramLength \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minAnagramLength(s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minAnagramLength($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minAnagramLength(_ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minAnagramLength(s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minAnagramLength(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minAnagramLength(s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Integer}\ndef min_anagram_length(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minAnagramLength(s: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_anagram_length(s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-anagram-length s)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_anagram_length(S :: unicode:unicode_binary()) -\u003e integer().\nmin_anagram_length(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_anagram_length(s :: String.t) :: integer\n  def min_anagram_length(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e, which is known to be a concatenation of \u003cstrong\u003eanagrams\u003c/strong\u003e of some string \u003ccode\u003et\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e possible length of the string \u003ccode\u003et\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn \u003cstrong\u003eanagram\u003c/strong\u003e is formed by rearranging the letters of a string. For example, \u0026quot;aab\u0026quot;, \u0026quot;aba\u0026quot;, and, \u0026quot;baa\u0026quot; are anagrams of \u0026quot;aab\u0026quot;.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;abba\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOne possible string \u003ccode\u003et\u003c/code\u003e could be \u003ccode\u003e\u0026quot;ba\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;cdef\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOne possible string \u003ccode\u003et\u003c/code\u003e could be \u003ccode\u003e\u0026quot;cdef\u0026quot;\u003c/code\u003e, notice that \u003ccode\u003et\u003c/code\u003e can be equal to \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consist only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abba\"\n\"cdef\"",
    "formTitle": "[3138]Minimum Length of Anagram Concatenation",
    "frequency": 0.0,
    "frontendQuestionId": "3138",
    "hints": [
      "The answer should be a divisor of \u003ccode\u003es.length\u003c/code\u003e.",
      "Check each candidate naively."
    ],
    "level": 2,
    "metaData": {
      "name": "minAnagramLength",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3395",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "\"abba\"",
    "title": "Minimum Length of Anagram Concatenation",
    "titleSlug": "minimum-length-of-anagram-concatenation"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool isValid(string word) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean isValid(String word) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def isValid(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def isValid(self, word: str) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool isValid(char* word) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool IsValid(string word) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @return {boolean}\n */\nvar isValid \u003d function(word) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function isValid(word: string): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function isValid($word) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func isValid(_ word: String) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun isValid(word: String): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool isValid(String word) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func isValid(word string) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @return {Boolean}\ndef is_valid(word)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def isValid(word: String): Boolean \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn is_valid(word: String) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (is-valid word)\n  (-\u003e string? boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec is_valid(Word :: unicode:unicode_binary()) -\u003e boolean().\nis_valid(Word) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec is_valid(word :: String.t) :: boolean\n  def is_valid(word) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eA word is considered \u003cstrong\u003evalid\u003c/strong\u003e if:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIt contains a \u003cstrong\u003eminimum\u003c/strong\u003e of 3 characters.\u003c/li\u003e\n\t\u003cli\u003eIt contains only digits (0-9), and English letters (uppercase and lowercase).\u003c/li\u003e\n\t\u003cli\u003eIt includes \u003cstrong\u003eat least\u003c/strong\u003e one \u003cstrong\u003evowel\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003eIt includes \u003cstrong\u003eat least\u003c/strong\u003e one \u003cstrong\u003econsonant\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou are given a string \u003ccode\u003eword\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003eword\u003c/code\u003e is valid, otherwise, return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNotes:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;e\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;i\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;o\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;u\u0026#39;\u003c/code\u003e, and their uppercases are \u003cstrong\u003evowels\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003eA \u003cstrong\u003econsonant\u003c/strong\u003e is an English letter that is not a vowel.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;234Adas\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThis word satisfies the conditions.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;b3\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe length of this word is fewer than 3, and does not have a vowel.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;a3$e\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThis word contains a \u003ccode\u003e\u0026#39;$\u0026#39;\u003c/code\u003e character and does not have a consonant.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d word.length \u0026lt;\u003d 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists of English uppercase and lowercase letters, digits, \u003ccode\u003e\u0026#39;@\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;#\u0026#39;\u003c/code\u003e, and \u003ccode\u003e\u0026#39;$\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"234Adas\"\n\"b3\"\n\"a3$e\"",
    "formTitle": "[3136]Valid Word",
    "frequency": 0.0,
    "frontendQuestionId": "3136",
    "hints": [
      "Use if-else to check all the conditions."
    ],
    "level": 1,
    "metaData": {
      "name": "isValid",
      "params": [
        {
          "name": "word",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3396",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"234Adas\"",
    "title": "Valid Word",
    "titleSlug": "valid-word"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int addedInteger(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int addedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def addedInteger(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def addedInteger(self, nums1: List[int], nums2: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int addedInteger(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int AddedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar addedInteger \u003d function(nums1, nums2) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function addedInteger(nums1: number[], nums2: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function addedInteger($nums1, $nums2) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func addedInteger(_ nums1: [Int], _ nums2: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun addedInteger(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int addedInteger(List\u003cint\u003e nums1, List\u003cint\u003e nums2) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func addedInteger(nums1 []int, nums2 []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef added_integer(nums1, nums2)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def addedInteger(nums1: Array[Int], nums2: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn added_integer(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (added-integer nums1 nums2)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec added_integer(Nums1 :: [integer()], Nums2 :: [integer()]) -\u003e integer().\nadded_integer(Nums1, Nums2) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec added_integer(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def added_integer(nums1, nums2) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two arrays of equal length, \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eEach element in \u003ccode\u003enums1\u003c/code\u003e has been increased (or decreased in the case of negative) by an integer, represented by the variable \u003ccode\u003ex\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs a result, \u003ccode\u003enums1\u003c/code\u003e becomes \u003cstrong\u003eequal\u003c/strong\u003e to \u003ccode\u003enums2\u003c/code\u003e. Two arrays are considered \u003cstrong\u003eequal\u003c/strong\u003e when they contain the same integers with the same frequencies.\u003c/p\u003e\n\n\u003cp\u003eReturn the integer \u003ccode\u003ex\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003enums1 \u003d [2,6,4], nums2 \u003d [9,7,5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe integer added to each element of \u003ccode\u003enums1\u003c/code\u003e is 3.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003enums1 \u003d [10], nums2 \u003d [5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e-5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe integer added to each element of \u003ccode\u003enums1\u003c/code\u003e is -5.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003enums1 \u003d [1,1,1,1], nums2 \u003d [1,1,1,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe integer added to each element of \u003ccode\u003enums1\u003c/code\u003e is 0.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums1.length \u003d\u003d nums2.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums1[i], nums2[i] \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe test cases are generated in a way that there is an integer \u003ccode\u003ex\u003c/code\u003e such that \u003ccode\u003enums1\u003c/code\u003e can become equal to \u003ccode\u003enums2\u003c/code\u003e by adding \u003ccode\u003ex\u003c/code\u003e to each element of \u003ccode\u003enums1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[2,6,4]\n[9,7,5]\n[10]\n[5]\n[1,1,1,1]\n[1,1,1,1]",
    "formTitle": "[3131]Find the Integer Added to Array I",
    "frequency": 0.0,
    "frontendQuestionId": "3131",
    "hints": [
      "Notice that, after sorting both arrays, there should be a one-to-one correspondence between every element.",
      "Thus \u003ccode\u003ex \u003d min(nums2) - min(nums1)\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "addedInteger",
      "params": [
        {
          "name": "nums1",
          "type": "integer[]"
        },
        {
          "name": "nums2",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3397",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[2,6,4]\n[9,7,5]",
    "title": "Find the Integer Added to Array I",
    "titleSlug": "find-the-integer-added-to-array-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool canMakeSquare(vector\u003cvector\u003cchar\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean canMakeSquare(char[][] grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def canMakeSquare(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def canMakeSquare(self, grid: List[List[str]]) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool canMakeSquare(char** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool CanMakeSquare(char[][] grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {character[][]} grid\n * @return {boolean}\n */\nvar canMakeSquare \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function canMakeSquare(grid: string[][]): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Boolean\n     */\n    function canMakeSquare($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func canMakeSquare(_ grid: [[Character]]) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun canMakeSquare(grid: Array\u003cCharArray\u003e): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool canMakeSquare(List\u003cList\u003cString\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func canMakeSquare(grid [][]byte) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Character[][]} grid\n# @return {Boolean}\ndef can_make_square(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def canMakeSquare(grid: Array[Array[Char]]): Boolean \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn can_make_square(grid: Vec\u003cVec\u003cchar\u003e\u003e) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (can-make-square grid)\n  (-\u003e (listof (listof char?)) boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec can_make_square(Grid :: [[char()]]) -\u003e boolean().\ncan_make_square(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec can_make_square(grid :: [[char]]) :: boolean\n  def can_make_square(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D matrix \u003ccode\u003egrid\u003c/code\u003e of size \u003ccode\u003e3 x 3\u003c/code\u003e consisting only of characters \u003ccode\u003e\u0026#39;B\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;W\u0026#39;\u003c/code\u003e. Character \u003ccode\u003e\u0026#39;W\u0026#39;\u003c/code\u003e represents the white color\u003c!-- notionvc: 06a49cc0-a296-4bd2-9bfe-c8818edeb53a --\u003e, and character \u003ccode\u003e\u0026#39;B\u0026#39;\u003c/code\u003e represents the black color\u003c!-- notionvc: 06a49cc0-a296-4bd2-9bfe-c8818edeb53a --\u003e.\u003c/p\u003e\n\n\u003cp\u003eYour task is to change the color of \u003cstrong\u003eat most one\u003c/strong\u003e cell\u003c!-- notionvc: c04cb478-8dd5-49b1-80bb-727c6b1e0232 --\u003e so that the matrix has a \u003ccode\u003e2 x 2\u003c/code\u003e square where all cells are of the same color.\u003c!-- notionvc: adf957e1-fa0f-40e5-9a2e-933b95e276a7 --\u003e\u003c/p\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if it is possible to create a \u003ccode\u003e2 x 2\u003c/code\u003e square of the same color, otherwise, return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cstyle type\u003d\"text/css\"\u003e.grid-container {\n  display: grid;\n  grid-template-columns: 30px 30px 30px;\n  padding: 10px;\n}\n.grid-item {\n  background-color: black;\n  border: 1px solid gray;\n  height: 30px;\n  font-size: 30px;\n  text-align: center;\n}\n.grid-item-white {\n  background-color: white;\n}\n\u003c/style\u003e\n\u003cstyle class\u003d\"darkreader darkreader--sync\" media\u003d\"screen\" type\u003d\"text/css\"\u003e\n\u003c/style\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"grid-container\"\u003e\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[\u0026quot;B\u0026quot;,\u0026quot;W\u0026quot;,\u0026quot;B\u0026quot;],[\u0026quot;B\u0026quot;,\u0026quot;W\u0026quot;,\u0026quot;W\u0026quot;],[\u0026quot;B\u0026quot;,\u0026quot;W\u0026quot;,\u0026quot;B\u0026quot;]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIt can be done by changing the color of the \u003ccode\u003egrid[0][2]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"grid-container\"\u003e\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[\u0026quot;B\u0026quot;,\u0026quot;W\u0026quot;,\u0026quot;B\u0026quot;],[\u0026quot;W\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;W\u0026quot;],[\u0026quot;B\u0026quot;,\u0026quot;W\u0026quot;,\u0026quot;B\u0026quot;]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIt cannot be done by changing at most one cell.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"grid-container\"\u003e\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\n\u003cdiv class\u003d\"grid-item grid-item-white\"\u003e\u0026nbsp;\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[\u0026quot;B\u0026quot;,\u0026quot;W\u0026quot;,\u0026quot;B\u0026quot;],[\u0026quot;B\u0026quot;,\u0026quot;W\u0026quot;,\u0026quot;W\u0026quot;],[\u0026quot;B\u0026quot;,\u0026quot;W\u0026quot;,\u0026quot;W\u0026quot;]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003egrid\u003c/code\u003e already contains a \u003ccode\u003e2 x 2\u003c/code\u003e square of the same color.\u003c!-- notionvc: 9a8b2d3d-1e73-457a-abe0-c16af51ad5c2 --\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003egrid.length \u003d\u003d 3\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003egrid[i].length \u003d\u003d 3\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003egrid[i][j]\u003c/code\u003e is either \u003ccode\u003e\u0026#39;W\u0026#39;\u003c/code\u003e or \u003ccode\u003e\u0026#39;B\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]\n[[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]]\n[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]]",
    "formTitle": "[3127]Make a Square with the Same Color",
    "frequency": 0.0,
    "frontendQuestionId": "3127",
    "hints": [
      "It is impossible to create \u003ccode\u003e2 x 2\u003c/code\u003e square with the same color by changing the color of at most one cell when the number of \u003ccode\u003e鈥榃\u0027\u003c/code\u003e or \u003ccode\u003e\u0027B鈥�\u003c/code\u003e in all squares is 2."
    ],
    "level": 1,
    "metaData": {
      "name": "canMakeSquare",
      "params": [
        {
          "name": "grid",
          "type": "character[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3398",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]",
    "title": "Make a Square with the Same Color",
    "titleSlug": "make-a-square-with-the-same-color"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumAddedInteger(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumAddedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumAddedInteger(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumAddedInteger(self, nums1: List[int], nums2: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumAddedInteger(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumAddedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minimumAddedInteger \u003d function(nums1, nums2) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumAddedInteger(nums1: number[], nums2: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minimumAddedInteger($nums1, $nums2) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumAddedInteger(_ nums1: [Int], _ nums2: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumAddedInteger(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumAddedInteger(List\u003cint\u003e nums1, List\u003cint\u003e nums2) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumAddedInteger(nums1 []int, nums2 []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef minimum_added_integer(nums1, nums2)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumAddedInteger(nums1: Array[Int], nums2: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_added_integer(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-added-integer nums1 nums2)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_added_integer(Nums1 :: [integer()], Nums2 :: [integer()]) -\u003e integer().\nminimum_added_integer(Nums1, Nums2) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_added_integer(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def minimum_added_integer(nums1, nums2) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFrom \u003ccode\u003enums1\u003c/code\u003e two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable \u003ccode\u003ex\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs a result, \u003ccode\u003enums1\u003c/code\u003e becomes \u003cstrong\u003eequal\u003c/strong\u003e to \u003ccode\u003enums2\u003c/code\u003e. Two arrays are considered \u003cstrong\u003eequal\u003c/strong\u003e when they contain the same integers with the same frequencies.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e possible integer\u003cem\u003e \u003c/em\u003e\u003ccode\u003ex\u003c/code\u003e\u003cem\u003e \u003c/em\u003ethat achieves this equivalence.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003enums1 \u003d [4,20,16,12,8], nums2 \u003d [14,18,10]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e-2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAfter removing elements at indices \u003ccode\u003e[0,4]\u003c/code\u003e and adding -2, \u003ccode\u003enums1\u003c/code\u003e becomes \u003ccode\u003e[18,14,10]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003enums1 \u003d [3,5,5,3], nums2 \u003d [7,7]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\" style\u003d\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAfter removing elements at indices \u003ccode\u003e[0,3]\u003c/code\u003e and adding 2, \u003ccode\u003enums1\u003c/code\u003e becomes \u003ccode\u003e[7,7]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d nums1.length \u0026lt;\u003d 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums2.length \u003d\u003d nums1.length - 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums1[i], nums2[i] \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe test cases are generated in a way that there is an integer \u003ccode\u003ex\u003c/code\u003e such that \u003ccode\u003enums1\u003c/code\u003e can become equal to \u003ccode\u003enums2\u003c/code\u003e by removing two elements and adding \u003ccode\u003ex\u003c/code\u003e to each element of \u003ccode\u003enums1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[4,20,16,12,8]\n[14,18,10]\n[3,5,5,3]\n[7,7]",
    "formTitle": "[3132]Find the Integer Added to Array II",
    "frequency": 0.0,
    "frontendQuestionId": "3132",
    "hints": [
      "Try all possibilities to remove 2 elements from \u003ccode\u003enums1\u003c/code\u003e.",
      "\u003ccode\u003ex\u003c/code\u003e should be equal to \u003ccode\u003emin(nums2) - min(nums1)\u003c/code\u003e, check it naively."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumAddedInteger",
      "params": [
        {
          "name": "nums1",
          "type": "integer[]"
        },
        {
          "name": "nums2",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3399",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "鉁�",
    "testCase": "[4,20,16,12,8]\n[14,18,10]",
    "title": "Find the Integer Added to Array II",
    "titleSlug": "find-the-integer-added-to-array-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minCostToEqualizeArray(vector\u003cint\u003e\u0026 nums, int cost1, int cost2) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minCostToEqualizeArray(self, nums, cost1, cost2):\n        \"\"\"\n        :type nums: List[int]\n        :type cost1: int\n        :type cost2: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minCostToEqualizeArray(self, nums: List[int], cost1: int, cost2: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minCostToEqualizeArray(int* nums, int numsSize, int cost1, int cost2) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} cost1\n * @param {number} cost2\n * @return {number}\n */\nvar minCostToEqualizeArray \u003d function(nums, cost1, cost2) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minCostToEqualizeArray(nums: number[], cost1: number, cost2: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $cost1\n     * @param Integer $cost2\n     * @return Integer\n     */\n    function minCostToEqualizeArray($nums, $cost1, $cost2) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minCostToEqualizeArray(_ nums: [Int], _ cost1: Int, _ cost2: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minCostToEqualizeArray(nums: IntArray, cost1: Int, cost2: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minCostToEqualizeArray(List\u003cint\u003e nums, int cost1, int cost2) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minCostToEqualizeArray(nums []int, cost1 int, cost2 int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} cost1\n# @param {Integer} cost2\n# @return {Integer}\ndef min_cost_to_equalize_array(nums, cost1, cost2)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minCostToEqualizeArray(nums: Array[Int], cost1: Int, cost2: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_cost_to_equalize_array(nums: Vec\u003ci32\u003e, cost1: i32, cost2: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-cost-to-equalize-array nums cost1 cost2)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_cost_to_equalize_array(Nums :: [integer()], Cost1 :: integer(), Cost2 :: integer()) -\u003e integer().\nmin_cost_to_equalize_array(Nums, Cost1, Cost2) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_cost_to_equalize_array(nums :: [integer], cost1 :: integer, cost2 :: integer) :: integer\n  def min_cost_to_equalize_array(nums, cost1, cost2) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e and two integers \u003ccode\u003ecost1\u003c/code\u003e and \u003ccode\u003ecost2\u003c/code\u003e. You are allowed to perform \u003cstrong\u003eeither\u003c/strong\u003e of the following operations \u003cstrong\u003eany\u003c/strong\u003e number of times:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose an index \u003ccode\u003ei\u003c/code\u003e from \u003ccode\u003enums\u003c/code\u003e and \u003cstrong\u003eincrease\u003c/strong\u003e \u003ccode\u003enums[i]\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e for a cost of \u003ccode\u003ecost1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eChoose two \u003cstrong\u003edifferent\u003c/strong\u003e indices \u003ccode\u003ei\u003c/code\u003e, \u003ccode\u003ej\u003c/code\u003e, from \u003ccode\u003enums\u003c/code\u003e and \u003cstrong\u003eincrease\u003c/strong\u003e \u003ccode\u003enums[i]\u003c/code\u003e and \u003ccode\u003enums[j]\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e for a cost of \u003ccode\u003ecost2\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e \u003cstrong\u003ecost\u003c/strong\u003e required to make all elements in the array \u003cstrong\u003eequal\u003c/strong\u003e\u003cem\u003e. \u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eSince the answer may be very large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10\u003csup\u003e9\u003c/sup\u003e + 7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [4,1], cost1 \u003d 5, cost2 \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e15\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following operations can be performed to make the values equal:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[1]\u003c/code\u003e by 1 for a cost of 5. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[4,2]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[1]\u003c/code\u003e by 1 for a cost of 5. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[4,3]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[1]\u003c/code\u003e by 1 for a cost of 5. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[4,4]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe total cost is 15.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [2,3,3,3,5], cost1 \u003d 2, cost2 \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following operations can be performed to make the values equal:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[0]\u003c/code\u003e and \u003ccode\u003enums[1]\u003c/code\u003e by 1 for a cost of 1. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[3,4,3,3,5]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[0]\u003c/code\u003e and \u003ccode\u003enums[2]\u003c/code\u003e by 1 for a cost of 1. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[4,4,4,3,5]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[0]\u003c/code\u003e and \u003ccode\u003enums[3]\u003c/code\u003e by 1 for a cost of 1. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[5,4,4,4,5]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[1]\u003c/code\u003e and \u003ccode\u003enums[2]\u003c/code\u003e by 1 for a cost of 1. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[5,5,5,4,5]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[3]\u003c/code\u003e by 1 for a cost of 2. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[5,5,5,5,5]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe total cost is 6.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,5,3], cost1 \u003d 1, cost2 \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following operations can be performed to make the values equal:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[0]\u003c/code\u003e by 1 for a cost of 1. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[4,5,3]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[0]\u003c/code\u003e by 1 for a cost of 1. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[5,5,3]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[2]\u003c/code\u003e by 1 for a cost of 1. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[5,5,4]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIncrease \u003ccode\u003enums[2]\u003c/code\u003e by 1 for a cost of 1. \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[5,5,5]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe total cost is 4.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d cost1 \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d cost2 \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[4,1]\n5\n2\n[2,3,3,3,5]\n2\n1\n[3,5,3]\n1\n3",
    "formTitle": "[3139]Minimum Cost to Equalize Array",
    "frequency": 0.0,
    "frontendQuestionId": "3139",
    "hints": [
      "How can you determine the minimum cost if you know the maximum value in the array once all values are made equal?",
      "If \u003ccode\u003ecost2 \u003e cost1 * 2\u003c/code\u003e, we should just use \u003ccode\u003ecost1\u003c/code\u003e to change all the values to the maximum one.",
      "Otherwise, it\u0027s optimal to choose the smallest two values and use \u003ccode\u003ecost2\u003c/code\u003e to increase both of them.",
      "Since the maximum value is known, calculate the required increases to equalize all values, instead of naively simulating the operations.",
      "There are not a lot of candidates for the maximum; we can try all of them and choose which uses the minimum number of operations."
    ],
    "level": 3,
    "metaData": {
      "name": "minCostToEqualizeArray",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "cost1",
          "type": "integer"
        },
        {
          "name": "cost2",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3402",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": "?",
    "testCase": "[4,1]\n5\n2",
    "title": "Minimum Cost to Equalize Array",
    "titleSlug": "minimum-cost-to-equalize-array"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumSubstringsInPartition(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumSubstringsInPartition(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumSubstringsInPartition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumSubstringsInPartition(self, s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumSubstringsInPartition(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumSubstringsInPartition(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumSubstringsInPartition \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumSubstringsInPartition(s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumSubstringsInPartition($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumSubstringsInPartition(_ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumSubstringsInPartition(s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumSubstringsInPartition(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumSubstringsInPartition(s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Integer}\ndef minimum_substrings_in_partition(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumSubstringsInPartition(s: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_substrings_in_partition(s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-substrings-in-partition s)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_substrings_in_partition(S :: unicode:unicode_binary()) -\u003e integer().\nminimum_substrings_in_partition(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_substrings_in_partition(s :: String.t) :: integer\n  def minimum_substrings_in_partition(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, you need to partition it into one or more \u003cstrong\u003ebalanced\u003c/strong\u003e \u003cspan data-keyword\u003d\"substring\"\u003esubstrings\u003c/span\u003e. For example, if \u003ccode\u003es \u003d\u003d \u0026quot;ababcc\u0026quot;\u003c/code\u003e then \u003ccode\u003e(\u0026quot;abab\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;c\u0026quot;)\u003c/code\u003e, \u003ccode\u003e(\u0026quot;ab\u0026quot;, \u0026quot;abc\u0026quot;, \u0026quot;c\u0026quot;)\u003c/code\u003e, and \u003ccode\u003e(\u0026quot;ababcc\u0026quot;)\u003c/code\u003e are all valid partitions, but \u003ccode\u003e(\u0026quot;a\u0026quot;, \u003cstrong\u003e\u0026quot;bab\u0026quot;\u003c/strong\u003e, \u0026quot;cc\u0026quot;)\u003c/code\u003e, \u003ccode\u003e(\u003cstrong\u003e\u0026quot;aba\u0026quot;\u003c/strong\u003e, \u0026quot;bc\u0026quot;, \u0026quot;c\u0026quot;)\u003c/code\u003e, and \u003ccode\u003e(\u0026quot;ab\u0026quot;, \u003cstrong\u003e\u0026quot;abcc\u0026quot;\u003c/strong\u003e)\u003c/code\u003e are not. The unbalanced substrings are bolded.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e number of substrings that you can partition \u003ccode\u003es\u003c/code\u003e into.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e A \u003cstrong\u003ebalanced\u003c/strong\u003e string is a string where each character in the string occurs the same number of times.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;fabccddg\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can partition the string \u003ccode\u003es\u003c/code\u003e into 3 substrings in one of the following ways: \u003ccode\u003e(\u0026quot;fab, \u0026quot;ccdd\u0026quot;, \u0026quot;g\u0026quot;)\u003c/code\u003e, or \u003ccode\u003e(\u0026quot;fabc\u0026quot;, \u0026quot;cd\u0026quot;, \u0026quot;dg\u0026quot;)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;abababaccddb\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can partition the string \u003ccode\u003es\u003c/code\u003e into 2 substrings like so: \u003ccode\u003e(\u0026quot;abab\u0026quot;, \u0026quot;abaccddb\u0026quot;)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of English lowercase letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"fabccddg\"\n\"abababaccddb\"",
    "formTitle": "[3144]Minimum Substring Partition of Equal Character Frequency",
    "frequency": 0.0,
    "frontendQuestionId": "3144",
    "hints": [
      "Let \u003ccode\u003edp[i]\u003c/code\u003e be the minimum number of partitions for the prefix ending at index \u003ccode\u003ei + 1\u003c/code\u003e.",
      "\u003ccode\u003edp[i]\u003c/code\u003e can be calculated as the \u003ccode\u003emin(dp[j])\u003c/code\u003e over all \u003ccode\u003ej\u003c/code\u003e such that \u003ccode\u003ej \u003c i\u003c/code\u003e and \u003ccode\u003eword[j+1鈥]\u003c/code\u003e is valid."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumSubstringsInPartition",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3403",
    "similarQuestions": [
      "[{\"title\": \"Partition Array for Maximum Sum\", \"titleSlug\": \"partition-array-for-maximum-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5206\\u9694\\u6570\\u7ec4\\u4ee5\\u5f97\\u5230\\u6700\\u5927\\u548c\", \"isPaidOnly\": false}, {\"title\": \"Partition String Into Minimum Beautiful Substrings\", \"titleSlug\": \"partition-string-into-minimum-beautiful-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5c06\\u5b57\\u7b26\\u4e32\\u5206\\u5272\\u4e3a\\u6700\\u5c11\\u7684\\u7f8e\\u4e3d\\u5b50\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "\"fabccddg\"",
    "title": "Minimum Substring Partition of Equal Character Frequency",
    "titleSlug": "minimum-substring-partition-of-equal-character-frequency"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumOperations(vector\u003cvector\u003cint\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumOperations(int[][] grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumOperations(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumOperations(self, grid: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumOperations(int** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumOperations(int[][] grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumOperations \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumOperations(grid: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumOperations($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumOperations(_ grid: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumOperations(grid: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumOperations(List\u003cList\u003cint\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumOperations(grid [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_operations(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumOperations(grid: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_operations(grid: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-operations grid)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_operations(Grid :: [[integer()]]) -\u003e integer().\nminimum_operations(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_operations(grid :: [[integer]]) :: integer\n  def minimum_operations(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D matrix \u003ccode\u003egrid\u003c/code\u003e of size \u003ccode\u003em x n\u003c/code\u003e. In one \u003cstrong\u003eoperation\u003c/strong\u003e, you can change the value of \u003cstrong\u003eany\u003c/strong\u003e cell to \u003cstrong\u003eany\u003c/strong\u003e non-negative number. You need to perform some \u003cstrong\u003eoperations\u003c/strong\u003e such that each cell \u003ccode\u003egrid[i][j]\u003c/code\u003e is:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eEqual to the cell below it, i.e. \u003ccode\u003egrid[i][j] \u003d\u003d grid[i + 1][j]\u003c/code\u003e (if it exists).\u003c/li\u003e\n\t\u003cli\u003eDifferent from the cell to its right, i.e. \u003ccode\u003egrid[i][j] !\u003d grid[i][j + 1]\u003c/code\u003e (if it exists).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e number of operations needed.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1,0,2],[1,0,2]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 0\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png\" style\u003d\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAll the cells in the matrix already satisfy the properties.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1,1,1],[0,0,0]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/27/example21.png\" style\u003d\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe matrix becomes \u003ccode\u003e[[1,0,1],[1,0,1]]\u003c/code\u003e which satisfies the properties, by doing these 3 operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChange \u003ccode\u003egrid[1][0]\u003c/code\u003e to 1.\u003c/li\u003e\n\t\u003cli\u003eChange \u003ccode\u003egrid[0][1]\u003c/code\u003e to 0.\u003c/li\u003e\n\t\u003cli\u003eChange \u003ccode\u003egrid[1][2]\u003c/code\u003e to 1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1],[2],[3]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 2\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/31/changed.png\" style\u003d\"width: 86px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is a single column. We can change the value to 1 in each cell using 2 operations.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, m \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d grid[i][j] \u0026lt;\u003d 9\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,0,2],[1,0,2]]\n[[1,1,1],[0,0,0]]\n[[1],[2],[3]]",
    "formTitle": "[3122]Minimum Number of Operations to Satisfy Conditions",
    "frequency": 0.0,
    "frontendQuestionId": "3122",
    "hints": [
      "Use Hashing to store for each frequency of candies, how many times it occurs in each box.",
      "We can use dynamic programming."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumOperations",
      "params": [
        {
          "name": "grid",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3404",
    "similarQuestions": [
      "[{\"title\": \"Candy\", \"titleSlug\": \"candy\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5206\\u53d1\\u7cd6\\u679c\", \"isPaidOnly\": false}, {\"title\": \"Distribute Candies\", \"titleSlug\": \"distribute-candies\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5206\\u7cd6\\u679c\", \"isPaidOnly\": false}, {\"title\": \"Minimum Cost of Buying Candies With Discount\", \"titleSlug\": \"minimum-cost-of-buying-candies-with-discount\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6253\\u6298\\u8d2d\\u4e70\\u7cd6\\u679c\\u7684\\u6700\\u5c0f\\u5f00\\u9500\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "[[1,0,2],[1,0,2]]",
    "title": "Minimum Number of Operations to Satisfy Conditions",
    "titleSlug": "minimum-number-of-operations-to-satisfy-conditions"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfSpecialChars(string word) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfSpecialChars(String word) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfSpecialChars(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfSpecialChars(self, word: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfSpecialChars(char* word) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfSpecialChars(string word) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar numberOfSpecialChars \u003d function(word) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfSpecialChars(word: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function numberOfSpecialChars($word) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfSpecialChars(_ word: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfSpecialChars(word: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfSpecialChars(String word) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfSpecialChars(word string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @return {Integer}\ndef number_of_special_chars(word)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfSpecialChars(word: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_special_chars(word: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-special-chars word)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_special_chars(Word :: unicode:unicode_binary()) -\u003e integer().\nnumber_of_special_chars(Word) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_special_chars(word :: String.t) :: integer\n  def number_of_special_chars(word) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003eword\u003c/code\u003e. A letter\u0026nbsp;\u003ccode\u003ec\u003c/code\u003e is called \u003cstrong\u003especial\u003c/strong\u003e if it appears \u003cstrong\u003eboth\u003c/strong\u003e in lowercase and uppercase in \u003ccode\u003eword\u003c/code\u003e, and \u003cstrong\u003eevery\u003c/strong\u003e lowercase occurrence of \u003ccode\u003ec\u003c/code\u003e appears before the \u003cstrong\u003efirst\u003c/strong\u003e uppercase occurrence of \u003ccode\u003ec\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the number of\u003cem\u003e \u003c/em\u003e\u003cstrong\u003especial\u003c/strong\u003e letters\u003cem\u003e \u003c/em\u003ein\u003cem\u003e \u003c/em\u003e\u003ccode\u003eword\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;aaAbcBC\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe special characters are \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;b\u0026#39;\u003c/code\u003e, and \u003ccode\u003e\u0026#39;c\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;abc\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are no special characters in \u003ccode\u003eword\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;AbBCab\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are no special characters in \u003ccode\u003eword\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d word.length \u0026lt;\u003d 2 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists of only lowercase and uppercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"aaAbcBC\"\n\"abc\"\n\"AbBCab\"",
    "formTitle": "[3121]Count the Number of Special Characters II",
    "frequency": 0.0,
    "frontendQuestionId": "3121",
    "hints": [
      "For each character \u003ccode\u003ec\u003c/code\u003e, store the first occurrence of its uppercase and the last occurrence of its lowercase."
    ],
    "level": 2,
    "metaData": {
      "name": "numberOfSpecialChars",
      "params": [
        {
          "name": "word",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3405",
    "similarQuestions": [
      "[{\"title\": \"Detect Capital\", \"titleSlug\": \"detect-capital\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u68c0\\u6d4b\\u5927\\u5199\\u5b57\\u6bcd\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"aaAbcBC\"",
    "title": "Count the Number of Special Characters II",
    "titleSlug": "count-the-number-of-special-characters-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfStableArrays(self, zero, one, limit):\n        \"\"\"\n        :type zero: int\n        :type one: int\n        :type limit: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfStableArrays(self, zero: int, one: int, limit: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfStableArrays(int zero, int one, int limit) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} zero\n * @param {number} one\n * @param {number} limit\n * @return {number}\n */\nvar numberOfStableArrays \u003d function(zero, one, limit) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfStableArrays(zero: number, one: number, limit: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $zero\n     * @param Integer $one\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numberOfStableArrays($zero, $one, $limit) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfStableArrays(_ zero: Int, _ one: Int, _ limit: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfStableArrays(zero: Int, one: Int, limit: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfStableArrays(int zero, int one, int limit) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfStableArrays(zero int, one int, limit int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} zero\n# @param {Integer} one\n# @param {Integer} limit\n# @return {Integer}\ndef number_of_stable_arrays(zero, one, limit)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfStableArrays(zero: Int, one: Int, limit: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_stable_arrays(zero: i32, one: i32, limit: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-stable-arrays zero one limit)\n  (-\u003e exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_stable_arrays(Zero :: integer(), One :: integer(), Limit :: integer()) -\u003e integer().\nnumber_of_stable_arrays(Zero, One, Limit) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_stable_arrays(zero :: integer, one :: integer, limit :: integer) :: integer\n  def number_of_stable_arrays(zero, one, limit) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given 3 positive integers \u003ccode\u003ezero\u003c/code\u003e, \u003ccode\u003eone\u003c/code\u003e, and \u003ccode\u003elimit\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cspan data-keyword\u003d\"binary-array\"\u003ebinary array\u003c/span\u003e \u003ccode\u003earr\u003c/code\u003e is called \u003cstrong\u003estable\u003c/strong\u003e if:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe number of occurrences of 0 in \u003ccode\u003earr\u003c/code\u003e is \u003cstrong\u003eexactly \u003c/strong\u003e\u003ccode\u003ezero\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe number of occurrences of 1 in \u003ccode\u003earr\u003c/code\u003e is \u003cstrong\u003eexactly\u003c/strong\u003e \u003ccode\u003eone\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eEach \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarray\u003c/span\u003e of \u003ccode\u003earr\u003c/code\u003e with a size greater than \u003ccode\u003elimit\u003c/code\u003e must contain \u003cstrong\u003eboth \u003c/strong\u003e0 and 1.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cem\u003etotal\u003c/em\u003e number of \u003cstrong\u003estable\u003c/strong\u003e binary arrays.\u003c/p\u003e\n\n\u003cp\u003eSince the answer may be very large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10\u003csup\u003e9\u003c/sup\u003e + 7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ezero \u003d 1, one \u003d 1, limit \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe two possible stable binary arrays are \u003ccode\u003e[1,0]\u003c/code\u003e and \u003ccode\u003e[0,1]\u003c/code\u003e, as both arrays have a single 0 and a single 1, and no subarray has a length greater than 2.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ezero \u003d 1, one \u003d 2, limit \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only possible stable binary array is \u003ccode\u003e[1,0,1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that the binary arrays \u003ccode\u003e[1,1,0]\u003c/code\u003e and \u003ccode\u003e[0,1,1]\u003c/code\u003e have subarrays of length 2 with identical elements, hence, they are not stable.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ezero \u003d 3, one \u003d 3, limit \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e14\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAll the possible stable binary arrays are \u003ccode\u003e[0,0,1,0,1,1]\u003c/code\u003e, \u003ccode\u003e[0,0,1,1,0,1]\u003c/code\u003e, \u003ccode\u003e[0,1,0,0,1,1]\u003c/code\u003e, \u003ccode\u003e[0,1,0,1,0,1]\u003c/code\u003e, \u003ccode\u003e[0,1,0,1,1,0]\u003c/code\u003e, \u003ccode\u003e[0,1,1,0,0,1]\u003c/code\u003e, \u003ccode\u003e[0,1,1,0,1,0]\u003c/code\u003e, \u003ccode\u003e[1,0,0,1,0,1]\u003c/code\u003e, \u003ccode\u003e[1,0,0,1,1,0]\u003c/code\u003e, \u003ccode\u003e[1,0,1,0,0,1]\u003c/code\u003e, \u003ccode\u003e[1,0,1,0,1,0]\u003c/code\u003e, \u003ccode\u003e[1,0,1,1,0,0]\u003c/code\u003e, \u003ccode\u003e[1,1,0,0,1,0]\u003c/code\u003e, and \u003ccode\u003e[1,1,0,1,0,0]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d zero, one, limit \u0026lt;\u003d 200\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "1\n1\n2\n1\n2\n1\n3\n3\n2",
    "formTitle": "[3129]Find All Possible Stable Binary Arrays I",
    "frequency": 0.0,
    "frontendQuestionId": "3129",
    "hints": [
      "Let \u003ccode\u003edp[a][b][c \u003d 0/1][d]\u003c/code\u003e be the number of stable arrays with exactly \u003ccode\u003ea\u003c/code\u003e 0s, \u003ccode\u003eb\u003c/code\u003e 1s and consecutive \u003ccode\u003ed\u003c/code\u003e value of \u003ccode\u003ec\u003c/code\u003e鈥檚 at the end.",
      "Try each case by appending a 0/1 at last to get the inductions."
    ],
    "level": 2,
    "metaData": {
      "name": "numberOfStableArrays",
      "params": [
        {
          "name": "zero",
          "type": "integer"
        },
        {
          "name": "one",
          "type": "integer"
        },
        {
          "name": "limit",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3406",
    "similarQuestions": [
      "[{\"title\": \"Contiguous Array\", \"titleSlug\": \"contiguous-array\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u8fde\\u7eed\\u6570\\u7ec4\", \"isPaidOnly\": false}, {\"title\": \"Binary Subarrays With Sum\", \"titleSlug\": \"binary-subarrays-with-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u76f8\\u540c\\u7684\\u4e8c\\u5143\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "1\n1\n2",
    "title": "Find All Possible Stable Binary Arrays I",
    "titleSlug": "find-all-possible-stable-binary-arrays-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfStableArrays(self, zero, one, limit):\n        \"\"\"\n        :type zero: int\n        :type one: int\n        :type limit: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfStableArrays(self, zero: int, one: int, limit: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfStableArrays(int zero, int one, int limit) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} zero\n * @param {number} one\n * @param {number} limit\n * @return {number}\n */\nvar numberOfStableArrays \u003d function(zero, one, limit) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfStableArrays(zero: number, one: number, limit: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $zero\n     * @param Integer $one\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numberOfStableArrays($zero, $one, $limit) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfStableArrays(_ zero: Int, _ one: Int, _ limit: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfStableArrays(zero: Int, one: Int, limit: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfStableArrays(int zero, int one, int limit) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfStableArrays(zero int, one int, limit int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} zero\n# @param {Integer} one\n# @param {Integer} limit\n# @return {Integer}\ndef number_of_stable_arrays(zero, one, limit)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfStableArrays(zero: Int, one: Int, limit: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_stable_arrays(zero: i32, one: i32, limit: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-stable-arrays zero one limit)\n  (-\u003e exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_stable_arrays(Zero :: integer(), One :: integer(), Limit :: integer()) -\u003e integer().\nnumber_of_stable_arrays(Zero, One, Limit) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_stable_arrays(zero :: integer, one :: integer, limit :: integer) :: integer\n  def number_of_stable_arrays(zero, one, limit) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given 3 positive integers \u003ccode\u003ezero\u003c/code\u003e, \u003ccode\u003eone\u003c/code\u003e, and \u003ccode\u003elimit\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cspan data-keyword\u003d\"binary-array\"\u003ebinary array\u003c/span\u003e \u003ccode\u003earr\u003c/code\u003e is called \u003cstrong\u003estable\u003c/strong\u003e if:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe number of occurrences of 0 in \u003ccode\u003earr\u003c/code\u003e is \u003cstrong\u003eexactly \u003c/strong\u003e\u003ccode\u003ezero\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe number of occurrences of 1 in \u003ccode\u003earr\u003c/code\u003e is \u003cstrong\u003eexactly\u003c/strong\u003e \u003ccode\u003eone\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eEach \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarray\u003c/span\u003e of \u003ccode\u003earr\u003c/code\u003e with a size greater than \u003ccode\u003elimit\u003c/code\u003e must contain \u003cstrong\u003eboth \u003c/strong\u003e0 and 1.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cem\u003etotal\u003c/em\u003e number of \u003cstrong\u003estable\u003c/strong\u003e binary arrays.\u003c/p\u003e\n\n\u003cp\u003eSince the answer may be very large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10\u003csup\u003e9\u003c/sup\u003e + 7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ezero \u003d 1, one \u003d 1, limit \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe two possible stable binary arrays are \u003ccode\u003e[1,0]\u003c/code\u003e and \u003ccode\u003e[0,1]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ezero \u003d 1, one \u003d 2, limit \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only possible stable binary array is \u003ccode\u003e[1,0,1]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ezero \u003d 3, one \u003d 3, limit \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e14\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAll the possible stable binary arrays are \u003ccode\u003e[0,0,1,0,1,1]\u003c/code\u003e, \u003ccode\u003e[0,0,1,1,0,1]\u003c/code\u003e, \u003ccode\u003e[0,1,0,0,1,1]\u003c/code\u003e, \u003ccode\u003e[0,1,0,1,0,1]\u003c/code\u003e, \u003ccode\u003e[0,1,0,1,1,0]\u003c/code\u003e, \u003ccode\u003e[0,1,1,0,0,1]\u003c/code\u003e, \u003ccode\u003e[0,1,1,0,1,0]\u003c/code\u003e, \u003ccode\u003e[1,0,0,1,0,1]\u003c/code\u003e, \u003ccode\u003e[1,0,0,1,1,0]\u003c/code\u003e, \u003ccode\u003e[1,0,1,0,0,1]\u003c/code\u003e, \u003ccode\u003e[1,0,1,0,1,0]\u003c/code\u003e, \u003ccode\u003e[1,0,1,1,0,0]\u003c/code\u003e, \u003ccode\u003e[1,1,0,0,1,0]\u003c/code\u003e, and \u003ccode\u003e[1,1,0,1,0,0]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d zero, one, limit \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "1\n1\n2\n1\n2\n1\n3\n3\n2",
    "formTitle": "[3130]Find All Possible Stable Binary Arrays II",
    "frequency": 0.0,
    "frontendQuestionId": "3130",
    "hints": [
      "Let \u003ccode\u003edp[x][y][z \u003d 0/1]\u003c/code\u003e be the number of stable arrays with exactly \u003ccode\u003ex\u003c/code\u003e zeros, \u003ccode\u003ey\u003c/code\u003e ones, and the last element is \u003ccode\u003ez\u003c/code\u003e. (0 or 1).\r\n\u003ccode\u003edp[x][y][0] + dp[x][y][1]\u003c/code\u003e is the answer for given \u003ccode\u003e(x, y)\u003c/code\u003e.",
      "If we have already placed \u003ccode\u003ex\u003c/code\u003e 1 and \u003ccode\u003ey\u003c/code\u003e 0, if we place a group of \u003ccode\u003ek\u003c/code\u003e 0, the number of ways is \u003ccode\u003edp[x-k][y][1]\u003c/code\u003e. We can place a group with size \u003ccode\u003ei\u003c/code\u003e, where \u003ccode\u003ei\u003c/code\u003e varies from 1 to \u003ccode\u003emin(limit, zero - x)\u003c/code\u003e.\r\nSimilarly, we can solve by placing a group of ones.",
      "Speed up the calculation using prefix arrays to store the sum of \u003ccode\u003edp\u003c/code\u003e states."
    ],
    "level": 3,
    "metaData": {
      "name": "numberOfStableArrays",
      "params": [
        {
          "name": "zero",
          "type": "integer"
        },
        {
          "name": "one",
          "type": "integer"
        },
        {
          "name": "limit",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3407",
    "similarQuestions": [
      "[{\"title\": \"Contiguous Array\", \"titleSlug\": \"contiguous-array\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u8fde\\u7eed\\u6570\\u7ec4\", \"isPaidOnly\": false}, {\"title\": \"Binary Subarrays With Sum\", \"titleSlug\": \"binary-subarrays-with-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u76f8\\u540c\\u7684\\u4e8c\\u5143\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "?",
    "testCase": "1\n1\n2",
    "title": "Find All Possible Stable Binary Arrays II",
    "titleSlug": "find-all-possible-stable-binary-arrays-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfSpecialChars(string word) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfSpecialChars(String word) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfSpecialChars(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfSpecialChars(self, word: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfSpecialChars(char* word) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfSpecialChars(string word) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar numberOfSpecialChars \u003d function(word) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfSpecialChars(word: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function numberOfSpecialChars($word) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfSpecialChars(_ word: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfSpecialChars(word: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfSpecialChars(String word) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfSpecialChars(word string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @return {Integer}\ndef number_of_special_chars(word)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfSpecialChars(word: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_special_chars(word: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-special-chars word)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_special_chars(Word :: unicode:unicode_binary()) -\u003e integer().\nnumber_of_special_chars(Word) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_special_chars(word :: String.t) :: integer\n  def number_of_special_chars(word) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003eword\u003c/code\u003e. A letter is called \u003cstrong\u003especial\u003c/strong\u003e if it appears \u003cstrong\u003eboth\u003c/strong\u003e in lowercase and uppercase in \u003ccode\u003eword\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the number of\u003cem\u003e \u003c/em\u003e\u003cstrong\u003especial\u003c/strong\u003e letters in\u003cem\u003e \u003c/em\u003e\u003ccode\u003eword\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;aaAbcBC\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe special characters in \u003ccode\u003eword\u003c/code\u003e are \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;b\u0026#39;\u003c/code\u003e, and \u003ccode\u003e\u0026#39;c\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;abc\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNo character in \u003ccode\u003eword\u003c/code\u003e appears in uppercase.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;abBCab\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only special character in \u003ccode\u003eword\u003c/code\u003e is \u003ccode\u003e\u0026#39;b\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d word.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists of only lowercase and uppercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"aaAbcBC\"\n\"abc\"\n\"abBCab\"",
    "formTitle": "[3120]Count the Number of Special Characters I",
    "frequency": 0.0,
    "frontendQuestionId": "3120",
    "hints": [
      "The constraints are small. For all 52 characters, check if they are present in \u003ccode\u003eword\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "numberOfSpecialChars",
      "params": [
        {
          "name": "word",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3408",
    "similarQuestions": [
      "[{\"title\": \"Detect Capital\", \"titleSlug\": \"detect-capital\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u68c0\\u6d4b\\u5927\\u5199\\u5b57\\u6bcd\", \"isPaidOnly\": false}]"
    ],
    "statusSign": "鉁�",
    "testCase": "\"aaAbcBC\"",
    "title": "Count the Number of Special Characters I",
    "titleSlug": "count-the-number-of-special-characters-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e findProductsOfElements(vector\u003cvector\u003clong long\u003e\u003e\u0026 queries) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] findProductsOfElements(long[][] queries) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findProductsOfElements(self, queries):\n        \"\"\"\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def findProductsOfElements(self, queries: List[List[int]]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findProductsOfElements(long long** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] FindProductsOfElements(long[][] queries) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar findProductsOfElements \u003d function(queries) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function findProductsOfElements(queries: number[][]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function findProductsOfElements($queries) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func findProductsOfElements(_ queries: [[Int]]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun findProductsOfElements(queries: Array\u003cLongArray\u003e): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e findProductsOfElements(List\u003cList\u003cint\u003e\u003e queries) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func findProductsOfElements(queries [][]int64) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} queries\n# @return {Integer[]}\ndef find_products_of_elements(queries)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def findProductsOfElements(queries: Array[Array[Long]]): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn find_products_of_elements(queries: Vec\u003cVec\u003ci64\u003e\u003e) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (find-products-of-elements queries)\n  (-\u003e (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec find_products_of_elements(Queries :: [[integer()]]) -\u003e [integer()].\nfind_products_of_elements(Queries) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec find_products_of_elements(queries :: [[integer]]) :: [integer]\n  def find_products_of_elements(queries) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eA \u003cstrong\u003epowerful array\u003c/strong\u003e for an integer \u003ccode\u003ex\u003c/code\u003e is the shortest sorted array of powers of two that sum up to \u003ccode\u003ex\u003c/code\u003e. For example, the powerful array for 11 is \u003ccode\u003e[1, 2, 8]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe array \u003ccode\u003ebig_nums\u003c/code\u003e is created by concatenating the \u003cstrong\u003epowerful\u003c/strong\u003e arrays for every positive integer \u003ccode\u003ei\u003c/code\u003e in ascending order: 1, 2, 3, and so forth. Thus, \u003ccode\u003ebig_nums\u003c/code\u003e starts as \u003ccode\u003e[\u003cu\u003e1\u003c/u\u003e, \u003cu\u003e2\u003c/u\u003e, \u003cu\u003e1, 2\u003c/u\u003e, \u003cu\u003e4\u003c/u\u003e, \u003cu\u003e1, 4\u003c/u\u003e, \u003cu\u003e2, 4\u003c/u\u003e, \u003cu\u003e1, 2, 4\u003c/u\u003e, \u003cu\u003e8\u003c/u\u003e, ...]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou are given a 2D integer matrix \u003ccode\u003equeries\u003c/code\u003e, where for \u003ccode\u003equeries[i] \u003d [from\u003csub\u003ei\u003c/sub\u003e, to\u003csub\u003ei\u003c/sub\u003e, mod\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e you should calculate \u003ccode\u003e(big_nums[from\u003csub\u003ei\u003c/sub\u003e] * big_nums[from\u003csub\u003ei\u003c/sub\u003e + 1] * ... * big_nums[to\u003csub\u003ei\u003c/sub\u003e]) % mod\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e\u003c!-- notionvc: a71131cc-7b52-4786-9a4b-660d6d864f89 --\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn an integer array \u003ccode\u003eanswer\u003c/code\u003e such that \u003ccode\u003eanswer[i]\u003c/code\u003e is the answer to the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e query.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003equeries \u003d [[1,3,7]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is one query.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ebig_nums[1..3] \u003d [2,1,2]\u003c/code\u003e. The product of them is 4. The remainder of 4 under 7 is 4.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003equeries \u003d [[2,5,3],[7,7,4]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[2,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are two queries.\u003c/p\u003e\n\n\u003cp\u003eFirst query: \u003ccode\u003ebig_nums[2..5] \u003d [1,2,4,1]\u003c/code\u003e. The product of them is 8. The remainder of 8 under 3 is 2.\u003c/p\u003e\n\n\u003cp\u003eSecond query: \u003ccode\u003ebig_nums[7] \u003d 2\u003c/code\u003e. The remainder of 2 under 4 is 2.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d queries.length \u0026lt;\u003d 500\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003equeries[i].length \u003d\u003d 3\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d queries[i][0] \u0026lt;\u003d queries[i][1] \u0026lt;\u003d 10\u003csup\u003e15\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d queries[i][2] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,3,7]]\n[[2,5,3],[7,7,4]]",
    "formTitle": "[3145]Find Products of Elements of Big Array",
    "frequency": 0.0,
    "frontendQuestionId": "3145",
    "hints": [
      "Find a way to calculate \u003ccode\u003ef(n, i)\u003c/code\u003e which is the total number of numbers in \u003ccode\u003e[1, n]\u003c/code\u003e when the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e bit is set in \u003ccode\u003eO(log(n))\u003c/code\u003e time.",
      "Use binary search to find the last number for each query (and there might be one 鈥渋ncomplete鈥� number for the query).",
      "Use a similar way to find the product (we only need to save the sum of exponents of power of \u003ccode\u003e2\u003c/code\u003e)."
    ],
    "level": 3,
    "metaData": {
      "name": "findProductsOfElements",
      "params": [
        {
          "name": "queries",
          "type": "long[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3411",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[[1,3,7]]",
    "title": "Find Products of Elements of Big Array",
    "titleSlug": "find-products-of-elements-of-big-array"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int findPermutationDifference(string s, string t) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int findPermutationDifference(String s, String t) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findPermutationDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def findPermutationDifference(self, s: str, t: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int findPermutationDifference(char* s, char* t) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int FindPermutationDifference(string s, string t) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar findPermutationDifference \u003d function(s, t) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function findPermutationDifference(s: string, t: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Integer\n     */\n    function findPermutationDifference($s, $t) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func findPermutationDifference(_ s: String, _ t: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun findPermutationDifference(s: String, t: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int findPermutationDifference(String s, String t) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func findPermutationDifference(s string, t string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef find_permutation_difference(s, t)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def findPermutationDifference(s: String, t: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn find_permutation_difference(s: String, t: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (find-permutation-difference s t)\n  (-\u003e string? string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec find_permutation_difference(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -\u003e integer().\nfind_permutation_difference(S, T) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec find_permutation_difference(s :: String.t, t :: String.t) :: integer\n  def find_permutation_difference(s, t) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e such that every character occurs at most once in \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e is a permutation of \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003epermutation difference\u003c/strong\u003e between \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e is defined as the \u003cstrong\u003esum\u003c/strong\u003e of the absolute difference between the index of the occurrence of each character in \u003ccode\u003es\u003c/code\u003e and the index of the occurrence of the same character in \u003ccode\u003et\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003epermutation difference\u003c/strong\u003e between \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;abc\u0026quot;, t \u003d \u0026quot;bac\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFor \u003ccode\u003es \u003d \u0026quot;abc\u0026quot;\u003c/code\u003e and \u003ccode\u003et \u003d \u0026quot;bac\u0026quot;\u003c/code\u003e, the permutation difference of \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e is equal to the sum of:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe absolute difference between the index of the occurrence of \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e in \u003ccode\u003es\u003c/code\u003e and the index of the occurrence of \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e in \u003ccode\u003et\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe absolute difference between the index of the occurrence of \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e in \u003ccode\u003es\u003c/code\u003e and the index of the occurrence of \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e in \u003ccode\u003et\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe absolute difference between the index of the occurrence of \u003ccode\u003e\u0026quot;c\u0026quot;\u003c/code\u003e in \u003ccode\u003es\u003c/code\u003e and the index of the occurrence of \u003ccode\u003e\u0026quot;c\u0026quot;\u003c/code\u003e in \u003ccode\u003et\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThat is, the permutation difference between \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e is equal to \u003ccode\u003e|0 - 1| + |2 - 2| + |1 - 0| \u003d 2\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;abcde\u0026quot;, t \u003d \u0026quot;edbac\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e12\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The permutation difference between \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e is equal to \u003ccode\u003e|0 - 3| + |1 - 2| + |2 - 4| + |3 - 1| + |4 - 0| \u003d 12\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 26\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eEach character occurs at most once in \u003ccode\u003es\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003et\u003c/code\u003e is a permutation of \u003ccode\u003es\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abc\"\n\"bac\"\n\"abcde\"\n\"edbac\"",
    "formTitle": "[3146]Permutation Difference between Two Strings",
    "frequency": 0.0,
    "frontendQuestionId": "3146",
    "hints": [
      "For each character, find the indices of its occurrences in string \u003ccode\u003es\u003c/code\u003e then in string \u003ccode\u003et\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "findPermutationDifference",
      "params": [
        {
          "name": "s",
          "type": "string"
        },
        {
          "name": "t",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3412",
    "similarQuestions": [
      "[{\"title\": \"Find the Difference\", \"titleSlug\": \"find-the-difference\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u627e\\u4e0d\\u540c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "\"abc\"\n\"bac\"",
    "title": "Permutation Difference between Two Strings",
    "titleSlug": "permutation-difference-between-two-strings"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int findWinningPlayer(vector\u003cint\u003e\u0026 skills, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int findWinningPlayer(int[] skills, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findWinningPlayer(self, skills, k):\n        \"\"\"\n        :type skills: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def findWinningPlayer(self, skills: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int findWinningPlayer(int* skills, int skillsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int FindWinningPlayer(int[] skills, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} skills\n * @param {number} k\n * @return {number}\n */\nvar findWinningPlayer \u003d function(skills, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function findWinningPlayer(skills: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $skills\n     * @param Integer $k\n     * @return Integer\n     */\n    function findWinningPlayer($skills, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func findWinningPlayer(_ skills: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun findWinningPlayer(skills: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int findWinningPlayer(List\u003cint\u003e skills, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func findWinningPlayer(skills []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} skills\n# @param {Integer} k\n# @return {Integer}\ndef find_winning_player(skills, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def findWinningPlayer(skills: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn find_winning_player(skills: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (find-winning-player skills k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec find_winning_player(Skills :: [integer()], K :: integer()) -\u003e integer().\nfind_winning_player(Skills, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec find_winning_player(skills :: [integer], k :: integer) :: integer\n  def find_winning_player(skills, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eA competition consists of \u003ccode\u003en\u003c/code\u003e players numbered from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou are given an integer array \u003ccode\u003eskills\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e and a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e, where \u003ccode\u003eskills[i]\u003c/code\u003e is the skill level of player \u003ccode\u003ei\u003c/code\u003e. All integers in \u003ccode\u003eskills\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll players are standing in a queue in order from player \u003ccode\u003e0\u003c/code\u003e to player \u003ccode\u003en - 1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe competition process is as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe first two players in the queue play a game, and the player with the \u003cstrong\u003ehigher\u003c/strong\u003e skill level wins.\u003c/li\u003e\n\t\u003cli\u003eAfter the game, the winner stays at the beginning of the queue, and the loser goes to the end of it.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe winner of the competition is the \u003cstrong\u003efirst\u003c/strong\u003e player who wins \u003ccode\u003ek\u003c/code\u003e games \u003cstrong\u003ein a row\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the initial index of the \u003cem\u003ewinning\u003c/em\u003e player.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eskills \u003d [4,2,6,3,9], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 2\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eInitially, the queue of players is \u003ccode\u003e[0,1,2,3,4]\u003c/code\u003e. The following process happens:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003ePlayers 0 and 1 play a game, since the skill of player 0 is higher than that of player 1, player 0 wins. The resulting queue is \u003ccode\u003e[0,2,3,4,1]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003ePlayers 0 and 2 play a game, since the skill of player 2 is higher than that of player 0, player 2 wins. The resulting queue is \u003ccode\u003e[2,3,4,1,0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003ePlayers 2 and 3 play a game, since the skill of player 2 is higher than that of player 3, player 2 wins. The resulting queue is \u003ccode\u003e[2,4,1,0,3]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePlayer 2 won \u003ccode\u003ek \u003d 2\u003c/code\u003e games in a row, so the winner is player 2.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eskills \u003d [2,5,4], k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eInitially, the queue of players is \u003ccode\u003e[0,1,2]\u003c/code\u003e. The following process happens:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003ePlayers 0 and 1 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is \u003ccode\u003e[1,2,0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003ePlayers 1 and 2 play a game, since the skill of player 1 is higher than that of player 2, player 1 wins. The resulting queue is \u003ccode\u003e[1,0,2]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003ePlayers 1 and 0 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is \u003ccode\u003e[1,2,0]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePlayer 1 won \u003ccode\u003ek \u003d 3\u003c/code\u003e games in a row, so the winner is player 1.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d skills.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d skills[i] \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll integers in \u003ccode\u003eskills\u003c/code\u003e are unique.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[4,2,6,3,9]\n2\n[2,5,4]\n3",
    "formTitle": "[3175]Find The First Player to win K Games in a Row",
    "frequency": 0.0,
    "frontendQuestionId": "3175",
    "hints": [
      "Suppose that \u003ccode\u003ek 鈮� n\u003c/code\u003e, there is exactly one player who can win \u003ccode\u003ek\u003c/code\u003e games in a row. Who is it?",
      "In case \u003ccode\u003ek \u003c n\u003c/code\u003e, you can simulate the competition process described."
    ],
    "level": 2,
    "metaData": {
      "name": "findWinningPlayer",
      "params": [
        {
          "name": "skills",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3413",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[4,2,6,3,9]\n2",
    "title": "Find The First Player to win K Games in a Row",
    "titleSlug": "find-the-first-player-to-win-k-games-in-a-row"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int waysToReachStair(int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def waysToReachStair(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def waysToReachStair(self, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int waysToReachStair(int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int WaysToReachStair(int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} k\n * @return {number}\n */\nvar waysToReachStair \u003d function(k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function waysToReachStair(k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function waysToReachStair($k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func waysToReachStair(_ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun waysToReachStair(k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int waysToReachStair(int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func waysToReachStair(k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} k\n# @return {Integer}\ndef ways_to_reach_stair(k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def waysToReachStair(k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn ways_to_reach_stair(k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (ways-to-reach-stair k)\n  (-\u003e exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec ways_to_reach_stair(K :: integer()) -\u003e integer().\nways_to_reach_stair(K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec ways_to_reach_stair(k :: integer) :: integer\n  def ways_to_reach_stair(k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cstrong\u003enon-negative\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e. There exists a staircase with an infinite number of stairs, with the \u003cstrong\u003elowest\u003c/strong\u003e stair numbered 0.\u003c/p\u003e\n\n\u003cp\u003eAlice has an integer \u003ccode\u003ejump\u003c/code\u003e, with an initial value of 0. She starts on stair 1 and wants to reach stair \u003ccode\u003ek\u003c/code\u003e using \u003cstrong\u003eany\u003c/strong\u003e number of \u003cstrong\u003eoperations\u003c/strong\u003e. If she is on stair \u003ccode\u003ei\u003c/code\u003e, in one \u003cstrong\u003eoperation\u003c/strong\u003e she can:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eGo down to stair \u003ccode\u003ei - 1\u003c/code\u003e. This operation \u003cstrong\u003ecannot\u003c/strong\u003e be used consecutively or on stair 0.\u003c/li\u003e\n\t\u003cli\u003eGo up to stair \u003ccode\u003ei + 2\u003csup\u003ejump\u003c/sup\u003e\u003c/code\u003e. And then, \u003ccode\u003ejump\u003c/code\u003e becomes \u003ccode\u003ejump + 1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cem\u003etotal\u003c/em\u003e number of ways Alice can reach stair \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that it is possible that Alice reaches the stair \u003ccode\u003ek\u003c/code\u003e, and performs some operations to reach the stair \u003ccode\u003ek\u003c/code\u003e again.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ek \u003d 0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe 2 possible ways of reaching stair 0 are:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAlice starts at stair 1.\n\t\u003cul\u003e\n\t\t\u003cli\u003eUsing an operation of the first type, she goes down 1 stair to reach stair 0.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eAlice starts at stair 1.\n\t\u003cul\u003e\n\t\t\u003cli\u003eUsing an operation of the first type, she goes down 1 stair to reach stair 0.\u003c/li\u003e\n\t\t\u003cli\u003eUsing an operation of the second type, she goes up 2\u003csup\u003e0\u003c/sup\u003e stairs to reach stair 1.\u003c/li\u003e\n\t\t\u003cli\u003eUsing an operation of the first type, she goes down 1 stair to reach stair 0.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ek \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe 4 possible ways of reaching stair 1 are:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAlice starts at stair 1. Alice is at stair 1.\u003c/li\u003e\n\t\u003cli\u003eAlice starts at stair 1.\n\t\u003cul\u003e\n\t\t\u003cli\u003eUsing an operation of the first type, she goes down 1 stair to reach stair 0.\u003c/li\u003e\n\t\t\u003cli\u003eUsing an operation of the second type, she goes up 2\u003csup\u003e0\u003c/sup\u003e stairs to reach stair 1.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eAlice starts at stair 1.\n\t\u003cul\u003e\n\t\t\u003cli\u003eUsing an operation of the second type, she goes up 2\u003csup\u003e0\u003c/sup\u003e stairs to reach stair 2.\u003c/li\u003e\n\t\t\u003cli\u003eUsing an operation of the first type, she goes down 1 stair to reach stair 1.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eAlice starts at stair 1.\n\t\u003cul\u003e\n\t\t\u003cli\u003eUsing an operation of the first type, she goes down 1 stair to reach stair 0.\u003c/li\u003e\n\t\t\u003cli\u003eUsing an operation of the second type, she goes up 2\u003csup\u003e0\u003c/sup\u003e stairs to reach stair 1.\u003c/li\u003e\n\t\t\u003cli\u003eUsing an operation of the first type, she goes down 1 stair to reach stair 0.\u003c/li\u003e\n\t\t\u003cli\u003eUsing an operation of the second type, she goes up 2\u003csup\u003e1\u003c/sup\u003e stairs to reach stair 2.\u003c/li\u003e\n\t\t\u003cli\u003eUsing an operation of the first type, she goes down 1 stair to reach stair 1.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "0\n1",
    "formTitle": "[3154]Find Number of Ways to Reach the K-th Stair",
    "frequency": 0.0,
    "frontendQuestionId": "3154",
    "hints": [
      "On using \u003ccode\u003ex\u003c/code\u003e operations of the second type and \u003ccode\u003ey\u003c/code\u003e operations of the first type, the stair \u003ccode\u003e2\u003csup\u003ex + 1\u003c/sup\u003e - y\u003c/code\u003e is reached.",
      "Since first operations cannot be consecutive, there are exactly \u003ccode\u003ex + 1\u003c/code\u003e positions (before and after each power of 2) to perform the second operation.",
      "Using combinatorics, we have \u003csup\u003ex + 1\u003c/sup\u003eC\u003csub\u003ey\u003c/sub\u003e number of ways to select the positions of second operations."
    ],
    "level": 3,
    "metaData": {
      "name": "waysToReachStair",
      "params": [
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3414",
    "similarQuestions": [
      "[{\"title\": \"Climbing Stairs\", \"titleSlug\": \"climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u722c\\u697c\\u68af\", \"isPaidOnly\": false}, {\"title\": \"Min Cost Climbing Stairs\", \"titleSlug\": \"min-cost-climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u4f7f\\u7528\\u6700\\u5c0f\\u82b1\\u8d39\\u722c\\u697c\\u68af\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "0",
    "title": "Find Number of Ways to Reach the K-th Stair",
    "titleSlug": "find-number-of-ways-to-reach-the-k-th-stair"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool satisfiesConditions(vector\u003cvector\u003cint\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean satisfiesConditions(int[][] grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def satisfiesConditions(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def satisfiesConditions(self, grid: List[List[int]]) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool satisfiesConditions(int** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool SatisfiesConditions(int[][] grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} grid\n * @return {boolean}\n */\nvar satisfiesConditions \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function satisfiesConditions(grid: number[][]): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Boolean\n     */\n    function satisfiesConditions($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func satisfiesConditions(_ grid: [[Int]]) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun satisfiesConditions(grid: Array\u003cIntArray\u003e): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool satisfiesConditions(List\u003cList\u003cint\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func satisfiesConditions(grid [][]int) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} grid\n# @return {Boolean}\ndef satisfies_conditions(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def satisfiesConditions(grid: Array[Array[Int]]): Boolean \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn satisfies_conditions(grid: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (satisfies-conditions grid)\n  (-\u003e (listof (listof exact-integer?)) boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec satisfies_conditions(Grid :: [[integer()]]) -\u003e boolean().\nsatisfies_conditions(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec satisfies_conditions(grid :: [[integer]]) :: boolean\n  def satisfies_conditions(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D matrix \u003ccode\u003egrid\u003c/code\u003e of size \u003ccode\u003em x n\u003c/code\u003e. You need to check if each cell \u003ccode\u003egrid[i][j]\u003c/code\u003e is:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eEqual to the cell below it, i.e. \u003ccode\u003egrid[i][j] \u003d\u003d grid[i + 1][j]\u003c/code\u003e (if it exists).\u003c/li\u003e\n\t\u003cli\u003eDifferent from the cell to its right, i.e. \u003ccode\u003egrid[i][j] !\u003d grid[i][j + 1]\u003c/code\u003e (if it exists).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if \u003cstrong\u003eall\u003c/strong\u003e the cells satisfy these conditions, otherwise, return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1,0,2],[1,0,2]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png\" style\u003d\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAll the cells in the grid satisfy the conditions.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1,1,1],[0,0,0]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/27/example21.png\" style\u003d\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAll cells in the first row are equal.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1],[2],[3]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/31/changed.png\" style\u003d\"width: 86px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eCells in the first column have different values.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, m \u0026lt;\u003d 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d grid[i][j] \u0026lt;\u003d 9\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,0,2],[1,0,2]]\n[[1,1,1],[0,0,0]]\n[[1],[2],[3]]",
    "formTitle": "[3142]Check if Grid Satisfies Conditions",
    "frequency": 0.0,
    "frontendQuestionId": "3142",
    "hints": [
      "Check if each column has same value in each cell.",
      "If the previous condition is satisfied, we can simply check the first cells in adjacent columns."
    ],
    "level": 1,
    "metaData": {
      "name": "satisfiesConditions",
      "params": [
        {
          "name": "grid",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3415",
    "similarQuestions": [
      "[{\"title\": \"Candy\", \"titleSlug\": \"candy\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5206\\u53d1\\u7cd6\\u679c\", \"isPaidOnly\": false}, {\"title\": \"Distribute Candies\", \"titleSlug\": \"distribute-candies\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5206\\u7cd6\\u679c\", \"isPaidOnly\": false}, {\"title\": \"Minimum Cost of Buying Candies With Discount\", \"titleSlug\": \"minimum-cost-of-buying-candies-with-discount\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u6253\\u6298\\u8d2d\\u4e70\\u7cd6\\u679c\\u7684\\u6700\\u5c0f\\u5f00\\u9500\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[[1,0,2],[1,0,2]]",
    "title": "Check if Grid Satisfies Conditions",
    "titleSlug": "check-if-grid-satisfies-conditions"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long sumDigitDifferences(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long sumDigitDifferences(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def sumDigitDifferences(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def sumDigitDifferences(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long sumDigitDifferences(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long SumDigitDifferences(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumDigitDifferences \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function sumDigitDifferences(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumDigitDifferences($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func sumDigitDifferences(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun sumDigitDifferences(nums: IntArray): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int sumDigitDifferences(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func sumDigitDifferences(nums []int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_digit_differences(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def sumDigitDifferences(nums: Array[Int]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn sum_digit_differences(nums: Vec\u003ci32\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (sum-digit-differences nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec sum_digit_differences(Nums :: [integer()]) -\u003e integer().\nsum_digit_differences(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec sum_digit_differences(nums :: [integer]) :: integer\n  def sum_digit_differences(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e consisting of \u003cstrong\u003epositive\u003c/strong\u003e integers where all integers have the \u003cstrong\u003esame\u003c/strong\u003e number of digits.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003edigit difference\u003c/strong\u003e between two integers is the \u003cem\u003ecount\u003c/em\u003e of different digits that are in the \u003cstrong\u003esame\u003c/strong\u003e position in the two integers.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003esum\u003c/strong\u003e of the \u003cstrong\u003edigit differences\u003c/strong\u003e between \u003cstrong\u003eall\u003c/strong\u003e pairs of integers in \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [13,23,12]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 4\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nWe have the following:\u003cbr /\u003e\n- The digit difference between \u003cstrong\u003e1\u003c/strong\u003e3 and \u003cstrong\u003e2\u003c/strong\u003e3 is 1.\u003cbr /\u003e\n- The digit difference between 1\u003cstrong\u003e3\u003c/strong\u003e and 1\u003cstrong\u003e2\u003c/strong\u003e is 1.\u003cbr /\u003e\n- The digit difference between \u003cstrong\u003e23\u003c/strong\u003e and \u003cstrong\u003e12\u003c/strong\u003e is 2.\u003cbr /\u003e\nSo the total sum of digit differences between all pairs of integers is \u003ccode\u003e1 + 1 + 2 \u003d 4\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [10,10,10,10]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nAll the integers in the array are the same. So the total sum of digit differences between all pairs of integers will be 0.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt; 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll integers in \u003ccode\u003enums\u003c/code\u003e have the same number of digits.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[13,23,12]\n[10,10,10,10]",
    "formTitle": "[3153]Sum of Digit Differences of All Pairs",
    "frequency": 0.0,
    "frontendQuestionId": "3153",
    "hints": [
      "You can solve the problem for digits that are on the same position separately, and then sum up all the answers.",
      "For each position, count the number of occurences of each digit from 0 to 9 that appear on that position.",
      "Let \u003ccode\u003ec\u003c/code\u003e be the number of occurences of a digit on a position, that will contribute with \u003ccode\u003ec * (n - c)\u003c/code\u003e to the final answer, where \u003ccode\u003en\u003c/code\u003e is the number of integers in \u003ccode\u003enums\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "sumDigitDifferences",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3416",
    "similarQuestions": [
      "[{\"title\": \"Total Hamming Distance\", \"titleSlug\": \"total-hamming-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6c49\\u660e\\u8ddd\\u79bb\\u603b\\u548c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[13,23,12]",
    "title": "Sum of Digit Differences of All Pairs",
    "titleSlug": "sum-of-digit-differences-of-all-pairs"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long countCompleteDayPairs(vector\u003cint\u003e\u0026 hours) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long countCompleteDayPairs(int[] hours) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countCompleteDayPairs(self, hours):\n        \"\"\"\n        :type hours: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countCompleteDayPairs(self, hours: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long countCompleteDayPairs(int* hours, int hoursSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long CountCompleteDayPairs(int[] hours) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} hours\n * @return {number}\n */\nvar countCompleteDayPairs \u003d function(hours) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countCompleteDayPairs(hours: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $hours\n     * @return Integer\n     */\n    function countCompleteDayPairs($hours) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countCompleteDayPairs(_ hours: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countCompleteDayPairs(hours: IntArray): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countCompleteDayPairs(List\u003cint\u003e hours) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countCompleteDayPairs(hours []int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} hours\n# @return {Integer}\ndef count_complete_day_pairs(hours)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countCompleteDayPairs(hours: Array[Int]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_complete_day_pairs(hours: Vec\u003ci32\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-complete-day-pairs hours)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_complete_day_pairs(Hours :: [integer()]) -\u003e integer().\ncount_complete_day_pairs(Hours) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_complete_day_pairs(hours :: [integer]) :: integer\n  def count_complete_day_pairs(hours) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven an integer array \u003ccode\u003ehours\u003c/code\u003e representing times in \u003cstrong\u003ehours\u003c/strong\u003e, return an integer denoting the number of pairs \u003ccode\u003ei\u003c/code\u003e, \u003ccode\u003ej\u003c/code\u003e where \u003ccode\u003ei \u0026lt; j\u003c/code\u003e and \u003ccode\u003ehours[i] + hours[j]\u003c/code\u003e forms a \u003cstrong\u003ecomplete day\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003ecomplete day\u003c/strong\u003e is defined as a time duration that is an \u003cstrong\u003eexact\u003c/strong\u003e \u003cstrong\u003emultiple\u003c/strong\u003e of 24 hours.\u003c/p\u003e\n\n\u003cp\u003eFor example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ehours \u003d [12,12,30,24,24]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The pairs of indices that form a complete day are \u003ccode\u003e(0, 1)\u003c/code\u003e and \u003ccode\u003e(3, 4)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ehours \u003d [72,48,24,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The pairs of indices that form a complete day are \u003ccode\u003e(0, 1)\u003c/code\u003e, \u003ccode\u003e(0, 2)\u003c/code\u003e, and \u003ccode\u003e(1, 2)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d hours.length \u0026lt;\u003d 5 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d hours[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[12,12,30,24,24]\n[72,48,24,3]",
    "formTitle": "[3185]Count Pairs That Form a Complete Day II",
    "frequency": 0.0,
    "frontendQuestionId": "3185",
    "hints": [
      "A pair \u003ccode\u003e(i, j)\u003c/code\u003e forms a valid complete day if \u003ccode\u003e(hours[i] + hours[j]) % 24 \u003d\u003d 0\u003c/code\u003e.",
      "Using an array or a map, for each index \u003ccode\u003ej\u003c/code\u003e moving from left to right, increase the answer by the count of \u003ccode\u003e(24 - hours[j]) % 24\u003c/code\u003e, and then increase the count of \u003ccode\u003ehours[j]\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "countCompleteDayPairs",
      "params": [
        {
          "name": "hours",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3418",
    "similarQuestions": [
      "[{\"title\": \"Check If Array Pairs Are Divisible by k\", \"titleSlug\": \"check-if-array-pairs-are-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u68c0\\u67e5\\u6570\\u7ec4\\u5bf9\\u662f\\u5426\\u53ef\\u4ee5\\u88ab k \\u6574\\u9664\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[12,12,30,24,24]",
    "title": "Count Pairs That Form a Complete Day II",
    "titleSlug": "count-pairs-that-form-a-complete-day-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxPointsInsideSquare(vector\u003cvector\u003cint\u003e\u003e\u0026 points, string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxPointsInsideSquare(int[][] points, String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxPointsInsideSquare(self, points, s):\n        \"\"\"\n        :type points: List[List[int]]\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxPointsInsideSquare(self, points: List[List[int]], s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxPointsInsideSquare(int** points, int pointsSize, int* pointsColSize, char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxPointsInsideSquare(int[][] points, string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} points\n * @param {string} s\n * @return {number}\n */\nvar maxPointsInsideSquare \u003d function(points, s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxPointsInsideSquare(points: number[][], s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @param String $s\n     * @return Integer\n     */\n    function maxPointsInsideSquare($points, $s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxPointsInsideSquare(_ points: [[Int]], _ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxPointsInsideSquare(points: Array\u003cIntArray\u003e, s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxPointsInsideSquare(List\u003cList\u003cint\u003e\u003e points, String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxPointsInsideSquare(points [][]int, s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} points\n# @param {String} s\n# @return {Integer}\ndef max_points_inside_square(points, s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxPointsInsideSquare(points: Array[Array[Int]], s: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_points_inside_square(points: Vec\u003cVec\u003ci32\u003e\u003e, s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-points-inside-square points s)\n  (-\u003e (listof (listof exact-integer?)) string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_points_inside_square(Points :: [[integer()]], S :: unicode:unicode_binary()) -\u003e integer().\nmax_points_inside_square(Points, S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_points_inside_square(points :: [[integer]], s :: String.t) :: integer\n  def max_points_inside_square(points, s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D\u003cstrong\u003e \u003c/strong\u003earray \u003ccode\u003epoints\u003c/code\u003e and a string \u003ccode\u003es\u003c/code\u003e where, \u003ccode\u003epoints[i]\u003c/code\u003e represents the coordinates of point \u003ccode\u003ei\u003c/code\u003e, and \u003ccode\u003es[i]\u003c/code\u003e represents the \u003cstrong\u003etag\u003c/strong\u003e of point \u003ccode\u003ei\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003evalid\u003c/strong\u003e square is a square centered at the origin \u003ccode\u003e(0, 0)\u003c/code\u003e, has edges parallel to the axes, and \u003cstrong\u003edoes not\u003c/strong\u003e contain two points with the same tag.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003emaximum\u003c/strong\u003e number of points contained in a \u003cstrong\u003evalid\u003c/strong\u003e square.\u003c/p\u003e\n\n\u003cp\u003eNote:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eA point is considered to be inside the square if it lies on or within the square\u0026#39;s boundaries.\u003c/li\u003e\n\t\u003cli\u003eThe side length of the square can be zero.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/29/3708-tc1.png\" style\u003d\"width: 303px; height: 303px;\" /\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epoints \u003d [[2,2],[-1,-2],[-4,4],[-3,1],[3,-3]], s \u003d \u0026quot;abdca\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe square of side length 4 covers two points \u003ccode\u003epoints[0]\u003c/code\u003e and \u003ccode\u003epoints[1]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/03/29/3708-tc2.png\" style\u003d\"width: 302px; height: 302px;\" /\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epoints \u003d [[1,1],[-2,-2],[-2,2]], s \u003d \u0026quot;abb\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe square of side length 2 covers one point, which is \u003ccode\u003epoints[0]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epoints \u003d [[1,1],[-1,-1],[2,-2]], s \u003d \u0026quot;ccd\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s impossible to make any valid squares centered at the origin such that it covers only one point among \u003ccode\u003epoints[0]\u003c/code\u003e and \u003ccode\u003epoints[1]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length, points.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epoints[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;\u003d points[i][0], points[i][1] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es.length \u003d\u003d points.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epoints\u003c/code\u003e consists of distinct coordinates.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[2,2],[-1,-2],[-4,4],[-3,1],[3,-3]]\n\"abdca\"\n[[1,1],[-2,-2],[-2,2]]\n\"abb\"\n[[1,1],[-1,-1],[2,-2]]\n\"ccd\"",
    "formTitle": "[3143]Maximum Points Inside the Square",
    "frequency": 0.0,
    "frontendQuestionId": "3143",
    "hints": [
      "The smallest edge length of a square to include point \u003ccode\u003e(x, y)\u003c/code\u003e is \u003ccode\u003emax(abs(x), abs(y)) * 2\u003c/code\u003e.",
      "Sort the points by \u003ccode\u003emax(abs(x), abs(y))\u003c/code\u003e and try each edge length, check the included point tags."
    ],
    "level": 2,
    "metaData": {
      "name": "maxPointsInsideSquare",
      "params": [
        {
          "name": "points",
          "type": "integer[][]"
        },
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3419",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[[2,2],[-1,-2],[-4,4],[-3,1],[3,-3]]\n\"abdca\"",
    "title": "Maximum Points Inside the Square",
    "titleSlug": "maximum-points-inside-the-square"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e occurrencesOfElement(vector\u003cint\u003e\u0026 nums, vector\u003cint\u003e\u0026 queries, int x) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] occurrencesOfElement(int[] nums, int[] queries, int x) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def occurrencesOfElement(self, nums, queries, x):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[int]\n        :type x: int\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def occurrencesOfElement(self, nums: List[int], queries: List[int], x: int) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* occurrencesOfElement(int* nums, int numsSize, int* queries, int queriesSize, int x, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] OccurrencesOfElement(int[] nums, int[] queries, int x) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[]} queries\n * @param {number} x\n * @return {number[]}\n */\nvar occurrencesOfElement \u003d function(nums, queries, x) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function occurrencesOfElement(nums: number[], queries: number[], x: number): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $queries\n     * @param Integer $x\n     * @return Integer[]\n     */\n    function occurrencesOfElement($nums, $queries, $x) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func occurrencesOfElement(_ nums: [Int], _ queries: [Int], _ x: Int) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun occurrencesOfElement(nums: IntArray, queries: IntArray, x: Int): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e occurrencesOfElement(List\u003cint\u003e nums, List\u003cint\u003e queries, int x) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func occurrencesOfElement(nums []int, queries []int, x int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[]} queries\n# @param {Integer} x\n# @return {Integer[]}\ndef occurrences_of_element(nums, queries, x)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def occurrencesOfElement(nums: Array[Int], queries: Array[Int], x: Int): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn occurrences_of_element(nums: Vec\u003ci32\u003e, queries: Vec\u003ci32\u003e, x: i32) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (occurrences-of-element nums queries x)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec occurrences_of_element(Nums :: [integer()], Queries :: [integer()], X :: integer()) -\u003e [integer()].\noccurrences_of_element(Nums, Queries, X) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec occurrences_of_element(nums :: [integer], queries :: [integer], x :: integer) :: [integer]\n  def occurrences_of_element(nums, queries, x) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e, an integer array \u003ccode\u003equeries\u003c/code\u003e, and an integer \u003ccode\u003ex\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor each \u003ccode\u003equeries[i]\u003c/code\u003e, you need to find the index of the \u003ccode\u003equeries[i]\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e occurrence of \u003ccode\u003ex\u003c/code\u003e in the \u003ccode\u003enums\u003c/code\u003e array. If there are fewer than \u003ccode\u003equeries[i]\u003c/code\u003e occurrences of \u003ccode\u003ex\u003c/code\u003e, the answer should be -1 for that query.\u003c/p\u003e\n\n\u003cp\u003eReturn an integer array \u003ccode\u003eanswer\u003c/code\u003e containing the answers to all queries.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,3,1,7], queries \u003d [1,3,2,4], x \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[0,-1,2,-1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor the 1\u003csup\u003est\u003c/sup\u003e query, the first occurrence of 1 is at index 0.\u003c/li\u003e\n\t\u003cli\u003eFor the 2\u003csup\u003end\u003c/sup\u003e query, there are only two occurrences of 1 in \u003ccode\u003enums\u003c/code\u003e, so the answer is -1.\u003c/li\u003e\n\t\u003cli\u003eFor the 3\u003csup\u003erd\u003c/sup\u003e query, the second occurrence of 1 is at index 2.\u003c/li\u003e\n\t\u003cli\u003eFor the 4\u003csup\u003eth\u003c/sup\u003e query, there are only two occurrences of 1 in \u003ccode\u003enums\u003c/code\u003e, so the answer is -1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3], queries \u003d [10], x \u003d 5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[-1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor the 1\u003csup\u003est\u003c/sup\u003e query, 5 doesn\u0026#39;t exist in \u003ccode\u003enums\u003c/code\u003e, so the answer is -1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length, queries.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d queries[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i], x \u0026lt;\u003d 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,3,1,7]\n[1,3,2,4]\n1\n[1,2,3]\n[10]\n5",
    "formTitle": "[3159]Find Occurrences of an Element in an Array",
    "frequency": 0.0,
    "frontendQuestionId": "3159",
    "hints": [
      "Compress the array \u003ccode\u003enums\u003c/code\u003e and save all the occurrences of each element in the separate arrays."
    ],
    "level": 2,
    "metaData": {
      "name": "occurrencesOfElement",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "queries",
          "type": "integer[]"
        },
        {
          "name": "x",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3420",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[1,3,1,7]\n[1,3,2,4]\n1",
    "title": "Find Occurrences of an Element in an Array",
    "titleSlug": "find-occurrences-of-an-element-in-an-array"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int countCompleteDayPairs(vector\u003cint\u003e\u0026 hours) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int countCompleteDayPairs(int[] hours) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countCompleteDayPairs(self, hours):\n        \"\"\"\n        :type hours: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countCompleteDayPairs(self, hours: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int countCompleteDayPairs(int* hours, int hoursSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int CountCompleteDayPairs(int[] hours) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} hours\n * @return {number}\n */\nvar countCompleteDayPairs \u003d function(hours) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countCompleteDayPairs(hours: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $hours\n     * @return Integer\n     */\n    function countCompleteDayPairs($hours) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countCompleteDayPairs(_ hours: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countCompleteDayPairs(hours: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countCompleteDayPairs(List\u003cint\u003e hours) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countCompleteDayPairs(hours []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} hours\n# @return {Integer}\ndef count_complete_day_pairs(hours)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countCompleteDayPairs(hours: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_complete_day_pairs(hours: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-complete-day-pairs hours)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_complete_day_pairs(Hours :: [integer()]) -\u003e integer().\ncount_complete_day_pairs(Hours) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_complete_day_pairs(hours :: [integer]) :: integer\n  def count_complete_day_pairs(hours) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven an integer array \u003ccode\u003ehours\u003c/code\u003e representing times in \u003cstrong\u003ehours\u003c/strong\u003e, return an integer denoting the number of pairs \u003ccode\u003ei\u003c/code\u003e, \u003ccode\u003ej\u003c/code\u003e where \u003ccode\u003ei \u0026lt; j\u003c/code\u003e and \u003ccode\u003ehours[i] + hours[j]\u003c/code\u003e forms a \u003cstrong\u003ecomplete day\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003ecomplete day\u003c/strong\u003e is defined as a time duration that is an \u003cstrong\u003eexact\u003c/strong\u003e \u003cstrong\u003emultiple\u003c/strong\u003e of 24 hours.\u003c/p\u003e\n\n\u003cp\u003eFor example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ehours \u003d [12,12,30,24,24]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe pairs of indices that form a complete day are \u003ccode\u003e(0, 1)\u003c/code\u003e and \u003ccode\u003e(3, 4)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ehours \u003d [72,48,24,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe pairs of indices that form a complete day are \u003ccode\u003e(0, 1)\u003c/code\u003e, \u003ccode\u003e(0, 2)\u003c/code\u003e, and \u003ccode\u003e(1, 2)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d hours.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d hours[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[12,12,30,24,24]\n[72,48,24,3]",
    "formTitle": "[3184]Count Pairs That Form a Complete Day I",
    "frequency": 0.0,
    "frontendQuestionId": "3184",
    "hints": [
      "Brute force all pairs \u003ccode\u003e(i, j)\u003c/code\u003e and check if they form a valid complete day. It is considered a complete day if \u003ccode\u003e(hours[i] + hours[j]) % 24 \u003d\u003d 0\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "countCompleteDayPairs",
      "params": [
        {
          "name": "hours",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3421",
    "similarQuestions": [
      "[{\"title\": \"Check If Array Pairs Are Divisible by k\", \"titleSlug\": \"check-if-array-pairs-are-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u68c0\\u67e5\\u6570\\u7ec4\\u5bf9\\u662f\\u5426\\u53ef\\u4ee5\\u88ab k \\u6574\\u9664\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[12,12,30,24,24]",
    "title": "Count Pairs That Form a Complete Day I",
    "titleSlug": "count-pairs-that-form-a-complete-day-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int valueAfterKSeconds(int n, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int valueAfterKSeconds(int n, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def valueAfterKSeconds(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def valueAfterKSeconds(self, n: int, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int valueAfterKSeconds(int n, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int ValueAfterKSeconds(int n, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar valueAfterKSeconds \u003d function(n, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function valueAfterKSeconds(n: number, k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function valueAfterKSeconds($n, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func valueAfterKSeconds(_ n: Int, _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun valueAfterKSeconds(n: Int, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int valueAfterKSeconds(int n, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func valueAfterKSeconds(n int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef value_after_k_seconds(n, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def valueAfterKSeconds(n: Int, k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn value_after_k_seconds(n: i32, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (value-after-k-seconds n k)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec value_after_k_seconds(N :: integer(), K :: integer()) -\u003e integer().\nvalue_after_k_seconds(N, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec value_after_k_seconds(n :: integer, k :: integer) :: integer\n  def value_after_k_seconds(n, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two integers \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eInitially, you start with an array \u003ccode\u003ea\u003c/code\u003e of \u003ccode\u003en\u003c/code\u003e integers where \u003ccode\u003ea[i] \u003d 1\u003c/code\u003e for all \u003ccode\u003e0 \u0026lt;\u003d i \u0026lt;\u003d n - 1\u003c/code\u003e. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, \u003ccode\u003ea[0]\u003c/code\u003e remains the same, \u003ccode\u003ea[1]\u003c/code\u003e becomes \u003ccode\u003ea[0] + a[1]\u003c/code\u003e, \u003ccode\u003ea[2]\u003c/code\u003e becomes \u003ccode\u003ea[0] + a[1] + a[2]\u003c/code\u003e, and so on.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003evalue\u003c/strong\u003e of \u003ccode\u003ea[n - 1]\u003c/code\u003e after \u003ccode\u003ek\u003c/code\u003e seconds.\u003c/p\u003e\n\n\u003cp\u003eSince the answer may be very large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10\u003csup\u003e9\u003c/sup\u003e + 7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 4, k \u003d 5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e56\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable border\u003d\"1\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003eSecond\u003c/th\u003e\n\t\t\t\u003cth\u003eState After\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,1,1,1]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,2,3,4]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,3,6,10]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,4,10,20]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,5,15,35]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e5\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,6,21,56]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 5, k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e35\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable border\u003d\"1\"\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003eSecond\u003c/th\u003e\n\t\t\t\u003cth\u003eState After\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,1,1,1,1]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,2,3,4,5]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,3,6,10,15]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e[1,4,10,20,35]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, k \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "4\n5\n5\n3",
    "formTitle": "[3179]Find the N-th Value After K Seconds",
    "frequency": 0.0,
    "frontendQuestionId": "3179",
    "hints": [
      "Calculate the prefix sum array of \u003ccode\u003enums\u003c/code\u003e, \u003ccode\u003ek\u003c/code\u003e times."
    ],
    "level": 2,
    "metaData": {
      "name": "valueAfterKSeconds",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3422",
    "similarQuestions": [
      "[{\"title\": \"Left and Right Sum Differences\", \"titleSlug\": \"left-and-right-sum-differences\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u5de6\\u53f3\\u5143\\u7d20\\u548c\\u7684\\u5dee\\u503c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "4\n5",
    "title": "Find the N-th Value After K Seconds",
    "titleSlug": "find-the-n-th-value-after-k-seconds"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumSumSubsequence(vector\u003cint\u003e\u0026 nums, vector\u003cvector\u003cint\u003e\u003e\u0026 queries) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumSumSubsequence(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumSumSubsequence(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumSumSubsequence(int[] nums, int[][] queries) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number}\n */\nvar maximumSumSubsequence \u003d function(nums, queries) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumSumSubsequence(nums: number[], queries: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer\n     */\n    function maximumSumSubsequence($nums, $queries) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumSumSubsequence(_ nums: [Int], _ queries: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumSumSubsequence(nums: IntArray, queries: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumSumSubsequence(List\u003cint\u003e nums, List\u003cList\u003cint\u003e\u003e queries) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumSumSubsequence(nums []int, queries [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer}\ndef maximum_sum_subsequence(nums, queries)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumSumSubsequence(nums: Array[Int], queries: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_sum_subsequence(nums: Vec\u003ci32\u003e, queries: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-sum-subsequence nums queries)\n  (-\u003e (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_sum_subsequence(Nums :: [integer()], Queries :: [[integer()]]) -\u003e integer().\nmaximum_sum_subsequence(Nums, Queries) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_sum_subsequence(nums :: [integer], queries :: [[integer]]) :: integer\n  def maximum_sum_subsequence(nums, queries) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e consisting of integers. You are also given a 2D array \u003ccode\u003equeries\u003c/code\u003e, where \u003ccode\u003equeries[i] \u003d [pos\u003csub\u003ei\u003c/sub\u003e, x\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor query \u003ccode\u003ei\u003c/code\u003e, we first set \u003ccode\u003enums[pos\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e equal to \u003ccode\u003ex\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e, then we calculate the answer to query \u003ccode\u003ei\u003c/code\u003e which is the \u003cstrong\u003emaximum\u003c/strong\u003e sum of a \u003cspan data-keyword\u003d\"subsequence-array\"\u003esubsequence\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e where \u003cstrong\u003eno two adjacent elements are selected\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cem\u003esum\u003c/em\u003e of the answers to all queries.\u003c/p\u003e\n\n\u003cp\u003eSince the final answer may be very large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10\u003csup\u003e9\u003c/sup\u003e + 7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003esubsequence\u003c/strong\u003e is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,5,9], queries \u003d [[1,-2],[0,-3]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e21\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nAfter the 1\u003csup\u003est\u003c/sup\u003e query, \u003ccode\u003enums \u003d [3,-2,9]\u003c/code\u003e and the maximum sum of a subsequence with non-adjacent elements is \u003ccode\u003e3 + 9 \u003d 12\u003c/code\u003e.\u003cbr /\u003e\nAfter the 2\u003csup\u003end\u003c/sup\u003e query, \u003ccode\u003enums \u003d [-3,-2,9]\u003c/code\u003e and the maximum sum of a subsequence with non-adjacent elements is 9.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [0,-1], queries \u003d [[0,-5]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nAfter the 1\u003csup\u003est\u003c/sup\u003e query, \u003ccode\u003enums \u003d [-5,-1]\u003c/code\u003e and the maximum sum of a subsequence with non-adjacent elements is 0 (choosing an empty subsequence).\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e5\u003c/sup\u003e \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d queries.length \u0026lt;\u003d 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003equeries[i] \u003d\u003d [pos\u003csub\u003ei\u003c/sub\u003e, x\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d pos\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d nums.length - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e5\u003c/sup\u003e \u0026lt;\u003d x\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,5,9]\n[[1,-2],[0,-3]]\n[0,-1]\n[[0,-5]]",
    "formTitle": "[3165]Maximum Sum of Subsequence With Non-adjacent Elements",
    "frequency": 0.0,
    "frontendQuestionId": "3165",
    "hints": [
      "Can you solve each query in \u003ccode\u003eO(nums.length)\u003c/code\u003e with dynamic programming?",
      "In order to optimize, we will use segment tree where each node contains the maximum value of (front element has been chosen or not, back element has been chosen or not)."
    ],
    "level": 3,
    "metaData": {
      "name": "maximumSumSubsequence",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "queries",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3423",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[3,5,9]\n[[1,-2],[0,-3]]",
    "title": "Maximum Sum of Subsequence With Non-adjacent Elements",
    "titleSlug": "maximum-sum-of-subsequence-with-non-adjacent-elements"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumChairs(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumChairs(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumChairs(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumChairs(self, s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumChairs(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumChairs(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumChairs \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumChairs(s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumChairs($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumChairs(_ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumChairs(s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumChairs(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumChairs(s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Integer}\ndef minimum_chairs(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumChairs(s: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_chairs(s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-chairs s)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_chairs(S :: unicode:unicode_binary()) -\u003e integer().\nminimum_chairs(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_chairs(s :: String.t) :: integer\n  def minimum_chairs(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e. Simulate events at each second \u003ccode\u003ei\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIf \u003ccode\u003es[i] \u003d\u003d \u0026#39;E\u0026#39;\u003c/code\u003e, a person enters the waiting room and takes one of the chairs in it.\u003c/li\u003e\n\t\u003cli\u003eIf \u003ccode\u003es[i] \u003d\u003d \u0026#39;L\u0026#39;\u003c/code\u003e, a person leaves the waiting room, freeing up a chair.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum \u003c/strong\u003enumber of chairs needed so that a chair is available for every person who enters the waiting room given that it is initially \u003cstrong\u003eempty\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;EEEEEEE\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e7\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAfter each second, a person enters the waiting room and no person leaves it. Therefore, a minimum of 7 chairs is needed.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;ELELEEL\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s consider that there are 2 chairs in the waiting room. The table below shows the state of the waiting room at each second.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ctable\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003eSecond\u003c/th\u003e\n\t\t\t\u003cth\u003eEvent\u003c/th\u003e\n\t\t\t\u003cth\u003ePeople in the Waiting Room\u003c/th\u003e\n\t\t\t\u003cth\u003eAvailable Chairs\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003eEnter\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003eLeave\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003eEnter\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003eLeave\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003eEnter\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e5\u003c/td\u003e\n\t\t\t\u003ctd\u003eEnter\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e6\u003c/td\u003e\n\t\t\t\u003ctd\u003eLeave\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;ELEELEELLL\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s consider that there are 3 chairs in the waiting room. The table below shows the state of the waiting room at each second.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ctable\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003eSecond\u003c/th\u003e\n\t\t\t\u003cth\u003eEvent\u003c/th\u003e\n\t\t\t\u003cth\u003ePeople in the Waiting Room\u003c/th\u003e\n\t\t\t\u003cth\u003eAvailable Chairs\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003eEnter\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003eLeave\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003eEnter\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003eEnter\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003eLeave\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e5\u003c/td\u003e\n\t\t\t\u003ctd\u003eEnter\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e6\u003c/td\u003e\n\t\t\t\u003ctd\u003eEnter\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e7\u003c/td\u003e\n\t\t\t\u003ctd\u003eLeave\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e8\u003c/td\u003e\n\t\t\t\u003ctd\u003eLeave\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e9\u003c/td\u003e\n\t\t\t\u003ctd\u003eLeave\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of the letters \u003ccode\u003e\u0026#39;E\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;L\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e represents a valid sequence of entries and exits.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"EEEEEEE\"\n\"ELELEEL\"\n\"ELEELEELLL\"",
    "formTitle": "[3168]Minimum Number of Chairs in a Waiting Room",
    "frequency": 0.0,
    "frontendQuestionId": "3168",
    "hints": [
      "Iterate from left to right over the string and keep track of the number of people in the waiting room using a variable that you will increment on every occurrence of 鈥楨鈥� and decrement on every occurrence of 鈥楲鈥�.",
      "The answer is the maximum number of people in the waiting room at any instance."
    ],
    "level": 1,
    "metaData": {
      "name": "minimumChairs",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3426",
    "similarQuestions": [
      "[{\"title\": \"Consecutive Characters\", \"titleSlug\": \"consecutive-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u8fde\\u7eed\\u5b57\\u7b26\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "\"EEEEEEE\"",
    "title": "Minimum Number of Chairs in a Waiting Room",
    "titleSlug": "minimum-number-of-chairs-in-a-waiting-room"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cbool\u003e isArraySpecial(vector\u003cint\u003e\u0026 nums, vector\u003cvector\u003cint\u003e\u003e\u0026 queries) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean[] isArraySpecial(int[] nums, int[][] queries) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def isArraySpecial(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -\u003e List[bool]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* isArraySpecial(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool[] IsArraySpecial(int[] nums, int[][] queries) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar isArraySpecial \u003d function(nums, queries) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function isArraySpecial(nums: number[], queries: number[][]): boolean[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function isArraySpecial($nums, $queries) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func isArraySpecial(_ nums: [Int], _ queries: [[Int]]) -\u003e [Bool] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun isArraySpecial(nums: IntArray, queries: Array\u003cIntArray\u003e): BooleanArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cbool\u003e isArraySpecial(List\u003cint\u003e nums, List\u003cList\u003cint\u003e\u003e queries) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func isArraySpecial(nums []int, queries [][]int) []bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef is_array_special(nums, queries)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def isArraySpecial(nums: Array[Int], queries: Array[Array[Int]]): Array[Boolean] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn is_array_special(nums: Vec\u003ci32\u003e, queries: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003cbool\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (is-array-special nums queries)\n  (-\u003e (listof exact-integer?) (listof (listof exact-integer?)) (listof boolean?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec is_array_special(Nums :: [integer()], Queries :: [[integer()]]) -\u003e [boolean()].\nis_array_special(Nums, Queries) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec is_array_special(nums :: [integer], queries :: [[integer]]) :: [boolean]\n  def is_array_special(nums, queries) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eAn array is considered \u003cstrong\u003especial\u003c/strong\u003e if every pair of its adjacent elements contains two numbers with different parity.\u003c/p\u003e\n\n\u003cp\u003eYou are given an array of integer \u003ccode\u003enums\u003c/code\u003e and a 2D integer matrix \u003ccode\u003equeries\u003c/code\u003e, where for \u003ccode\u003equeries[i] \u003d [from\u003csub\u003ei\u003c/sub\u003e, to\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e your task is to check that \u003cspan data-keyword\u003d\"subarray\"\u003esubarray\u003c/span\u003e \u003ccode\u003enums[from\u003csub\u003ei\u003c/sub\u003e..to\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e is \u003cstrong\u003especial\u003c/strong\u003e or not.\u003c/p\u003e\n\n\u003cp\u003eReturn an array of booleans \u003ccode\u003eanswer\u003c/code\u003e such that \u003ccode\u003eanswer[i]\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003enums[from\u003csub\u003ei\u003c/sub\u003e..to\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e is special.\u003c!-- notionvc: e5d6f4e2-d20a-4fbd-9c7f-22fbe52ef730 --\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,4,1,2,6], queries \u003d [[0,4]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[false]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe subarray is \u003ccode\u003e[3,4,1,2,6]\u003c/code\u003e. 2 and 6 are both even.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [4,3,1,6], queries \u003d [[0,2],[2,3]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[false,true]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eThe subarray is \u003ccode\u003e[4,3,1]\u003c/code\u003e. 3 and 1 are both odd. So the answer to this query is \u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe subarray is \u003ccode\u003e[1,6]\u003c/code\u003e. There is only one pair: \u003ccode\u003e(1,6)\u003c/code\u003e and it contains numbers with different parity. So the answer to this query is \u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d queries.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003equeries[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d queries[i][0] \u0026lt;\u003d queries[i][1] \u0026lt;\u003d nums.length - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,4,1,2,6]\n[[0,4]]\n[4,3,1,6]\n[[0,2],[2,3]]",
    "formTitle": "[3152]Special Array II",
    "frequency": 0.0,
    "frontendQuestionId": "3152",
    "hints": [
      "Try to split the array into some non-intersected continues special subarrays.",
      "For each query check that the first and the last elements of that query are in the same subarray or not."
    ],
    "level": 2,
    "metaData": {
      "name": "isArraySpecial",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "queries",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3427",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[3,4,1,2,6]\n[[0,4]]",
    "title": "Special Array II",
    "titleSlug": "special-array-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int duplicateNumbersXOR(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int duplicateNumbersXOR(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def duplicateNumbersXOR(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def duplicateNumbersXOR(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int duplicateNumbersXOR(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int DuplicateNumbersXOR(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar duplicateNumbersXOR \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function duplicateNumbersXOR(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function duplicateNumbersXOR($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func duplicateNumbersXOR(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun duplicateNumbersXOR(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int duplicateNumbersXOR(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func duplicateNumbersXOR(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef duplicate_numbers_xor(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def duplicateNumbersXOR(nums: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn duplicate_numbers_xor(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (duplicate-numbers-xor nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec duplicate_numbers_xor(Nums :: [integer()]) -\u003e integer().\nduplicate_numbers_xor(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec duplicate_numbers_xor(nums :: [integer]) :: integer\n  def duplicate_numbers_xor(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e, where each number in the array appears \u003cstrong\u003eeither\u003c/strong\u003e\u003cem\u003e \u003c/em\u003eonce\u003cem\u003e \u003c/em\u003eor\u003cem\u003e \u003c/em\u003etwice.\u003c/p\u003e\n\n\u003cp\u003eReturn the bitwise\u003cem\u003e \u003c/em\u003e\u003ccode\u003eXOR\u003c/code\u003e of all the numbers that appear twice in the array, or 0 if no number appears twice.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,1,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only number that appears twice in\u0026nbsp;\u003ccode\u003enums\u003c/code\u003e\u0026nbsp;is 1.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNo number appears twice in\u0026nbsp;\u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,2,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNumbers 1 and 2 appeared twice. \u003ccode\u003e1 XOR 2 \u003d\u003d 3\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eEach number in \u003ccode\u003enums\u003c/code\u003e appears either once or twice.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,1,3]\n[1,2,3]\n[1,2,2,1]",
    "formTitle": "[3158]Find the XOR of Numbers Which Appear Twice",
    "frequency": 0.0,
    "frontendQuestionId": "3158",
    "hints": [
      "The constraints are small. Brute force checking each value in the array."
    ],
    "level": 1,
    "metaData": {
      "name": "duplicateNumbersXOR",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3428",
    "similarQuestions": [
      "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u7684\\u6570\\u5b57\", \"isPaidOnly\": false}, {\"title\": \"Single Number II\", \"titleSlug\": \"single-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u7684\\u6570\\u5b57 II\", \"isPaidOnly\": false}, {\"title\": \"Single Number III\", \"titleSlug\": \"single-number-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u53ea\\u51fa\\u73b0\\u4e00\\u6b21\\u7684\\u6570\\u5b57 III\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,2,1,3]",
    "title": "Find the XOR of Numbers Which Appear Twice",
    "titleSlug": "find-the-xor-of-numbers-which-appear-twice"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool isArraySpecial(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean isArraySpecial(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def isArraySpecial(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def isArraySpecial(self, nums: List[int]) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool isArraySpecial(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool IsArraySpecial(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isArraySpecial \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function isArraySpecial(nums: number[]): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isArraySpecial($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func isArraySpecial(_ nums: [Int]) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun isArraySpecial(nums: IntArray): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool isArraySpecial(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func isArraySpecial(nums []int) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_array_special(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def isArraySpecial(nums: Array[Int]): Boolean \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn is_array_special(nums: Vec\u003ci32\u003e) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (is-array-special nums)\n  (-\u003e (listof exact-integer?) boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec is_array_special(Nums :: [integer()]) -\u003e boolean().\nis_array_special(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec is_array_special(nums :: [integer]) :: boolean\n  def is_array_special(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eAn array is considered \u003cstrong\u003especial\u003c/strong\u003e if every pair of its adjacent elements contains two numbers with different parity.\u003c!-- notionvc: e6bed0fa-c67d-43a7-81b4-99fb85b99e98 --\u003e\u003c/p\u003e\n\n\u003cp\u003eYou are given an array of integers \u003ccode\u003enums\u003c/code\u003e. Return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003enums\u003c/code\u003e is a \u003cstrong\u003especial\u003c/strong\u003e array, otherwise, return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is only one element. So the answer is \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [2,1,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is only two pairs: \u003ccode\u003e(2,1)\u003c/code\u003e and \u003ccode\u003e(1,4)\u003c/code\u003e, and both of them contain numbers with different parity. So the answer is \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [4,3,1,6]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enums[1]\u003c/code\u003e and \u003ccode\u003enums[2]\u003c/code\u003e are both odd. So the answer is \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1]\n[2,1,4]\n[4,3,1,6]",
    "formTitle": "[3151]Special Array I",
    "frequency": 0.0,
    "frontendQuestionId": "3151",
    "hints": [
      "Try to check the parity of each element and its previous element."
    ],
    "level": 1,
    "metaData": {
      "name": "isArraySpecial",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3429",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[1]",
    "title": "Special Array I",
    "titleSlug": "special-array-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int countDays(int days, vector\u003cvector\u003cint\u003e\u003e\u0026 meetings) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int countDays(int days, int[][] meetings) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countDays(self, days, meetings):\n        \"\"\"\n        :type days: int\n        :type meetings: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countDays(self, days: int, meetings: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int countDays(int days, int** meetings, int meetingsSize, int* meetingsColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int CountDays(int days, int[][] meetings) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} days\n * @param {number[][]} meetings\n * @return {number}\n */\nvar countDays \u003d function(days, meetings) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countDays(days: number, meetings: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $days\n     * @param Integer[][] $meetings\n     * @return Integer\n     */\n    function countDays($days, $meetings) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countDays(_ days: Int, _ meetings: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countDays(days: Int, meetings: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countDays(int days, List\u003cList\u003cint\u003e\u003e meetings) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countDays(days int, meetings [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} days\n# @param {Integer[][]} meetings\n# @return {Integer}\ndef count_days(days, meetings)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countDays(days: Int, meetings: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_days(days: i32, meetings: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-days days meetings)\n  (-\u003e exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_days(Days :: integer(), Meetings :: [[integer()]]) -\u003e integer().\ncount_days(Days, Meetings) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_days(days :: integer, meetings :: [[integer]]) :: integer\n  def count_days(days, meetings) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a positive integer \u003ccode\u003edays\u003c/code\u003e representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array \u003ccode\u003emeetings\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e where, \u003ccode\u003emeetings[i] \u003d [start_i, end_i]\u003c/code\u003e represents the starting and ending days of meeting \u003ccode\u003ei\u003c/code\u003e (inclusive).\u003c/p\u003e\n\n\u003cp\u003eReturn the count of days when the employee is available for work but no meetings are scheduled.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote: \u003c/strong\u003eThe meetings may overlap.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003edays \u003d 10, meetings \u003d [[5,7],[1,3],[9,10]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is no meeting scheduled on the 4\u003csup\u003eth\u003c/sup\u003e and 8\u003csup\u003eth\u003c/sup\u003e days.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003edays \u003d 5, meetings \u003d [[2,4],[1,3]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is no meeting scheduled on the 5\u003csup\u003eth \u003c/sup\u003eday.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003edays \u003d 6, meetings \u003d [[1,6]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 0\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eMeetings are scheduled for all working days.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d days \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d meetings.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003emeetings[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e\u003cfont face\u003d\"monospace\"\u003e1 \u0026lt;\u003d meetings[i][0] \u0026lt;\u003d meetings[i][1] \u0026lt;\u003d days\u003c/font\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "10\n[[5,7],[1,3],[9,10]]\n5\n[[2,4],[1,3]]\n6\n[[1,6]]",
    "formTitle": "[3169]Count Days Without Meetings",
    "frequency": 0.0,
    "frontendQuestionId": "3169",
    "hints": [
      "Merge the overlapping meetings and sort the new meetings timings.",
      "Return the sum of difference between the end time of a meeting and the start time of the next meeting for all adjacent pairs."
    ],
    "level": 2,
    "metaData": {
      "name": "countDays",
      "params": [
        {
          "name": "days",
          "type": "integer"
        },
        {
          "name": "meetings",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3430",
    "similarQuestions": [
      "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5408\\u5e76\\u533a\\u95f4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "10\n[[5,7],[1,3],[9,10]]",
    "title": "Count Days Without Meetings",
    "titleSlug": "count-days-without-meetings"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e findPermutation(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] findPermutation(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def findPermutation(self, nums: List[int]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findPermutation(int* nums, int numsSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] FindPermutation(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findPermutation \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function findPermutation(nums: number[]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function findPermutation($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func findPermutation(_ nums: [Int]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun findPermutation(nums: IntArray): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e findPermutation(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func findPermutation(nums []int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_permutation(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def findPermutation(nums: Array[Int]): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn find_permutation(nums: Vec\u003ci32\u003e) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (find-permutation nums)\n  (-\u003e (listof exact-integer?) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec find_permutation(Nums :: [integer()]) -\u003e [integer()].\nfind_permutation(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec find_permutation(nums :: [integer]) :: [integer]\n  def find_permutation(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e which is a \u003cspan data-keyword\u003d\"permutation\"\u003epermutation\u003c/span\u003e of \u003ccode\u003e[0, 1, 2, ..., n - 1]\u003c/code\u003e. The \u003cstrong\u003escore\u003c/strong\u003e of any permutation of \u003ccode\u003e[0, 1, 2, ..., n - 1]\u003c/code\u003e named \u003ccode\u003eperm\u003c/code\u003e is defined as:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003escore(perm) \u003d |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturn the permutation \u003ccode\u003eperm\u003c/code\u003e which has the \u003cstrong\u003eminimum\u003c/strong\u003e possible score. If \u003cem\u003emultiple\u003c/em\u003e permutations exist with this score, return the one that is \u003cspan data-keyword\u003d\"lexicographically-smaller-array\"\u003elexicographically smallest\u003c/span\u003e among them.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,0,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[0,1,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/04/example0gif.gif\" style\u003d\"width: 235px; height: 235px;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe lexicographically smallest permutation with minimum cost is \u003ccode\u003e[0,1,2]\u003c/code\u003e. The cost of this permutation is \u003ccode\u003e|0 - 0| + |1 - 2| + |2 - 1| \u003d 2\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [0,2,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[0,2,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/04/example1gif.gif\" style\u003d\"width: 235px; height: 235px;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe lexicographically smallest permutation with minimum cost is \u003ccode\u003e[0,2,1]\u003c/code\u003e. The cost of this permutation is \u003ccode\u003e|0 - 1| + |2 - 2| + |1 - 0| \u003d 2\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 14\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e is a permutation of \u003ccode\u003e[0, 1, 2, ..., n - 1]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,0,2]\n[0,2,1]",
    "formTitle": "[3149]Find the Minimum Cost Array Permutation",
    "frequency": 0.0,
    "frontendQuestionId": "3149",
    "hints": [
      "The score function is cyclic, so we can always set \u003ccode\u003eperm[0] \u003d 0\u003c/code\u003e for the smallest lexical order.",
      "It鈥檚 similar to the Traveling Salesman Problem. Use Dynamic Programming.",
      "Use a bitmask to track which elements have been assigned to \u003ccode\u003eperm\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "findPermutation",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3431",
    "similarQuestions": [
      "[{\"title\": \"Shortest Path Visiting All Nodes\", \"titleSlug\": \"shortest-path-visiting-all-nodes\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u8bbf\\u95ee\\u6240\\u6709\\u8282\\u70b9\\u7684\\u6700\\u77ed\\u8def\\u5f84\", \"isPaidOnly\": false}, {\"title\": \"Find the Shortest Superstring\", \"titleSlug\": \"find-the-shortest-superstring\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u77ed\\u8d85\\u7ea7\\u4e32\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,0,2]",
    "title": "Find the Minimum Cost Array Permutation",
    "titleSlug": "find-the-minimum-cost-array-permutation"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e queryResults(int limit, vector\u003cvector\u003cint\u003e\u003e\u0026 queries) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int[] queryResults(int limit, int[][] queries) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def queryResults(self, limit, queries):\n        \"\"\"\n        :type limit: int\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def queryResults(self, limit: int, queries: List[List[int]]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* queryResults(int limit, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int[] QueryResults(int limit, int[][] queries) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} limit\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar queryResults \u003d function(limit, queries) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function queryResults(limit: number, queries: number[][]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $limit\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function queryResults($limit, $queries) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func queryResults(_ limit: Int, _ queries: [[Int]]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun queryResults(limit: Int, queries: Array\u003cIntArray\u003e): IntArray {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e queryResults(int limit, List\u003cList\u003cint\u003e\u003e queries) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func queryResults(limit int, queries [][]int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} limit\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef query_results(limit, queries)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def queryResults(limit: Int, queries: Array[Array[Int]]): Array[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn query_results(limit: i32, queries: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (query-results limit queries)\n  (-\u003e exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec query_results(Limit :: integer(), Queries :: [[integer()]]) -\u003e [integer()].\nquery_results(Limit, Queries) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec query_results(limit :: integer, queries :: [[integer]]) :: [integer]\n  def query_results(limit, queries) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer \u003ccode\u003elimit\u003c/code\u003e and a 2D array \u003ccode\u003equeries\u003c/code\u003e of size \u003ccode\u003en x 2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThere are \u003ccode\u003elimit + 1\u003c/code\u003e balls with \u003cstrong\u003edistinct\u003c/strong\u003e labels in the range \u003ccode\u003e[0, limit]\u003c/code\u003e. Initially, all balls are uncolored. For every query in \u003ccode\u003equeries\u003c/code\u003e that is of the form \u003ccode\u003e[x, y]\u003c/code\u003e, you mark ball \u003ccode\u003ex\u003c/code\u003e with the color \u003ccode\u003ey\u003c/code\u003e. After each query, you need to find the number of \u003cstrong\u003edistinct\u003c/strong\u003e colors among the balls.\u003c/p\u003e\n\n\u003cp\u003eReturn an array \u003ccode\u003eresult\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, where \u003ccode\u003eresult[i]\u003c/code\u003e denotes the number of distinct colors \u003cem\u003eafter\u003c/em\u003e \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e query.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that when answering a query, lack of a color \u003cem\u003ewill not\u003c/em\u003e be considered as a color.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003elimit \u003d 4, queries \u003d [[1,4],[2,5],[1,3],[3,4]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[1,2,2,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop.gif\" style\u003d\"width: 455px; height: 145px;\" /\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAfter query 0, ball 1 has color 4.\u003c/li\u003e\n\t\u003cli\u003eAfter query 1, ball 1 has color 4, and ball 2 has color 5.\u003c/li\u003e\n\t\u003cli\u003eAfter query 2, ball 1 has color 3, and ball 2 has color 5.\u003c/li\u003e\n\t\u003cli\u003eAfter query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003elimit \u003d 4, queries \u003d [[0,1],[1,2],[2,2],[3,4],[4,5]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[1,2,2,3,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop2.gif\" style\u003d\"width: 457px; height: 144px;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAfter query 0, ball 0 has color 1.\u003c/li\u003e\n\t\u003cli\u003eAfter query 1, ball 0 has color 1, and ball 1 has color 2.\u003c/li\u003e\n\t\u003cli\u003eAfter query 2, ball 0 has color 1, and balls 1 and 2 have color 2.\u003c/li\u003e\n\t\u003cli\u003eAfter query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4.\u003c/li\u003e\n\t\u003cli\u003eAfter query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d limit \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u003d\u003d queries.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003equeries[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d queries[i][0] \u0026lt;\u003d limit\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d queries[i][1] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "4\n[[1,4],[2,5],[1,3],[3,4]]\n4\n[[0,1],[1,2],[2,2],[3,4],[4,5]]",
    "formTitle": "[3160]Find the Number of Distinct Colors Among the Balls",
    "frequency": 0.0,
    "frontendQuestionId": "3160",
    "hints": [
      "Use two HashMaps to maintain the color of each ball and the set of balls with each color."
    ],
    "level": 2,
    "metaData": {
      "name": "queryResults",
      "params": [
        {
          "name": "limit",
          "type": "integer"
        },
        {
          "name": "queries",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3434",
    "similarQuestions": [
      "[{\"title\": \"Maximum Number of Balls in a Box\", \"titleSlug\": \"maximum-number-of-balls-in-a-box\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u76d2\\u5b50\\u4e2d\\u5c0f\\u7403\\u7684\\u6700\\u5927\\u6570\\u91cf\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "4\n[[1,4],[2,5],[1,3],[3,4]]",
    "title": "Find the Number of Distinct Colors Among the Balls",
    "titleSlug": "find-the-number-of-distinct-colors-among-the-balls"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cbool\u003e getResults(vector\u003cvector\u003cint\u003e\u003e\u0026 queries) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public List\u003cBoolean\u003e getResults(int[][] queries) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def getResults(self, queries):\n        \"\"\"\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def getResults(self, queries: List[List[int]]) -\u003e List[bool]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* getResults(int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public IList\u003cbool\u003e GetResults(int[][] queries) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar getResults \u003d function(queries) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function getResults(queries: number[][]): boolean[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function getResults($queries) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func getResults(_ queries: [[Int]]) -\u003e [Bool] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun getResults(queries: Array\u003cIntArray\u003e): List\u003cBoolean\u003e {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cbool\u003e getResults(List\u003cList\u003cint\u003e\u003e queries) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func getResults(queries [][]int) []bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef get_results(queries)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def getResults(queries: Array[Array[Int]]): List[Boolean] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn get_results(queries: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003cbool\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (get-results queries)\n  (-\u003e (listof (listof exact-integer?)) (listof boolean?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec get_results(Queries :: [[integer()]]) -\u003e [boolean()].\nget_results(Queries) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec get_results(queries :: [[integer]]) :: [boolean]\n  def get_results(queries) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere exists an infinite number line, with its origin at 0 and extending towards the \u003cstrong\u003epositive\u003c/strong\u003e x-axis.\u003c/p\u003e\n\n\u003cp\u003eYou are given a 2D array \u003ccode\u003equeries\u003c/code\u003e, which contains two types of queries:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eFor a query of type 1, \u003ccode\u003equeries[i] \u003d [1, x]\u003c/code\u003e. Build an obstacle at distance \u003ccode\u003ex\u003c/code\u003e from the origin. It is guaranteed that there is \u003cstrong\u003eno\u003c/strong\u003e obstacle at distance \u003ccode\u003ex\u003c/code\u003e when the query is asked.\u003c/li\u003e\n\t\u003cli\u003eFor a query of type 2, \u003ccode\u003equeries[i] \u003d [2, x, sz]\u003c/code\u003e. Check if it is possible to place a block of size \u003ccode\u003esz\u003c/code\u003e \u003cem\u003eanywhere\u003c/em\u003e in the range \u003ccode\u003e[0, x]\u003c/code\u003e on the line, such that the block \u003cstrong\u003eentirely\u003c/strong\u003e lies in the range \u003ccode\u003e[0, x]\u003c/code\u003e. A block \u003cstrong\u003ecannot \u003c/strong\u003ebe placed if it intersects with any obstacle, but it may touch it. Note that you do\u003cstrong\u003e not\u003c/strong\u003e actually place the block. Queries are separate.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eReturn a boolean array \u003ccode\u003eresults\u003c/code\u003e, where \u003ccode\u003eresults[i]\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e if you can place the block specified in the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e query of type 2, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003equeries \u003d [[1,2],[2,3,3],[2,3,1],[2,2,2]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[false,true,true]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/22/example0block.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 309px; height: 129px;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFor query 0, place an obstacle at \u003ccode\u003ex \u003d 2\u003c/code\u003e. A block of size at most 2 can be placed before \u003ccode\u003ex \u003d 3\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003equeries \u003d \u003c/span\u003e[[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]\u003c!-- notionvc: 4a471445-5af1-4d72-b11b-94d351a2c8e9 --\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [true,true,false]\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/22/example1block.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 310px; height: 130px;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003ePlace an obstacle at \u003ccode\u003ex \u003d 7\u003c/code\u003e for query 0. A block of size at most 7 can be placed before \u003ccode\u003ex \u003d 7\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003ePlace an obstacle at \u003ccode\u003ex \u003d 2\u003c/code\u003e for query 2. Now, a block of size at most 5 can be placed before \u003ccode\u003ex \u003d 7\u003c/code\u003e, and a block of size at most 2 before \u003ccode\u003ex \u003d 2\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d queries.length \u0026lt;\u003d 15 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d queries[i].length \u0026lt;\u003d 3\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d queries[i][0] \u0026lt;\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d x, sz \u0026lt;\u003d min(5 * 10\u003csup\u003e4\u003c/sup\u003e, 3 * queries.length)\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that for queries of type 1, no obstacle exists at distance \u003ccode\u003ex\u003c/code\u003e when the query is asked.\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that there is at least one query of type 2.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,2],[2,3,3],[2,3,1],[2,2,2]]\n[[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]",
    "formTitle": "[3161]Block Placement Queries",
    "frequency": 0.0,
    "frontendQuestionId": "3161",
    "hints": [
      "Let \u003ccode\u003ed[x]\u003c/code\u003e be the distance of the next obstacle after \u003ccode\u003ex\u003c/code\u003e.",
      "For each query of type 2, we just need to check if \u003ccode\u003emax(d[0], d[1], d[2], 鈥[x - sz]) \u003e sz\u003c/code\u003e.",
      "Use segment tree to maintain \u003ccode\u003ed[x]\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "getResults",
      "params": [
        {
          "name": "queries",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3435",
    "similarQuestions": [
      "[{\"title\": \"Building Boxes\", \"titleSlug\": \"building-boxes\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u653e\\u7f6e\\u76d2\\u5b50\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[[1,2],[2,3,3],[2,3,1],[2,2,2]]",
    "title": "Block Placement Queries",
    "titleSlug": "block-placement-queries"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumDifference(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumDifference(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumDifference(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumDifference \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumDifference(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumDifference($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumDifference(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumDifference(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumDifference(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumDifference(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_difference(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumDifference(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_difference(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-difference nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_difference(Nums :: [integer()], K :: integer()) -\u003e integer().\nminimum_difference(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_difference(nums :: [integer], k :: integer) :: integer\n  def minimum_difference(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e. You need to find a \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarray\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e such that the \u003cstrong\u003eabsolute difference\u003c/strong\u003e between \u003ccode\u003ek\u003c/code\u003e and the bitwise \u003ccode\u003eOR\u003c/code\u003e of the subarray elements is as\u003cstrong\u003e small\u003c/strong\u003e as possible. In other words, select a subarray \u003ccode\u003enums[l..r]\u003c/code\u003e such that \u003ccode\u003e|k - (nums[l] OR nums[l + 1] ... OR nums[r])|\u003c/code\u003e is minimum.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e possible value of the absolute difference.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003esubarray\u003c/strong\u003e is a contiguous \u003cb\u003enon-empty\u003c/b\u003e sequence of elements within an array.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,4,5], k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 0\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe subarray \u003ccode\u003enums[0..1]\u003c/code\u003e has \u003ccode\u003eOR\u003c/code\u003e value 3, which gives the minimum absolute difference \u003ccode\u003e|3 - 3| \u003d 0\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,3,1,3], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe subarray \u003ccode\u003enums[1..1]\u003c/code\u003e has \u003ccode\u003eOR\u003c/code\u003e value 3, which gives the minimum absolute difference \u003ccode\u003e|3 - 2| \u003d 1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1], k \u003d 10\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e9\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is a single subarray with \u003ccode\u003eOR\u003c/code\u003e value 1, which gives the minimum absolute difference \u003ccode\u003e|10 - 1| \u003d 9\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,4,5]\n3\n[1,3,1,3]\n2\n[1]\n10",
    "formTitle": "[3171]Find Subarray With Bitwise OR Closest to K",
    "frequency": 0.0,
    "frontendQuestionId": "3171",
    "hints": [
      "Let \u003ccode\u003edp[i]\u003c/code\u003e be the set of all the bitwise \u003ccode\u003eOR\u003c/code\u003e of all the subarrays ending at index \u003ccode\u003ei\u003c/code\u003e.",
      "We start from \u003ccode\u003enums[i]\u003c/code\u003e, taking the bitwise \u003ccode\u003eOR\u003c/code\u003e result by including elements one by one from \u003ccode\u003ei\u003c/code\u003e towards left. Notice that only unset bits can become set on adding an element, and set bits never become unset again.",
      "Hence \u003ccode\u003edp[i]\u003c/code\u003e can contain at most 30 elements."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumDifference",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3436",
    "similarQuestions": [
      "[{\"title\": \"Minimum Sum of Values by Dividing Array\", \"titleSlug\": \"minimum-sum-of-values-by-dividing-array\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5212\\u5206\\u6570\\u7ec4\\u5f97\\u5230\\u6700\\u5c0f\\u7684\\u503c\\u4e4b\\u548c\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,2,4,5]\n3",
    "title": "Find Subarray With Bitwise OR Closest to K",
    "titleSlug": "find-subarray-with-bitwise-or-closest-to-k"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long maximumTotalDamage(vector\u003cint\u003e\u0026 power) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long maximumTotalDamage(int[] power) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumTotalDamage(self, power):\n        \"\"\"\n        :type power: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumTotalDamage(self, power: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long maximumTotalDamage(int* power, int powerSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MaximumTotalDamage(int[] power) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} power\n * @return {number}\n */\nvar maximumTotalDamage \u003d function(power) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumTotalDamage(power: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $power\n     * @return Integer\n     */\n    function maximumTotalDamage($power) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumTotalDamage(_ power: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumTotalDamage(power: IntArray): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumTotalDamage(List\u003cint\u003e power) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumTotalDamage(power []int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} power\n# @return {Integer}\ndef maximum_total_damage(power)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumTotalDamage(power: Array[Int]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_total_damage(power: Vec\u003ci32\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-total-damage power)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_total_damage(Power :: [integer()]) -\u003e integer().\nmaximum_total_damage(Power) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_total_damage(power :: [integer]) :: integer\n  def maximum_total_damage(power) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eA magician has various spells.\u003c/p\u003e\n\n\u003cp\u003eYou are given an array \u003ccode\u003epower\u003c/code\u003e, where each element represents the damage of a spell. Multiple spells can have the same damage value.\u003c/p\u003e\n\n\u003cp\u003eIt is a known fact that if a magician decides to cast a spell with a damage of \u003ccode\u003epower[i]\u003c/code\u003e, they \u003cstrong\u003ecannot\u003c/strong\u003e cast any spell with a damage of \u003ccode\u003epower[i] - 2\u003c/code\u003e, \u003ccode\u003epower[i] - 1\u003c/code\u003e, \u003ccode\u003epower[i] + 1\u003c/code\u003e, or \u003ccode\u003epower[i] + 2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eEach spell can be cast \u003cstrong\u003eonly once\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003emaximum\u003c/strong\u003e possible \u003cem\u003etotal damage\u003c/em\u003e that a magician can cast.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epower \u003d [1,1,3,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe maximum possible damage of 6 is produced by casting spells 0, 1, 3 with damage 1, 1, 4.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003epower \u003d [7,1,6,6]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e13\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe maximum possible damage of 13 is produced by casting spells 1, 2, 3 with damage 1, 6, 6.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d power.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d power[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,1,3,4]\n[7,1,6,6]",
    "formTitle": "[3186]Maximum Total Damage With Spell Casting",
    "frequency": 0.0,
    "frontendQuestionId": "3186",
    "hints": [
      "If we ever decide to use some spell with power \u003ccode\u003ex\u003c/code\u003e, then we will use all spells with power \u003ccode\u003ex\u003c/code\u003e.",
      "Think of dynamic programming.",
      "\u003ccode\u003edp[i][j]\u003c/code\u003e represents the maximum damage considering up to the \u003ccode\u003ei\u003c/code\u003e-th unique spell and \u003ccode\u003ej\u003c/code\u003e represents the number of spells skipped (up to 3 as per constraints)."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumTotalDamage",
      "params": [
        {
          "name": "power",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3437",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[1,1,3,4]",
    "title": "Maximum Total Damage With Spell Casting",
    "titleSlug": "maximum-total-damage-with-spell-casting"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cint\u003e countOfPeaks(vector\u003cint\u003e\u0026 nums, vector\u003cvector\u003cint\u003e\u003e\u0026 queries) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public List\u003cInteger\u003e countOfPeaks(int[] nums, int[][] queries) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countOfPeaks(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -\u003e List[int]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countOfPeaks(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public IList\u003cint\u003e CountOfPeaks(int[] nums, int[][] queries) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countOfPeaks \u003d function(nums, queries) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countOfPeaks(nums: number[], queries: number[][]): number[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function countOfPeaks($nums, $queries) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countOfPeaks(_ nums: [Int], _ queries: [[Int]]) -\u003e [Int] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countOfPeaks(nums: IntArray, queries: Array\u003cIntArray\u003e): List\u003cInt\u003e {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cint\u003e countOfPeaks(List\u003cint\u003e nums, List\u003cList\u003cint\u003e\u003e queries) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countOfPeaks(nums []int, queries [][]int) []int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef count_of_peaks(nums, queries)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countOfPeaks(nums: Array[Int], queries: Array[Array[Int]]): List[Int] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_of_peaks(nums: Vec\u003ci32\u003e, queries: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003ci32\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-of-peaks nums queries)\n  (-\u003e (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_of_peaks(Nums :: [integer()], Queries :: [[integer()]]) -\u003e [integer()].\ncount_of_peaks(Nums, Queries) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_of_peaks(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def count_of_peaks(nums, queries) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eA \u003cstrong\u003epeak\u003c/strong\u003e in an array \u003ccode\u003earr\u003c/code\u003e is an element that is \u003cstrong\u003egreater\u003c/strong\u003e than its previous and next element in \u003ccode\u003earr\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e and a 2D integer array \u003ccode\u003equeries\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou have to process queries of two types:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003equeries[i] \u003d [1, l\u003csub\u003ei\u003c/sub\u003e, r\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e, determine the count of \u003cstrong\u003epeak\u003c/strong\u003e elements in the \u003cspan data-keyword\u003d\"subarray\"\u003esubarray\u003c/span\u003e \u003ccode\u003enums[l\u003csub\u003ei\u003c/sub\u003e..r\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e.\u003c!-- notionvc: 73b20b7c-e1ab-4dac-86d0-13761094a9ae --\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003equeries[i] \u003d [2, index\u003csub\u003ei\u003c/sub\u003e, val\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e, change \u003ccode\u003enums[index\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e to \u003ccode\u003e\u003cfont face\u003d\"monospace\"\u003eval\u003csub\u003ei\u003c/sub\u003e\u003c/font\u003e\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn an array \u003ccode\u003eanswer\u003c/code\u003e containing the results of the queries of the first type in order.\u003c!-- notionvc: a9ccef22-4061-4b5a-b4cc-a2b2a0e12f30 --\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNotes:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe \u003cstrong\u003efirst\u003c/strong\u003e and the \u003cstrong\u003elast\u003c/strong\u003e element of an array or a subarray\u003c!-- notionvc: fcffef72-deb5-47cb-8719-3a3790102f73 --\u003e \u003cstrong\u003ecannot\u003c/strong\u003e be a peak.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,1,4,2,5], queries \u003d [[2,3,4],[1,0,4]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[0]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFirst query: We change \u003ccode\u003enums[3]\u003c/code\u003e to 4 and \u003ccode\u003enums\u003c/code\u003e becomes \u003ccode\u003e[3,1,4,4,5]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSecond query: The number of peaks in the \u003ccode\u003e[3,1,4,4,5]\u003c/code\u003e is 0.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [4,1,4,2,1,5], queries \u003d [[2,2,4],[1,0,2],[1,0,4]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[0,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFirst query: \u003ccode\u003enums[2]\u003c/code\u003e should become 4, but it is already set to 4.\u003c/p\u003e\n\n\u003cp\u003eSecond query: The number of peaks in the \u003ccode\u003e[4,1,4]\u003c/code\u003e is 0.\u003c/p\u003e\n\n\u003cp\u003eThird query: The second 4 is a peak in the \u003ccode\u003e[4,1,4,2,1]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d queries.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003equeries[i][0] \u003d\u003d 1\u003c/code\u003e or \u003ccode\u003equeries[i][0] \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eFor all \u003ccode\u003ei\u003c/code\u003e that:\n\t\u003cul\u003e\n\t\t\u003cli\u003e\u003ccode\u003equeries[i][0] \u003d\u003d 1\u003c/code\u003e: \u003ccode\u003e0 \u0026lt;\u003d queries[i][1] \u0026lt;\u003d queries[i][2] \u0026lt;\u003d nums.length - 1\u003c/code\u003e\u003c/li\u003e\n\t\t\u003cli\u003e\u003ccode\u003equeries[i][0] \u003d\u003d 2\u003c/code\u003e: \u003ccode\u003e0 \u0026lt;\u003d queries[i][1] \u0026lt;\u003d nums.length - 1\u003c/code\u003e, \u003ccode\u003e1 \u0026lt;\u003d queries[i][2] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,1,4,2,5]\n[[2,3,4],[1,0,4]]\n[4,1,4,2,1,5]\n[[2,2,4],[1,0,2],[1,0,4]]",
    "formTitle": "[3187]Peaks in Array",
    "frequency": 0.0,
    "frontendQuestionId": "3187",
    "hints": [
      "Let \u003ccode\u003ep[i]\u003c/code\u003e be whether \u003ccode\u003enums[i]\u003c/code\u003e is a peak in the original array. Namely \u003ccode\u003ep[i] \u003d nums[i] \u003e nums[i - 1] \u0026\u0026 nums[i] \u003e nums[i + 1]\u003c/code\u003e.",
      "Updating \u003ccode\u003enums[i]\u003c/code\u003e, only affects \u003ccode\u003ep[i]\u003c/code\u003e, \u003ccode\u003ep[i - 1]\u003c/code\u003e and \u003ccode\u003ep[i + 1]\u003c/code\u003e. We can recalculate the 3 values in constant time.",
      "The answer for \u003ccode\u003e[l\u003csub\u003ei\u003c/sub\u003e, r\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e is \u003ccode\u003ep[l\u003csub\u003ei\u003c/sub\u003e + 1] + p[l\u003csub\u003ei\u003c/sub\u003e + 2] + 鈥� + p[r\u003csub\u003ei\u003c/sub\u003e - 1]\u003c/code\u003e (note that \u003ccode\u003el\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003er\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e are not included).",
      "Use some data structures (i.e. segment tree or binary indexed tree) to maintain the subarray sum efficiently."
    ],
    "level": 3,
    "metaData": {
      "name": "countOfPeaks",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "queries",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3438",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[3,1,4,2,5]\n[[2,3,4],[1,0,4]]",
    "title": "Peaks in Array",
    "titleSlug": "peaks-in-array"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector\u003cvector\u003cint\u003e\u003e\u0026 edges1, vector\u003cvector\u003cint\u003e\u003e\u0026 edges2) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumDiameterAfterMerge(self, edges1, edges2):\n        \"\"\"\n        :type edges1: List[List[int]]\n        :type edges2: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumDiameterAfterMerge(int** edges1, int edges1Size, int* edges1ColSize, int** edges2, int edges2Size, int* edges2ColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} edges1\n * @param {number[][]} edges2\n * @return {number}\n */\nvar minimumDiameterAfterMerge \u003d function(edges1, edges2) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumDiameterAfterMerge(edges1: number[][], edges2: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges1\n     * @param Integer[][] $edges2\n     * @return Integer\n     */\n    function minimumDiameterAfterMerge($edges1, $edges2) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumDiameterAfterMerge(_ edges1: [[Int]], _ edges2: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumDiameterAfterMerge(edges1: Array\u003cIntArray\u003e, edges2: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumDiameterAfterMerge(List\u003cList\u003cint\u003e\u003e edges1, List\u003cList\u003cint\u003e\u003e edges2) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumDiameterAfterMerge(edges1 [][]int, edges2 [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} edges1\n# @param {Integer[][]} edges2\n# @return {Integer}\ndef minimum_diameter_after_merge(edges1, edges2)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumDiameterAfterMerge(edges1: Array[Array[Int]], edges2: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_diameter_after_merge(edges1: Vec\u003cVec\u003ci32\u003e\u003e, edges2: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-diameter-after-merge edges1 edges2)\n  (-\u003e (listof (listof exact-integer?)) (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_diameter_after_merge(Edges1 :: [[integer()]], Edges2 :: [[integer()]]) -\u003e integer().\nminimum_diameter_after_merge(Edges1, Edges2) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_diameter_after_merge(edges1 :: [[integer]], edges2 :: [[integer]]) :: integer\n  def minimum_diameter_after_merge(edges1, edges2) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere exist two \u003cstrong\u003eundirected \u003c/strong\u003etrees with \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003em\u003c/code\u003e nodes, numbered from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e and from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003em - 1\u003c/code\u003e, respectively. You are given two 2D integer arrays \u003ccode\u003eedges1\u003c/code\u003e and \u003ccode\u003eedges2\u003c/code\u003e of lengths \u003ccode\u003en - 1\u003c/code\u003e and \u003ccode\u003em - 1\u003c/code\u003e, respectively, where \u003ccode\u003eedges1[i] \u003d [a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e indicates that there is an edge between nodes \u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003eb\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e in the first tree and \u003ccode\u003eedges2[i] \u003d [u\u003csub\u003ei\u003c/sub\u003e, v\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e indicates that there is an edge between nodes \u003ccode\u003eu\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003ev\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e in the second tree.\u003c/p\u003e\n\n\u003cp\u003eYou must connect one node from the first tree with another node from the second tree with an edge.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum \u003c/strong\u003epossible \u003cstrong\u003ediameter \u003c/strong\u003eof the resulting tree.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003ediameter\u003c/strong\u003e of a tree is the length of the \u003cem\u003elongest\u003c/em\u003e path between any two nodes in the tree.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/22/example11-transformed.png\" /\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eedges1 \u003d [[0,1],[0,2],[0,3]], edges2 \u003d [[0,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can obtain a tree of diameter 3 by connecting node 0 from the first tree with any node from the second tree.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/04/22/example211.png\" /\u003e\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eedges1 \u003d [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 \u003d [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can obtain a tree of diameter 5 by connecting node 0 from the first tree with node 0 from the second tree.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, m \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges1.length \u003d\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges2.length \u003d\u003d m - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges1[i].length \u003d\u003d edges2[i].length \u003d\u003d 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges1[i] \u003d [a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e \u0026lt; n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eedges2[i] \u003d [u\u003csub\u003ei\u003c/sub\u003e, v\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d u\u003csub\u003ei\u003c/sub\u003e, v\u003csub\u003ei\u003c/sub\u003e \u0026lt; m\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that \u003ccode\u003eedges1\u003c/code\u003e and \u003ccode\u003eedges2\u003c/code\u003e represent valid trees.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[0,1],[0,2],[0,3]]\n[[0,1]]\n[[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]\n[[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]",
    "formTitle": "[3203]Find Minimum Diameter After Merging Two Trees",
    "frequency": 0.0,
    "frontendQuestionId": "3203",
    "hints": [
      "Suppose that we connected node \u003ccode\u003ea\u003c/code\u003e in tree1 with node \u003ccode\u003eb\u003c/code\u003e in tree2. The diameter length of the resulting tree will be the largest of the following 3 values: \r\n\u003col\u003e\r\n\u003cli\u003eThe diameter of tree 1.\u003c/li\u003e\r\n\u003cli\u003eThe diameter of tree 2.\u003c/li\u003e\r\n\u003cli\u003eThe length of the longest path that starts at node \u003ccode\u003ea\u003c/code\u003e and that is completely within Tree 1 + The length of the longest path that starts at node \u003ccode\u003eb\u003c/code\u003e and that is completely within Tree 2 + 1.\u003c/li\u003e\r\n\u003c/ol\u003e \r\nThe added one in the third value is due to the additional edge that we have added between trees 1 and 2.",
      "Values 1 and 2 are constant regardless of our choice of \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e. Therefore, we need to pick \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e in such a way that minimizes value 3.",
      "If we pick \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e optimally, they will be in the diameters of Tree 1 and Tree 2, respectively. Exactly which nodes of the diameter should we pick?",
      "\u003ccode\u003ea\u003c/code\u003e is the center of the diameter of tree 1, and \u003ccode\u003eb\u003c/code\u003e is the center of the diameter of tree 2."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumDiameterAfterMerge",
      "params": [
        {
          "name": "edges1",
          "type": "integer[][]"
        },
        {
          "name": "edges2",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3439",
    "similarQuestions": [
      "[{\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c0f\\u9ad8\\u5ea6\\u6811\", \"isPaidOnly\": false}, {\"title\": \"Tree Diameter\", \"titleSlug\": \"tree-diameter\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6811\\u7684\\u76f4\\u5f84\", \"isPaidOnly\": true}]"
    ],
    "statusSign": " ",
    "testCase": "[[0,1],[0,2],[0,3]]\n[[0,1]]",
    "title": "Find Minimum Diameter After Merging Two Trees",
    "titleSlug": "find-minimum-diameter-after-merging-two-trees"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxTotalReward(vector\u003cint\u003e\u0026 rewardValues) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxTotalReward(int[] rewardValues) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxTotalReward(self, rewardValues):\n        \"\"\"\n        :type rewardValues: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxTotalReward(self, rewardValues: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxTotalReward(int* rewardValues, int rewardValuesSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxTotalReward(int[] rewardValues) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} rewardValues\n * @return {number}\n */\nvar maxTotalReward \u003d function(rewardValues) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxTotalReward(rewardValues: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $rewardValues\n     * @return Integer\n     */\n    function maxTotalReward($rewardValues) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxTotalReward(_ rewardValues: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxTotalReward(rewardValues: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxTotalReward(List\u003cint\u003e rewardValues) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxTotalReward(rewardValues []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} reward_values\n# @return {Integer}\ndef max_total_reward(reward_values)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxTotalReward(rewardValues: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_total_reward(reward_values: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-total-reward rewardValues)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_total_reward(RewardValues :: [integer()]) -\u003e integer().\nmax_total_reward(RewardValues) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_total_reward(reward_values :: [integer]) :: integer\n  def max_total_reward(reward_values) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003erewardValues\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, representing the values of rewards.\u003c/p\u003e\n\n\u003cp\u003eInitially, your total reward \u003ccode\u003ex\u003c/code\u003e is 0, and all indices are \u003cstrong\u003eunmarked\u003c/strong\u003e. You are allowed to perform the following operation \u003cstrong\u003eany\u003c/strong\u003e number of times:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose an \u003cstrong\u003eunmarked\u003c/strong\u003e index \u003ccode\u003ei\u003c/code\u003e from the range \u003ccode\u003e[0, n - 1]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIf \u003ccode\u003erewardValues[i]\u003c/code\u003e is \u003cstrong\u003egreater\u003c/strong\u003e than your current total reward \u003ccode\u003ex\u003c/code\u003e, then add \u003ccode\u003erewardValues[i]\u003c/code\u003e to \u003ccode\u003ex\u003c/code\u003e (i.e., \u003ccode\u003ex \u003d x + rewardValues[i]\u003c/code\u003e), and \u003cstrong\u003emark\u003c/strong\u003e the index \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn an integer denoting the \u003cstrong\u003emaximum \u003c/strong\u003e\u003cem\u003etotal reward\u003c/em\u003e you can collect by performing the operations optimally.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003erewardValues \u003d [1,1,3,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eDuring the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003erewardValues \u003d [1,6,4,3,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e11\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eMark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d rewardValues.length \u0026lt;\u003d 2000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d rewardValues[i] \u0026lt;\u003d 2000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,1,3,3]\n[1,6,4,3,2]",
    "formTitle": "[3180]Maximum Total Reward Using Operations I",
    "frequency": 0.0,
    "frontendQuestionId": "3180",
    "hints": [
      "Sort the rewards array first.",
      "If we decide to apply some rewards, it\u0027s always optimal to apply them in order.",
      "Let \u003ccode\u003edp[i][j]\u003c/code\u003e (true/false) be the state after the first \u003ccode\u003ei\u003c/code\u003e rewards, indicating whether we can get exactly \u003ccode\u003ej\u003c/code\u003e points.",
      "The transition is given by: \u003ccode\u003edp[i][j] \u003d dp[i - 1][j 鈭� rewardValues[i]]\u003c/code\u003e if \u003ccode\u003ej 鈭� rewardValues[i] \u003c rewardValues[i]\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "maxTotalReward",
      "params": [
        {
          "name": "rewardValues",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3442",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[1,1,3,3]",
    "title": "Maximum Total Reward Using Operations I",
    "titleSlug": "maximum-total-reward-using-operations-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxTotalReward(vector\u003cint\u003e\u0026 rewardValues) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxTotalReward(int[] rewardValues) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxTotalReward(self, rewardValues):\n        \"\"\"\n        :type rewardValues: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxTotalReward(self, rewardValues: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxTotalReward(int* rewardValues, int rewardValuesSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxTotalReward(int[] rewardValues) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} rewardValues\n * @return {number}\n */\nvar maxTotalReward \u003d function(rewardValues) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxTotalReward(rewardValues: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $rewardValues\n     * @return Integer\n     */\n    function maxTotalReward($rewardValues) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxTotalReward(_ rewardValues: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxTotalReward(rewardValues: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxTotalReward(List\u003cint\u003e rewardValues) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxTotalReward(rewardValues []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} reward_values\n# @return {Integer}\ndef max_total_reward(reward_values)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxTotalReward(rewardValues: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_total_reward(reward_values: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-total-reward rewardValues)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_total_reward(RewardValues :: [integer()]) -\u003e integer().\nmax_total_reward(RewardValues) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_total_reward(reward_values :: [integer]) :: integer\n  def max_total_reward(reward_values) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003erewardValues\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, representing the values of rewards.\u003c/p\u003e\n\n\u003cp\u003eInitially, your total reward \u003ccode\u003ex\u003c/code\u003e is 0, and all indices are \u003cstrong\u003eunmarked\u003c/strong\u003e. You are allowed to perform the following operation \u003cstrong\u003eany\u003c/strong\u003e number of times:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose an \u003cstrong\u003eunmarked\u003c/strong\u003e index \u003ccode\u003ei\u003c/code\u003e from the range \u003ccode\u003e[0, n - 1]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIf \u003ccode\u003erewardValues[i]\u003c/code\u003e is \u003cstrong\u003egreater\u003c/strong\u003e than your current total reward \u003ccode\u003ex\u003c/code\u003e, then add \u003ccode\u003erewardValues[i]\u003c/code\u003e to \u003ccode\u003ex\u003c/code\u003e (i.e., \u003ccode\u003ex \u003d x + rewardValues[i]\u003c/code\u003e), and \u003cstrong\u003emark\u003c/strong\u003e the index \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn an integer denoting the \u003cstrong\u003emaximum \u003c/strong\u003e\u003cem\u003etotal reward\u003c/em\u003e you can collect by performing the operations optimally.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003erewardValues \u003d [1,1,3,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eDuring the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003erewardValues \u003d [1,6,4,3,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e11\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eMark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d rewardValues.length \u0026lt;\u003d 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d rewardValues[i] \u0026lt;\u003d 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,1,3,3]\n[1,6,4,3,2]",
    "formTitle": "[3181]Maximum Total Reward Using Operations II",
    "frequency": 0.0,
    "frontendQuestionId": "3181",
    "hints": [
      "Sort the rewards array first.",
      "If we decide to apply some rewards, it\u0027s always optimal to apply them in order.",
      "The transition is given by: \u003ccode\u003edp[i][j] \u003d dp[i - 1][j 鈭� rewardValues[i]]\u003c/code\u003e if \u003ccode\u003ej 鈭� rewardValues[i] \u003c rewardValues[i]\u003c/code\u003e.",
      "Note that the dp array is a boolean array. We just need 1 bit per element, so we can use a bitset or something similar. We just need a \"stream\" of bits and apply bitwise operations to optimize the computations by a constant factor."
    ],
    "level": 3,
    "metaData": {
      "name": "maxTotalReward",
      "params": [
        {
          "name": "rewardValues",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3443",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[1,1,3,3]",
    "title": "Maximum Total Reward Using Operations II",
    "titleSlug": "maximum-total-reward-using-operations-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long numberOfPairs(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long numberOfPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long numberOfPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long NumberOfPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number}\n */\nvar numberOfPairs \u003d function(nums1, nums2, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfPairs(nums1: number[], nums2: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfPairs($nums1, $nums2, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfPairs(nums1: IntArray, nums2: IntArray, k: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfPairs(List\u003cint\u003e nums1, List\u003cint\u003e nums2, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfPairs(nums1 []int, nums2 []int, k int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer}\ndef number_of_pairs(nums1, nums2, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfPairs(nums1: Array[Int], nums2: Array[Int], k: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_pairs(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e, k: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-pairs nums1 nums2 k)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_pairs(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -\u003e integer().\nnumber_of_pairs(Nums1, Nums2, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_pairs(nums1 :: [integer], nums2 :: [integer], k :: integer) :: integer\n  def number_of_pairs(nums1, nums2, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given 2 integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e of lengths \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003em\u003c/code\u003e respectively. You are also given a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA pair \u003ccode\u003e(i, j)\u003c/code\u003e is called \u003cstrong\u003egood\u003c/strong\u003e if \u003ccode\u003enums1[i]\u003c/code\u003e is divisible by \u003ccode\u003enums2[j] * k\u003c/code\u003e (\u003ccode\u003e0 \u0026lt;\u003d i \u0026lt;\u003d n - 1\u003c/code\u003e, \u003ccode\u003e0 \u0026lt;\u003d j \u0026lt;\u003d m - 1\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eReturn the total number of \u003cstrong\u003egood\u003c/strong\u003e pairs.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums1 \u003d [1,3,4], nums2 \u003d [1,3,4], k \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\nThe 5 good pairs are \u003ccode\u003e(0, 0)\u003c/code\u003e, \u003ccode\u003e(1, 0)\u003c/code\u003e, \u003ccode\u003e(1, 1)\u003c/code\u003e, \u003ccode\u003e(2, 0)\u003c/code\u003e, and \u003ccode\u003e(2, 2)\u003c/code\u003e.\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums1 \u003d [1,2,4,12], nums2 \u003d [2,4], k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe 2 good pairs are \u003ccode\u003e(3, 0)\u003c/code\u003e and \u003ccode\u003e(3, 1)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, m \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums1[i], nums2[j] \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,3,4]\n[1,3,4]\n1\n[1,2,4,12]\n[2,4]\n3",
    "formTitle": "[3164]Find the Number of Good Pairs II",
    "frequency": 0.0,
    "frontendQuestionId": "3164",
    "hints": [
      "Let \u003ccode\u003ef[v]\u003c/code\u003e be the number of occurrences of \u003ccode\u003ev/k\u003c/code\u003e in nums2.",
      "For each value \u003ccode\u003ev\u003c/code\u003e in nums1, enumerating all its factors \u003ccode\u003ed\u003c/code\u003e (in \u003ccode\u003esqrt(v)\u003c/code\u003e time) and sum up all the \u003ccode\u003ef[d]\u003c/code\u003e to get the final answer.",
      "It is also possible to improve the complexity from \u003ccode\u003ev * sqrt(v)\u003c/code\u003e to \u003ccode\u003ev * log(v)\u003c/code\u003e - How?"
    ],
    "level": 2,
    "metaData": {
      "name": "numberOfPairs",
      "params": [
        {
          "name": "nums1",
          "type": "integer[]"
        },
        {
          "name": "nums2",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3444",
    "similarQuestions": [
      "[{\"title\": \"Count Array Pairs Divisible by K\", \"titleSlug\": \"count-array-pairs-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u53ef\\u4ee5\\u88ab K \\u6574\\u9664\\u7684\\u4e0b\\u6807\\u5bf9\\u6570\\u76ee\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,3,4]\n[1,3,4]\n1",
    "title": "Find the Number of Good Pairs II",
    "titleSlug": "find-the-number-of-good-pairs-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string clearStars(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String clearStars(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def clearStars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def clearStars(self, s: str) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* clearStars(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string ClearStars(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar clearStars \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function clearStars(s: string): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function clearStars($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func clearStars(_ s: String) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun clearStars(s: String): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String clearStars(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func clearStars(s string) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {String}\ndef clear_stars(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def clearStars(s: String): String \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn clear_stars(s: String) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (clear-stars s)\n  (-\u003e string? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec clear_stars(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nclear_stars(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec clear_stars(s :: String.t) :: String.t\n  def clear_stars(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e. It may contain any number of \u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e characters. Your task is to remove all \u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e characters.\u003c/p\u003e\n\n\u003cp\u003eWhile there is a \u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e, do the following operation:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eDelete the leftmost \u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e and the \u003cstrong\u003esmallest\u003c/strong\u003e non-\u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e character to its \u003cem\u003eleft\u003c/em\u003e. If there are several smallest characters, you can delete any of them.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cspan data-keyword\u003d\"lexicographically-smaller-string\"\u003elexicographically smallest\u003c/span\u003e resulting string after removing all \u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e characters.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;aaba*\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;aab\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe should delete one of the \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e characters with \u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e. If we choose \u003ccode\u003es[3]\u003c/code\u003e, \u003ccode\u003es\u003c/code\u003e becomes the lexicographically smallest.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;abc\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;abc\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is no \u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e in the string.\u003c!-- notionvc: ff07e34f-b1d6-41fb-9f83-5d0ba3c1ecde --\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters and \u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that it is possible to delete all \u003ccode\u003e\u0026#39;*\u0026#39;\u003c/code\u003e characters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"aaba*\"\n\"abc\"",
    "formTitle": "[3170]Lexicographically Minimum String After Removing Stars",
    "frequency": 0.0,
    "frontendQuestionId": "3170",
    "hints": [],
    "level": 2,
    "metaData": {
      "name": "clearStars",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3445",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "\"aaba*\"",
    "title": "Lexicographically Minimum String After Removing Stars",
    "titleSlug": "lexicographically-minimum-string-after-removing-stars"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfPairs(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number}\n */\nvar numberOfPairs \u003d function(nums1, nums2, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfPairs(nums1: number[], nums2: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfPairs($nums1, $nums2, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfPairs(nums1: IntArray, nums2: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfPairs(List\u003cint\u003e nums1, List\u003cint\u003e nums2, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfPairs(nums1 []int, nums2 []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer}\ndef number_of_pairs(nums1, nums2, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfPairs(nums1: Array[Int], nums2: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_pairs(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-pairs nums1 nums2 k)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_pairs(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -\u003e integer().\nnumber_of_pairs(Nums1, Nums2, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_pairs(nums1 :: [integer], nums2 :: [integer], k :: integer) :: integer\n  def number_of_pairs(nums1, nums2, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given 2 integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e of lengths \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003em\u003c/code\u003e respectively. You are also given a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA pair \u003ccode\u003e(i, j)\u003c/code\u003e is called \u003cstrong\u003egood\u003c/strong\u003e if \u003ccode\u003enums1[i]\u003c/code\u003e is divisible by \u003ccode\u003enums2[j] * k\u003c/code\u003e (\u003ccode\u003e0 \u0026lt;\u003d i \u0026lt;\u003d n - 1\u003c/code\u003e, \u003ccode\u003e0 \u0026lt;\u003d j \u0026lt;\u003d m - 1\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eReturn the total number of \u003cstrong\u003egood\u003c/strong\u003e pairs.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums1 \u003d [1,3,4], nums2 \u003d [1,3,4], k \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\nThe 5 good pairs are \u003ccode\u003e(0, 0)\u003c/code\u003e, \u003ccode\u003e(1, 0)\u003c/code\u003e, \u003ccode\u003e(1, 1)\u003c/code\u003e, \u003ccode\u003e(2, 0)\u003c/code\u003e, and \u003ccode\u003e(2, 2)\u003c/code\u003e.\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums1 \u003d [1,2,4,12], nums2 \u003d [2,4], k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe 2 good pairs are \u003ccode\u003e(3, 0)\u003c/code\u003e and \u003ccode\u003e(3, 1)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, m \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums1[i], nums2[j] \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,3,4]\n[1,3,4]\n1\n[1,2,4,12]\n[2,4]\n3",
    "formTitle": "[3162]Find the Number of Good Pairs I",
    "frequency": 0.0,
    "frontendQuestionId": "3162",
    "hints": [
      "The constraints are small. Check all pairs."
    ],
    "level": 1,
    "metaData": {
      "name": "numberOfPairs",
      "params": [
        {
          "name": "nums1",
          "type": "integer[]"
        },
        {
          "name": "nums2",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3446",
    "similarQuestions": [
      "[{\"title\": \"Count Array Pairs Divisible by K\", \"titleSlug\": \"count-array-pairs-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u53ef\\u4ee5\\u88ab K \\u6574\\u9664\\u7684\\u4e0b\\u6807\\u5bf9\\u6570\\u76ee\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,3,4]\n[1,3,4]\n1",
    "title": "Find the Number of Good Pairs I",
    "titleSlug": "find-the-number-of-good-pairs-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string clearDigits(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String clearDigits(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def clearDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def clearDigits(self, s: str) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* clearDigits(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string ClearDigits(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar clearDigits \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function clearDigits(s: string): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function clearDigits($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func clearDigits(_ s: String) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun clearDigits(s: String): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String clearDigits(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func clearDigits(s string) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {String}\ndef clear_digits(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def clearDigits(s: String): String \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn clear_digits(s: String) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (clear-digits s)\n  (-\u003e string? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec clear_digits(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nclear_digits(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec clear_digits(s :: String.t) :: String.t\n  def clear_digits(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYour task is to remove \u003cstrong\u003eall\u003c/strong\u003e digits by doing this operation repeatedly:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eDelete the \u003cem\u003efirst\u003c/em\u003e digit and the \u003cstrong\u003eclosest\u003c/strong\u003e \u003cb\u003enon-digit\u003c/b\u003e character to its \u003cem\u003eleft\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the resulting string after removing all digits.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;abc\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;abc\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is no digit in the string.\u003c!-- notionvc: ff07e34f-b1d6-41fb-9f83-5d0ba3c1ecde --\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;cb34\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFirst, we apply the operation on \u003ccode\u003es[2]\u003c/code\u003e, and \u003ccode\u003es\u003c/code\u003e becomes \u003ccode\u003e\u0026quot;c4\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen we apply the operation on \u003ccode\u003es[1]\u003c/code\u003e, and \u003ccode\u003es\u003c/code\u003e becomes \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters and digits.\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that it is possible to delete all digits.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abc\"\n\"cb34\"",
    "formTitle": "[3174]Clear Digits",
    "frequency": 0.0,
    "frontendQuestionId": "3174",
    "hints": [
      "Process string \u003ccode\u003es\u003c/code\u003e from left to right, if \u003ccode\u003es[i]\u003c/code\u003e is a digit, mark the nearest unmarked non-digit index to its left.",
      "Delete all digits and all marked characters."
    ],
    "level": 1,
    "metaData": {
      "name": "clearDigits",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3447",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "\"abc\"",
    "title": "Clear Digits",
    "titleSlug": "clear-digits"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfChild(int n, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfChild(int n, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfChild(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfChild(self, n: int, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfChild(int n, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfChild(int n, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar numberOfChild \u003d function(n, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfChild(n: number, k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfChild($n, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfChild(_ n: Int, _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfChild(n: Int, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfChild(int n, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfChild(n int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef number_of_child(n, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfChild(n: Int, k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_child(n: i32, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-child n k)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_child(N :: integer(), K :: integer()) -\u003e integer().\nnumber_of_child(N, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_child(n :: integer, k :: integer) :: integer\n  def number_of_child(n, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003ek\u003c/code\u003e. There are \u003ccode\u003en\u003c/code\u003e children numbered from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e standing in a queue \u003cem\u003ein order\u003c/em\u003e from left to right.\u003c/p\u003e\n\n\u003cp\u003eInitially, child 0 holds a ball and the direction of passing the ball is towards the right direction. After each second, the child holding the ball passes it to the child next to them. Once the ball reaches \u003cstrong\u003eeither\u003c/strong\u003e end of the line, i.e. child 0 or child \u003ccode\u003en - 1\u003c/code\u003e, the direction of passing is \u003cstrong\u003ereversed\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the number of the child who receives the ball after \u003ccode\u003ek\u003c/code\u003e seconds.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 3, k \u003d 5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003eTime elapsed\u003c/th\u003e\n\t\t\t\u003cth\u003eChildren\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[\u003cu\u003e0\u003c/u\u003e, 1, 2]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, \u003cu\u003e1\u003c/u\u003e, 2]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, 1, \u003cu\u003e2\u003c/u\u003e]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, \u003cu\u003e1\u003c/u\u003e, 2]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e4\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[\u003cu\u003e0\u003c/u\u003e, 1, 2]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e5\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, \u003cu\u003e1\u003c/u\u003e, 2]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 5, k \u003d 6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003eTime elapsed\u003c/th\u003e\n\t\t\t\u003cth\u003eChildren\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[\u003cu\u003e0\u003c/u\u003e, 1, 2, 3, 4]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, \u003cu\u003e1\u003c/u\u003e, 2, 3, 4]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, 1, \u003cu\u003e2\u003c/u\u003e, 3, 4]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, 1, 2, \u003cu\u003e3\u003c/u\u003e, 4]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e4\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, 1, 2, 3, \u003cu\u003e4\u003c/u\u003e]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e5\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, 1, 2, \u003cu\u003e3\u003c/u\u003e, 4]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e6\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, 1, \u003cu\u003e2\u003c/u\u003e, 3, 4]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 4, k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003eTime elapsed\u003c/th\u003e\n\t\t\t\u003cth\u003eChildren\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[\u003cu\u003e0\u003c/u\u003e, 1, 2, 3]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, \u003cu\u003e1\u003c/u\u003e, 2, 3]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003ccode\u003e[0, 1, \u003cu\u003e2\u003c/u\u003e, 3]\u003c/code\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n5\n5\n6\n4\n2",
    "formTitle": "[3178]Find the Child Who Has the Ball After K Seconds",
    "frequency": 0.0,
    "frontendQuestionId": "3178",
    "hints": [
      "The ball will go back to child 0 after \u003ccode\u003e2 * (n - 1)\u003c/code\u003e seconds and everything is the same as time 0.",
      "So the answer for \u003ccode\u003ek\u003c/code\u003e is the same as the answer for \u003ccode\u003ek % (2 * (n - 1))\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "numberOfChild",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3450",
    "similarQuestions": [
      "[{\"title\": \"Find the Losers of the Circular Game\", \"titleSlug\": \"find-the-losers-of-the-circular-game\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u627e\\u51fa\\u8f6c\\u5708\\u6e38\\u620f\\u8f93\\u5bb6\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "3\n5",
    "title": "Find the Child Who Has the Ball After K Seconds",
    "titleSlug": "find-the-child-who-has-the-ball-after-k-seconds"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string compressedString(string word) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String compressedString(String word) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def compressedString(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def compressedString(self, word: str) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* compressedString(char* word) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string CompressedString(string word) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} word\n * @return {string}\n */\nvar compressedString \u003d function(word) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function compressedString(word: string): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return String\n     */\n    function compressedString($word) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func compressedString(_ word: String) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun compressedString(word: String): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String compressedString(String word) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func compressedString(word string) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} word\n# @return {String}\ndef compressed_string(word)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def compressedString(word: String): String \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn compressed_string(word: String) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (compressed-string word)\n  (-\u003e string? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec compressed_string(Word :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\ncompressed_string(Word) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec compressed_string(word :: String.t) :: String.t\n  def compressed_string(word) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven a string \u003ccode\u003eword\u003c/code\u003e, compress it using the following algorithm:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eBegin with an empty string \u003ccode\u003ecomp\u003c/code\u003e. While \u003ccode\u003eword\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e empty, use the following operation:\n\n\t\u003cul\u003e\n\t\t\u003cli\u003eRemove a maximum length prefix of \u003ccode\u003eword\u003c/code\u003e made of a \u003cem\u003esingle character\u003c/em\u003e \u003ccode\u003ec\u003c/code\u003e repeating \u003cstrong\u003eat most\u003c/strong\u003e 9 times.\u003c/li\u003e\n\t\t\u003cli\u003eAppend the length of the prefix followed by \u003ccode\u003ec\u003c/code\u003e to \u003ccode\u003ecomp\u003c/code\u003e.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the string \u003ccode\u003ecomp\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;abcde\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;1a1b1c1d1e\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eInitially, \u003ccode\u003ecomp \u003d \u0026quot;\u0026quot;\u003c/code\u003e. Apply the operation 5 times, choosing \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;c\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;d\u0026quot;\u003c/code\u003e, and \u003ccode\u003e\u0026quot;e\u0026quot;\u003c/code\u003e as the prefix in each operation.\u003c/p\u003e\n\n\u003cp\u003eFor each prefix, append \u003ccode\u003e\u0026quot;1\u0026quot;\u003c/code\u003e followed by the character to \u003ccode\u003ecomp\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eword \u003d \u0026quot;aaaaaaaaaaaaaabb\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;9a5a2b\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eInitially, \u003ccode\u003ecomp \u003d \u0026quot;\u0026quot;\u003c/code\u003e. Apply the operation 3 times, choosing \u003ccode\u003e\u0026quot;aaaaaaaaa\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;aaaaa\u0026quot;\u003c/code\u003e, and \u003ccode\u003e\u0026quot;bb\u0026quot;\u003c/code\u003e as the prefix in each operation.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor prefix \u003ccode\u003e\u0026quot;aaaaaaaaa\u0026quot;\u003c/code\u003e, append \u003ccode\u003e\u0026quot;9\u0026quot;\u003c/code\u003e followed by \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e to \u003ccode\u003ecomp\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eFor prefix \u003ccode\u003e\u0026quot;aaaaa\u0026quot;\u003c/code\u003e, append \u003ccode\u003e\u0026quot;5\u0026quot;\u003c/code\u003e followed by \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e to \u003ccode\u003ecomp\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eFor prefix \u003ccode\u003e\u0026quot;bb\u0026quot;\u003c/code\u003e, append \u003ccode\u003e\u0026quot;2\u0026quot;\u003c/code\u003e followed by \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e to \u003ccode\u003ecomp\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d word.length \u0026lt;\u003d 2 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abcde\"\n\"aaaaaaaaaaaaaabb\"",
    "formTitle": "[3163]String Compression III",
    "frequency": 0.0,
    "frontendQuestionId": "3163",
    "hints": [
      "Each time, just cut the same character in prefix up to at max 9 times. It鈥檚 always better to cut a bigger prefix."
    ],
    "level": 2,
    "metaData": {
      "name": "compressedString",
      "params": [
        {
          "name": "word",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3451",
    "similarQuestions": [
      "[{\"title\": \"String Compression\", \"titleSlug\": \"string-compression\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u538b\\u7f29\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}, {\"title\": \"String Compression II\", \"titleSlug\": \"string-compression-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u538b\\u7f29\\u5b57\\u7b26\\u4e32 II\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "\"abcde\"",
    "title": "String Compression III",
    "titleSlug": "string-compression-iii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumLength(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumLength(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumLength \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumLength(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumLength($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumLength(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumLength(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumLength(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_length(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumLength(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_length(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-length nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_length(Nums :: [integer()], K :: integer()) -\u003e integer().\nmaximum_length(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer], k :: integer) :: integer\n  def maximum_length(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e and a \u003cstrong\u003enon-negative\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e. A sequence of integers \u003ccode\u003eseq\u003c/code\u003e is called \u003cstrong\u003egood\u003c/strong\u003e if there are \u003cstrong\u003eat most\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e indices \u003ccode\u003ei\u003c/code\u003e in the range \u003ccode\u003e[0, seq.length - 2]\u003c/code\u003e such that \u003ccode\u003eseq[i] !\u003d seq[i + 1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003emaximum\u003c/strong\u003e possible length of a \u003cstrong\u003egood\u003c/strong\u003e \u003cspan data-keyword\u003d\"subsequence-array\"\u003esubsequence\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,1,1,3], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe maximum length subsequence is \u003ccode\u003e[\u003cu\u003e1\u003c/u\u003e,\u003cu\u003e2\u003c/u\u003e,\u003cu\u003e1\u003c/u\u003e,\u003cu\u003e1\u003c/u\u003e,3]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4,5,1], k \u003d 0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe maximum length subsequence is \u003ccode\u003e[\u003cu\u003e1\u003c/u\u003e,2,3,4,5,\u003cu\u003e1\u003c/u\u003e]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 5 * 10\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d k \u0026lt;\u003d min(50, nums.length)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,1,1,3]\n2\n[1,2,3,4,5,1]\n0",
    "formTitle": "[3177]Find the Maximum Length of a Good Subsequence II",
    "frequency": 0.0,
    "frontendQuestionId": "3177",
    "hints": [
      "The absolute values in \u003ccode\u003enums\u003c/code\u003e don鈥檛 really matter. So we can remap the set of values to the range \u003ccode\u003e[0, n - 1]\u003c/code\u003e.",
      "Let \u003ccode\u003edp[i][j]\u003c/code\u003e be the length of the longest subsequence till index \u003ccode\u003ej\u003c/code\u003e with at most \u003ccode\u003ei\u003c/code\u003e positions such that \u003ccode\u003eseq[i] !\u003d seq[i + 1]\u003c/code\u003e.",
      "For each value \u003ccode\u003ex\u003c/code\u003e from left to right, update \u003ccode\u003edp[i][x] \u003d max(dp[i][x] + 1, dp[i - 1][y] + 1)\u003c/code\u003e, where \u003ccode\u003ey !\u003d x\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "maximumLength",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3452",
    "similarQuestions": [
      "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u9012\\u589e\\u5b50\\u5e8f\\u5217\", \"isPaidOnly\": false}, {\"title\": \"Maximum Length of Repeated Subarray\", \"titleSlug\": \"maximum-length-of-repeated-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u91cd\\u590d\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,2,1,1,3]\n2",
    "title": "Find the Maximum Length of a Good Subsequence II",
    "titleSlug": "find-the-maximum-length-of-a-good-subsequence-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    vector\u003cstring\u003e validStrings(int n) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public List\u003cString\u003e validStrings(int n) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def validStrings(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def validStrings(self, n: int) -\u003e List[str]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** validStrings(int n, int* returnSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public IList\u003cstring\u003e ValidStrings(int n) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar validStrings \u003d function(n) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function validStrings(n: number): string[] {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function validStrings($n) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func validStrings(_ n: Int) -\u003e [String] {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun validStrings(n: Int): List\u003cString\u003e {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  List\u003cString\u003e validStrings(int n) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func validStrings(n int) []string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @return {String[]}\ndef valid_strings(n)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def validStrings(n: Int): List[String] \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn valid_strings(n: i32) -\u003e Vec\u003cString\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (valid-strings n)\n  (-\u003e exact-integer? (listof string?))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec valid_strings(N :: integer()) -\u003e [unicode:unicode_binary()].\nvalid_strings(N) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec valid_strings(n :: integer) :: [String.t]\n  def valid_strings(n) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a positive integer \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA binary string \u003ccode\u003ex\u003c/code\u003e is \u003cstrong\u003evalid\u003c/strong\u003e if all \u003cspan data-keyword\u003d\"substring-nonempty\"\u003esubstrings\u003c/span\u003e of \u003ccode\u003ex\u003c/code\u003e of length 2 contain \u003cstrong\u003eat least\u003c/strong\u003e one \u003ccode\u003e\u0026quot;1\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn all \u003cstrong\u003evalid\u003c/strong\u003e strings with length \u003ccode\u003en\u003c/code\u003e\u003cstrong\u003e, \u003c/strong\u003ein \u003cem\u003eany\u003c/em\u003e order.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[\u0026quot;010\u0026quot;,\u0026quot;011\u0026quot;,\u0026quot;101\u0026quot;,\u0026quot;110\u0026quot;,\u0026quot;111\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe valid strings of length 3 are: \u003ccode\u003e\u0026quot;010\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;011\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;101\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;110\u0026quot;\u003c/code\u003e, and \u003ccode\u003e\u0026quot;111\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[\u0026quot;0\u0026quot;,\u0026quot;1\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe valid strings of length 1 are: \u003ccode\u003e\u0026quot;0\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;1\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n \u0026lt;\u003d 18\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n1",
    "formTitle": "[3211]Generate Binary Strings Without Adjacent Zeros",
    "frequency": 0.0,
    "frontendQuestionId": "3211",
    "hints": [
      "If we have a string \u003ccode\u003es\u003c/code\u003e of length \u003ccode\u003ex\u003c/code\u003e, we can generate all strings of length \u003ccode\u003ex + 1\u003c/code\u003e.",
      "If \u003ccode\u003es\u003c/code\u003e has 0 as the last character, we can only append 1, whereas if the last character is 1, we can append both 0 and 1.",
      "We can use recursion and backtracking to generate all such strings."
    ],
    "level": 2,
    "metaData": {
      "name": "validStrings",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3453",
    "similarQuestions": [
      "[{\"title\": \"Non-negative Integers without Consecutive Ones\", \"titleSlug\": \"non-negative-integers-without-consecutive-ones\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u4e0d\\u542b\\u8fde\\u7eed1\\u7684\\u975e\\u8d1f\\u6574\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "3",
    "title": "Generate Binary Strings Without Adjacent Zeros",
    "titleSlug": "generate-binary-strings-without-adjacent-zeros"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long minimumOperations(vector\u003cint\u003e\u0026 nums, vector\u003cint\u003e\u0026 target) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumOperations(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long minimumOperations(int* nums, int numsSize, int* target, int targetSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MinimumOperations(int[] nums, int[] target) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number[]} target\n * @return {number}\n */\nvar minimumOperations \u003d function(nums, target) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumOperations(nums: number[], target: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $target\n     * @return Integer\n     */\n    function minimumOperations($nums, $target) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumOperations(_ nums: [Int], _ target: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumOperations(nums: IntArray, target: IntArray): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumOperations(List\u003cint\u003e nums, List\u003cint\u003e target) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumOperations(nums []int, target []int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer[]} target\n# @return {Integer}\ndef minimum_operations(nums, target)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumOperations(nums: Array[Int], target: Array[Int]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_operations(nums: Vec\u003ci32\u003e, target: Vec\u003ci32\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-operations nums target)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_operations(Nums :: [integer()], Target :: [integer()]) -\u003e integer().\nminimum_operations(Nums, Target) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_operations(nums :: [integer], target :: [integer]) :: integer\n  def minimum_operations(nums, target) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two positive integer arrays \u003ccode\u003enums\u003c/code\u003e and \u003ccode\u003etarget\u003c/code\u003e, of the same length.\u003c/p\u003e\n\n\u003cp\u003eIn a single operation, you can select any \u003cspan data-keyword\u003d\"subarray\"\u003esubarray\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e and increment or decrement each element within that subarray by 1.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e number of operations required to make \u003ccode\u003enums\u003c/code\u003e equal to the array \u003ccode\u003etarget\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,5,1,2], target \u003d [4,6,2,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe will perform the following operations to make \u003ccode\u003enums\u003c/code\u003e equal to \u003ccode\u003etarget\u003c/code\u003e:\u003cbr /\u003e\n- Increment\u0026nbsp;\u003ccode\u003enums[0..3]\u003c/code\u003e by 1, \u003ccode\u003enums \u003d [4,6,2,3]\u003c/code\u003e.\u003cbr /\u003e\n- Increment\u0026nbsp;\u003ccode\u003enums[3..3]\u003c/code\u003e by 1, \u003ccode\u003enums \u003d [4,6,2,4]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,3,2], target \u003d [2,1,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe will perform the following operations to make \u003ccode\u003enums\u003c/code\u003e equal to \u003ccode\u003etarget\u003c/code\u003e:\u003cbr /\u003e\n- Increment\u0026nbsp;\u003ccode\u003enums[0..0]\u003c/code\u003e by 1, \u003ccode\u003enums \u003d [2,3,2]\u003c/code\u003e.\u003cbr /\u003e\n- Decrement\u0026nbsp;\u003ccode\u003enums[1..1]\u003c/code\u003e by 1, \u003ccode\u003enums \u003d [2,2,2]\u003c/code\u003e.\u003cbr /\u003e\n- Decrement\u0026nbsp;\u003ccode\u003enums[1..1]\u003c/code\u003e by 1, \u003ccode\u003enums \u003d [2,1,2]\u003c/code\u003e.\u003cbr /\u003e\n- Increment\u0026nbsp;\u003ccode\u003enums[2..2]\u003c/code\u003e by 1, \u003ccode\u003enums \u003d [2,1,3]\u003c/code\u003e.\u003cbr /\u003e\n- Increment\u0026nbsp;\u003ccode\u003enums[2..2]\u003c/code\u003e by 1, \u003ccode\u003enums \u003d [2,1,4]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u003d\u003d target.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i], target[i] \u0026lt;\u003d 10\u003csup\u003e8\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[3,5,1,2]\n[4,6,2,4]\n[1,3,2]\n[2,1,4]",
    "formTitle": "[3229]Minimum Operations to Make Array Equal to Target",
    "frequency": 0.0,
    "frontendQuestionId": "3229",
    "hints": [
      "Change \u003ccode\u003enums\u0027[i] \u003d nums[i] - target[i]\u003c/code\u003e, so our goal is to make \u003ccode\u003enums\u0027\u003c/code\u003e into all 0s.",
      "Divide and conquer."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumOperations",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "target",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3454",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[3,5,1,2]\n[4,6,2,4]",
    "title": "Minimum Operations to Make Array Equal to Target",
    "titleSlug": "minimum-operations-to-make-array-equal-to-target"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumLength(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumLength(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumLength(self, s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumLength(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumLength(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumLength \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumLength(s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumLength($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumLength(_ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumLength(s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumLength(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumLength(s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Integer}\ndef minimum_length(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumLength(s: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_length(s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-length s)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_length(S :: unicode:unicode_binary()) -\u003e integer().\nminimum_length(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_length(s :: String.t) :: integer\n  def minimum_length(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can perform the following process on \u003ccode\u003es\u003c/code\u003e \u003cstrong\u003eany\u003c/strong\u003e number of times:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose an index \u003ccode\u003ei\u003c/code\u003e in the string such that there is \u003cstrong\u003eat least\u003c/strong\u003e one character to the left of index \u003ccode\u003ei\u003c/code\u003e that is equal to \u003ccode\u003es[i]\u003c/code\u003e, and \u003cstrong\u003eat least\u003c/strong\u003e one character to the right that is also equal to \u003ccode\u003es[i]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eDelete the \u003cstrong\u003eclosest\u003c/strong\u003e character to the \u003cstrong\u003eleft\u003c/strong\u003e of index \u003ccode\u003ei\u003c/code\u003e that is equal to \u003ccode\u003es[i]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eDelete the \u003cstrong\u003eclosest\u003c/strong\u003e character to the \u003cstrong\u003eright\u003c/strong\u003e of index \u003ccode\u003ei\u003c/code\u003e that is equal to \u003ccode\u003es[i]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e length of the final string \u003ccode\u003es\u003c/code\u003e that you can achieve.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;abaacbcbb\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nWe do the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose index 2, then remove the characters at indices 0 and 3. The resulting string is \u003ccode\u003es \u003d \u0026quot;bacbcbb\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eChoose index 3, then remove the characters at indices 0 and 5. The resulting string is \u003ccode\u003es \u003d \u0026quot;acbcb\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;aa\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nWe cannot perform any operations, so we return the length of the original string.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 2 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abaacbcbb\"\n\"aa\"",
    "formTitle": "[3223]Minimum Length of String After Operations",
    "frequency": 0.0,
    "frontendQuestionId": "3223",
    "hints": [
      "Only the frequency of each character matters in finding the final answer.",
      "If a character occurs less than 3 times, we cannot perform any process with it.",
      "Suppose there is a character that occurs at least 3 times in the string, we can repeatedly delete two of these characters until there are at most 2 occurrences left of it."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumLength",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3455",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "\"abaacbcbb\"",
    "title": "Minimum Length of String After Operations",
    "titleSlug": "minimum-length-of-string-after-operations"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumLength(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumLength(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumLength \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumLength(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumLength($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumLength(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumLength(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumLength(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_length(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumLength(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_length(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-length nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_length(Nums :: [integer()], K :: integer()) -\u003e integer().\nmaximum_length(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer], k :: integer) :: integer\n  def maximum_length(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e and a \u003cstrong\u003enon-negative\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e. A sequence of integers \u003ccode\u003eseq\u003c/code\u003e is called \u003cstrong\u003egood\u003c/strong\u003e if there are \u003cstrong\u003eat most\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e indices \u003ccode\u003ei\u003c/code\u003e in the range \u003ccode\u003e[0, seq.length - 2]\u003c/code\u003e such that \u003ccode\u003eseq[i] !\u003d seq[i + 1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003emaximum\u003c/strong\u003e possible length of a \u003cstrong\u003egood\u003c/strong\u003e \u003cspan data-keyword\u003d\"subsequence-array\"\u003esubsequence\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,1,1,3], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe maximum length subsequence is \u003ccode\u003e[\u003cu\u003e1\u003c/u\u003e,\u003cu\u003e2\u003c/u\u003e,\u003cu\u003e1\u003c/u\u003e,\u003cu\u003e1\u003c/u\u003e,3]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4,5,1], k \u003d 0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe maximum length subsequence is \u003ccode\u003e[\u003cu\u003e1\u003c/u\u003e,2,3,4,5,\u003cu\u003e1\u003c/u\u003e]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 500\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d k \u0026lt;\u003d min(nums.length, 25)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,1,1,3]\n2\n[1,2,3,4,5,1]\n0",
    "formTitle": "[3176]Find the Maximum Length of a Good Subsequence I",
    "frequency": 0.0,
    "frontendQuestionId": "3176",
    "hints": [
      "The absolute values in \u003ccode\u003enums\u003c/code\u003e don鈥檛 really matter. So we can remap the set of values to the range \u003ccode\u003e[0, n - 1]\u003c/code\u003e.",
      "Let \u003ccode\u003edp[i][j]\u003c/code\u003e be the length of the longest subsequence till index \u003ccode\u003ej\u003c/code\u003e with at most \u003ccode\u003ei\u003c/code\u003e positions such that \u003ccode\u003eseq[i] !\u003d seq[i + 1]\u003c/code\u003e.",
      "For each value \u003ccode\u003ex\u003c/code\u003e from left to right, update \u003ccode\u003edp[i][x] \u003d max(dp[i][x] + 1, dp[i - 1][y] + 1)\u003c/code\u003e, where \u003ccode\u003ey !\u003d x\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumLength",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3456",
    "similarQuestions": [
      "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u9012\\u589e\\u5b50\\u5e8f\\u5217\", \"isPaidOnly\": false}, {\"title\": \"Maximum Length of Repeated Subarray\", \"titleSlug\": \"maximum-length-of-repeated-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u91cd\\u590d\\u5b50\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,2,1,1,3]\n2",
    "title": "Find the Maximum Length of a Good Subsequence I",
    "titleSlug": "find-the-maximum-length-of-a-good-subsequence-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumSum(vector\u003cvector\u003cint\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumSum(int[][] grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumSum(int** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumSum(int[][] grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumSum \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumSum(grid: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumSum($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumSum(_ grid: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumSum(grid: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumSum(List\u003cList\u003cint\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumSum(grid [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_sum(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumSum(grid: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_sum(grid: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-sum grid)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_sum(Grid :: [[integer()]]) -\u003e integer().\nminimum_sum(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_sum(grid :: [[integer]]) :: integer\n  def minimum_sum(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D \u003cstrong\u003ebinary\u003c/strong\u003e array \u003ccode\u003egrid\u003c/code\u003e. You need to find 3 \u003cstrong\u003enon-overlapping\u003c/strong\u003e rectangles having \u003cstrong\u003enon-zero\u003c/strong\u003e areas with horizontal and vertical sides such that all the 1\u0026#39;s in \u003ccode\u003egrid\u003c/code\u003e lie inside these rectangles.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e possible sum of the area of these rectangles.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that the rectangles are allowed to touch.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1,0,1],[1,1,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/14/example0rect21.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 280px; height: 198px;\" /\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe 1\u0026#39;s at \u003ccode\u003e(0, 0)\u003c/code\u003e and \u003ccode\u003e(1, 0)\u003c/code\u003e are covered by a rectangle of area 2.\u003c/li\u003e\n\t\u003cli\u003eThe 1\u0026#39;s at \u003ccode\u003e(0, 2)\u003c/code\u003e and \u003ccode\u003e(1, 2)\u003c/code\u003e are covered by a rectangle of area 2.\u003c/li\u003e\n\t\u003cli\u003eThe 1 at \u003ccode\u003e(1, 1)\u003c/code\u003e is covered by a rectangle of area 1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1,0,1,0],[0,1,0,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/14/example1rect2.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 356px; height: 198px;\" /\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe 1\u0026#39;s at \u003ccode\u003e(0, 0)\u003c/code\u003e and \u003ccode\u003e(0, 2)\u003c/code\u003e are covered by a rectangle of area 3.\u003c/li\u003e\n\t\u003cli\u003eThe 1 at \u003ccode\u003e(1, 1)\u003c/code\u003e is covered by a rectangle of area 1.\u003c/li\u003e\n\t\u003cli\u003eThe 1 at \u003ccode\u003e(1, 3)\u003c/code\u003e is covered by a rectangle of area 1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d grid.length, grid[i].length \u0026lt;\u003d 30\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003egrid[i][j]\u003c/code\u003e is either 0 or 1.\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that there are at least three 1\u0026#39;s in \u003ccode\u003egrid\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[1,0,1],[1,1,1]]\n[[1,0,1,0],[0,1,0,1]]",
    "formTitle": "[3197]Find the Minimum Area to Cover All Ones II",
    "frequency": 0.0,
    "frontendQuestionId": "3197",
    "hints": [
      "Consider covering using 2 rectangles. As the rectangles don鈥檛 overlap, one of the rectangles must either be vertically above or horizontally left to the other.",
      "To find the minimum area, check all possible vertical and horizontal splits.",
      "For 3 rectangles, extend the idea to first covering using one rectangle, and then try splitting leftover ones both horizontally and vertically."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumSum",
      "params": [
        {
          "name": "grid",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3459",
    "similarQuestions": [
      "[{\"title\": \"Smallest Rectangle Enclosing Black Pixels\", \"titleSlug\": \"smallest-rectangle-enclosing-black-pixels\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5305\\u542b\\u5168\\u90e8\\u9ed1\\u8272\\u50cf\\u7d20\\u7684\\u6700\\u5c0f\\u77e9\\u5f62\", \"isPaidOnly\": true}]"
    ],
    "statusSign": " ",
    "testCase": "[[1,0,1],[1,1,1]]",
    "title": "Find the Minimum Area to Cover All Ones II",
    "titleSlug": "find-the-minimum-area-to-cover-all-ones-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector\u003cvector\u003cint\u003e\u003e\u0026 requirements) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfPermutations(int n, int[][] requirements) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfPermutations(self, n, requirements):\n        \"\"\"\n        :type n: int\n        :type requirements: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfPermutations(int n, int** requirements, int requirementsSize, int* requirementsColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfPermutations(int n, int[][] requirements) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number[][]} requirements\n * @return {number}\n */\nvar numberOfPermutations \u003d function(n, requirements) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfPermutations(n: number, requirements: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $requirements\n     * @return Integer\n     */\n    function numberOfPermutations($n, $requirements) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfPermutations(_ n: Int, _ requirements: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfPermutations(n: Int, requirements: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfPermutations(int n, List\u003cList\u003cint\u003e\u003e requirements) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfPermutations(n int, requirements [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer[][]} requirements\n# @return {Integer}\ndef number_of_permutations(n, requirements)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfPermutations(n: Int, requirements: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_permutations(n: i32, requirements: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-permutations n requirements)\n  (-\u003e exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_permutations(N :: integer(), Requirements :: [[integer()]]) -\u003e integer().\nnumber_of_permutations(N, Requirements) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_permutations(n :: integer, requirements :: [[integer]]) :: integer\n  def number_of_permutations(n, requirements) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer \u003ccode\u003en\u003c/code\u003e and a 2D array \u003ccode\u003erequirements\u003c/code\u003e, where \u003ccode\u003erequirements[i] \u003d [end\u003csub\u003ei\u003c/sub\u003e, cnt\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e represents the end index and the \u003cstrong\u003einversion\u003c/strong\u003e count of each requirement.\u003c/p\u003e\n\n\u003cp\u003eA pair of indices \u003ccode\u003e(i, j)\u003c/code\u003e from an integer array \u003ccode\u003enums\u003c/code\u003e is called an \u003cstrong\u003einversion\u003c/strong\u003e if:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003ei \u0026lt; j\u003c/code\u003e and \u003ccode\u003enums[i] \u0026gt; nums[j]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the number of \u003cspan data-keyword\u003d\"permutation\"\u003epermutations\u003c/span\u003e \u003ccode\u003eperm\u003c/code\u003e of \u003ccode\u003e[0, 1, 2, ..., n - 1]\u003c/code\u003e such that for \u003cstrong\u003eall\u003c/strong\u003e \u003ccode\u003erequirements[i]\u003c/code\u003e, \u003ccode\u003eperm[0..end\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e has exactly \u003ccode\u003ecnt\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e inversions.\u003c/p\u003e\n\n\u003cp\u003eSince the answer may be very large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10\u003csup\u003e9\u003c/sup\u003e + 7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 3, requirements \u003d [[2,2],[0,0]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe two permutations are:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e[2, 0, 1]\u003c/code\u003e\n\n\t\u003cul\u003e\n\t\t\u003cli\u003ePrefix \u003ccode\u003e[2, 0, 1]\u003c/code\u003e has inversions \u003ccode\u003e(0, 1)\u003c/code\u003e and \u003ccode\u003e(0, 2)\u003c/code\u003e.\u003c/li\u003e\n\t\t\u003cli\u003ePrefix \u003ccode\u003e[2]\u003c/code\u003e has 0 inversions.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e[1, 2, 0]\u003c/code\u003e\n\t\u003cul\u003e\n\t\t\u003cli\u003ePrefix \u003ccode\u003e[1, 2, 0]\u003c/code\u003e has inversions \u003ccode\u003e(0, 2)\u003c/code\u003e and \u003ccode\u003e(1, 2)\u003c/code\u003e.\u003c/li\u003e\n\t\t\u003cli\u003ePrefix \u003ccode\u003e[1]\u003c/code\u003e has 0 inversions.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 3, requirements \u003d [[2,2],[1,1],[0,0]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only satisfying permutation is \u003ccode\u003e[2, 0, 1]\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003ePrefix \u003ccode\u003e[2, 0, 1]\u003c/code\u003e has inversions \u003ccode\u003e(0, 1)\u003c/code\u003e and \u003ccode\u003e(0, 2)\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003ePrefix \u003ccode\u003e[2, 0]\u003c/code\u003e has an inversion \u003ccode\u003e(0, 1)\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003ePrefix \u003ccode\u003e[2]\u003c/code\u003e has 0 inversions.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 2, requirements \u003d [[0,0],[1,0]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only satisfying permutation is \u003ccode\u003e[0, 1]\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003ePrefix \u003ccode\u003e[0]\u003c/code\u003e has 0 inversions.\u003c/li\u003e\n\t\u003cli\u003ePrefix \u003ccode\u003e[0, 1]\u003c/code\u003e has an inversion \u003ccode\u003e(0, 1)\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u0026lt;\u003d 300\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d requirements.length \u0026lt;\u003d n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003erequirements[i] \u003d [end\u003csub\u003ei\u003c/sub\u003e, cnt\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d end\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d cnt\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d 400\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that there is at least one \u003ccode\u003ei\u003c/code\u003e such that \u003ccode\u003eend\u003csub\u003ei\u003c/sub\u003e \u003d\u003d n - 1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that all \u003ccode\u003eend\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e are unique.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n[[2,2],[0,0]]\n3\n[[2,2],[1,1],[0,0]]\n2\n[[0,0],[1,0]]",
    "formTitle": "[3193]Count the Number of Inversions",
    "frequency": 0.0,
    "frontendQuestionId": "3193",
    "hints": [
      "Let \u003ccode\u003edp[i][j]\u003c/code\u003e denote the number of arrays of length \u003ccode\u003ei\u003c/code\u003e with \u003ccode\u003ej\u003c/code\u003e inversions.",
      "\u003ccode\u003edp[i][j] \u003d dp[i - 1][j] + dp[i - 1][j - 1] + 鈥� + dp[i - 1][0]\u003c/code\u003e.",
      "\u003ccode\u003edp[i][j] \u003d 0\u003c/code\u003e if for some \u003ccode\u003ex\u003c/code\u003e, \u003ccode\u003erequirements[x][0] \u003d\u003d i\u003c/code\u003e and \u003ccode\u003erequirements[x][1] !\u003d j\u003c/code\u003e."
    ],
    "level": 3,
    "metaData": {
      "name": "numberOfPermutations",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "requirements",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3460",
    "similarQuestions": [
      "[{\"title\": \"K Inverse Pairs Array\", \"titleSlug\": \"k-inverse-pairs-array\", \"difficulty\": \"Hard\", \"translatedTitle\": \"K \\u4e2a\\u9006\\u5e8f\\u5bf9\\u6570\\u7ec4\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "3\n[[2,2],[0,0]]",
    "title": "Count the Number of Inversions",
    "titleSlug": "count-the-number-of-inversions"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumArea(vector\u003cvector\u003cint\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumArea(int[][] grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumArea(self, grid: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumArea(int** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumArea(int[][] grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumArea \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumArea(grid: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumArea($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumArea(_ grid: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumArea(grid: Array\u003cIntArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumArea(List\u003cList\u003cint\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumArea(grid [][]int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_area(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumArea(grid: Array[Array[Int]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_area(grid: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-area grid)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_area(Grid :: [[integer()]]) -\u003e integer().\nminimum_area(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_area(grid :: [[integer]]) :: integer\n  def minimum_area(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D \u003cstrong\u003ebinary\u003c/strong\u003e array \u003ccode\u003egrid\u003c/code\u003e. Find a rectangle with horizontal and vertical sides with the\u003cstrong\u003e smallest\u003c/strong\u003e area, such that all the 1\u0026#39;s in \u003ccode\u003egrid\u003c/code\u003e lie inside this rectangle.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e possible area of the rectangle.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[0,1,0],[1,0,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/08/examplerect0.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 279px; height: 198px;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe smallest rectangle has a height of 2 and a width of 3, so it has an area of \u003ccode\u003e2 * 3 \u003d 6\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[1,0],[0,0]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/08/examplerect1.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 204px; height: 201px;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe smallest rectangle has both height and width 1, so its area is \u003ccode\u003e1 * 1 \u003d 1\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d grid.length, grid[i].length \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003egrid[i][j]\u003c/code\u003e is either 0 or 1.\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that there is at least one 1 in \u003ccode\u003egrid\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[0,1,0],[1,0,1]]\n[[1,0],[0,0]]",
    "formTitle": "[3195]Find the Minimum Area to Cover All Ones I",
    "frequency": 0.0,
    "frontendQuestionId": "3195",
    "hints": [
      "Find the minimum and maximum coordinates of a cell with a value of 1 in both directions."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumArea",
      "params": [
        {
          "name": "grid",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3461",
    "similarQuestions": [
      "[{\"title\": \"Smallest Rectangle Enclosing Black Pixels\", \"titleSlug\": \"smallest-rectangle-enclosing-black-pixels\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5305\\u542b\\u5168\\u90e8\\u9ed1\\u8272\\u50cf\\u7d20\\u7684\\u6700\\u5c0f\\u77e9\\u5f62\", \"isPaidOnly\": true}]"
    ],
    "statusSign": " ",
    "testCase": "[[0,1,0],[1,0,1]]",
    "title": "Find the Minimum Area to Cover All Ones I",
    "titleSlug": "find-the-minimum-area-to-cover-all-ones-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool doesAliceWin(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean doesAliceWin(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def doesAliceWin(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def doesAliceWin(self, s: str) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool doesAliceWin(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool DoesAliceWin(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar doesAliceWin \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function doesAliceWin(s: string): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function doesAliceWin($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func doesAliceWin(_ s: String) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun doesAliceWin(s: String): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool doesAliceWin(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func doesAliceWin(s string) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Boolean}\ndef does_alice_win(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def doesAliceWin(s: String): Boolean \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn does_alice_win(s: String) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (does-alice-win s)\n  (-\u003e string? boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec does_alice_win(S :: unicode:unicode_binary()) -\u003e boolean().\ndoes_alice_win(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec does_alice_win(s :: String.t) :: boolean\n  def does_alice_win(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eAlice and Bob are playing a game on a string.\u003c/p\u003e\n\n\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e, Alice and Bob will take turns playing the following game where Alice starts \u003cstrong\u003efirst\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eOn Alice\u0026#39;s turn, she has to remove any \u003cstrong\u003enon-empty\u003c/strong\u003e \u003cspan data-keyword\u003d\"substring\"\u003esubstring\u003c/span\u003e from \u003ccode\u003es\u003c/code\u003e that contains an \u003cstrong\u003eodd\u003c/strong\u003e number of vowels.\u003c/li\u003e\n\t\u003cli\u003eOn Bob\u0026#39;s turn, he has to remove any \u003cstrong\u003enon-empty\u003c/strong\u003e \u003cspan data-keyword\u003d\"substring\"\u003esubstring\u003c/span\u003e from \u003ccode\u003es\u003c/code\u003e that contains an \u003cstrong\u003eeven\u003c/strong\u003e number of vowels.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe first player who cannot make a move on their turn loses the game. We assume that both Alice and Bob play \u003cstrong\u003eoptimally\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if Alice wins the game, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\n\u003cp\u003eThe English vowels are: \u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003ee\u003c/code\u003e, \u003ccode\u003ei\u003c/code\u003e, \u003ccode\u003eo\u003c/code\u003e, and \u003ccode\u003eu\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;leetcoder\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nAlice can win the game as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAlice plays first, she can delete the underlined substring in \u003ccode\u003es \u003d \u0026quot;\u003cu\u003e\u003cstrong\u003eleetco\u003c/strong\u003e\u003c/u\u003eder\u0026quot;\u003c/code\u003e which contains 3 vowels. The resulting string is \u003ccode\u003es \u003d \u0026quot;der\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eBob plays second, he can delete the underlined substring in \u003ccode\u003es \u003d \u0026quot;\u003cu\u003e\u003cstrong\u003ed\u003c/strong\u003e\u003c/u\u003eer\u0026quot;\u003c/code\u003e which contains 0 vowels. The resulting string is \u003ccode\u003es \u003d \u0026quot;er\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAlice plays third, she can delete the whole string \u003ccode\u003es \u003d \u0026quot;\u003cstrong\u003e\u003cu\u003eer\u003c/u\u003e\u003c/strong\u003e\u0026quot;\u003c/code\u003e which contains 1 vowel.\u003c/li\u003e\n\t\u003cli\u003eBob plays fourth, since the string is empty, there is no valid play for Bob. So Alice wins the game.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;bbcd\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nThere is no valid play for Alice in her first turn, so Alice loses the game.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"leetcoder\"\n\"bbcd\"",
    "formTitle": "[3227]Vowels Game in a String",
    "frequency": 0.0,
    "frontendQuestionId": "3227",
    "hints": [
      "If there are no vowels in the initial string, then Bob wins.",
      "If the number of vowels in the initial string is odd, then Alice can remove the whole string on her first turn and win.",
      "What if the number of vowels in the initial string is even? What鈥檚 the optimal play for Alice鈥檚 first turn?"
    ],
    "level": 2,
    "metaData": {
      "name": "doesAliceWin",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3462",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "\"leetcoder\"",
    "title": "Vowels Game in a String",
    "titleSlug": "vowels-game-in-a-string"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector\u003cint\u003e\u0026 colors) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfAlternatingGroups(int[] colors) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfAlternatingGroups(self, colors):\n        \"\"\"\n        :type colors: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfAlternatingGroups(int* colors, int colorsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfAlternatingGroups(int[] colors) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} colors\n * @return {number}\n */\nvar numberOfAlternatingGroups \u003d function(colors) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfAlternatingGroups(colors: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @return Integer\n     */\n    function numberOfAlternatingGroups($colors) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfAlternatingGroups(_ colors: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfAlternatingGroups(colors: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfAlternatingGroups(List\u003cint\u003e colors) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfAlternatingGroups(colors []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} colors\n# @return {Integer}\ndef number_of_alternating_groups(colors)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfAlternatingGroups(colors: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_alternating_groups(colors: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-alternating-groups colors)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_alternating_groups(Colors :: [integer()]) -\u003e integer().\nnumber_of_alternating_groups(Colors) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_alternating_groups(colors :: [integer]) :: integer\n  def number_of_alternating_groups(colors) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere is a circle of red and blue tiles. You are given an array of integers \u003ccode\u003ecolors\u003c/code\u003e. The color of tile \u003ccode\u003ei\u003c/code\u003e is represented by \u003ccode\u003ecolors[i]\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003ecolors[i] \u003d\u003d 0\u003c/code\u003e means that tile \u003ccode\u003ei\u003c/code\u003e is \u003cstrong\u003ered\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ecolors[i] \u003d\u003d 1\u003c/code\u003e means that tile \u003ccode\u003ei\u003c/code\u003e is \u003cstrong\u003eblue\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEvery 3 contiguous tiles in the circle with \u003cstrong\u003ealternating\u003c/strong\u003e colors (the middle tile has a different color from its \u003cstrong\u003eleft\u003c/strong\u003e and \u003cstrong\u003eright\u003c/strong\u003e tiles) is called an \u003cstrong\u003ealternating\u003c/strong\u003e group.\u003c/p\u003e\n\n\u003cp\u003eReturn the number of \u003cstrong\u003ealternating\u003c/strong\u003e groups.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that since \u003ccode\u003ecolors\u003c/code\u003e represents a \u003cstrong\u003ecircle\u003c/strong\u003e, the \u003cstrong\u003efirst\u003c/strong\u003e and the \u003cstrong\u003elast\u003c/strong\u003e tiles are considered to be next to each other.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ecolors \u003d [1,1,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-53-171.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ecolors \u003d [0,1,0,0,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-47-491.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAlternating groups:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-50-441.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/strong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-48-211.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003cstrong class\u003d\"example\"\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-49-351.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: #fff; border-radius: .5rem;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d colors.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d colors[i] \u0026lt;\u003d 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,1,1]\n[0,1,0,0,1]",
    "formTitle": "[3206]Alternating Groups I",
    "frequency": 0.0,
    "frontendQuestionId": "3206",
    "hints": [
      "For each tile, check that the previous and the next tile have different colors from that tile or not."
    ],
    "level": 1,
    "metaData": {
      "name": "numberOfAlternatingGroups",
      "params": [
        {
          "name": "colors",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3463",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[1,1,1]",
    "title": "Alternating Groups I",
    "titleSlug": "alternating-groups-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long maximumTotalCost(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long maximumTotalCost(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumTotalCost(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumTotalCost(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long maximumTotalCost(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MaximumTotalCost(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumTotalCost \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumTotalCost(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumTotalCost($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumTotalCost(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumTotalCost(nums: IntArray): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumTotalCost(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumTotalCost(nums []int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_total_cost(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumTotalCost(nums: Array[Int]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_total_cost(nums: Vec\u003ci32\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-total-cost nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_total_cost(Nums :: [integer()]) -\u003e integer().\nmaximum_total_cost(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_total_cost(nums :: [integer]) :: integer\n  def maximum_total_cost(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e with length \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003ecost\u003c/strong\u003e of a \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarray\u003c/span\u003e \u003ccode\u003enums[l..r]\u003c/code\u003e, where \u003ccode\u003e0 \u0026lt;\u003d l \u0026lt;\u003d r \u0026lt; n\u003c/code\u003e, is defined as:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecost(l, r) \u003d nums[l] - nums[l + 1] + ... + nums[r] * (\u0026minus;1)\u003csup\u003er \u0026minus; l\u003c/sup\u003e\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eYour task is to \u003cstrong\u003esplit\u003c/strong\u003e \u003ccode\u003enums\u003c/code\u003e into subarrays such that the \u003cstrong\u003etotal\u003c/strong\u003e \u003cstrong\u003ecost\u003c/strong\u003e of the subarrays is \u003cstrong\u003emaximized\u003c/strong\u003e, ensuring each element belongs to \u003cstrong\u003eexactly one\u003c/strong\u003e subarray.\u003c/p\u003e\n\n\u003cp\u003eFormally, if \u003ccode\u003enums\u003c/code\u003e is split into \u003ccode\u003ek\u003c/code\u003e subarrays, where \u003ccode\u003ek \u0026gt; 1\u003c/code\u003e, at indices \u003ccode\u003ei\u003csub\u003e1\u003c/sub\u003e, i\u003csub\u003e2\u003c/sub\u003e, ..., i\u003csub\u003ek \u0026minus; 1\u003c/sub\u003e\u003c/code\u003e, where \u003ccode\u003e0 \u0026lt;\u003d i\u003csub\u003e1\u003c/sub\u003e \u0026lt; i\u003csub\u003e2\u003c/sub\u003e \u0026lt; ... \u0026lt; i\u003csub\u003ek - 1\u003c/sub\u003e \u0026lt; n - 1\u003c/code\u003e, then the total cost will be:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecost(0, i\u003csub\u003e1\u003c/sub\u003e) + cost(i\u003csub\u003e1\u003c/sub\u003e + 1, i\u003csub\u003e2\u003c/sub\u003e) + ... + cost(i\u003csub\u003ek \u0026minus; 1\u003c/sub\u003e + 1, n \u0026minus; 1)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturn an integer denoting the \u003cem\u003emaximum total cost\u003c/em\u003e of the subarrays after splitting the array optimally.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If \u003ccode\u003enums\u003c/code\u003e is not split into subarrays, i.e. \u003ccode\u003ek \u003d 1\u003c/code\u003e, the total cost is simply \u003ccode\u003ecost(0, n - 1)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,-2,3,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e10\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOne way to maximize the total cost is by splitting \u003ccode\u003e[1, -2, 3, 4]\u003c/code\u003e into subarrays \u003ccode\u003e[1, -2, 3]\u003c/code\u003e and \u003ccode\u003e[4]\u003c/code\u003e. The total cost will be \u003ccode\u003e(1 + 2 + 3) + 4 \u003d 10\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,-1,1,-1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOne way to maximize the total cost is by splitting \u003ccode\u003e[1, -1, 1, -1]\u003c/code\u003e into subarrays \u003ccode\u003e[1, -1]\u003c/code\u003e and \u003ccode\u003e[1, -1]\u003c/code\u003e. The total cost will be \u003ccode\u003e(1 + 1) + (1 + 1) \u003d 4\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [0]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 0\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe cannot split the array further, so the answer is 0.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,-1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSelecting the whole array gives a total cost of \u003ccode\u003e1 + 1 \u003d 2\u003c/code\u003e, which is the maximum.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,-2,3,4]\n[1,-1,1,-1]\n[0]\n[1,-1]",
    "formTitle": "[3196]Maximize Total Cost of Alternating Subarrays",
    "frequency": 0.0,
    "frontendQuestionId": "3196",
    "hints": [
      "The problem can be solved using dynamic programming.",
      "Since we can always start a new subarray, the problem is the same as selecting some elements in the array and flipping their signs to negative to maximize the sum. However, we cannot flip the signs of 2 consecutive elements, and the first element in the array cannot be negative.",
      "Let \u003ccode\u003edp[i][0/1]\u003c/code\u003e be the largest sum we can get for prefix \u003ccode\u003enums[0..i]\u003c/code\u003e, where \u003ccode\u003edp[i][0]\u003c/code\u003e is the maximum if the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e element wasn\u0027t flipped, and \u003ccode\u003edp[i][1]\u003c/code\u003e is the maximum if the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e element was flipped.",
      "Based on the restriction:\u003cbr /\u003e\r\n\u003ccode\u003edp[i][0] \u003d min(dp[i - 1][0], dp[i - 1][1]) + nums[i]\u003c/code\u003e\u003cbr /\u003e\r\n\u003ccode\u003edp[i][1] \u003d dp[i - 1][0] - nums[i]\u003c/code\u003e",
      "The initial state is:\u003cbr /\u003e\r\n\u003ccode\u003edp[1][0] \u003d nums[0] + nums[1]\u003c/code\u003e\u003cbr /\u003e\r\n\u003ccode\u003edp[1][1] \u003d nums[0] - nums[1]\u003c/code\u003e\u003cbr /\u003e\r\nand the answer is \u003ccode\u003emax(dp[n - 1][0], dp[n - 1][1])\u003c/code\u003e.",
      "Can you optimize the space complexity?"
    ],
    "level": 2,
    "metaData": {
      "name": "maximumTotalCost",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3464",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[1,-2,3,4]",
    "title": "Maximize Total Cost of Alternating Subarrays",
    "titleSlug": "maximize-total-cost-of-alternating-subarrays"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long countSubarrays(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long countSubarrays(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long CountSubarrays(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countSubarrays \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function countSubarrays(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countSubarrays($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func countSubarrays(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun countSubarrays(nums: IntArray, k: Int): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int countSubarrays(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func countSubarrays(nums []int, k int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_subarrays(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def countSubarrays(nums: Array[Int], k: Int): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn count_subarrays(nums: Vec\u003ci32\u003e, k: i32) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (count-subarrays nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec count_subarrays(Nums :: [integer()], K :: integer()) -\u003e integer().\ncount_subarrays(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec count_subarrays(nums :: [integer], k :: integer) :: integer\n  def count_subarrays(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven an array of integers \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return the number of \u003cspan data-keyword\u003d\"subarray-nonempty\"\u003esubarrays\u003c/span\u003e of \u003ccode\u003enums\u003c/code\u003e where the bitwise \u003ccode\u003eAND\u003c/code\u003e of the elements of the subarray equals \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,1,1], k \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAll subarrays contain only 1\u0026#39;s.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,1,2], k \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSubarrays having an \u003ccode\u003eAND\u003c/code\u003e value of 1 are: \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,1,2]\u003c/code\u003e, \u003ccode\u003e[1,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,2]\u003c/code\u003e, \u003ccode\u003e[\u003cu\u003e\u003cstrong\u003e1,1\u003c/strong\u003e\u003c/u\u003e,2]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSubarrays having an \u003ccode\u003eAND\u003c/code\u003e value of 2 are: \u003ccode\u003e[1,\u003cb\u003e\u003cu\u003e2\u003c/u\u003e\u003c/b\u003e,3]\u003c/code\u003e, \u003ccode\u003e[1,\u003cu\u003e\u003cstrong\u003e2,3\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i], k \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,1,1]\n1\n[1,1,2]\n1\n[1,2,3]\n2",
    "formTitle": "[3209]Number of Subarrays With AND Value of K",
    "frequency": 0.0,
    "frontendQuestionId": "3209",
    "hints": [
      "Let鈥檚 say we want to count the number of pairs \u003ccode\u003e(l, r)\u003c/code\u003e such that \u003ccode\u003enums[l] \u0026 nums[l + 1] \u0026 鈥� \u0026 nums[r] \u003d\u003d k\u003c/code\u003e.",
      "Fix the left index \u003ccode\u003el\u003c/code\u003e.",
      "Note that if you increase \u003ccode\u003er\u003c/code\u003e for a fixed \u003ccode\u003el\u003c/code\u003e, then the AND value of the subarray either decreases or remains unchanged.",
      "Therefore, consider using binary search.",
      "To calculate the AND value of a subarray, use sparse tables."
    ],
    "level": 3,
    "metaData": {
      "name": "countSubarrays",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3466",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[1,1,1]\n1",
    "title": "Number of Subarrays With AND Value of K",
    "titleSlug": "number-of-subarrays-with-and-value-of-k"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string getEncryptedString(string s, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String getEncryptedString(String s, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def getEncryptedString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def getEncryptedString(self, s: str, k: int) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* getEncryptedString(char* s, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string GetEncryptedString(string s, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar getEncryptedString \u003d function(s, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function getEncryptedString(s: string, k: number): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function getEncryptedString($s, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func getEncryptedString(_ s: String, _ k: Int) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun getEncryptedString(s: String, k: Int): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String getEncryptedString(String s, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func getEncryptedString(s string, k int) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef get_encrypted_string(s, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def getEncryptedString(s: String, k: Int): String \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn get_encrypted_string(s: String, k: i32) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (get-encrypted-string s k)\n  (-\u003e string? exact-integer? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec get_encrypted_string(S :: unicode:unicode_binary(), K :: integer()) -\u003e unicode:unicode_binary().\nget_encrypted_string(S, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec get_encrypted_string(s :: String.t, k :: integer) :: String.t\n  def get_encrypted_string(s, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e. Encrypt the string using the following algorithm:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor each character \u003ccode\u003ec\u003c/code\u003e in \u003ccode\u003es\u003c/code\u003e, replace \u003ccode\u003ec\u003c/code\u003e with the \u003ccode\u003ek\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e character after \u003ccode\u003ec\u003c/code\u003e in the string (in a cyclic manner).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cem\u003eencrypted string\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;dart\u0026quot;, k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;tdar\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor \u003ccode\u003ei \u003d 0\u003c/code\u003e, the 3\u003csup\u003erd\u003c/sup\u003e character after \u003ccode\u003e\u0026#39;d\u0026#39;\u003c/code\u003e is \u003ccode\u003e\u0026#39;t\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eFor \u003ccode\u003ei \u003d 1\u003c/code\u003e, the 3\u003csup\u003erd\u003c/sup\u003e character after \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e is \u003ccode\u003e\u0026#39;d\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eFor \u003ccode\u003ei \u003d 2\u003c/code\u003e, the 3\u003csup\u003erd\u003c/sup\u003e character after \u003ccode\u003e\u0026#39;r\u0026#39;\u003c/code\u003e is \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eFor \u003ccode\u003ei \u003d 3\u003c/code\u003e, the 3\u003csup\u003erd\u003c/sup\u003e character after \u003ccode\u003e\u0026#39;t\u0026#39;\u003c/code\u003e is \u003ccode\u003e\u0026#39;r\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;aaa\u0026quot;, k \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;aaa\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAs all the characters are the same, the encrypted string will also be the same.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"dart\"\n3\n\"aaa\"\n1",
    "formTitle": "[3210]Find the Encrypted String",
    "frequency": 0.0,
    "frontendQuestionId": "3210",
    "hints": [
      "Make a new string such that for each character in \u003ccode\u003es\u003c/code\u003e, character \u003ccode\u003ei\u003c/code\u003e will correspond to \u003ccode\u003e(i + k) % n\u003c/code\u003e character in the original string."
    ],
    "level": 1,
    "metaData": {
      "name": "getEncryptedString",
      "params": [
        {
          "name": "s",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3468",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "\"dart\"\n3",
    "title": "Find the Encrypted String",
    "titleSlug": "find-the-encrypted-string"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxHeightOfTriangle(int red, int blue) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxHeightOfTriangle(int red, int blue) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxHeightOfTriangle(self, red, blue):\n        \"\"\"\n        :type red: int\n        :type blue: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxHeightOfTriangle(self, red: int, blue: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxHeightOfTriangle(int red, int blue) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxHeightOfTriangle(int red, int blue) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} red\n * @param {number} blue\n * @return {number}\n */\nvar maxHeightOfTriangle \u003d function(red, blue) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxHeightOfTriangle(red: number, blue: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $red\n     * @param Integer $blue\n     * @return Integer\n     */\n    function maxHeightOfTriangle($red, $blue) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxHeightOfTriangle(_ red: Int, _ blue: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxHeightOfTriangle(red: Int, blue: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxHeightOfTriangle(int red, int blue) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxHeightOfTriangle(red int, blue int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} red\n# @param {Integer} blue\n# @return {Integer}\ndef max_height_of_triangle(red, blue)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxHeightOfTriangle(red: Int, blue: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_height_of_triangle(red: i32, blue: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-height-of-triangle red blue)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_height_of_triangle(Red :: integer(), Blue :: integer()) -\u003e integer().\nmax_height_of_triangle(Red, Blue) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_height_of_triangle(red :: integer, blue :: integer) :: integer\n  def max_height_of_triangle(red, blue) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two integers \u003ccode\u003ered\u003c/code\u003e and \u003ccode\u003eblue\u003c/code\u003e representing the count of red and blue colored balls. You have to arrange these balls to form a triangle such that the 1\u003csup\u003est\u003c/sup\u003e row will have 1 ball, the 2\u003csup\u003end\u003c/sup\u003e row will have 2 balls, the 3\u003csup\u003erd\u003c/sup\u003e row will have 3 balls, and so on.\u003c/p\u003e\n\n\u003cp\u003eAll the balls in a particular row should be the \u003cstrong\u003esame\u003c/strong\u003e color, and adjacent rows should have \u003cstrong\u003edifferent\u003c/strong\u003e colors.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003emaximum\u003c/strong\u003e\u003cem\u003e height of the triangle\u003c/em\u003e that can be achieved.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ered \u003d 2, blue \u003d 4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/16/brb.png\" style\u003d\"width: 300px; height: 240px; padding: 10px;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe only possible arrangement is shown above.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ered \u003d 2, blue \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/16/br.png\" style\u003d\"width: 150px; height: 135px; padding: 10px;\" /\u003e\u003cbr /\u003e\nThe only possible arrangement is shown above.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ered \u003d 1, blue \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ered \u003d 10, blue \u003d 1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/16/br.png\" style\u003d\"width: 150px; height: 135px; padding: 10px;\" /\u003e\u003cbr /\u003e\nThe only possible arrangement is shown above.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d red, blue \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "2\n4\n2\n1\n1\n1\n10\n1",
    "formTitle": "[3200]Maximum Height of a Triangle",
    "frequency": 0.0,
    "frontendQuestionId": "3200",
    "hints": [
      "Count the max height using both possibilities. That is, red ball as top and blue ball as top.",
      "For counting the max height, use a simple for loop and remove the number of balls required at this level."
    ],
    "level": 1,
    "metaData": {
      "name": "maxHeightOfTriangle",
      "params": [
        {
          "name": "red",
          "type": "integer"
        },
        {
          "name": "blue",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3469",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "2\n4",
    "title": "Maximum Height of a Triangle",
    "titleSlug": "maximum-height-of-a-triangle"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long maximumScore(vector\u003cvector\u003cint\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long maximumScore(int[][] grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumScore(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumScore(self, grid: List[List[int]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long maximumScore(int** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MaximumScore(int[][] grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maximumScore \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumScore(grid: number[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maximumScore($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumScore(_ grid: [[Int]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumScore(grid: Array\u003cIntArray\u003e): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumScore(List\u003cList\u003cint\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumScore(grid [][]int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef maximum_score(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumScore(grid: Array[Array[Int]]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_score(grid: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-score grid)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_score(Grid :: [[integer()]]) -\u003e integer().\nmaximum_score(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_score(grid :: [[integer]]) :: integer\n  def maximum_score(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a 2D matrix \u003ccode\u003egrid\u003c/code\u003e of size \u003ccode\u003en x n\u003c/code\u003e. Initially, all cells of the grid are colored white. In one operation, you can select any cell of indices \u003ccode\u003e(i, j)\u003c/code\u003e, and color black all the cells of the \u003ccode\u003ej\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e column starting from the top row down to the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e row.\u003c/p\u003e\n\n\u003cp\u003eThe grid score is the sum of all \u003ccode\u003egrid[i][j]\u003c/code\u003e such that cell \u003ccode\u003e(i, j)\u003c/code\u003e is white and it has a horizontally adjacent black cell.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003emaximum\u003c/strong\u003e score that can be achieved after some number of operations.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[0,0,0,0,0],[0,0,3,0,0],[0,1,0,0,0],[5,0,0,3,0],[0,0,0,0,2]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e11\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/11/one.png\" style\u003d\"width: 300px; height: 200px;\" /\u003e\n\u003cp\u003eIn the first operation, we color all cells in column 1 down to row 3, and in the second operation, we color all cells in column 4 down to the last row. The score of the resulting grid is \u003ccode\u003egrid[3][0] + grid[1][2] + grid[3][3]\u003c/code\u003e which is equal to 11.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[10,9,0,0,15],[7,1,0,8,0],[5,20,0,11,0],[0,0,0,1,2],[8,12,1,10,3]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e94\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/11/two-1.png\" style\u003d\"width: 300px; height: 200px;\" /\u003e\n\u003cp\u003eWe perform operations on 1, 2, and 3 down to rows 1, 4, and 0, respectively. The score of the resulting grid is \u003ccode\u003egrid[0][0] + grid[1][0] + grid[2][1] + grid[4][1] + grid[1][3] + grid[2][3] + grid[3][3] + grid[4][3] + grid[0][4]\u003c/code\u003e which is equal to 94.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d\u0026nbsp;n \u003d\u003d grid.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en \u003d\u003d grid[i].length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d grid[i][j] \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[0,0,0,0,0],[0,0,3,0,0],[0,1,0,0,0],[5,0,0,3,0],[0,0,0,0,2]]\n[[10,9,0,0,15],[7,1,0,8,0],[5,20,0,11,0],[0,0,0,1,2],[8,12,1,10,3]]",
    "formTitle": "[3225]Maximum Score From Grid Operations",
    "frequency": 0.0,
    "frontendQuestionId": "3225",
    "hints": [
      "Use dynamic programming.",
      "Solve the problem in O(N^4) using a 3-states dp.",
      "Let \u003ccode\u003edp[i][lastHeight][beforeLastHeight]\u003c/code\u003e denote the maximum score if the grid was limited to column \u003ccode\u003ei\u003c/code\u003e, and the height of column \u003ccode\u003ei - 1\u003c/code\u003e is \u003ccode\u003elastHeight\u003c/code\u003e and the height of column \u003ccode\u003ei - 2\u003c/code\u003e is \u003ccode\u003ebeforeLastHeight\u003c/code\u003e.",
      "The third state, \u003ccode\u003ebeforeLastHeight\u003c/code\u003e, is used to determine which values of column \u003ccode\u003ei - 1\u003c/code\u003e will be added to the score.  We can replace this state with another state that only takes two values 0 or 1.",
      "Let \u003ccode\u003edp[i][lastHeight][isBigger]\u003c/code\u003e denote the maximum score if the grid was limited to column \u003ccode\u003ei\u003c/code\u003e, and where the height of column \u003ccode\u003ei - 1\u003c/code\u003e is \u003ccode\u003elastHeight\u003c/code\u003e. Additionally, if \u003ccode\u003eisBigger \u003d\u003d 1\u003c/code\u003e, the number of black cells in column \u003ccode\u003ei\u003c/code\u003e is assumed to be larger than the number of black cells in column \u003ccode\u003ei - 2\u003c/code\u003e, and vice versa. Note that if our assumption is wrong, it would lead to a suboptimal score and, therefore, it would not be considered as the final answer."
    ],
    "level": 3,
    "metaData": {
      "name": "maximumScore",
      "params": [
        {
          "name": "grid",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3470",
    "similarQuestions": [
      "[{\"title\": \"Maximum Difference Score in a Grid\", \"titleSlug\": \"maximum-difference-score-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u77e9\\u9635\\u4e2d\\u7684\\u6700\\u5927\\u5f97\\u5206\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[[0,0,0,0,0],[0,0,3,0,0],[0,1,0,0,0],[5,0,0,3,0],[0,0,0,0,2]]",
    "title": "Maximum Score From Grid Operations",
    "titleSlug": "maximum-score-from-grid-operations"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    double minimumAverage(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public double minimumAverage(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumAverage(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: float\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumAverage(self, nums: List[int]) -\u003e float:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "double minimumAverage(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public double MinimumAverage(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumAverage \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumAverage(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Float\n     */\n    function minimumAverage($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumAverage(_ nums: [Int]) -\u003e Double {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumAverage(nums: IntArray): Double {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  double minimumAverage(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumAverage(nums []int) float64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Float}\ndef minimum_average(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumAverage(nums: Array[Int]): Double \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_average(nums: Vec\u003ci32\u003e) -\u003e f64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-average nums)\n  (-\u003e (listof exact-integer?) flonum?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_average(Nums :: [integer()]) -\u003e float().\nminimum_average(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_average(nums :: [integer]) :: float\n  def minimum_average(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou have an array of floating point numbers \u003ccode\u003eaverages\u003c/code\u003e which is initially empty. You are given an array \u003ccode\u003enums\u003c/code\u003e of \u003ccode\u003en\u003c/code\u003e integers where \u003ccode\u003en\u003c/code\u003e is even.\u003c/p\u003e\n\n\u003cp\u003eYou repeat the following procedure \u003ccode\u003en / 2\u003c/code\u003e times:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eRemove the \u003cstrong\u003esmallest\u003c/strong\u003e element, \u003ccode\u003eminElement\u003c/code\u003e, and the \u003cstrong\u003elargest\u003c/strong\u003e element \u003ccode\u003emaxElement\u003c/code\u003e,\u0026nbsp;from \u003ccode\u003enums\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAdd \u003ccode\u003e(minElement + maxElement) / 2\u003c/code\u003e to \u003ccode\u003eaverages\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e element in \u003ccode\u003eaverages\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [7,8,3,4,15,13,4,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5.5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003estep\u003c/th\u003e\n\t\t\t\u003cth\u003enums\u003c/th\u003e\n\t\t\t\u003cth\u003eaverages\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e[7,8,3,4,15,13,4,1]\u003c/td\u003e\n\t\t\t\u003ctd\u003e[]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e[7,8,3,4,13,4]\u003c/td\u003e\n\t\t\t\u003ctd\u003e[8]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e[7,8,4,4]\u003c/td\u003e\n\t\t\t\u003ctd\u003e[8,8]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e[7,4]\u003c/td\u003e\n\t\t\t\u003ctd\u003e[8,8,6]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e[]\u003c/td\u003e\n\t\t\t\u003ctd\u003e[8,8,6,5.5]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\nThe smallest element of averages, 5.5, is returned.\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,9,8,3,10,5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5.5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003estep\u003c/th\u003e\n\t\t\t\u003cth\u003enums\u003c/th\u003e\n\t\t\t\u003cth\u003eaverages\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cspan class\u003d\"example-io\"\u003e[1,9,8,3,10,5]\u003c/span\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e[]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cspan class\u003d\"example-io\"\u003e[9,8,3,5]\u003c/span\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e[5.5]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cspan class\u003d\"example-io\"\u003e[8,5]\u003c/span\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e[5.5,6]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e[]\u003c/td\u003e\n\t\t\t\u003ctd\u003e[5.5,6,6.5]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,7,8,9]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5.0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003estep\u003c/th\u003e\n\t\t\t\u003cth\u003enums\u003c/th\u003e\n\t\t\t\u003cth\u003eaverages\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cspan class\u003d\"example-io\"\u003e[1,2,3,7,8,9]\u003c/span\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e[]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cspan class\u003d\"example-io\"\u003e[2,3,7,8]\u003c/span\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e[5]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cspan class\u003d\"example-io\"\u003e[3,7]\u003c/span\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e[5,5]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003cspan class\u003d\"example-io\"\u003e[]\u003c/span\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e[5,5,5]\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en\u003c/code\u003e is even.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[7,8,3,4,15,13,4,1]\n[1,9,8,3,10,5]\n[1,2,3,7,8,9]",
    "formTitle": "[3194]Minimum Average of Smallest and Largest Elements",
    "frequency": 0.0,
    "frontendQuestionId": "3194",
    "hints": [
      "If \u003ccode\u003enums\u003c/code\u003e is sorted, then the elements of \u003ccode\u003eaverages\u003c/code\u003e are \u003ccode\u003e(nums[i] + nums[n - i - 1]) / 2\u003c/code\u003e  for all \u003ccode\u003ei \u003c n / 2\u003c/code\u003e."
    ],
    "level": 1,
    "metaData": {
      "name": "minimumAverage",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3471",
    "similarQuestions": [
      "[{\"title\": \"Number of Distinct Averages\", \"titleSlug\": \"number-of-distinct-averages\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u4e0d\\u540c\\u7684\\u5e73\\u5747\\u503c\\u6570\\u76ee\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[7,8,3,4,15,13,4,1]",
    "title": "Minimum Average of Smallest and Largest Elements",
    "titleSlug": "minimum-average-of-smallest-and-largest-elements"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minOperations(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minOperations(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minOperations(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minOperations(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinOperations(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minOperations \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minOperations(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minOperations($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minOperations(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minOperations(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minOperations(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minOperations(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_operations(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minOperations(nums: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_operations(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-operations nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_operations(Nums :: [integer()]) -\u003e integer().\nmin_operations(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer]) :: integer\n  def min_operations(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cspan data-keyword\u003d\"binary-array\"\u003ebinary array\u003c/span\u003e \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can do the following operation on the array \u003cstrong\u003eany\u003c/strong\u003e number of times (possibly zero):\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose \u003cstrong\u003eany\u003c/strong\u003e 3 \u003cstrong\u003econsecutive\u003c/strong\u003e elements from the array and \u003cstrong\u003eflip\u003c/strong\u003e \u003cstrong\u003eall\u003c/strong\u003e of them.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eFlipping\u003c/strong\u003e an element means changing its value from 0 to 1, and from 1 to 0.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e number of operations required to make all elements in \u003ccode\u003enums\u003c/code\u003e equal to 1. If it is impossible, return -1.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [0,1,1,1,0,0]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nWe can do the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose the elements at indices 0, 1 and 2. The resulting array is \u003ccode\u003enums \u003d [\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e,1,0,0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eChoose the elements at indices 1, 2 and 3. The resulting array is \u003ccode\u003enums \u003d [1,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cstrong\u003e\u003cu\u003e0\u003c/u\u003e\u003c/strong\u003e,0,0]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eChoose the elements at indices 3, 4 and 5. The resulting array is \u003ccode\u003enums \u003d [1,1,1,\u003cstrong\u003e\u003cu\u003e1\u003c/u\u003e\u003c/strong\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [0,1,1,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e-1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nIt is impossible to make all elements equal to 1.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt;\u003d 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[0,1,1,1,0,0]\n[0,1,1,1]",
    "formTitle": "[3191]Minimum Operations to Make Binary Array Elements Equal to One I",
    "frequency": 0.0,
    "frontendQuestionId": "3191",
    "hints": [
      "If \u003ccode\u003enums[0]\u003c/code\u003e is 0, then the only way to change it to 1 is by doing an operation on the first 3 elements of the array.",
      "After Changing \u003ccode\u003enums[0]\u003c/code\u003e to 1, use the same logic on the remaining array."
    ],
    "level": 2,
    "metaData": {
      "name": "minOperations",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3475",
    "similarQuestions": [
      "[{\"title\": \"Minimum Number of K Consecutive Bit Flips\", \"titleSlug\": \"minimum-number-of-k-consecutive-bit-flips\", \"difficulty\": \"Hard\", \"translatedTitle\": \"K \\u8fde\\u7eed\\u4f4d\\u7684\\u6700\\u5c0f\\u7ffb\\u8f6c\\u6b21\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[0,1,1,1,0,0]",
    "title": "Minimum Operations to Make Binary Array Elements Equal to One I",
    "titleSlug": "minimum-operations-to-make-binary-array-elements-equal-to-one-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumOperations(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumOperations(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumOperations(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumOperations(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumOperations(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumOperations \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumOperations(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumOperations($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumOperations(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumOperations(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumOperations(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumOperations(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_operations(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumOperations(nums: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_operations(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-operations nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_operations(Nums :: [integer()]) -\u003e integer().\nminimum_operations(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_operations(nums :: [integer]) :: integer\n  def minimum_operations(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e. In one operation, you can add or subtract 1 from \u003cstrong\u003eany\u003c/strong\u003e element of \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e number of operations to make all elements of \u003ccode\u003enums\u003c/code\u003e divisible by 3.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAll array elements can be made divisible by 3 using 3 operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eSubtract 1 from 1.\u003c/li\u003e\n\t\u003cli\u003eAdd 1 to 2.\u003c/li\u003e\n\t\u003cli\u003eSubtract 1 from 4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [3,6,9]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 50\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,4]\n[3,6,9]",
    "formTitle": "[3190]Find Minimum Operations to Make All Elements Divisible by Three",
    "frequency": 0.0,
    "frontendQuestionId": "3190",
    "hints": [
      "If \u003ccode\u003ex % 3 !\u003d 0\u003c/code\u003e we can always increment or decrement \u003ccode\u003ex\u003c/code\u003e such that we only need 1 operation.",
      "Add \u003ccode\u003emin(nums[i] % 3, 3 - (num[i] % 3))\u003c/code\u003e to the count of operations."
    ],
    "level": 1,
    "metaData": {
      "name": "minimumOperations",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3476",
    "similarQuestions": [
      "[{\"title\": \"Minimum Moves to Equal Array Elements\", \"titleSlug\": \"minimum-moves-to-equal-array-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c0f\\u64cd\\u4f5c\\u6b21\\u6570\\u4f7f\\u6570\\u7ec4\\u5143\\u7d20\\u76f8\\u7b49\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,2,3,4]",
    "title": "Find Minimum Operations to Make All Elements Divisible by Three",
    "titleSlug": "find-minimum-operations-to-make-all-elements-divisible-by-three"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minOperations(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minOperations(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minOperations(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minOperations(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinOperations(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minOperations \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minOperations(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minOperations($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minOperations(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minOperations(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minOperations(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minOperations(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_operations(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minOperations(nums: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_operations(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-operations nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_operations(Nums :: [integer()]) -\u003e integer().\nmin_operations(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer]) :: integer\n  def min_operations(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cspan data-keyword\u003d\"binary-array\"\u003ebinary array\u003c/span\u003e \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can do the following operation on the array \u003cstrong\u003eany\u003c/strong\u003e number of times (possibly zero):\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose \u003cstrong\u003eany\u003c/strong\u003e index \u003ccode\u003ei\u003c/code\u003e from the array and \u003cstrong\u003eflip\u003c/strong\u003e \u003cstrong\u003eall\u003c/strong\u003e the elements from index \u003ccode\u003ei\u003c/code\u003e to the end of the array.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eFlipping\u003c/strong\u003e an element means changing its value from 0 to 1, and from 1 to 0.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e number of operations required to make all elements in \u003ccode\u003enums\u003c/code\u003e equal to 1.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [0,1,1,0,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nWe can do the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose the index \u003ccode\u003ei \u003d 1\u003c/code\u003e\u003cspan class\u003d\"example-io\"\u003e. The resulting array will be \u003ccode\u003enums \u003d [0,\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e.\u003c/span\u003e\u003c/li\u003e\n\t\u003cli\u003eChoose the index \u003ccode\u003ei \u003d 0\u003c/code\u003e\u003cspan class\u003d\"example-io\"\u003e. The resulting array will be \u003ccode\u003enums \u003d [\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e.\u003c/span\u003e\u003c/li\u003e\n\t\u003cli\u003eChoose the index \u003ccode\u003ei \u003d 4\u003c/code\u003e\u003cspan class\u003d\"example-io\"\u003e. The resulting array will be \u003ccode\u003enums \u003d [1,1,1,0,\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e.\u003c/span\u003e\u003c/li\u003e\n\t\u003cli\u003eChoose the index \u003ccode\u003ei \u003d 3\u003c/code\u003e\u003cspan class\u003d\"example-io\"\u003e. The resulting array will be \u003ccode\u003enums \u003d [1,1,1,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,0,0,0]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nWe can do the following operation:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose the index \u003ccode\u003ei \u003d 1\u003c/code\u003e\u003cspan class\u003d\"example-io\"\u003e. The resulting array will be \u003ccode\u003enums \u003d [1,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e]\u003c/code\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt;\u003d 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[0,1,1,0,1]\n[1,0,0,0]",
    "formTitle": "[3192]Minimum Operations to Make Binary Array Elements Equal to One II",
    "frequency": 0.0,
    "frontendQuestionId": "3192",
    "hints": [
      "The only way to change \u003ccode\u003enums[0]\u003c/code\u003e to 1 is by performing an operation with index \u003ccode\u003ei \u003d 0\u003c/code\u003e.",
      "Iterate from left to right and perform an operation at each index i where nums[i] is 0, and keep track of how many operations are currently performed on the suffix."
    ],
    "level": 2,
    "metaData": {
      "name": "minOperations",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3477",
    "similarQuestions": [
      "[{\"title\": \"Minimum Suffix Flips\", \"titleSlug\": \"minimum-suffix-flips\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u5c11\\u7684\\u540e\\u7f00\\u7ffb\\u8f6c\\u6b21\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[0,1,1,0,1]",
    "title": "Minimum Operations to Make Binary Array Elements Equal to One II",
    "titleSlug": "minimum-operations-to-make-binary-array-elements-equal-to-one-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector\u003cvector\u003cint\u003e\u003e\u0026 circles) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def canReachCorner(self, X, Y, circles):\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :type circles: List[List[int]]\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool canReachCorner(int X, int Y, int** circles, int circlesSize, int* circlesColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool CanReachCorner(int X, int Y, int[][] circles) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} X\n * @param {number} Y\n * @param {number[][]} circles\n * @return {boolean}\n */\nvar canReachCorner \u003d function(X, Y, circles) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function canReachCorner(X: number, Y: number, circles: number[][]): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $X\n     * @param Integer $Y\n     * @param Integer[][] $circles\n     * @return Boolean\n     */\n    function canReachCorner($X, $Y, $circles) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func canReachCorner(_ X: Int, _ Y: Int, _ circles: [[Int]]) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun canReachCorner(X: Int, Y: Int, circles: Array\u003cIntArray\u003e): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool canReachCorner(int X, int Y, List\u003cList\u003cint\u003e\u003e circles) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func canReachCorner(X int, Y int, circles [][]int) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} x\n# @param {Integer} y\n# @param {Integer[][]} circles\n# @return {Boolean}\ndef can_reach_corner(x, y, circles)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def canReachCorner(X: Int, Y: Int, circles: Array[Array[Int]]): Boolean \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn can_reach_corner(x: i32, y: i32, circles: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (can-reach-corner X Y circles)\n  (-\u003e exact-integer? exact-integer? (listof (listof exact-integer?)) boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec can_reach_corner(X :: integer(), Y :: integer(), Circles :: [[integer()]]) -\u003e boolean().\ncan_reach_corner(X, Y, Circles) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec can_reach_corner(x :: integer, y :: integer, circles :: [[integer]]) :: boolean\n  def can_reach_corner(x, y, circles) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two positive integers \u003ccode\u003eX\u003c/code\u003e and \u003ccode\u003eY\u003c/code\u003e, and a 2D array \u003ccode\u003ecircles\u003c/code\u003e, where \u003ccode\u003ecircles[i] \u003d [x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e, r\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e denotes a circle with center at \u003ccode\u003e(x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e)\u003c/code\u003e and radius \u003ccode\u003er\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThere is a rectangle in the coordinate plane with its bottom left corner at the origin and top right corner at the coordinate \u003ccode\u003e(X, Y)\u003c/code\u003e. You need to check whether there is a path from the bottom left corner to the top right corner such that the \u003cstrong\u003eentire path\u003c/strong\u003e lies inside the rectangle, \u003cstrong\u003edoes not\u003c/strong\u003e touch or lie inside \u003cstrong\u003eany\u003c/strong\u003e circle, and touches the rectangle \u003cstrong\u003eonly\u003c/strong\u003e at the two corners.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if such a path exists, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eX \u003d 3, Y \u003d 4, circles \u003d [[2,1,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/18/example2circle1.png\" style\u003d\"width: 346px; height: 264px;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe black curve shows a possible path between \u003ccode\u003e(0, 0)\u003c/code\u003e and \u003ccode\u003e(3, 4)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eX \u003d 3, Y \u003d 3, circles \u003d [[1,1,2]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/18/example1circle.png\" style\u003d\"width: 346px; height: 264px;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNo path exists from \u003ccode\u003e(0, 0)\u003c/code\u003e to \u003ccode\u003e(3, 3)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003eX \u003d 3, Y \u003d 3, circles \u003d [[2,1,1],[1,2,1]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/18/example0circle.png\" style\u003d\"width: 346px; height: 264px;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNo path exists from \u003ccode\u003e(0, 0)\u003c/code\u003e to \u003ccode\u003e(3, 3)\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d X, Y \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d circles.length \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ecircles[i].length \u003d\u003d 3\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d x\u003csub\u003ei\u003c/sub\u003e, y\u003csub\u003ei\u003c/sub\u003e, r\u003csub\u003ei\u003c/sub\u003e \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n4\n[[2,1,1]]\n3\n3\n[[1,1,2]]\n3\n3\n[[2,1,1],[1,2,1]]",
    "formTitle": "[3235]Check if the Rectangle Corner Is Reachable",
    "frequency": 0.0,
    "frontendQuestionId": "3235",
    "hints": [
      "Create a graph with \u003ccode\u003en + 4\u003c/code\u003e vertices.",
      "Vertices 0 to \u003ccode\u003en - 1\u003c/code\u003e represent the circles, vertex \u003ccode\u003en\u003c/code\u003e represents upper edge, vertex \u003ccode\u003en + 1\u003c/code\u003e represents right edge, vertex \u003ccode\u003en + 2\u003c/code\u003e represents lower edge, and vertex \u003ccode\u003en + 3\u003c/code\u003e represents left edge.",
      "Add an edge between these vertices if they intersect or touch.",
      "Answer will be \u003ccode\u003efalse\u003c/code\u003e when any of two sides left-right, left-bottom, right-top or top-bottom are reachable using the edges."
    ],
    "level": 3,
    "metaData": {
      "name": "canReachCorner",
      "params": [
        {
          "name": "X",
          "type": "integer"
        },
        {
          "name": "Y",
          "type": "integer"
        },
        {
          "name": "circles",
          "type": "integer[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3478",
    "similarQuestions": [
      "[{\"title\": \"Queries on Number of Points Inside a Circle\", \"titleSlug\": \"queries-on-number-of-points-inside-a-circle\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u4e00\\u4e2a\\u5706\\u4e2d\\u70b9\\u7684\\u6570\\u76ee\", \"isPaidOnly\": false}, {\"title\": \"Check if Point Is Reachable\", \"titleSlug\": \"check-if-point-is-reachable\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u5224\\u65ad\\u4e00\\u4e2a\\u70b9\\u662f\\u5426\\u53ef\\u4ee5\\u5230\\u8fbe\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "3\n4\n[[2,1,1]]",
    "title": "Check if the Rectangle Corner Is Reachable",
    "titleSlug": "check-if-the-rectangle-corner-is-reachable"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfSubstrings(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfSubstrings(self, s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfSubstrings(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfSubstrings(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfSubstrings \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfSubstrings(s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numberOfSubstrings($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfSubstrings(_ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfSubstrings(s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfSubstrings(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfSubstrings(s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Integer}\ndef number_of_substrings(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfSubstrings(s: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_substrings(s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-substrings s)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_substrings(S :: unicode:unicode_binary()) -\u003e integer().\nnumber_of_substrings(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_substrings(s :: String.t) :: integer\n  def number_of_substrings(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a binary string \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn the number of \u003cspan data-keyword\u003d\"substring-nonempty\"\u003esubstrings\u003c/span\u003e with \u003cstrong\u003edominant\u003c/strong\u003e ones.\u003c/p\u003e\n\n\u003cp\u003eA string has \u003cstrong\u003edominant\u003c/strong\u003e ones if the number of ones in the string is \u003cstrong\u003egreater than or equal to\u003c/strong\u003e the \u003cstrong\u003esquare\u003c/strong\u003e of the number of zeros in the string.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;00011\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe substrings with dominant ones are shown in the table below.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ctable\u003e\n\t\u003cthead\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003ei\u003c/th\u003e\n\t\t\t\u003cth\u003ej\u003c/th\u003e\n\t\t\t\u003cth\u003es[i..j]\u003c/th\u003e\n\t\t\t\u003cth\u003eNumber of Zeros\u003c/th\u003e\n\t\t\t\u003cth\u003eNumber of Ones\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/thead\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e01\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e11\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e011\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;101101\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e16\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe substrings with \u003cstrong\u003enon-dominant\u003c/strong\u003e ones are shown in the table below.\u003c/p\u003e\n\n\u003cp\u003eSince there are 21 substrings total and 5 of them have non-dominant ones, it follows that there are 16 substrings with dominant ones.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ctable\u003e\n\t\u003cthead\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003ei\u003c/th\u003e\n\t\t\t\u003cth\u003ej\u003c/th\u003e\n\t\t\t\u003cth\u003es[i..j]\u003c/th\u003e\n\t\t\t\u003cth\u003eNumber of Zeros\u003c/th\u003e\n\t\t\t\u003cth\u003eNumber of Ones\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/thead\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e0110\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e0\u003c/td\u003e\n\t\t\t\u003ctd\u003e4\u003c/td\u003e\n\t\t\t\u003ctd\u003e10110\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\t\u003ctd\u003e5\u003c/td\u003e\n\t\t\t\u003ctd\u003e01101\u003c/td\u003e\n\t\t\t\u003ctd\u003e2\u003c/td\u003e\n\t\t\t\u003ctd\u003e3\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 4 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of characters \u003ccode\u003e\u0026#39;0\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;1\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"00011\"\n\"101101\"",
    "formTitle": "[3234]Count the Number of Substrings With Dominant Ones",
    "frequency": 0.0,
    "frontendQuestionId": "3234",
    "hints": [
      "Let us fix the starting index \u003ccode\u003el\u003c/code\u003e of the substring and count the number of indices \u003ccode\u003er\u003c/code\u003e such that \u003ccode\u003el \u003c\u003d r\u003c/code\u003e and the substring \u003ccode\u003es[l..r]\u003c/code\u003e has dominant ones.",
      "A substring with dominant ones has at most \u003ccode\u003esqrt(n)\u003c/code\u003e zeros.",
      "We cannot iterate over every \u003ccode\u003er\u003c/code\u003e and check if the  \u003ccode\u003es[l..r]\u003c/code\u003e has dominant ones. Instead, we iterate over the next \u003ccode\u003esqrt(n)\u003c/code\u003e zeros to the left of \u003ccode\u003el\u003c/code\u003e and count the number of substrings with dominant ones where the current zero is the rightmost zero of the substring."
    ],
    "level": 2,
    "metaData": {
      "name": "numberOfSubstrings",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3479",
    "similarQuestions": [
      "[{\"title\": \"Count Binary Substrings\", \"titleSlug\": \"count-binary-substrings\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u8ba1\\u6570\\u4e8c\\u8fdb\\u5236\\u5b50\\u4e32\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "\"00011\"",
    "title": "Count the Number of Substrings With Dominant Ones",
    "titleSlug": "count-the-number-of-substrings-with-dominant-ones"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumCost(string target, vector\u003cstring\u003e\u0026 words, vector\u003cint\u003e\u0026 costs) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumCost(self, target, words, costs):\n        \"\"\"\n        :type target: str\n        :type words: List[str]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumCost(char* target, char** words, int wordsSize, int* costs, int costsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumCost(string target, string[] words, int[] costs) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} target\n * @param {string[]} words\n * @param {number[]} costs\n * @return {number}\n */\nvar minimumCost \u003d function(target, words, costs) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumCost(target: string, words: string[], costs: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $target\n     * @param String[] $words\n     * @param Integer[] $costs\n     * @return Integer\n     */\n    function minimumCost($target, $words, $costs) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumCost(_ target: String, _ words: [String], _ costs: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumCost(target: String, words: Array\u003cString\u003e, costs: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumCost(String target, List\u003cString\u003e words, List\u003cint\u003e costs) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumCost(target string, words []string, costs []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} target\n# @param {String[]} words\n# @param {Integer[]} costs\n# @return {Integer}\ndef minimum_cost(target, words, costs)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumCost(target: String, words: Array[String], costs: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_cost(target: String, words: Vec\u003cString\u003e, costs: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-cost target words costs)\n  (-\u003e string? (listof string?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_cost(Target :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()], Costs :: [integer()]) -\u003e integer().\nminimum_cost(Target, Words, Costs) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_cost(target :: String.t, words :: [String.t], costs :: [integer]) :: integer\n  def minimum_cost(target, words, costs) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a string \u003ccode\u003etarget\u003c/code\u003e, an array of strings \u003ccode\u003ewords\u003c/code\u003e, and an integer array \u003ccode\u003ecosts\u003c/code\u003e, both arrays of the same length.\u003c/p\u003e\n\n\u003cp\u003eImagine an empty string \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can perform the following operation any number of times (including \u003cstrong\u003ezero\u003c/strong\u003e):\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose an index \u003ccode\u003ei\u003c/code\u003e in the range \u003ccode\u003e[0, words.length - 1]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAppend \u003ccode\u003ewords[i]\u003c/code\u003e to \u003ccode\u003es\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe cost of operation is \u003ccode\u003ecosts[i]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e cost to make \u003ccode\u003es\u003c/code\u003e equal to \u003ccode\u003etarget\u003c/code\u003e. If it\u0026#39;s not possible, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etarget \u003d \u0026quot;abcdef\u0026quot;, words \u003d [\u0026quot;abdef\u0026quot;,\u0026quot;abc\u0026quot;,\u0026quot;d\u0026quot;,\u0026quot;def\u0026quot;,\u0026quot;ef\u0026quot;], costs \u003d [100,1,1,10,5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e7\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe minimum cost can be achieved by performing the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eSelect index 1 and append \u003ccode\u003e\u0026quot;abc\u0026quot;\u003c/code\u003e to \u003ccode\u003es\u003c/code\u003e at a cost of 1, resulting in \u003ccode\u003es \u003d \u0026quot;abc\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSelect index 2 and append \u003ccode\u003e\u0026quot;d\u0026quot;\u003c/code\u003e to \u003ccode\u003es\u003c/code\u003e at a cost of 1, resulting in \u003ccode\u003es \u003d \u0026quot;abcd\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eSelect index 4 and append \u003ccode\u003e\u0026quot;ef\u0026quot;\u003c/code\u003e to \u003ccode\u003es\u003c/code\u003e at a cost of 5, resulting in \u003ccode\u003es \u003d \u0026quot;abcdef\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etarget \u003d \u0026quot;aaaa\u0026quot;, words \u003d [\u0026quot;z\u0026quot;,\u0026quot;zz\u0026quot;,\u0026quot;zzz\u0026quot;], costs \u003d [1,10,100]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e-1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIt is impossible to make \u003ccode\u003es\u003c/code\u003e equal to \u003ccode\u003etarget\u003c/code\u003e, so we return -1.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d target.length \u0026lt;\u003d 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d words.length \u003d\u003d costs.length \u0026lt;\u003d 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d words[i].length \u0026lt;\u003d target.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe total sum of \u003ccode\u003ewords[i].length\u003c/code\u003e is less than or equal to \u003ccode\u003e5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003etarget\u003c/code\u003e and \u003ccode\u003ewords[i]\u003c/code\u003e consist only of lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d costs[i] \u0026lt;\u003d 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"abcdef\"\n[\"abdef\",\"abc\",\"d\",\"def\",\"ef\"]\n[100,1,1,10,5]\n\"aaaa\"\n[\"z\",\"zz\",\"zzz\"]\n[1,10,100]",
    "formTitle": "[3213]Construct String with Minimum Cost",
    "frequency": 0.0,
    "frontendQuestionId": "3213",
    "hints": [
      "Use Dynamic Programming along with Aho-Corasick or Hashing."
    ],
    "level": 3,
    "metaData": {
      "name": "minimumCost",
      "params": [
        {
          "name": "target",
          "type": "string"
        },
        {
          "name": "words",
          "type": "string[]"
        },
        {
          "name": "costs",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3482",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "\"abcdef\"\n[\"abdef\",\"abc\",\"d\",\"def\",\"ef\"]\n[100,1,1,10,5]",
    "title": "Construct String with Minimum Cost",
    "titleSlug": "construct-string-with-minimum-cost"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector\u003cint\u003e\u0026 colors, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfAlternatingGroups(int[] colors, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfAlternatingGroups(self, colors, k):\n        \"\"\"\n        :type colors: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfAlternatingGroups(int* colors, int colorsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfAlternatingGroups(int[] colors, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} colors\n * @param {number} k\n * @return {number}\n */\nvar numberOfAlternatingGroups \u003d function(colors, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfAlternatingGroups(colors: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfAlternatingGroups($colors, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfAlternatingGroups(_ colors: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfAlternatingGroups(colors: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfAlternatingGroups(List\u003cint\u003e colors, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfAlternatingGroups(colors []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} colors\n# @param {Integer} k\n# @return {Integer}\ndef number_of_alternating_groups(colors, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfAlternatingGroups(colors: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_alternating_groups(colors: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-alternating-groups colors k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_alternating_groups(Colors :: [integer()], K :: integer()) -\u003e integer().\nnumber_of_alternating_groups(Colors, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_alternating_groups(colors :: [integer], k :: integer) :: integer\n  def number_of_alternating_groups(colors, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere is a circle of red and blue tiles. You are given an array of integers \u003ccode\u003ecolors\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e. The color of tile \u003ccode\u003ei\u003c/code\u003e is represented by \u003ccode\u003ecolors[i]\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003ecolors[i] \u003d\u003d 0\u003c/code\u003e means that tile \u003ccode\u003ei\u003c/code\u003e is \u003cstrong\u003ered\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ecolors[i] \u003d\u003d 1\u003c/code\u003e means that tile \u003ccode\u003ei\u003c/code\u003e is \u003cstrong\u003eblue\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAn \u003cstrong\u003ealternating\u003c/strong\u003e group is every \u003ccode\u003ek\u003c/code\u003e contiguous tiles in the circle with \u003cstrong\u003ealternating\u003c/strong\u003e colors (each tile in the group except the first and last one has a different color from its \u003cstrong\u003eleft\u003c/strong\u003e and \u003cstrong\u003eright\u003c/strong\u003e tiles).\u003c/p\u003e\n\n\u003cp\u003eReturn the number of \u003cstrong\u003ealternating\u003c/strong\u003e groups.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that since \u003ccode\u003ecolors\u003c/code\u003e represents a \u003cstrong\u003ecircle\u003c/strong\u003e, the \u003cstrong\u003efirst\u003c/strong\u003e and the \u003cstrong\u003elast\u003c/strong\u003e tiles are considered to be next to each other.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ecolors \u003d [0,1,0,1,0], k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" data-darkreader-inline-bgcolor\u003d\"\" data-darkreader-inline-bgimage\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183519.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAlternating groups:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" data-darkreader-inline-bgcolor\u003d\"\" data-darkreader-inline-bgimage\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182448.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /\u003e\u003cimg alt\u003d\"\" data-darkreader-inline-bgcolor\u003d\"\" data-darkreader-inline-bgimage\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182844.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /\u003e\u003cimg alt\u003d\"\" data-darkreader-inline-bgcolor\u003d\"\" data-darkreader-inline-bgimage\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-183057.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ecolors \u003d [0,1,0,0,1,0,1], k \u003d 6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" data-darkreader-inline-bgcolor\u003d\"\" data-darkreader-inline-bgimage\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183907.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAlternating groups:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" data-darkreader-inline-bgcolor\u003d\"\" data-darkreader-inline-bgimage\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184128.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /\u003e\u003cimg alt\u003d\"\" data-darkreader-inline-bgcolor\u003d\"\" data-darkreader-inline-bgimage\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184240.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ecolors \u003d [1,1,0,1], k \u003d 4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" data-darkreader-inline-bgcolor\u003d\"\" data-darkreader-inline-bgimage\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184516.png\" style\u003d\"width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #181a1b;\" /\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d colors.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d colors[i] \u0026lt;\u003d 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;\u003d k \u0026lt;\u003d colors.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[0,1,0,1,0]\n3\n[0,1,0,0,1,0,1]\n6\n[1,1,0,1]\n4",
    "formTitle": "[3208]Alternating Groups II",
    "frequency": 0.0,
    "frontendQuestionId": "3208",
    "hints": [
      "Try to find a tile that has the same color as its next tile (if it exists).",
      "Then try to find maximal alternating groups by starting a single for loop from that tile."
    ],
    "level": 2,
    "metaData": {
      "name": "numberOfAlternatingGroups",
      "params": [
        {
          "name": "colors",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3483",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[0,1,0,1,0]\n3",
    "title": "Alternating Groups II",
    "titleSlug": "alternating-groups-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string getSmallestString(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String getSmallestString(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def getSmallestString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def getSmallestString(self, s: str) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* getSmallestString(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string GetSmallestString(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar getSmallestString \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function getSmallestString(s: string): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function getSmallestString($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func getSmallestString(_ s: String) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun getSmallestString(s: String): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String getSmallestString(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func getSmallestString(s string) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {String}\ndef get_smallest_string(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def getSmallestString(s: String): String \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn get_smallest_string(s: String) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (get-smallest-string s)\n  (-\u003e string? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec get_smallest_string(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nget_smallest_string(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec get_smallest_string(s :: String.t) :: String.t\n  def get_smallest_string(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e containing only digits, return the \u003cspan data-keyword\u003d\"lexicographically-smaller-string\"\u003elexicographically smallest string\u003c/span\u003e that can be obtained after swapping \u003cstrong\u003eadjacent\u003c/strong\u003e digits in \u003ccode\u003es\u003c/code\u003e with the same \u003cstrong\u003eparity\u003c/strong\u003e at most \u003cstrong\u003eonce\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eDigits have the same parity if both are odd or both are even. For example, 5 and 9, as well as 2 and 4, have the same parity, while 6 and 9 do not.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;45320\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;43520\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003es[1] \u003d\u003d \u0026#39;5\u0026#39;\u003c/code\u003e and \u003ccode\u003es[2] \u003d\u003d \u0026#39;3\u0026#39;\u003c/code\u003e both have the same parity, and swapping them results in the lexicographically smallest string.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;001\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;001\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is no need to perform a swap because \u003ccode\u003es\u003c/code\u003e is already the lexicographically smallest.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d s.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of digits.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"45320\"\n\"001\"",
    "formTitle": "[3216]Lexicographically Smallest String After a Swap",
    "frequency": 0.0,
    "frontendQuestionId": "3216",
    "hints": [
      "Try all possible swaps satisfying the constraints and find the one that results in the lexicographically smallest string."
    ],
    "level": 1,
    "metaData": {
      "name": "getSmallestString",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3484",
    "similarQuestions": [
      "[{\"title\": \"Lexicographically Smallest String After Applying Operations\", \"titleSlug\": \"lexicographically-smallest-string-after-applying-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6267\\u884c\\u64cd\\u4f5c\\u540e\\u5b57\\u5178\\u5e8f\\u6700\\u5c0f\\u7684\\u5b57\\u7b26\\u4e32\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "\"45320\"",
    "title": "Lexicographically Smallest String After a Swap",
    "titleSlug": "lexicographically-smallest-string-after-a-swap"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumLength(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumLength(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumLength(self, nums: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumLength(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumLength(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumLength \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumLength(nums: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumLength($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumLength(_ nums: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumLength(nums: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumLength(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumLength(nums []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_length(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumLength(nums: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_length(nums: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-length nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_length(Nums :: [integer()]) -\u003e integer().\nmaximum_length(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer]) :: integer\n  def maximum_length(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "You are given an integer array \u003ccode\u003enums\u003c/code\u003e.\n\u003cp\u003eA \u003cspan data-keyword\u003d\"subsequence-array\"\u003esubsequence\u003c/span\u003e \u003ccode\u003esub\u003c/code\u003e of \u003ccode\u003enums\u003c/code\u003e with length \u003ccode\u003ex\u003c/code\u003e is called \u003cstrong\u003evalid\u003c/strong\u003e if it satisfies:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e(sub[0] + sub[1]) % 2 \u003d\u003d (sub[1] + sub[2]) % 2 \u003d\u003d ... \u003d\u003d (sub[x - 2] + sub[x - 1]) % 2.\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the length of the \u003cstrong\u003elongest\u003c/strong\u003e \u003cstrong\u003evalid\u003c/strong\u003e subsequence of \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003esubsequence\u003c/strong\u003e is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe longest valid subsequence is \u003ccode\u003e[1, 2, 3, 4]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,1,1,2,1,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 6\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe longest valid subsequence is \u003ccode\u003e[1, 2, 1, 2, 1, 2]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,3]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe longest valid subsequence is \u003ccode\u003e[1, 3]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d nums.length \u0026lt;\u003d 2 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e7\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,4]\n[1,2,1,1,2,1,2]\n[1,3]",
    "formTitle": "[3201]Find the Maximum Length of Valid Subsequence I",
    "frequency": 0.0,
    "frontendQuestionId": "3201",
    "hints": [
      "The possible sequence either contains all even elements, all odd elements, alternate even odd, or alternate odd even elements.",
      "Considering only the parity of elements, there are only 4 possibilities and we can try all of them.",
      "When selecting an element with any parity, try to select the earliest one."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumLength",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3490",
    "similarQuestions": [
      "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u9012\\u589e\\u5b50\\u5e8f\\u5217\", \"isPaidOnly\": false}, {\"title\": \"Length of the Longest Subsequence That Sums to Target\", \"titleSlug\": \"length-of-the-longest-subsequence-that-sums-to-target\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u4e3a\\u76ee\\u6807\\u503c\\u7684\\u6700\\u957f\\u5b50\\u5e8f\\u5217\\u7684\\u957f\\u5ea6\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,2,3,4]",
    "title": "Find the Maximum Length of Valid Subsequence I",
    "titleSlug": "find-the-maximum-length-of-valid-subsequence-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maximumLength(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maximumLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maximumLength(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaximumLength(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumLength \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maximumLength(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumLength($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maximumLength(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maximumLength(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maximumLength(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_length(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maximumLength(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn maximum_length(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (maximum-length nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec maximum_length(Nums :: [integer()], K :: integer()) -\u003e integer().\nmaximum_length(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer], k :: integer) :: integer\n  def maximum_length(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "You are given an integer array \u003ccode\u003enums\u003c/code\u003e and a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e.\n\u003cp\u003eA \u003cspan data-keyword\u003d\"subsequence-array\"\u003esubsequence\u003c/span\u003e \u003ccode\u003esub\u003c/code\u003e of \u003ccode\u003enums\u003c/code\u003e with length \u003ccode\u003ex\u003c/code\u003e is called \u003cstrong\u003evalid\u003c/strong\u003e if it satisfies:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e(sub[0] + sub[1]) % k \u003d\u003d (sub[1] + sub[2]) % k \u003d\u003d ... \u003d\u003d (sub[x - 2] + sub[x - 1]) % k.\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\nReturn the length of the \u003cstrong\u003elongest\u003c/strong\u003e \u003cstrong\u003evalid\u003c/strong\u003e subsequence of \u003ccode\u003enums\u003c/code\u003e.\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4,5], k \u003d 2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e5\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe longest valid subsequence is \u003ccode\u003e[1, 2, 3, 4, 5]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,4,2,3,1,4], k \u003d 3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe longest valid subsequence is \u003ccode\u003e[1, 4, 1, 4]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e7\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,4,5]\n2\n[1,4,2,3,1,4]\n3",
    "formTitle": "[3202]Find the Maximum Length of Valid Subsequence II",
    "frequency": 0.0,
    "frontendQuestionId": "3202",
    "hints": [
      "Fix the value of \u003ccode\u003e(subs[0] + subs[1]) % k\u003c/code\u003e from the \u003ccode\u003ek\u003c/code\u003e possible values. Let it be \u003ccode\u003eval\u003c/code\u003e.",
      "Let \u003ccode\u003edp[i]\u003c/code\u003e store the maximum length of a subsequence with its last element \u003ccode\u003ex\u003c/code\u003e such that \u003ccode\u003ex % k \u003d\u003d i\u003c/code\u003e.",
      "Answer for a subsequence ending at index \u003ccode\u003ey\u003c/code\u003e is \u003ccode\u003edp[(k + val - (y % k)) % k] + 1\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "maximumLength",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3491",
    "similarQuestions": [
      "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6700\\u957f\\u9012\\u589e\\u5b50\\u5e8f\\u5217\", \"isPaidOnly\": false}, {\"title\": \"Length of the Longest Subsequence That Sums to Target\", \"titleSlug\": \"length-of-the-longest-subsequence-that-sums-to-target\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u548c\\u4e3a\\u76ee\\u6807\\u503c\\u7684\\u6700\\u957f\\u5b50\\u5e8f\\u5217\\u7684\\u957f\\u5ea6\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,2,3,4,5]\n2",
    "title": "Find the Maximum Length of Valid Subsequence II",
    "titleSlug": "find-the-maximum-length-of-valid-subsequence-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int numberOfSubmatrices(vector\u003cvector\u003cchar\u003e\u003e\u0026 grid) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int numberOfSubmatrices(char[][] grid) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def numberOfSubmatrices(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def numberOfSubmatrices(self, grid: List[List[str]]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int numberOfSubmatrices(char** grid, int gridSize, int* gridColSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NumberOfSubmatrices(char[][] grid) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numberOfSubmatrices \u003d function(grid) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function numberOfSubmatrices(grid: string[][]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function numberOfSubmatrices($grid) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func numberOfSubmatrices(_ grid: [[Character]]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun numberOfSubmatrices(grid: Array\u003cCharArray\u003e): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int numberOfSubmatrices(List\u003cList\u003cString\u003e\u003e grid) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func numberOfSubmatrices(grid [][]byte) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Character[][]} grid\n# @return {Integer}\ndef number_of_submatrices(grid)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def numberOfSubmatrices(grid: Array[Array[Char]]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn number_of_submatrices(grid: Vec\u003cVec\u003cchar\u003e\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (number-of-submatrices grid)\n  (-\u003e (listof (listof char?)) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec number_of_submatrices(Grid :: [[char()]]) -\u003e integer().\nnumber_of_submatrices(Grid) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec number_of_submatrices(grid :: [[char]]) :: integer\n  def number_of_submatrices(grid) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eGiven a 2D character matrix \u003ccode\u003egrid\u003c/code\u003e, where \u003ccode\u003egrid[i][j]\u003c/code\u003e is either \u003ccode\u003e\u0026#39;X\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;Y\u0026#39;\u003c/code\u003e, or \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e, return the number of \u003cspan data-keyword\u003d\"submatrix\"\u003esubmatrices\u003c/span\u003e that contain:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003egrid[0][0]\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003ean \u003cstrong\u003eequal\u003c/strong\u003e frequency of \u003ccode\u003e\u0026#39;X\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;Y\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eat least\u003c/strong\u003e one \u003ccode\u003e\u0026#39;X\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[\u0026quot;X\u0026quot;,\u0026quot;Y\u0026quot;,\u0026quot;.\u0026quot;],[\u0026quot;Y\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/07/examplems.png\" style\u003d\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 175px; height: 350px;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[\u0026quot;X\u0026quot;,\u0026quot;X\u0026quot;],[\u0026quot;X\u0026quot;,\u0026quot;Y\u0026quot;]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNo submatrix has an equal frequency of \u003ccode\u003e\u0026#39;X\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;Y\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003egrid \u003d [[\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],[\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNo submatrix has at least one \u003ccode\u003e\u0026#39;X\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d grid.length, grid[i].length \u0026lt;\u003d 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003egrid[i][j]\u003c/code\u003e is either \u003ccode\u003e\u0026#39;X\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;Y\u0026#39;\u003c/code\u003e, or \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[[\"X\",\"Y\",\".\"],[\"Y\",\".\",\".\"]]\n[[\"X\",\"X\"],[\"X\",\"Y\"]]\n[[\".\",\".\"],[\".\",\".\"]]",
    "formTitle": "[3212]Count Submatrices With Equal Frequency of X and Y",
    "frequency": 0.0,
    "frontendQuestionId": "3212",
    "hints": [
      "Replace \u003ccode\u003e鈥橷鈥�\u003c/code\u003e with 1, \u003ccode\u003e鈥橸鈥�\u003c/code\u003e with -1 and \u003ccode\u003e鈥�.鈥�\u003c/code\u003e with 0.",
      "You need to find how many submatrices \u003ccode\u003egrid[0..x][0..y]\u003c/code\u003e have a sum of 0 and at least one \u003ccode\u003e鈥橷鈥�\u003c/code\u003e.",
      "Use prefix sum to calculate submatrices sum."
    ],
    "level": 2,
    "metaData": {
      "name": "numberOfSubmatrices",
      "params": [
        {
          "name": "grid",
          "type": "character[][]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3492",
    "similarQuestions": [
      "[{\"title\": \"Maximum Equal Frequency\", \"titleSlug\": \"maximum-equal-frequency\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u6700\\u5927\\u76f8\\u7b49\\u9891\\u7387\", \"isPaidOnly\": false}, {\"title\": \"Count Submatrices With All Ones\", \"titleSlug\": \"count-submatrices-with-all-ones\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u5168 1 \\u5b50\\u77e9\\u5f62\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[[\"X\",\"Y\",\".\"],[\"Y\",\".\",\".\"]]",
    "title": "Count Submatrices With Equal Frequency of X and Y",
    "titleSlug": "count-submatrices-with-equal-frequency-of-x-and-y"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int maxOperations(string s) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int maxOperations(String s) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxOperations(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def maxOperations(self, s: str) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int maxOperations(char* s) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MaxOperations(string s) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maxOperations \u003d function(s) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function maxOperations(s: string): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maxOperations($s) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func maxOperations(_ s: String) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun maxOperations(s: String): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int maxOperations(String s) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func maxOperations(s string) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {String} s\n# @return {Integer}\ndef max_operations(s)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def maxOperations(s: String): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn max_operations(s: String) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (max-operations s)\n  (-\u003e string? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec max_operations(S :: unicode:unicode_binary()) -\u003e integer().\nmax_operations(S) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec max_operations(s :: String.t) :: integer\n  def max_operations(s) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given a \u003cspan data-keyword\u003d\"binary-string\"\u003ebinary string\u003c/span\u003e \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can perform the following operation on the string \u003cstrong\u003eany\u003c/strong\u003e number of times:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose \u003cstrong\u003eany\u003c/strong\u003e index \u003ccode\u003ei\u003c/code\u003e from the string where \u003ccode\u003ei + 1 \u0026lt; s.length\u003c/code\u003e such that \u003ccode\u003es[i] \u003d\u003d \u0026#39;1\u0026#39;\u003c/code\u003e and \u003ccode\u003es[i + 1] \u003d\u003d \u0026#39;0\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eMove the character \u003ccode\u003es[i]\u003c/code\u003e to the \u003cstrong\u003eright\u003c/strong\u003e until it reaches the end of the string or another \u003ccode\u003e\u0026#39;1\u0026#39;\u003c/code\u003e. For example, for \u003ccode\u003es \u003d \u0026quot;010010\u0026quot;\u003c/code\u003e, if we choose \u003ccode\u003ei \u003d 1\u003c/code\u003e, the resulting string will be \u003ccode\u003es \u003d \u0026quot;0\u003cstrong\u003e\u003cu\u003e001\u003c/u\u003e\u003c/strong\u003e10\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003emaximum\u003c/strong\u003e number of operations that you can perform.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;1001101\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can perform the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose index \u003ccode\u003ei \u003d 0\u003c/code\u003e. The resulting string is \u003ccode\u003es \u003d \u0026quot;\u003cu\u003e\u003cstrong\u003e001\u003c/strong\u003e\u003c/u\u003e1101\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eChoose index \u003ccode\u003ei \u003d 4\u003c/code\u003e. The resulting string is \u003ccode\u003es \u003d \u0026quot;0011\u003cu\u003e\u003cstrong\u003e01\u003c/strong\u003e\u003c/u\u003e1\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eChoose index \u003ccode\u003ei \u003d 3\u003c/code\u003e. The resulting string is \u003ccode\u003es \u003d \u0026quot;001\u003cstrong\u003e\u003cu\u003e01\u003c/u\u003e\u003c/strong\u003e11\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eChoose index \u003ccode\u003ei \u003d 2\u003c/code\u003e. The resulting string is \u003ccode\u003es \u003d \u0026quot;00\u003cstrong\u003e\u003cu\u003e01\u003c/u\u003e\u003c/strong\u003e111\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003es \u003d \u0026quot;00111\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d s.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es[i]\u003c/code\u003e is either \u003ccode\u003e\u0026#39;0\u0026#39;\u003c/code\u003e or \u003ccode\u003e\u0026#39;1\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "\"1001101\"\n\"00111\"",
    "formTitle": "[3228]Maximum Number of Operations to Move Ones to the End",
    "frequency": 0.0,
    "frontendQuestionId": "3228",
    "hints": [
      "It is optimal to perform the operation on the lowest index possible each time.",
      "Traverse the string from left to right and perform the operation every time it is possible."
    ],
    "level": 2,
    "metaData": {
      "name": "maxOperations",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3493",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "\"1001101\"",
    "title": "Maximum Number of Operations to Move Ones to the End",
    "titleSlug": "maximum-number-of-operations-to-move-ones-to-the-end"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minimumCost(int m, int n, vector\u003cint\u003e\u0026 horizontalCut, vector\u003cint\u003e\u0026 verticalCut) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minimumCost(int m, int n, int* horizontalCut, int horizontalCutSize, int* verticalCut, int verticalCutSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[]} horizontalCut\n * @param {number[]} verticalCut\n * @return {number}\n */\nvar minimumCost \u003d function(m, n, horizontalCut, verticalCut) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumCost(m: number, n: number, horizontalCut: number[], verticalCut: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[] $horizontalCut\n     * @param Integer[] $verticalCut\n     * @return Integer\n     */\n    function minimumCost($m, $n, $horizontalCut, $verticalCut) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumCost(_ m: Int, _ n: Int, _ horizontalCut: [Int], _ verticalCut: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumCost(m: Int, n: Int, horizontalCut: IntArray, verticalCut: IntArray): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumCost(int m, int n, List\u003cint\u003e horizontalCut, List\u003cint\u003e verticalCut) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumCost(m int, n int, horizontalCut []int, verticalCut []int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[]} horizontal_cut\n# @param {Integer[]} vertical_cut\n# @return {Integer}\ndef minimum_cost(m, n, horizontal_cut, vertical_cut)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumCost(m: Int, n: Int, horizontalCut: Array[Int], verticalCut: Array[Int]): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_cost(m: i32, n: i32, horizontal_cut: Vec\u003ci32\u003e, vertical_cut: Vec\u003ci32\u003e) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-cost m n horizontalCut verticalCut)\n  (-\u003e exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_cost(M :: integer(), N :: integer(), HorizontalCut :: [integer()], VerticalCut :: [integer()]) -\u003e integer().\nminimum_cost(M, N, HorizontalCut, VerticalCut) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_cost(m :: integer, n :: integer, horizontal_cut :: [integer], vertical_cut :: [integer]) :: integer\n  def minimum_cost(m, n, horizontal_cut, vertical_cut) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere is an \u003ccode\u003em x n\u003c/code\u003e cake that needs to be cut into \u003ccode\u003e1 x 1\u003c/code\u003e pieces.\u003c/p\u003e\n\n\u003cp\u003eYou are given integers \u003ccode\u003em\u003c/code\u003e, \u003ccode\u003en\u003c/code\u003e, and two arrays:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003ehorizontalCut\u003c/code\u003e of size \u003ccode\u003em - 1\u003c/code\u003e, where \u003ccode\u003ehorizontalCut[i]\u003c/code\u003e represents the cost to cut along the horizontal line \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003everticalCut\u003c/code\u003e of size \u003ccode\u003en - 1\u003c/code\u003e, where \u003ccode\u003everticalCut[j]\u003c/code\u003e represents the cost to cut along the vertical line \u003ccode\u003ej\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn one operation, you can choose any piece of cake that is not yet a \u003ccode\u003e1 x 1\u003c/code\u003e square and perform one of the following cuts:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eCut along a horizontal line \u003ccode\u003ei\u003c/code\u003e at a cost of \u003ccode\u003ehorizontalCut[i]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eCut along a vertical line \u003ccode\u003ej\u003c/code\u003e at a cost of \u003ccode\u003everticalCut[j]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAfter the cut, the piece of cake is divided into two distinct pieces.\u003c/p\u003e\n\n\u003cp\u003eThe cost of a cut depends only on the initial cost of the line and does not change.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e total cost to cut the entire cake into \u003ccode\u003e1 x 1\u003c/code\u003e pieces.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003em \u003d 3, n \u003d 2, horizontalCut \u003d [1,3], verticalCut \u003d [5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e13\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif\" style\u003d\"width: 280px; height: 320px;\" /\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003ePerform a cut on the vertical line 0 with cost 5, current total cost is 5.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 0 on \u003ccode\u003e3 x 1\u003c/code\u003e subgrid with cost 1.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 0 on \u003ccode\u003e3 x 1\u003c/code\u003e subgrid with cost 1.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 1 on \u003ccode\u003e2 x 1\u003c/code\u003e subgrid with cost 3.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 1 on \u003ccode\u003e2 x 1\u003c/code\u003e subgrid with cost 3.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe total cost is \u003ccode\u003e5 + 1 + 1 + 3 + 3 \u003d 13\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003em \u003d 2, n \u003d 2, horizontalCut \u003d [7], verticalCut \u003d [4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e15\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 0 with cost 7.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the vertical line 0 on \u003ccode\u003e1 x 2\u003c/code\u003e subgrid with cost 4.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the vertical line 0 on \u003ccode\u003e1 x 2\u003c/code\u003e subgrid with cost 4.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe total cost is \u003ccode\u003e7 + 4 + 4 \u003d 15\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m, n \u0026lt;\u003d 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ehorizontalCut.length \u003d\u003d m - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003everticalCut.length \u003d\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d horizontalCut[i], verticalCut[i] \u0026lt;\u003d 10\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n2\n[1,3]\n[5]\n2\n2\n[7]\n[4]",
    "formTitle": "[3218]Minimum Cost for Cutting Cake I",
    "frequency": 0.0,
    "frontendQuestionId": "3218",
    "hints": [
      "The intended solution uses Dynamic Programming.",
      "Let \u003ccode\u003edp[sx][sy][tx][ty]\u003c/code\u003e denote the minimum cost to cut the rectangle into \u003ccode\u003e1 x 1\u003c/code\u003e pieces.",
      "Iterate on the row or column on which you will perform the next cut, after the cut, the current rectangle will be decomposed into two sub-rectangles."
    ],
    "level": 2,
    "metaData": {
      "name": "minimumCost",
      "params": [
        {
          "name": "m",
          "type": "integer"
        },
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "horizontalCut",
          "type": "integer[]"
        },
        {
          "name": "verticalCut",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3494",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "3\n2\n[1,3]\n[5]",
    "title": "Minimum Cost for Cutting Cake I",
    "titleSlug": "minimum-cost-for-cutting-cake-i"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minChanges(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minChanges(int[] nums, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minChanges(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minChanges(int* nums, int numsSize, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinChanges(int[] nums, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minChanges \u003d function(nums, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minChanges(nums: number[], k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minChanges($nums, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minChanges(_ nums: [Int], _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minChanges(nums: IntArray, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minChanges(List\u003cint\u003e nums, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minChanges(nums []int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_changes(nums, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minChanges(nums: Array[Int], k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_changes(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-changes nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_changes(Nums :: [integer()], K :: integer()) -\u003e integer().\nmin_changes(Nums, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_changes(nums :: [integer], k :: integer) :: integer\n  def min_changes(nums, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e where \u003ccode\u003en\u003c/code\u003e is \u003cstrong\u003eeven\u003c/strong\u003e, and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can perform some changes on the array, where in one change you can replace \u003cstrong\u003eany\u003c/strong\u003e element in the array with \u003cstrong\u003eany\u003c/strong\u003e integer in the range from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou need to perform some changes (possibly none) such that the final array satisfies the following condition:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThere exists an integer \u003ccode\u003eX\u003c/code\u003e such that \u003ccode\u003eabs(a[i] - a[n - i - 1]) \u003d X\u003c/code\u003e for all \u003ccode\u003e(0 \u0026lt;\u003d i \u0026lt; n)\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e number of changes required to satisfy the above condition.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,0,1,2,4,3], k \u003d 4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nWe can perform the following changes:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eReplace \u003ccode\u003enums[1]\u003c/code\u003e by 2. The resulting array is \u003ccode\u003enums \u003d [1,\u003cu\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,1,2,4,3]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eReplace \u003ccode\u003enums[3]\u003c/code\u003e by 3. The resulting array is \u003ccode\u003enums \u003d [1,2,1,\u003cu\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003c/u\u003e,4,3]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe integer \u003ccode\u003eX\u003c/code\u003e will be 2.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [0,1,2,3,3,6,5,4], k \u003d 6\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nWe can perform the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eReplace \u003ccode\u003enums[3]\u003c/code\u003e by 0. The resulting array is \u003ccode\u003enums \u003d [0,1,2,\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e,3,6,5,4]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eReplace \u003ccode\u003enums[4]\u003c/code\u003e by 4. The resulting array is \u003ccode\u003enums \u003d [0,1,2,0,\u003cstrong\u003e\u003cu\u003e4\u003c/u\u003e\u003c/strong\u003e,6,5,4]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe integer \u003ccode\u003eX\u003c/code\u003e will be 4.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;\u003d n \u003d\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en\u003c/code\u003e is even.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;\u003d nums[i] \u0026lt;\u003d k \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,0,1,2,4,3]\n4\n[0,1,2,3,3,6,5,4]\n6",
    "formTitle": "[3224]Minimum Array Changes to Make Differences Equal",
    "frequency": 0.0,
    "frontendQuestionId": "3224",
    "hints": [
      "There are at most \u003ccode\u003ek + 1\u003c/code\u003e possible values of the integer \u003ccode\u003eX\u003c/code\u003e.",
      "How do we calculate the minimum number of changes efficiently if we fix the value of \u003ccode\u003eX\u003c/code\u003e before applying any changes?"
    ],
    "level": 2,
    "metaData": {
      "name": "minChanges",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3498",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "[1,0,1,2,4,3]\n4",
    "title": "Minimum Array Changes to Make Differences Equal",
    "titleSlug": "minimum-array-changes-to-make-differences-equal"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector\u003cint\u003e\u0026 horizontalCut, vector\u003cint\u003e\u0026 verticalCut) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "long long minimumCost(int m, int n, int* horizontalCut, int horizontalCutSize, int* verticalCut, int verticalCutSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public long MinimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[]} horizontalCut\n * @param {number[]} verticalCut\n * @return {number}\n */\nvar minimumCost \u003d function(m, n, horizontalCut, verticalCut) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minimumCost(m: number, n: number, horizontalCut: number[], verticalCut: number[]): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[] $horizontalCut\n     * @param Integer[] $verticalCut\n     * @return Integer\n     */\n    function minimumCost($m, $n, $horizontalCut, $verticalCut) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minimumCost(_ m: Int, _ n: Int, _ horizontalCut: [Int], _ verticalCut: [Int]) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minimumCost(m: Int, n: Int, horizontalCut: IntArray, verticalCut: IntArray): Long {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minimumCost(int m, int n, List\u003cint\u003e horizontalCut, List\u003cint\u003e verticalCut) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minimumCost(m int, n int, horizontalCut []int, verticalCut []int) int64 {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[]} horizontal_cut\n# @param {Integer[]} vertical_cut\n# @return {Integer}\ndef minimum_cost(m, n, horizontal_cut, vertical_cut)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minimumCost(m: Int, n: Int, horizontalCut: Array[Int], verticalCut: Array[Int]): Long \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn minimum_cost(m: i32, n: i32, horizontal_cut: Vec\u003ci32\u003e, vertical_cut: Vec\u003ci32\u003e) -\u003e i64 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (minimum-cost m n horizontalCut verticalCut)\n  (-\u003e exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec minimum_cost(M :: integer(), N :: integer(), HorizontalCut :: [integer()], VerticalCut :: [integer()]) -\u003e integer().\nminimum_cost(M, N, HorizontalCut, VerticalCut) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec minimum_cost(m :: integer, n :: integer, horizontal_cut :: [integer], vertical_cut :: [integer]) :: integer\n  def minimum_cost(m, n, horizontal_cut, vertical_cut) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eThere is an \u003ccode\u003em x n\u003c/code\u003e cake that needs to be cut into \u003ccode\u003e1 x 1\u003c/code\u003e pieces.\u003c/p\u003e\n\n\u003cp\u003eYou are given integers \u003ccode\u003em\u003c/code\u003e, \u003ccode\u003en\u003c/code\u003e, and two arrays:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003ehorizontalCut\u003c/code\u003e of size \u003ccode\u003em - 1\u003c/code\u003e, where \u003ccode\u003ehorizontalCut[i]\u003c/code\u003e represents the cost to cut along the horizontal line \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003everticalCut\u003c/code\u003e of size \u003ccode\u003en - 1\u003c/code\u003e, where \u003ccode\u003everticalCut[j]\u003c/code\u003e represents the cost to cut along the vertical line \u003ccode\u003ej\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn one operation, you can choose any piece of cake that is not yet a \u003ccode\u003e1 x 1\u003c/code\u003e square and perform one of the following cuts:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eCut along a horizontal line \u003ccode\u003ei\u003c/code\u003e at a cost of \u003ccode\u003ehorizontalCut[i]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eCut along a vertical line \u003ccode\u003ej\u003c/code\u003e at a cost of \u003ccode\u003everticalCut[j]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAfter the cut, the piece of cake is divided into two distinct pieces.\u003c/p\u003e\n\n\u003cp\u003eThe cost of a cut depends only on the initial cost of the line and does not change.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003eminimum\u003c/strong\u003e total cost to cut the entire cake into \u003ccode\u003e1 x 1\u003c/code\u003e pieces.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003em \u003d 3, n \u003d 2, horizontalCut \u003d [1,3], verticalCut \u003d [5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e13\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif\" style\u003d\"width: 280px; height: 320px;\" /\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003ePerform a cut on the vertical line 0 with cost 5, current total cost is 5.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 0 on \u003ccode\u003e3 x 1\u003c/code\u003e subgrid with cost 1.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 0 on \u003ccode\u003e3 x 1\u003c/code\u003e subgrid with cost 1.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 1 on \u003ccode\u003e2 x 1\u003c/code\u003e subgrid with cost 3.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 1 on \u003ccode\u003e2 x 1\u003c/code\u003e subgrid with cost 3.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe total cost is \u003ccode\u003e5 + 1 + 1 + 3 + 3 \u003d 13\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003em \u003d 2, n \u003d 2, horizontalCut \u003d [7], verticalCut \u003d [4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e15\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003ePerform a cut on the horizontal line 0 with cost 7.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the vertical line 0 on \u003ccode\u003e1 x 2\u003c/code\u003e subgrid with cost 4.\u003c/li\u003e\n\t\u003cli\u003ePerform a cut on the vertical line 0 on \u003ccode\u003e1 x 2\u003c/code\u003e subgrid with cost 4.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe total cost is \u003ccode\u003e7 + 4 + 4 \u003d 15\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d m, n \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ehorizontalCut.length \u003d\u003d m - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003everticalCut.length \u003d\u003d n - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d horizontalCut[i], verticalCut[i] \u0026lt;\u003d 10\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "3\n2\n[1,3]\n[5]\n2\n2\n[7]\n[4]",
    "formTitle": "[3219]Minimum Cost for Cutting Cake II",
    "frequency": 0.0,
    "frontendQuestionId": "3219",
    "hints": [
      "The intended solution uses a Greedy approach.",
      "At each step, we will perform a cut on the line with the highest cost.",
      "If you perform a horizontal cut, can you count the contribution that it adds to each row cut that comes afterward?"
    ],
    "level": 3,
    "metaData": {
      "name": "minimumCost",
      "params": [
        {
          "name": "m",
          "type": "integer"
        },
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "horizontalCut",
          "type": "integer[]"
        },
        {
          "name": "verticalCut",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3500",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "3\n2\n[1,3]\n[5]",
    "title": "Minimum Cost for Cutting Cake II",
    "titleSlug": "minimum-cost-for-cutting-cake-ii"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* modifiedList(vector\u003cint\u003e\u0026 nums, ListNode* head) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val \u003d val; }\n *     ListNode(int val, ListNode next) { this.val \u003d val; this.next \u003d next; }\n * }\n */\nclass Solution {\n    public ListNode modifiedList(int[] nums, ListNode head) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val\u003d0, next\u003dNone):\n#         self.val \u003d val\n#         self.next \u003d next\nclass Solution(object):\n    def modifiedList(self, nums, head):\n        \"\"\"\n        :type nums: List[int]\n        :type head: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val\u003d0, next\u003dNone):\n#         self.val \u003d val\n#         self.next \u003d next\nclass Solution:\n    def modifiedList(self, nums: List[int], head: Optional[ListNode]) -\u003e Optional[ListNode]:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* modifiedList(int* nums, int numsSize, struct ListNode* head) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val\u003d0, ListNode next\u003dnull) {\n *         this.val \u003d val;\n *         this.next \u003d next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ModifiedList(int[] nums, ListNode head) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val \u003d (val\u003d\u003d\u003dundefined ? 0 : val)\n *     this.next \u003d (next\u003d\u003d\u003dundefined ? null : next)\n * }\n */\n/**\n * @param {number[]} nums\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar modifiedList \u003d function(nums, head) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val \u003d (val\u003d\u003d\u003dundefined ? 0 : val)\n *         this.next \u003d (next\u003d\u003d\u003dundefined ? null : next)\n *     }\n * }\n */\n\nfunction modifiedList(nums: number[], head: ListNode | null): ListNode | null {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val \u003d 0;\n *     public $next \u003d null;\n *     function __construct($val \u003d 0, $next \u003d null) {\n *         $this-\u003eval \u003d $val;\n *         $this-\u003enext \u003d $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function modifiedList($nums, $head) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val \u003d 0; self.next \u003d nil; }\n *     public init(_ val: Int) { self.val \u003d val; self.next \u003d nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val \u003d val; self.next \u003d next; }\n * }\n */\nclass Solution {\n    func modifiedList(_ nums: [Int], _ head: ListNode?) -\u003e ListNode? {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "/**\n * Example:\n * var li \u003d ListNode(5)\n * var v \u003d li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? \u003d null\n * }\n */\nclass Solution {\n    fun modifiedList(nums: IntArray, head: ListNode?): ListNode? {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val \u003d 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? modifiedList(List\u003cint\u003e nums, ListNode? head) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc modifiedList(nums []int, head *ListNode) *ListNode {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val \u003d 0, _next \u003d nil)\n#         @val \u003d val\n#         @next \u003d _next\n#     end\n# end\n# @param {Integer[]} nums\n# @param {ListNode} head\n# @return {ListNode}\ndef modified_list(nums, head)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int \u003d 0, _next: ListNode \u003d null) {\n *   var next: ListNode \u003d _next\n *   var x: Int \u003d _x\n * }\n */\nobject Solution {\n    def modifiedList(nums: Array[Int], head: ListNode): ListNode \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option\u003cBox\u003cListNode\u003e\u003e\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -\u003e Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn modified_list(nums: Vec\u003ci32\u003e, head: Option\u003cBox\u003cListNode\u003e\u003e) -\u003e Option\u003cBox\u003cListNode\u003e\u003e {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (modified-list nums head)\n  (-\u003e (listof exact-integer?) (or/c list-node? #f) (or/c list-node? #f))\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val \u003d 0 :: integer(),\n%%                     next \u003d null :: \u0027null\u0027 | #list_node{}}).\n\n-spec modified_list(Nums :: [integer()], Head :: #list_node{} | null) -\u003e #list_node{} | null.\nmodified_list(Nums, Head) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec modified_list(nums :: [integer], head :: ListNode.t | nil) :: ListNode.t | nil\n  def modified_list(nums, head) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array of integers \u003ccode\u003enums\u003c/code\u003e and the \u003ccode\u003ehead\u003c/code\u003e of a linked list. Return the \u003ccode\u003ehead\u003c/code\u003e of the modified linked list after \u003cstrong\u003eremoving\u003c/strong\u003e all nodes from the linked list that have a value that exists in \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3], head \u003d [1,2,3,4,5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[4,5]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample0.png\" style\u003d\"width: 400px; height: 66px;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eRemove the nodes with values 1, 2, and 3.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1], head \u003d [1,2,1,2,1,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[2,2,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample1.png\" style\u003d\"height: 62px; width: 450px;\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eRemove the nodes with value 1.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [5], head \u003d [1,2,3,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e[1,2,3,4]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cimg alt\u003d\"\" src\u003d\"https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample2.png\" style\u003d\"width: 400px; height: 83px;\" /\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNo node has value 5.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll elements in \u003ccode\u003enums\u003c/code\u003e are unique.\u003c/li\u003e\n\t\u003cli\u003eThe number of nodes in the given list is in the range \u003ccode\u003e[1, 10\u003csup\u003e5\u003c/sup\u003e]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d Node.val \u0026lt;\u003d 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that there is at least one node in the linked list that has a value not present in \u003ccode\u003enums\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3]\n[1,2,3,4,5]\n[1]\n[1,2,1,2,1,2]\n[5]\n[1,2,3,4]",
    "formTitle": "[3217]Delete Nodes From Linked List Present in Array",
    "frequency": 0.0,
    "frontendQuestionId": "3217",
    "hints": [
      "Add all elements of \u003ccode\u003enums\u003c/code\u003e into a Set.",
      "Scan the list to check if the current element should be deleted by checking the Set."
    ],
    "level": 2,
    "metaData": {
      "name": "modifiedList",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "head",
          "type": "ListNode"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3501",
    "similarQuestions": [
      "[{\"title\": \"Remove Linked List Elements\", \"titleSlug\": \"remove-linked-list-elements\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u79fb\\u9664\\u94fe\\u8868\\u5143\\u7d20\", \"isPaidOnly\": false}, {\"title\": \"Delete Node in a Linked List\", \"titleSlug\": \"delete-node-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u5220\\u9664\\u94fe\\u8868\\u4e2d\\u7684\\u8282\\u70b9\", \"isPaidOnly\": false}, {\"title\": \"Remove Nodes From Linked List\", \"titleSlug\": \"remove-nodes-from-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u4ece\\u94fe\\u8868\\u4e2d\\u79fb\\u9664\\u8282\\u70b9\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,2,3]\n[1,2,3,4,5]",
    "title": "Delete Nodes From Linked List Present in Array",
    "titleSlug": "delete-nodes-from-linked-list-present-in-array"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int nonSpecialCount(int l, int r) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int nonSpecialCount(int l, int r) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def nonSpecialCount(self, l, r):\n        \"\"\"\n        :type l: int\n        :type r: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def nonSpecialCount(self, l: int, r: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int nonSpecialCount(int l, int r) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int NonSpecialCount(int l, int r) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar nonSpecialCount \u003d function(l, r) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function nonSpecialCount(l: number, r: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $l\n     * @param Integer $r\n     * @return Integer\n     */\n    function nonSpecialCount($l, $r) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func nonSpecialCount(_ l: Int, _ r: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun nonSpecialCount(l: Int, r: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int nonSpecialCount(int l, int r) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func nonSpecialCount(l int, r int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef non_special_count(l, r)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def nonSpecialCount(l: Int, r: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn non_special_count(l: i32, r: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (non-special-count l r)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec non_special_count(L :: integer(), R :: integer()) -\u003e integer().\nnon_special_count(L, R) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec non_special_count(l :: integer, r :: integer) :: integer\n  def non_special_count(l, r) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given 2 \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003el\u003c/code\u003e and \u003ccode\u003er\u003c/code\u003e. For any number \u003ccode\u003ex\u003c/code\u003e, all positive divisors of \u003ccode\u003ex\u003c/code\u003e \u003cem\u003eexcept\u003c/em\u003e \u003ccode\u003ex\u003c/code\u003e are called the \u003cstrong\u003eproper divisors\u003c/strong\u003e of \u003ccode\u003ex\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA number is called \u003cstrong\u003especial\u003c/strong\u003e if it has exactly 2 \u003cstrong\u003eproper divisors\u003c/strong\u003e. For example:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe number 4 is \u003cem\u003especial\u003c/em\u003e because it has proper divisors 1 and 2.\u003c/li\u003e\n\t\u003cli\u003eThe number 6 is \u003cem\u003enot special\u003c/em\u003e because it has proper divisors 1, 2, and 3.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the count of numbers in the range \u003ccode\u003e[l, r]\u003c/code\u003e that are \u003cstrong\u003enot\u003c/strong\u003e \u003cstrong\u003especial\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003el \u003d 5, r \u003d 7\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e3\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are no special numbers in the range \u003ccode\u003e[5, 7]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003el \u003d 4, r \u003d 16\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e11\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe special numbers in the range \u003ccode\u003e[4, 16]\u003c/code\u003e are 4 and 9.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d l \u0026lt;\u003d r \u0026lt;\u003d 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "5\n7\n4\n16",
    "formTitle": "[3233]Find the Count of Numbers Which Are Not Special",
    "frequency": 0.0,
    "frontendQuestionId": "3233",
    "hints": [
      "A special number must be a square of a prime number.",
      "We need to find all primes in the range \u003ccode\u003e[sqrt(l), sqrt(r)]\u003c/code\u003e.",
      "Use sieve to find primes till \u003ccode\u003esqrt(10\u003csup\u003e9\u003c/sup\u003e)\u003c/code\u003e."
    ],
    "level": 2,
    "metaData": {
      "name": "nonSpecialCount",
      "params": [
        {
          "name": "l",
          "type": "integer"
        },
        {
          "name": "r",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3507",
    "similarQuestions": [
      "[{\"title\": \"Count Primes\", \"titleSlug\": \"count-primes\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u8ba1\\u6570\\u8d28\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "5\n7",
    "title": "Find the Count of Numbers Which Are Not Special",
    "titleSlug": "find-the-count-of-numbers-which-are-not-special"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    int minChanges(int n, int k) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int minChanges(int n, int k) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minChanges(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def minChanges(self, n: int, k: int) -\u003e int:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "int minChanges(int n, int k) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public int MinChanges(int n, int k) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar minChanges \u003d function(n, k) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function minChanges(n: number, k: number): number {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function minChanges($n, $k) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func minChanges(_ n: Int, _ k: Int) -\u003e Int {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun minChanges(n: Int, k: Int): Int {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  int minChanges(int n, int k) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func minChanges(n int, k int) int {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef min_changes(n, k)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def minChanges(n: Int, k: Int): Int \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn min_changes(n: i32, k: i32) -\u003e i32 {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (min-changes n k)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec min_changes(N :: integer(), K :: integer()) -\u003e integer().\nmin_changes(N, K) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec min_changes(n :: integer, k :: integer) :: integer\n  def min_changes(n, k) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two positive integers \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can choose \u003cstrong\u003eany\u003c/strong\u003e bit in the \u003cstrong\u003ebinary representation\u003c/strong\u003e of \u003ccode\u003en\u003c/code\u003e that is equal to 1 and change it to 0.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cem\u003enumber of changes\u003c/em\u003e needed to make \u003ccode\u003en\u003c/code\u003e equal to \u003ccode\u003ek\u003c/code\u003e. If it is impossible, return -1.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 13, k \u003d 4\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nInitially, the binary representations of \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003ek\u003c/code\u003e are \u003ccode\u003en \u003d (1101)\u003csub\u003e2\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003ek \u003d (0100)\u003csub\u003e2\u003c/sub\u003e\u003c/code\u003e.\u003cbr /\u003e\nWe can change the first and fourth bits of \u003ccode\u003en\u003c/code\u003e. The resulting integer is \u003ccode\u003en \u003d (\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e10\u003cu\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003c/u\u003e)\u003csub\u003e2\u003c/sub\u003e \u003d k\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 21, k \u003d 21\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\n\u003ccode\u003en\u003c/code\u003e and \u003ccode\u003ek\u003c/code\u003e are already equal, so no changes are needed.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003en \u003d 14, k \u003d 13\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e-1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr /\u003e\nIt is not possible to make \u003ccode\u003en\u003c/code\u003e equal to \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d n, k \u0026lt;\u003d 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "13\n4\n21\n21\n14\n13",
    "formTitle": "[3226]Number of Bit Changes to Make Two Integers Equal",
    "frequency": 0.0,
    "frontendQuestionId": "3226",
    "hints": [
      "Find the binary representations of \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003ek\u003c/code\u003e.",
      "Any bit that is equal to 1 in \u003ccode\u003en\u003c/code\u003e and equal to 0 in \u003ccode\u003ek\u003c/code\u003e needs to be changed."
    ],
    "level": 1,
    "metaData": {
      "name": "minChanges",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3508",
    "similarQuestions": [
      "[]"
    ],
    "statusSign": " ",
    "testCase": "13\n4",
    "title": "Number of Bit Changes to Make Two Integers Equal",
    "titleSlug": "number-of-bit-changes-to-make-two-integers-equal"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    string losingPlayer(int x, int y) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public String losingPlayer(int x, int y) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def losingPlayer(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: str\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def losingPlayer(self, x: int, y: int) -\u003e str:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "char* losingPlayer(int x, int y) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public string LosingPlayer(int x, int y) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number} x\n * @param {number} y\n * @return {string}\n */\nvar losingPlayer \u003d function(x, y) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function losingPlayer(x: number, y: number): string {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @return String\n     */\n    function losingPlayer($x, $y) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func losingPlayer(_ x: Int, _ y: Int) -\u003e String {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun losingPlayer(x: Int, y: Int): String {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  String losingPlayer(int x, int y) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func losingPlayer(x int, y int) string {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer} x\n# @param {Integer} y\n# @return {String}\ndef losing_player(x, y)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def losingPlayer(x: Int, y: Int): String \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn losing_player(x: i32, y: i32) -\u003e String {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (losing-player x y)\n  (-\u003e exact-integer? exact-integer? string?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec losing_player(X :: integer(), Y :: integer()) -\u003e unicode:unicode_binary().\nlosing_player(X, Y) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec losing_player(x :: integer, y :: integer) :: String.t\n  def losing_player(x, y) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given two \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e, denoting the number of coins with values 75 and 10 \u003cem\u003erespectively\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlice and Bob are playing a game. Each turn, starting with \u003cstrong\u003eAlice\u003c/strong\u003e, the player must pick up coins with a \u003cstrong\u003etotal\u003c/strong\u003e value 115. If the player is unable to do so, they \u003cstrong\u003elose\u003c/strong\u003e the game.\u003c/p\u003e\n\n\u003cp\u003eReturn the \u003cem\u003ename\u003c/em\u003e of the player who wins the game if both players play \u003cstrong\u003eoptimally\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ex \u003d 2, y \u003d 7\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;Alice\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe game ends in a single turn:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAlice picks 1 coin with a value of 75 and 4 coins with a value of 10.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003ex \u003d 4, y \u003d 11\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003e\u0026quot;Bob\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe game ends in 2 turns:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eAlice picks 1 coin with a value of 75 and 4 coins with a value of 10.\u003c/li\u003e\n\t\u003cli\u003eBob picks 1 coin with a value of 75 and 4 coins with a value of 10.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d x, y \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "2\n7\n4\n11",
    "formTitle": "[3222]Find the Winning Player in Coin Game",
    "frequency": 0.0,
    "frontendQuestionId": "3222",
    "hints": [
      "The only way to make 115 is to use one coin of value 75 and four coins of value 10. Each turn uses up these many coins.",
      "Hence the number of turns is \u003ccode\u003emin(x, y / 4)\u003c/code\u003e.",
      "Determine the winner from its parity."
    ],
    "level": 1,
    "metaData": {
      "name": "losingPlayer",
      "params": [
        {
          "name": "x",
          "type": "integer"
        },
        {
          "name": "y",
          "type": "integer"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3511",
    "similarQuestions": [
      "[{\"title\": \"Can I Win\", \"titleSlug\": \"can-i-win\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u6211\\u80fd\\u8d62\\u5417\", \"isPaidOnly\": false}, {\"title\": \"Predict the Winner\", \"titleSlug\": \"predict-the-winner\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u9884\\u6d4b\\u8d62\\u5bb6\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "2\n7",
    "title": "Find the Winning Player in Coin Game",
    "titleSlug": "find-the-winning-player-in-coin-game"
  },
  {
    "acceptance": 0.0,
    "codeSnippets": [
      {
        "code": "class Solution {\npublic:\n    bool canAliceWin(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};",
        "lang": "C++",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public boolean canAliceWin(int[] nums) {\n\n    }\n}",
        "lang": "Java",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def canAliceWin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
        "lang": "Python",
        "langSlug": "python"
      },
      {
        "code": "class Solution:\n    def canAliceWin(self, nums: List[int]) -\u003e bool:",
        "lang": "Python3",
        "langSlug": "python3"
      },
      {
        "code": "bool canAliceWin(int* nums, int numsSize) {\n    \n}",
        "lang": "C",
        "langSlug": "c"
      },
      {
        "code": "public class Solution {\n    public bool CanAliceWin(int[] nums) {\n\n    }\n}",
        "lang": "C#",
        "langSlug": "csharp"
      },
      {
        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canAliceWin \u003d function(nums) {\n\n};",
        "lang": "JavaScript",
        "langSlug": "javascript"
      },
      {
        "code": "function canAliceWin(nums: number[]): boolean {\n    \n};",
        "lang": "TypeScript",
        "langSlug": "typescript"
      },
      {
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canAliceWin($nums) {\n\n    }\n}",
        "lang": "PHP",
        "langSlug": "php"
      },
      {
        "code": "class Solution {\n    func canAliceWin(_ nums: [Int]) -\u003e Bool {\n\n    }\n}",
        "lang": "Swift",
        "langSlug": "swift"
      },
      {
        "code": "class Solution {\n    fun canAliceWin(nums: IntArray): Boolean {\n\n    }\n}",
        "lang": "Kotlin",
        "langSlug": "kotlin"
      },
      {
        "code": "class Solution {\n  bool canAliceWin(List\u003cint\u003e nums) {\n    \n  }\n}",
        "lang": "Dart",
        "langSlug": "dart"
      },
      {
        "code": "func canAliceWin(nums []int) bool {\n\n}",
        "lang": "Go",
        "langSlug": "golang"
      },
      {
        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_alice_win(nums)\n\nend",
        "lang": "Ruby",
        "langSlug": "ruby"
      },
      {
        "code": "object Solution {\n    def canAliceWin(nums: Array[Int]): Boolean \u003d {\n        \n    }\n}",
        "lang": "Scala",
        "langSlug": "scala"
      },
      {
        "code": "impl Solution {\n    pub fn can_alice_win(nums: Vec\u003ci32\u003e) -\u003e bool {\n\n    }\n}",
        "lang": "Rust",
        "langSlug": "rust"
      },
      {
        "code": "(define/contract (can-alice-win nums)\n  (-\u003e (listof exact-integer?) boolean?)\n  )",
        "lang": "Racket",
        "langSlug": "racket"
      },
      {
        "code": "-spec can_alice_win(Nums :: [integer()]) -\u003e boolean().\ncan_alice_win(Nums) -\u003e\n  .",
        "lang": "Erlang",
        "langSlug": "erlang"
      },
      {
        "code": "defmodule Solution do\n  @spec can_alice_win(nums :: [integer]) :: boolean\n  def can_alice_win(nums) do\n    \n  end\nend",
        "lang": "Elixir",
        "langSlug": "elixir"
      }
    ],
    "content": "\u003cp\u003eYou are given an array of \u003cstrong\u003epositive\u003c/strong\u003e integers \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlice and Bob are playing a game. In the game, Alice can choose \u003cstrong\u003eeither\u003c/strong\u003e all single-digit numbers or all double-digit numbers from \u003ccode\u003enums\u003c/code\u003e, and the rest of the numbers are given to Bob. Alice wins if the sum of her numbers is \u003cstrong\u003estrictly greater\u003c/strong\u003e than the sum of Bob\u0026#39;s numbers.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if Alice can win this game, otherwise, return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4,10]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAlice cannot win by choosing either single-digit or double-digit numbers.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [1,2,3,4,5,14]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAlice can win by choosing single-digit numbers which have a sum equal to 15.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class\u003d\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class\u003d\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003enums \u003d [5,5,5,25]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class\u003d\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAlice can win by choosing double-digit numbers which have a sum equal to 25.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums.length \u0026lt;\u003d 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;\u003d nums[i] \u0026lt;\u003d 99\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
    "exampleTestcases": "[1,2,3,4,10]\n[1,2,3,4,5,14]\n[5,5,5,25]",
    "formTitle": "[3232]Find if Digit Game Can Be Won",
    "frequency": 0.0,
    "frontendQuestionId": "3232",
    "hints": [
      "Alice wins if the sum of all single-digit numbers and the sum of all double-digit numbers are different."
    ],
    "level": 1,
    "metaData": {
      "name": "canAliceWin",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ]
    },
    "paidOnly": false,
    "questionId": "3515",
    "similarQuestions": [
      "[{\"title\": \"Find Numbers with Even Number of Digits\", \"titleSlug\": \"find-numbers-with-even-number-of-digits\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u4f4d\\u6570\\u4e3a\\u5076\\u6570\\u7684\\u6570\\u5b57\", \"isPaidOnly\": false}, {\"title\": \"Count Integers With Even Digit Sum\", \"titleSlug\": \"count-integers-with-even-digit-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": \"\\u7edf\\u8ba1\\u5404\\u4f4d\\u6570\\u5b57\\u4e4b\\u548c\\u4e3a\\u5076\\u6570\\u7684\\u6574\\u6570\\u4e2a\\u6570\", \"isPaidOnly\": false}]"
    ],
    "statusSign": " ",
    "testCase": "[1,2,3,4,10]",
    "title": "Find if Digit Game Can Be Won",
    "titleSlug": "find-if-digit-game-can-be-won"
  }
]