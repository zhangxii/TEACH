[
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumSetSize(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumSetSize(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumSetSize(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumSetSize(self, nums1: List[int], nums2: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumSetSize(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumSetSize(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maximumSetSize = function(nums1, nums2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumSetSize(nums1: number[], nums2: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function maximumSetSize($nums1, $nums2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumSetSize(_ nums1: [Int], _ nums2: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumSetSize(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumSetSize(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumSetSize(nums1 []int, nums2 []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef maximum_set_size(nums1, nums2)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumSetSize(nums1: Array[Int], nums2: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_set_size(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-set-size nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_set_size(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmaximum_set_size(Nums1, Nums2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_set_size(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def maximum_set_size(nums1, nums2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of even length <code>n</code>.</p>\n\n<p>You must remove <code>n / 2</code> elements from <code>nums1</code> and <code>n / 2</code> elements from <code>nums2</code>. After the removals, you insert the remaining elements of <code>nums1</code> and <code>nums2</code> into a set <code>s</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible size of the set</em> <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,1,2], nums2 = [1,1,1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 = [2,2] and nums2 = [1,1]. Therefore, s = {1,2}.\nIt can be shown that 2 is the maximum possible size of the set s after the removals.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,4,5,6], nums2 = [2,3,2,3,2,3]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 = [1,4,5] and nums2 = [2,3,2]. Therefore, s = {1,2,3,4,5}.\nIt can be shown that 5 is the maximum possible size of the set s after the removals.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,1,2,2,3,3], nums2 = [4,4,5,5,6,6]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 = [1,2,3] and nums2 = [4,5,6]. Therefore, s = {1,2,3,4,5,6}.\nIt can be shown that 6 is the maximum possible size of the set s after the removals.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,1,2]\n[1,1,1,1]\n[1,2,3,4,5,6]\n[2,3,2,3,2,3]\n[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
        "formTitle": "[3002]Maximum Size of a Set After Removals",
        "frequency": 0.0,
        "frontendQuestionId": "3002",
        "hints": [
            "Removing <code>n / 2</code> elements from each array is the same as keeping <code>n / 2<code> elements in each array.",
            "Think of a greedy algorithm.",
            "For each array, we will greedily keep the elements that are only in that array. Once we run out of such elements, we will keep the elements that are common to both arrays."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumSetSize",
            "params": [
                {
                    "name": "nums1",
                    "type": "integer[]"
                },
                {
                    "name": "nums2",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3228",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,1,2]\n[1,1,1,1]",
        "title": "Maximum Size of a Set After Removals",
        "titleSlug": "maximum-size-of-a-set-after-removals",
        "infer_hints": [
            "Sort the arrays and use two pointers to find the maximum possible size of the set.",
            "Sort the arrays and try to remove pairs of numbers from the two arrays.",
            "Can you keep track of the 2 elements that will be removed in each iteration?",
            "Use binary search to check the maximum size of the set.",
            "Try to find the smallest number of removals such that the arrays are equal.",
            "How many elements can we keep?",
            "Try to remove all elements from nums1 and nums2, and then add all elements from nums1 and nums2 to the set.",
            "We can perform the operation greedily.  We should remove the elements which are common to both the arrays and then remove the other elements which can't be used for the next operation.",
            "You can solve this problem by using binary search and sorting.",
            "The size of the set must be at least the sum of the elements of nums1 and nums2 divided by 2.",
            "Use a dynamic programming approach.",
            "Can we just take the union of the two arrays and then remove the minimum element from the array?",
            "How can we use a hash map to keep track of the frequency of each element in the array?",
            "How can we make the maximum size of the set maximum?",
            "Can we sort nums1 and nums2, and then greedily choose the best elements?",
            "How many ways are there to remove elements from nums1 and nums2 so that they become equal?  How many ways are there to remove x elements from nums1 and y elements from nums2 so that they become equal?",
            "Use dynamic programming to solve this problem.",
            "Consider the two arrays sorted.",
            "Think about the minimum size of the set after the removals.",
            "You can use dynamic programming to solve this problem."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxPartitionsAfterOperations(string s, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxPartitionsAfterOperations(String s, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxPartitionsAfterOperations(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxPartitionsAfterOperations(self, s: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxPartitionsAfterOperations(char* s, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxPartitionsAfterOperations(string s, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar maxPartitionsAfterOperations = function(s, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxPartitionsAfterOperations(s: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxPartitionsAfterOperations($s, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxPartitionsAfterOperations(_ s: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxPartitionsAfterOperations(s: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxPartitionsAfterOperations(String s, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxPartitionsAfterOperations(s string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_partitions_after_operations(s, k)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxPartitionsAfterOperations(s: String, k: Int): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_partitions_after_operations(s: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-partitions-after-operations s k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_partitions_after_operations(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nmax_partitions_after_operations(S, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_partitions_after_operations(s :: String.t, k :: integer) :: integer\n  def max_partitions_after_operations(s, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code> and an integer <code>k</code>.</p>\n\n<p>You are to perform the following partitioning operations until <code>s</code> is <strong>empty</strong>:</p>\n\n<ul>\n\t<li>Choose the <strong>longest</strong> <strong>prefix</strong> of <code>s</code> containing at most <code>k</code> <strong>distinct</strong> characters.</li>\n\t<li><strong>Delete</strong> the prefix from <code>s</code> and increase the number of partitions by one. The remaining characters (if any) in <code>s</code> maintain their initial order.</li>\n</ul>\n\n<p><strong>Before</strong> the operations, you are allowed to change <strong>at most</strong> <strong>one</strong> index in <code>s</code> to another lowercase English letter.</p>\n\n<p>Return <em>an integer denoting the <strong>maximum</strong> number of resulting partitions after the operations by optimally choosing at most one index to change.</em></p>\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;accca&quot;, k = 2\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>In this example, to maximize the number of resulting partitions, s[2] can be changed to &#39;b&#39;.\ns becomes &quot;acbca&quot;.\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 2 distinct characters, &quot;<u>ac</u>bca&quot;.\n- Delete the prefix, and s becomes &quot;bca&quot;. The number of partitions is now 1.\n- Choose the longest prefix containing at most 2 distinct characters, &quot;<u>bc</u>a&quot;.\n- Delete the prefix, and s becomes &quot;a&quot;. The number of partitions is now 2.\n- Choose the longest prefix containing at most 2 distinct characters, &quot;<u>a</u>&quot;.\n- Delete the prefix, and s becomes empty. The number of partitions is now 3.\nHence, the answer is 3.\nIt can be shown that it is not possible to obtain more than 3 partitions.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabaab&quot;, k = 3\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>In this example, to maximize the number of resulting partitions we can leave s as it is.\nThe operations can now be performed as follows until s becomes empty: \n- Choose the longest prefix containing at most 3 distinct characters, &quot;<u>aabaab</u>&quot;.\n- Delete the prefix, and s becomes empty. The number of partitions becomes 1. \nHence, the answer is 1. \nIt can be shown that it is not possible to obtain more than 1 partition.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;xxyz&quot;, k = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> In this example, to maximize the number of resulting partitions, s[1] can be changed to &#39;a&#39;.\ns becomes &quot;xayz&quot;.\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 1 distinct character, &quot;<u>x</u>ayz&quot;.\n- Delete the prefix, and s becomes &quot;ayz&quot;. The number of partitions is now 1.\n- Choose the longest prefix containing at most 1 distinct character, &quot;<u>a</u>yz&quot;.\n- Delete the prefix, and s becomes &quot;yz&quot;. The number of partitions is now 2.\n- Choose the longest prefix containing at most 1 distinct character, &quot;<u>y</u>z&quot;.\n- Delete the prefix, and s becomes &quot;z&quot;. The number of partitions is now 3.\n- Choose the longest prefix containing at most 1 distinct character, &quot;<u>z</u>&quot;.\n- Delete the prefix, and s becomes empty. The number of partitions is now 4.\nHence, the answer is 4.\nIt can be shown that it is not possible to obtain more than 4 partitions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= 26</code></li>\n</ul>\n",
        "exampleTestcases": "\"accca\"\n2\n\"aabaab\"\n3\n\"xxyz\"\n1",
        "formTitle": "[3003]Maximize the Number of Partitions After Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3003",
        "hints": [
            "For each position, try to brute-force the replacements.",
            "To speed up the brute-force solution, we can precompute the following (without changing any index) using prefix sums and binary search:<ul>\r\n<li><code>pref[i]</code>: The number of resulting partitions from the operations by performing the operations on <code>s[0:i]</code>.</li>\r\n<li><code>suff[i]</code>: The number of resulting partitions from the operations by performing the operations on <code>s[i:n - 1]</code>, where <code>n == s.length</code>.</li>\r\n<li><code>partition_start[i]</code>: The start index of the partition containing the <code>i<sup>th</sup></code> index after performing the operations.</li>\r\n</ul>",
            "Now, for a position <code>i</code>, we can try all possible <code>25</code> replacements:<br />\r\nFor a replacement, using prefix sums and binary search, we need to find the rightmost index, <code>r</code>, such that the number of distinct characters in the range <code>[partition_start[i], r]</code> is at most <code>k</code>.<br />\r\nThere are <code>2</code> cases:<ul>\r\n<li><code>r >= i</code>: the number of resulting partitions in this case is <code>1 + pref[partition_start[i] - 1] + suff[r + 1]</code>.</li>\r\n<li>Otherwise, we need to find the rightmost index <code>r<sub>2</sub></code> such that the number of distinct characters in the range <code>[r:r<sub>2</sub>]</code> is at most <code>k</code>. The answer in this case is <code>2 + pref[partition_start[i] - 1] + suff[r<sub>2</sub> + 1]</code></li>\r\n</ul>",
            "The answer is the maximum among all replacements."
        ],
        "level": 3,
        "metaData": {
            "name": "maxPartitionsAfterOperations",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3233",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"accca\"\n2",
        "title": "Maximize the Number of Partitions After Operations",
        "titleSlug": "maximize-the-number-of-partitions-after-operations",
        "infer_hints": [
            "For each character, find the last index where it appears.",
            "Sliding window, try to expand it.",
            "For each position i, you can choose to either keep it as it is or change it to any lowercase English letter.",
            "Sliding window with a queue.",
            "How many partitions are there if you change only one character?",
            "Use a sliding window to track the longest prefix with at most k distinct characters.",
            "Try to find a greedy approach.",
            "Consider using a sliding window.",
            "We can use a sliding window with a constant size.",
            "Can you solve this problem in O(n) time?",
            "You can use a sliding window to solve this problem.",
            "We can simulate the process and keep track of the maximum number of partitions we can get by changing at most one character.",
            "The problem can be solved using a sliding window approach.",
            "Use the sliding window technique.",
            "What happens if we use two pointers?",
            "We need to maximize the number of partitions while allowing at most one index to be changed.",
            "You can use the sliding window technique to solve this problem.",
            "If the number of distinct characters is larger than k, we can't change any character.",
            "Can you use a sliding window to solve this problem?",
            "Can you apply sliding window concept here?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long findMaximumNumber(long long k, int x) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long findMaximumNumber(long k, int x) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findMaximumNumber(self, k, x):\n        \"\"\"\n        :type k: int\n        :type x: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long findMaximumNumber(long long k, int x) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long FindMaximumNumber(long k, int x) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} k\n * @param {number} x\n * @return {number}\n */\nvar findMaximumNumber = function(k, x) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findMaximumNumber(k: number, x: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $x\n     * @return Integer\n     */\n    function findMaximumNumber($k, $x) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findMaximumNumber(_ k: Int, _ x: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findMaximumNumber(k: Long, x: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int findMaximumNumber(int k, int x) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findMaximumNumber(k int64, x int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} k\n# @param {Integer} x\n# @return {Integer}\ndef find_maximum_number(k, x)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findMaximumNumber(k: Long, x: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_maximum_number(k: i64, x: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-maximum-number k x)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_maximum_number(K :: integer(), X :: integer()) -> integer().\nfind_maximum_number(K, X) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_maximum_number(k :: integer, x :: integer) :: integer\n  def find_maximum_number(k, x) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer <code>k</code> and an integer <code>x</code>. The price of a number&nbsp;<code>num</code> is calculated by the count of <span data-keyword=\"set-bit\">set bits</span> at positions <code>x</code>, <code>2x</code>, <code>3x</code>, etc., in its binary representation, starting from the least significant bit. The following table contains examples of how price is calculated.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>x</th>\n\t\t\t<th>num</th>\n\t\t\t<th>Binary Representation</th>\n\t\t\t<th>Price</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>13</td>\n\t\t\t<td><u>0</u><u>0</u><u>0</u><u>0</u><u>0</u><strong><u>1</u></strong><strong><u>1</u></strong><u>0</u><strong><u>1</u></strong></td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>13</td>\n\t\t\t<td>0<u>0</u>0<u>0</u>0<strong><u>1</u></strong>1<u>0</u>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>233</td>\n\t\t\t<td>0<strong><u>1</u></strong>1<strong><u>1</u></strong>0<strong><u>1</u></strong>0<u>0</u>1</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>13</td>\n\t\t\t<td><u>0</u>00<u>0</u>01<strong><u>1</u></strong>01</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>362</td>\n\t\t\t<td><strong><u>1</u></strong>01<strong><u>1</u></strong>01<u>0</u>10</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The&nbsp;<strong>accumulated price</strong>&nbsp;of&nbsp;<code>num</code>&nbsp;is the <b>total</b>&nbsp;price of&nbsp;numbers from <code>1</code> to <code>num</code>. <code>num</code>&nbsp;is considered&nbsp;<strong>cheap</strong>&nbsp;if its accumulated price&nbsp;is less than or equal to <code>k</code>.</p>\n\n<p>Return the <b>greatest</b>&nbsp;cheap number.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 9, x = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>As shown in the table below, <code>6</code> is the greatest cheap number.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>x</th>\n\t\t\t<th>num</th>\n\t\t\t<th>Binary Representation</th>\n\t\t\t<th>Price</th>\n\t\t\t<th>Accumulated Price</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td><u>0</u><u>0</u><strong><u>1</u></strong></td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t\t<td><u>0</u><strong><u>1</u></strong><u>0</u></td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t\t<td><u>0</u><strong><u>1</u></strong><strong><u>1</u></strong></td>\n\t\t\t<td>2</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>4</td>\n\t\t\t<td><strong><u>1</u></strong><u>0</u><u>0</u></td>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t\t<td><strong><u>1</u></strong><u>0</u><strong><u>1</u></strong></td>\n\t\t\t<td>2</td>\n\t\t\t<td>7</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>6</td>\n\t\t\t<td><strong><u>1</u></strong><strong><u>1</u></strong><u>0</u></td>\n\t\t\t<td>2</td>\n\t\t\t<td>9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>7</td>\n\t\t\t<td><strong><u>1</u></strong><strong><u>1</u></strong><strong><u>1</u></strong></td>\n\t\t\t<td>3</td>\n\t\t\t<td>12</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 7, x = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">9</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>As shown in the table below, <code>9</code> is the greatest cheap number.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>x</th>\n\t\t\t<th>num</th>\n\t\t\t<th>Binary Representation</th>\n\t\t\t<th>Price</th>\n\t\t\t<th>Accumulated Price</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t\t<td><u>0</u>0<u>0</u>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>2</td>\n\t\t\t<td><u>0</u>0<strong><u>1</u></strong>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td><u>0</u>0<strong><u>1</u></strong>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>4</td>\n\t\t\t<td><u>0</u>1<u>0</u>0</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>5</td>\n\t\t\t<td><u>0</u>1<u>0</u>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>6</td>\n\t\t\t<td><u>0</u>1<strong><u>1</u></strong>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>7</td>\n\t\t\t<td><u>0</u>1<strong><u>1</u></strong>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>8</td>\n\t\t\t<td><strong><u>1</u></strong>0<u>0</u>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>9</td>\n\t\t\t<td><strong><u>1</u></strong>0<u>0</u>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>6</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>10</td>\n\t\t\t<td><strong><u>1</u></strong>0<strong><u>1</u></strong>0</td>\n\t\t\t<td>2</td>\n\t\t\t<td>8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>15</sup></code></li>\n\t<li><code>1 &lt;= x &lt;= 8</code></li>\n</ul>\n",
        "exampleTestcases": "9\n1\n7\n2",
        "formTitle": "[3007]Maximum Number That Sum of the Prices Is Less Than or Equal to K",
        "frequency": 0.0,
        "frontendQuestionId": "3007",
        "hints": [
            "Binary search the answer.",
            "In each step of the binary search you should calculate the number of the set bits in the <code>i<sup>th</sup></code> position. Then calculate the sum of them."
        ],
        "level": 2,
        "metaData": {
            "name": "findMaximumNumber",
            "params": [
                {
                    "name": "k",
                    "type": "long"
                },
                {
                    "name": "x",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3240",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "9\n1",
        "title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
        "titleSlug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
        "infer_hints": [
            "What is the smallest price?",
            "For each price, try to find the largest number that the price can be obtained by adding another bit of price to the current number.",
            "Try binary search on the answer.",
            "You can use a binary search to solve this problem.",
            "You can use binary search to find the maximum number.",
            "How many numbers are there with <code>i</code> set bits?",
            "You can use dynamic programming to solve this problem.",
            "Try binary search on the answer.",
            "Use binary search to find the greatest cheap number.",
            "Try to solve it using binary search.",
            "If the number has x bits set, then the price is x. \r\nIf you set the i-th bit, you add the price of all the numbers that you can set with i-1 bits.",
            "Find the largest x that 2^x is less than or equal to k.",
            "Use binary search to find the largest number that the accumulated price of is less than or equal to k.",
            "The problem is a variation of 0-1 knapsack problem.",
            "We can iterate over all possible numbers and check if the accumulated price is less than or equal to k.",
            "Do a binary search over the possible answers.",
            "Can we perform binary search on the answer?",
            "If we iterate from the smallest number to the largest, and for each number, calculate the accumulated price, can we ensure that the answer is the largest number that is cheap?",
            "You can use a bitmask for all numbers from 1 to 10^15.",
            "You can solve this problem by binary search."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxFrequencyElements(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxFrequencyElements(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxFrequencyElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxFrequencyElements(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxFrequencyElements(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxFrequencyElements(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxFrequencyElements = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxFrequencyElements(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxFrequencyElements($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxFrequencyElements(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxFrequencyElements(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxFrequencyElements(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxFrequencyElements(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_frequency_elements(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxFrequencyElements(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_frequency_elements(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-frequency-elements nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_frequency_elements(Nums :: [integer()]) -> integer().\nmax_frequency_elements(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_frequency_elements(nums :: [integer]) :: integer\n  def max_frequency_elements(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers.</p>\n\n<p>Return <em>the <strong>total frequencies</strong> of elements in</em><em> </em><code>nums</code>&nbsp;<em>such that those elements all have the <strong>maximum</strong> frequency</em>.</p>\n\n<p>The <strong>frequency</strong> of an element is the number of occurrences of that element in the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3,1,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,2,3,1,4]\n[1,2,3,4,5]",
        "formTitle": "[3005]Count Elements With Maximum Frequency",
        "frequency": 0.0,
        "frontendQuestionId": "3005",
        "hints": [
            "Find frequencies of all elements of the array.",
            "Find the elements that have the maximum frequencies and count their total occurrences."
        ],
        "level": 1,
        "metaData": {
            "name": "maxFrequencyElements",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3242",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,2,3,1,4]",
        "title": "Count Elements With Maximum Frequency",
        "titleSlug": "count-elements-with-maximum-frequency",
        "infer_hints": [
            "Use a hashmap to count the frequency of all elements in the array.",
            "Try to solve the problem in O(n) time complexity.",
            "Use a map to store the frequencies of the numbers.",
            "What if we count the frequencies of all the elements in the array?",
            "How to count the frequency of each number in the array?",
            "What is the maximum possible frequency of an element in an array?",
            "Use a hashmap to count the frequency of each element.",
            "If we have two numbers a and b, and a is less than b, we can't have more than b elements in the array.",
            "For each element, calculate the frequency and count the maximum frequency.",
            "We can iterate over the array, keeping track of the frequency of each element.",
            "Try to solve it using a hashmap.",
            "You can solve this problem by using a hash map to store the frequency of each element.",
            "Create a frequency array to store the frequency of each number.",
            "Find the frequency of each element.",
            "We need to find the maximum frequency of any number in the array.",
            "We can iterate over the array and use a hash map to count the frequency of each number.",
            "Count the frequency of each element.",
            "What is the frequency of the smallest element in the array?",
            "We need to count the frequency of each number in the array.",
            "Use a hashmap to store the frequencies of the elements in the array."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumArrayLength(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumArrayLength(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumArrayLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumArrayLength(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumArrayLength(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumArrayLength(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumArrayLength = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumArrayLength(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumArrayLength($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumArrayLength(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumArrayLength(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumArrayLength(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumArrayLength(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_array_length(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumArrayLength(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_array_length(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-array-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_array_length(Nums :: [integer()]) -> integer().\nminimum_array_length(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_array_length(nums :: [integer]) :: integer\n  def minimum_array_length(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> containing <strong>positive</strong> integers.</p>\n\n<p>Your task is to <strong>minimize</strong> the length of <code>nums</code> by performing the following operations <strong>any</strong> number of times (including zero):</p>\n\n<ul>\n\t<li>Select <strong>two</strong> <strong>distinct</strong> indices <code>i</code> and <code>j</code> from <code>nums</code>, such that <code>nums[i] &gt; 0</code> and <code>nums[j] &gt; 0</code>.</li>\n\t<li>Insert the result of <code>nums[i] % nums[j]</code> at the end of <code>nums</code>.</li>\n\t<li>Delete the elements at indices <code>i</code> and <code>j</code> from <code>nums</code>.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>minimum</strong> <strong>length</strong> of </em><code>nums</code><em> after performing the operation any number of times.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,3,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> One way to minimize the length of the array is as follows:\nOperation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.\nnums becomes [1,1,3].\nOperation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [1,1,3,1], then delete elements at indices 1 and 2.\nnums becomes [1,1].\nOperation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [1,1,0], then delete elements at indices 1 and 0.\nnums becomes [0].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length. </pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,5,10,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One way to minimize the length of the array is as follows:\nOperation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.\nnums becomes [5,5,5,5]. \nOperation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3. \nnums becomes [5,5,0]. \nOperation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end and it becomes [5,5,0,0], then delete elements at indices 0 and 1.\nnums becomes [0,0].\nThe length of nums cannot be reduced further. Hence, the answer is 2.\nIt can be shown that 2 is the minimum achievable length. </pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> One way to minimize the length of the array is as follows: \nOperation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [2,3,4,3], then delete elements at indices 1 and 2.\nnums becomes [2,3].\nOperation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [2,3,1], then delete elements at indices 1 and 0.\nnums becomes [1].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,4,3,1]\n[5,5,5,10,5]\n[2,3,4]",
        "formTitle": "[3012]Minimize Length of Array Using Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3012",
        "hints": [
            "The problem can be solved by considering different cases.",
            "Let the minimum value in <code>nums</code> be <code>x</code>; we can consider the following cases:",
            "If <code>x</code> occurs once: The minimum length of <code>nums</code> achievable in this case is <code>1</code>, since every other value, <code>y</code>, can be paired with <code>x</code>, resulting in deleting <code>x</code> and <code>y</code>, and inserting <code>x % y == x</code>, since <code>x < y</code>. So, only <code>x</code> remains after the operations.",
            "If there is a value <code>y</code> in <code>nums</code> such that <code>y % x</code> is not equal to <code>0</code>: The minimum achievable length in this case is <code>1</code> as well, because inserting <code>y % x</code> creates a new minimum, since <code>y % x < x</code>, returning to the first case.",
            "If neither of the previous cases holds, and <code>x</code> occurs <code>cnt</code> times: The minimum length of <code>nums</code> achievable in this case is <code>ceil(cnt / 2)</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumArrayLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3244",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,4,3,1]",
        "title": "Minimize Length of Array Using Operations",
        "titleSlug": "minimize-length-of-array-using-operations",
        "infer_hints": [
            "You can use a queue to store the elements in increasing order.",
            "We need to find the smallest possible sum of any two numbers.",
            "Sort the array and use a priority queue.",
            "Use a heap to store all the numbers in increasing order.",
            "You can do this in O(n log n) time complexity.",
            "You can use a priority queue (heap) to store the array elements.",
            "Can you apply Dynamic Programming to solve this problem?",
            "Think of the mod operation as the division operation.  (Or rather, think of it as division that rounds down.)",
            "Think of a state dp[i][j] which denotes the smallest possible length of the array when the last element is the modulo of the two elements in the array.",
            "Try to find a greedy approach.",
            "What if we sort the array?",
            "The problem is reduced to a graph problem where each node represents a state of the array and there is an edge between two nodes if we can get from the first to the second state by performing an operation.",
            "Think about how you can minimize the length of the array by performing operations.",
            "The array should be sorted in non-increasing order of their values.",
            "Sort the array in ascending order.",
            "For every number n, we can generate n % i (0 <= i <= n).",
            "Use sorting and two pointers.",
            "If a % b = 0, then we can just delete a and b.",
            "We can use a heap to store all the numbers greater than zero.",
            "Can we use sorting or a priority queue to solve this problem?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> beautifulIndices(string s, string a, string b, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def beautifulIndices(self, s, a, b, k):\n        \"\"\"\n        :type s: str\n        :type a: str\n        :type b: str\n        :type k: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* beautifulIndices(char* s, char* a, char* b, int k, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public IList<int> BeautifulIndices(string s, string a, string b, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {string} a\n * @param {string} b\n * @param {number} k\n * @return {number[]}\n */\nvar beautifulIndices = function(s, a, b, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function beautifulIndices(s: string, a: string, b: string, k: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $a\n     * @param String $b\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function beautifulIndices($s, $a, $b, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func beautifulIndices(_ s: String, _ a: String, _ b: String, _ k: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun beautifulIndices(s: String, a: String, b: String, k: Int): List<Int> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> beautifulIndices(String s, String a, String b, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func beautifulIndices(s string, a string, b string, k int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {String} a\n# @param {String} b\n# @param {Integer} k\n# @return {Integer[]}\ndef beautiful_indices(s, a, b, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def beautifulIndices(s: String, a: String, b: String, k: Int): List[Int] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn beautiful_indices(s: String, a: String, b: String, k: i32) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (beautiful-indices s a b k)\n  (-> string? string? string? exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec beautiful_indices(S :: unicode:unicode_binary(), A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), K :: integer()) -> [integer()].\nbeautiful_indices(S, A, B, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec beautiful_indices(s :: String.t, a :: String.t, b :: String.t, k :: integer) :: [integer]\n  def beautiful_indices(s, a, b, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code>, a string <code>a</code>, a string <code>b</code>, and an integer <code>k</code>.</p>\n\n<p>An index <code>i</code> is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt;= s.length - a.length</code></li>\n\t<li><code>s[i..(i + a.length - 1)] == a</code></li>\n\t<li>There exists an index <code>j</code> such that:\n\t<ul>\n\t\t<li><code>0 &lt;= j &lt;= s.length - b.length</code></li>\n\t\t<li><code>s[j..(j + b.length - 1)] == b</code></li>\n\t\t<li><code>|j - i| &lt;= k</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the array that contains beautiful indices in <strong>sorted order from smallest to largest</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;isawsquirrelnearmysquirrelhouseohmy&quot;, a = &quot;my&quot;, b = &quot;squirrel&quot;, k = 15\n<strong>Output:</strong> [16,33]\n<strong>Explanation:</strong> There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == &quot;my&quot; and there exists an index 4 with s[4..11] == &quot;squirrel&quot; and |16 - 4| &lt;= 15.\n- The index 33 is beautiful as s[33..34] == &quot;my&quot; and there exists an index 18 with s[18..25] == &quot;squirrel&quot; and |33 - 18| &lt;= 15.\nThus we return [16,33] as the result.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, a = &quot;a&quot;, b = &quot;a&quot;, k = 4\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == &quot;a&quot; and there exists an index 0 with s[0..0] == &quot;a&quot; and |0 - 0| &lt;= 4.\nThus we return [0] as the result.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10</code></li>\n\t<li><code>s</code>, <code>a</code>, and <code>b</code> contain only lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15\n\"abcd\"\n\"a\"\n\"a\"\n4",
        "formTitle": "[3006]Find Beautiful Indices in the Given Array I",
        "frequency": 0.0,
        "frontendQuestionId": "3006",
        "hints": [
            "For each <code>i</code>, you can iterate over all <code>j</code>s and determine if <code>i</code> is beautiful or not."
        ],
        "level": 2,
        "metaData": {
            "name": "beautifulIndices",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "a",
                    "type": "string"
                },
                {
                    "name": "b",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3245",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
        "title": "Find Beautiful Indices in the Given Array I",
        "titleSlug": "find-beautiful-indices-in-the-given-array-i",
        "infer_hints": [
            "How many different substrings of s are there that equal a and b?",
            "You can use a sliding window to check every substring of s from index i to i + a.length() - 1 if it is equal to a.",
            "We can use the prefix sum array and the sliding window technique to solve this problem.",
            "We can use a sliding window to check for all positions if they are beautiful.",
            "We can use two pointers to find all the indices i that satisfy s[i..(i + a.length - 1)] == a.",
            "Use sliding window for the array.",
            "You can use the prefix sums and the sliding window technique to solve this problem.",
            "Keep track of all positions where string a occurs in s.  We can use a sliding window of size equal to the length of a to find all such positions.",
            "Use two pointers to keep track of the indices of a and b.",
            "Use the sliding window technique.",
            "We can use sliding window to find the first index where it is possible to get a beautiful index.",
            "Find all the indices of a in s and b in s.",
            "You can use a sliding window with size k to check if there exists an index j with |j - i| &lt;= k.",
            "Create an array of the same length as s, where each position i contains the smallest index j where s[j..(j + a.length - 1)] == a and -1 if no such index exists.",
            "Use the two pointers approach.  How can you update the pointers when you found a match?",
            "Find all indices in the given string where a string a occurs.  Try to find all indices in the string where a string b occurs.",
            "Use sliding window to find all possible positions of a and b.",
            "You can use a brute force approach to solve this problem.  There are two nested loops.  One loop checks all possible starting indices for substring a, and the other loop checks all possible starting indices for substring b.",
            "Create a list of indices where string a appears in s. Similarly, create a list of indices where string b appears in s.",
            "Can you use sliding window to solve this problem?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int areaOfMaxDiagonal(vector<vector<int>>& dimensions) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int areaOfMaxDiagonal(int[][] dimensions) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def areaOfMaxDiagonal(self, dimensions):\n        \"\"\"\n        :type dimensions: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int areaOfMaxDiagonal(int** dimensions, int dimensionsSize, int* dimensionsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int AreaOfMaxDiagonal(int[][] dimensions) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} dimensions\n * @return {number}\n */\nvar areaOfMaxDiagonal = function(dimensions) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function areaOfMaxDiagonal(dimensions: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $dimensions\n     * @return Integer\n     */\n    function areaOfMaxDiagonal($dimensions) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func areaOfMaxDiagonal(_ dimensions: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun areaOfMaxDiagonal(dimensions: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int areaOfMaxDiagonal(List<List<int>> dimensions) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func areaOfMaxDiagonal(dimensions [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} dimensions\n# @return {Integer}\ndef area_of_max_diagonal(dimensions)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def areaOfMaxDiagonal(dimensions: Array[Array[Int]]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn area_of_max_diagonal(dimensions: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (area-of-max-diagonal dimensions)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec area_of_max_diagonal(Dimensions :: [[integer()]]) -> integer().\narea_of_max_diagonal(Dimensions) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec area_of_max_diagonal(dimensions :: [[integer]]) :: integer\n  def area_of_max_diagonal(dimensions) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D <strong>0-indexed </strong>integer array <code>dimensions</code>.</p>\n\n<p>For all indices <code>i</code>, <code>0 &lt;= i &lt; dimensions.length</code>, <code>dimensions[i][0]</code> represents the length and <code>dimensions[i][1]</code> represents the width of the rectangle<span style=\"font-size: 13.3333px;\"> <code>i</code></span>.</p>\n\n<p>Return <em>the <strong>area</strong> of the rectangle having the <strong>longest</strong> diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the <strong>maximum</strong> area.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dimensions = [[9,3],[8,6]]\n<strong>Output:</strong> 48\n<strong>Explanation:</strong> \nFor index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) &asymp;<!-- notionvc: 882cf44c-3b17-428e-9c65-9940810216f1 --> 9.487.\nFor index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dimensions = [[3,4],[4,3]]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> Length of diagonal is the same for both which is 5, so maximum area = 12.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= dimensions.length &lt;= 100</code></li>\n\t<li><code><font face=\"monospace\">dimensions[i].length == 2</font></code></li>\n\t<li><code><font face=\"monospace\">1 &lt;= dimensions[i][0], dimensions[i][1] &lt;= 100</font></code></li>\n</ul>\n",
        "exampleTestcases": "[[9,3],[8,6]]\n[[3,4],[4,3]]",
        "formTitle": "[3000]Maximum Area of Longest Diagonal Rectangle",
        "frequency": 0.0,
        "frontendQuestionId": "3000",
        "hints": [
            "Diagonal of rectangle is <code>sqrt(length<sup>2</sup> + width<sup>2</sup>)</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "areaOfMaxDiagonal",
            "params": [
                {
                    "name": "dimensions",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3251",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[9,3],[8,6]]",
        "title": "Maximum Area of Longest Diagonal Rectangle",
        "titleSlug": "maximum-area-of-longest-diagonal-rectangle",
        "infer_hints": [
            "For each rectangle, we can calculate the diagonal length.",
            "If we sort the array by the ratio of the length and width, what does that give us?",
            "Use sorting to find the longest diagonal.",
            "For each rectangle, we want to maximize the diagonal length.",
            "Use the fact that the longest diagonal rectangle is the one with maximum width.",
            "If we order the dimensions by their diagonal length, what would be the maximum area?",
            "The diagonal of a rectangle can be described by the formula d = sqrt(x1 * x2 + y1 * y2).",
            "Sort the dimensions by the area of the rectangle.",
            "We can sort the array in decreasing order of the square of the lengths of the diagonals.",
            "The diagonal of a rectangle is the line that goes from one corner to the opposite corner.",
            "We can use a priority queue to keep track of the rectangles with the largest diagonal length.",
            "We can calculate the diagonal for each rectangle and sort them in descending order.",
            "The diagonal of a rectangle is the line that goes from one corner to the opposite corner.",
            "We need to keep track of the smallest area for each diagonal length.",
            "For each pair of opposite corners, compute the area of the rectangle and the diagonal.",
            "How to find the longest diagonal of a rectangle?",
            "The diagonal of a rectangle is the line that goes from one corner to the opposite corner.",
            "Can you find a way to sort the diagonals in ascending order?",
            "We need to find the longest diagonal line.",
            "Try all possible pairs of points, check if they form a rectangle."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minimumCost(vector<int>& nums, int k, int dist) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumCost(self, nums, k, dist):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type dist: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumCost(self, nums: List[int], k: int, dist: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minimumCost(int* nums, int numsSize, int k, int dist) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinimumCost(int[] nums, int k, int dist) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} dist\n * @return {number}\n */\nvar minimumCost = function(nums, k, dist) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumCost(nums: number[], k: number, dist: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $dist\n     * @return Integer\n     */\n    function minimumCost($nums, $k, $dist) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumCost(_ nums: [Int], _ k: Int, _ dist: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumCost(nums: IntArray, k: Int, dist: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumCost(List<int> nums, int k, int dist) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumCost(nums []int, k int, dist int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} dist\n# @return {Integer}\ndef minimum_cost(nums, k, dist)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumCost(nums: Array[Int], k: Int, dist: Int): Long = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_cost(nums: Vec<i32>, k: i32, dist: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-cost nums k dist)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_cost(Nums :: [integer()], K :: integer(), Dist :: integer()) -> integer().\nminimum_cost(Nums, K, Dist) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer], k :: integer, dist :: integer) :: integer\n  def minimum_cost(nums, k, dist) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>, and two <strong>positive</strong> integers <code>k</code> and <code>dist</code>.</p>\n\n<p>The <strong>cost</strong> of an array is the value of its <strong>first</strong> element. For example, the cost of <code>[1,2,3]</code> is <code>1</code> while the cost of <code>[3,4,1]</code> is <code>3</code>.</p>\n\n<p>You need to divide <code>nums</code> into <code>k</code> <strong>disjoint contiguous </strong><span data-keyword=\"subarray-nonempty\">subarrays</span>, such that the difference between the starting index of the <strong>second</strong> subarray and the starting index of the <code>kth</code> subarray should be <strong>less than or equal to</strong> <code>dist</code>. In other words, if you divide <code>nums</code> into the subarrays <code>nums[0..(i<sub>1</sub> - 1)], nums[i<sub>1</sub>..(i<sub>2</sub> - 1)], ..., nums[i<sub>k-1</sub>..(n - 1)]</code>, then <code>i<sub>k-1</sub> - i<sub>1</sub> &lt;= dist</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible sum of the cost of these</em> <em>subarrays</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,6,4,2], k = 3, dist = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,1,2,2,2,1], k = 4, dist = 3\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between i<sub>k-1</sub> and i<sub>1</sub> is 5 - 1 = 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,8,18,9], k = 3, dist = 1\n<strong>Output:</strong> 36\n<strong>Explanation:</strong> The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between i<sub>k-1</sub> and i<sub>1</sub> is 3 - 1 = 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>3 &lt;= k &lt;= n</code></li>\n\t<li><code>k - 2 &lt;= dist &lt;= n - 2</code></li>\n</ul>\n",
        "exampleTestcases": "[1,3,2,6,4,2]\n3\n3\n[10,1,2,2,2,1]\n4\n3\n[10,8,18,9]\n3\n1",
        "formTitle": "[3013]Divide an Array Into Subarrays With Minimum Cost II",
        "frequency": 0.0,
        "frontendQuestionId": "3013",
        "hints": [
            "For each <code>i > 0</code>, try each <code>nums[i]</code> as the first element of the second subarray. We need to find the sum of <code>k - 2</code> smallest values in the index range <code>[i + 1, min(i + dist, n - 1)]</code>.",
            "Typically, we use a max heap to maintain the top <code>k - 2</code> smallest values dynamically. Here we also have a sliding window, which is the index range <code>[i + 1, min(i + dist, n - 1)]</code>. We can use another min heap to put unselected values for future use.",
            "Update the two heaps when iteration over <code>i</code>. Ordered/Tree sets are also a good choice since we have to delete elements.",
            "If the max heap’s size is less than <code>k - 2</code>, use the min heap’s value to fill it. If the maximum value in the max heap is larger than the smallest value in the min heap, swap them in the two heaps."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumCost",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                },
                {
                    "name": "dist",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3260",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,3,2,6,4,2]\n3\n3",
        "title": "Divide an Array Into Subarrays With Minimum Cost II",
        "titleSlug": "divide-an-array-into-subarrays-with-minimum-cost-ii",
        "infer_hints": [
            "Think about the case when you only need to find the minimum possible sum of the cost of these subarrays.",
            "Do you think you can do it in O(n) time complexity?  (Here, n is the length of the array.)",
            "Use binary search to find the minimum possible cost.",
            "Can you use dynamic programming to solve this problem?",
            "You can use Dynamic Programming (DP) to solve this problem.",
            "If we divide the array into k subarrays, then the cost of the i-th subarray is nums[i].",
            "Use dynamic programming.",
            "Can you optimize your solution using dynamic programming?",
            "Think about a way to split the array into contiguous subarrays.",
            "The total cost of the subarrays is the sum of the elements of the subarrays.",
            "The idea is to use binary search to find the answer.",
            "Think about the problem in a DP way.",
            "What is the maximum possible sum of the cost of these subarrays?",
            "The idea is to always select the minimum number from the current window of size 'dist'.",
            "We can use dynamic programming to solve this problem.",
            "The minimum possible sum is 0.  What if we try all possible sums?",
            "We can divide the array into subarrays such that the difference between the starting index of the second subarray and the starting index of the kth subarray is less than or equal to dist.",
            "Use a sliding window to find the best starting point for each subarray.",
            "Let's assume that we are given two positions i and j (i < j) and we need to decide whether we can place the j-th group of elements starting at position j.",
            "We can use Dynamic Programming (DP) to solve this problem.  You can think of this problem as a variant of the Knapsack problem."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOrAfterOperations(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOrAfterOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOrAfterOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOrAfterOperations(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOrAfterOperations(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOrAfterOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOrAfterOperations = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOrAfterOperations(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOrAfterOperations($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOrAfterOperations(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOrAfterOperations(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOrAfterOperations(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOrAfterOperations(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_or_after_operations(nums, k)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOrAfterOperations(nums: Array[Int], k: Int): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_or_after_operations(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-or-after-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_or_after_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_or_after_operations(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_or_after_operations(nums :: [integer], k :: integer) :: integer\n  def min_or_after_operations(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>k</code>.</p>\n\n<p>In one operation, you can pick any index <code>i</code> of <code>nums</code> such that <code>0 &lt;= i &lt; nums.length - 1</code> and replace <code>nums[i]</code> and <code>nums[i + 1]</code> with a single occurrence of <code>nums[i] &amp; nums[i + 1]</code>, where <code>&amp;</code> represents the bitwise <code>AND</code> operator.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible value of the bitwise </em><code>OR</code><em> of the remaining elements of</em> <code>nums</code> <em>after applying <strong>at most</strong></em> <code>k</code> <em>operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,5,3,2,7], k = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Let&#39;s do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] &amp; nums[1]) so that nums becomes equal to [1,3,2,7].\n2. Replace nums[2] and nums[3] with (nums[2] &amp; nums[3]) so that nums becomes equal to [1,3,2].\nThe bitwise-or of the final array is 3.\nIt can be shown that 3 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,3,15,14,2,8], k = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Let&#39;s do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] &amp; nums[1]) so that nums becomes equal to [3,15,14,2,8]. \n2. Replace nums[0] and nums[1] with (nums[0] &amp; nums[1]) so that nums becomes equal to [3,14,2,8].\n3. Replace nums[0] and nums[1] with (nums[0] &amp; nums[1]) so that nums becomes equal to [2,2,8].\n4. Replace nums[1] and nums[2] with (nums[1] &amp; nums[2]) so that nums becomes equal to [2,0].\nThe bitwise-or of the final array is 2.\nIt can be shown that 2 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,7,10,3,9,14,9,4], k = 1\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> Without applying any operations, the bitwise-or of nums is 15.\nIt can be shown that 15 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt; 2<sup>30</sup></code></li>\n\t<li><code>0 &lt;= k &lt; nums.length</code></li>\n</ul>\n",
        "exampleTestcases": "[3,5,3,2,7]\n2\n[7,3,15,14,2,8]\n4\n[10,7,10,3,9,14,9,4]\n1",
        "formTitle": "[3022]Minimize OR of Remaining Elements Using Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3022",
        "hints": [
            "From the most significant bit to the least significant bit, maintain the bits that will not be included in the final answer in a variable <code>mask</code>.",
            "For a fixed bit, add it to <code>mask</code> then check if there exists some sequence of <code>k</code> operations such that <code>mask & answer == 0 </code> where <code>answer</code> is the bitwise-or of the remaining elements of <code>nums</code>. If there is no such sequence of operations, remove the current bit from <code>mask</code>. How can we perform this check?",
            "Let <code>x</code> be the bitwise-and of all elements of <code>nums</code>. If <code>x AND mask != 0</code>, there is no sequence of operations that satisfies the condition in the previous hint. This is because even if we perform this operation <code>n - 1</code> times on the array, we will end up with <code>x</code> as the final element.",
            "Otherwise, there exists at least one such sequence. It is sufficient to check if the number of operations in such a sequence is less than <code>k</code>. Let’s calculate the minimum number of operations in such a sequence.",
            "Iterate over the array from left to right, if <code>nums[i] & mask != 0</code>, apply the operation on index <code>i</code>.",
            "After iterating over all elements, let <code>x</code> be the bitwise-and of all elements of <code>nums</code>. If <code>x == 0</code>, then we have found the minimum number of operations. Otherwise, It can be proven that we need exactly one more operation so that <code>x == 0</code>.",
            "The condition in the second hint is satisfied if and only if the minimum number of operations is less than or equal to <code>k</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "minOrAfterOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3261",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,5,3,2,7]\n2",
        "title": "Minimize OR of Remaining Elements Using Operations",
        "titleSlug": "minimize-or-of-remaining-elements-using-operations",
        "infer_hints": [
            "The operations can be applied greedily.",
            "You can use bitwise operations to solve this problem.",
            "Think of the problem in a bottom-up manner.",
            "For each number x, consider all the numbers that can be formed by applying the bitwise-AND operation to x and nums[i] where i!= j.",
            "For each bit from 0 to 30, calculate the minimum OR we can get by using bit operation.",
            "Try to find a pattern and use dynamic programming.",
            "Can we perform bitwise operations in a way that minimizes the bitwise OR of the remaining elements?",
            "Can we use a bitmask to solve this?",
            "Consider each operation as a sequence of ANDs and ORs.",
            "Try all possible combinations of AND operations.",
            "Can we use the binary search approach to solve this?",
            "For each bit from 0 to 30, find the index of the smallest element in nums that has this bit set.",
            "You can maintain the minimum element in the array.",
            "Do a dynamic programming.",
            "You can apply the operation in a way that you can choose any two numbers and replace them with their bitwise AND.",
            "Consider the binary representation of the numbers.",
            "What is the maximum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations?",
            "How many operations do you need to make the element 0?",
            "The minimum possible OR is obtained when all the elements are 0. Can you think of a way to turn all elements to 0 using bitwise AND operations?",
            "The operation can be performed on every pair of elements.  How many operations are needed to convert all elements in the array to 0?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumCost(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumCost(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumCost(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumCost(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumCost(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumCost(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumCost = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumCost(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumCost($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumCost(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumCost(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumCost(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumCost(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_cost(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumCost(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_cost(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-cost nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_cost(Nums :: [integer()]) -> integer().\nminimum_cost(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer]) :: integer\n  def minimum_cost(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of integers <code>nums</code> of length <code>n</code>.</p>\n\n<p>The <strong>cost</strong> of an array is the value of its <strong>first</strong> element. For example, the cost of <code>[1,2,3]</code> is <code>1</code> while the cost of <code>[3,4,1]</code> is <code>3</code>.</p>\n\n<p>You need to divide <code>nums</code> into <code>3</code> <strong>disjoint contiguous </strong><span data-keyword=\"subarray-nonempty\">subarrays</span>.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible <strong>sum</strong> of the cost of these subarrays</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,12]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 = 6.\nThe other possible ways to form 3 subarrays are:\n- [1], [2,3], and [12] at a total cost of 1 + 2 + 12 = 15.\n- [1,2], [3], and [12] at a total cost of 1 + 3 + 12 = 16.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,3]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The best possible way to form 3 subarrays is: [5], [4], and [3] at a total cost of 5 + 4 + 3 = 12.\nIt can be shown that 12 is the minimum cost achievable.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,3,1,1]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The best possible way to form 3 subarrays is: [10,3], [1], and [1] at a total cost of 10 + 1 + 1 = 12.\nIt can be shown that 12 is the minimum cost achievable.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,12]\n[5,4,3]\n[10,3,1,1]",
        "formTitle": "[3010]Divide an Array Into Subarrays With Minimum Cost I",
        "frequency": 0.0,
        "frontendQuestionId": "3010",
        "hints": [],
        "level": 1,
        "metaData": {
            "name": "minimumCost",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3263",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,12]",
        "title": "Divide an Array Into Subarrays With Minimum Cost I",
        "titleSlug": "divide-an-array-into-subarrays-with-minimum-cost-i",
        "infer_hints": [
            "Can we use dynamic programming?",
            "Use a dynamic programming approach.",
            "Consider using dynamic programming.",
            "Use dynamic programming to find the minimum cost to divide the array into k parts.",
            "If we divide the array into three parts, what is the maximum possible cost?",
            "How can you split the array into 3 parts with minimum cost?",
            "Use a dynamic programming approach.  You can use the idea of the previous problem to compute the cost of splitting the array into two parts.",
            "If you want to partition the array into three parts, how would the cost change if you partitioned it into two parts?",
            "Use dynamic programming.",
            "Use dynamic programming to keep track of the minimum sum of the costs for the three partitions.",
            "Can you find a way to partition the array into three subarrays such that the total cost is minimized?",
            "What if you divide the array into 3 subarrays at the first index?",
            "Consider the first subarray and find the best way to divide the rest of the array.",
            "How many subarrays of length 1, 2, 3,..., n can you find?",
            "Try to divide the array into three parts, where the first part has the minimum cost.",
            "Use dynamic programming to solve the problem.",
            "Use dynamic programming to store the minimum sum of the cost of the subarrays up to the current index.",
            "How many subarrays are there in the array?",
            "We can use a dynamic programming approach to solve this problem.",
            "We can use a prefix sum array to solve this problem."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumSubarraySum(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumSubarraySum(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumSubarraySum(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumSubarraySum(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumSubarraySum = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumSubarraySum(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumSubarraySum($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumSubarraySum(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumSubarraySum(nums: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumSubarraySum(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumSubarraySum(nums []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_subarray_sum(nums, k)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumSubarraySum(nums: Array[Int], k: Int): Long = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_subarray_sum(nums: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-subarray-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_subarray_sum(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_subarray_sum(nums :: [integer], k :: integer) :: integer\n  def maximum_subarray_sum(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> of length <code>n</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>A <span data-keyword=\"subarray-nonempty\">subarray</span> of <code>nums</code> is called <strong>good</strong> if the <strong>absolute difference</strong> between its first and last element is <strong>exactly</strong> <code>k</code>, in other words, the subarray <code>nums[i..j]</code> is good if <code>|nums[i] - nums[j]| == k</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> sum of a <strong>good</strong> subarray of </em><code>nums</code>. <em>If there are no good subarrays</em><em>, return </em><code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], k = 1\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The absolute difference between the first and last element<!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --> must be 1 for a good subarray. All the good subarrays are: [1,2], [2,3], [3,4], [4,5], and [5,6]. The maximum subarray sum is 11 for the subarray [5,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,3,2,4,5], k = 3\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The absolute difference between the first and last element<!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --> must be 3 for a good subarray. All the good subarrays are: [-1,3,2], and [2,4,5]. The maximum subarray sum is 11 for the subarray [2,4,5].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3,-4], k = 2\n<strong>Output:</strong> -6\n<strong>Explanation:</strong> The absolute difference between the first and last element<!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --> must be 2 for a good subarray. All the good subarrays are: [-1,-2,-3], and [-2,-3,-4]. The maximum subarray sum is -6 for the subarray [-1,-2,-3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4,5,6]\n1\n[-1,3,2,4,5]\n3\n[-1,-2,-3,-4]\n2",
        "formTitle": "[3026]Maximum Good Subarray Sum",
        "frequency": 0.0,
        "frontendQuestionId": "3026",
        "hints": [
            "Save all the prefix sums into a HashMap.",
            "For the index <code>i</code> store the element at index <code>i + 1</code> as the key and the prefix sum till <code>i</code> as the value.",
            "For each prefix sum ending at <code>nums[i]</code>, try finding <code>nums[i] - k</code> and <code>nums[i] + k</code> in the HashMap and update the answer."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumSubarraySum",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3265",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,4,5,6]\n1",
        "title": "Maximum Good Subarray Sum",
        "titleSlug": "maximum-good-subarray-sum",
        "infer_hints": [
            "Consider using a prefix sum array.",
            "The subarray is good if its sum is positive.  How can we get the sum of a good subarray?",
            "Use dynamic programming to solve this problem.",
            "Use a sliding window approach.",
            "What if we find the maximum subarray sum with a certain difference?",
            "The prefix sum array will give us the sum of the subarray from index 0 to i.",
            "How can you find the maximum sum of a subarray that ends at a certain index?",
            "Use a sliding window with a monotonic queue to keep track of the maximum sum of a good subarray ending at the current position.",
            "You can solve this problem using a dynamic programming approach.",
            "Do a sliding window with a monotonic queue.",
            "What if we use a hash map to store the maximum subarray sum ending at each index?",
            "Do a sliding window over the array and keep track of the maximum sum of good subarrays that end at the current position.",
            "Think of the subarray as an array where the difference between the first and last elements is at most k.",
            "Can we solve this problem with dynamic programming?",
            "Try all subarrays of nums and check if they are good.",
            "Use a sliding window approach.",
            "The answer can be calculated by dynamic programming.",
            "Think about how you can use dynamic programming to solve this problem.",
            "Try all possible subarrays.",
            "For each prefix sum, store the maximum subarray sum that ends at this prefix sum."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countMatchingSubarrays(vector<int>& nums, vector<int>& pattern) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countMatchingSubarrays(self, nums, pattern):\n        \"\"\"\n        :type nums: List[int]\n        :type pattern: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countMatchingSubarrays(self, nums: List[int], pattern: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countMatchingSubarrays(int* nums, int numsSize, int* pattern, int patternSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} pattern\n * @return {number}\n */\nvar countMatchingSubarrays = function(nums, pattern) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countMatchingSubarrays(nums: number[], pattern: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $pattern\n     * @return Integer\n     */\n    function countMatchingSubarrays($nums, $pattern) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countMatchingSubarrays(_ nums: [Int], _ pattern: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countMatchingSubarrays(nums: IntArray, pattern: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countMatchingSubarrays(List<int> nums, List<int> pattern) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countMatchingSubarrays(nums []int, pattern []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} pattern\n# @return {Integer}\ndef count_matching_subarrays(nums, pattern)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countMatchingSubarrays(nums: Array[Int], pattern: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_matching_subarrays(nums: Vec<i32>, pattern: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-matching-subarrays nums pattern)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_matching_subarrays(Nums :: [integer()], Pattern :: [integer()]) -> integer().\ncount_matching_subarrays(Nums, Pattern) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_matching_subarrays(nums :: [integer], pattern :: [integer]) :: integer\n  def count_matching_subarrays(nums, pattern) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code>, and a <strong>0-indexed</strong> integer array <code>pattern</code> of size <code>m</code> consisting of integers <code>-1</code>, <code>0</code>, and <code>1</code>.</p>\n\n<p>A <span data-keyword=\"subarray\">subarray</span> <code>nums[i..j]</code> of size <code>m + 1</code> is said to match the <code>pattern</code> if the following conditions hold for each element <code>pattern[k]</code>:</p>\n\n<ul>\n\t<li><code>nums[i + k + 1] &gt; nums[i + k]</code> if <code>pattern[k] == 1</code>.</li>\n\t<li><code>nums[i + k + 1] == nums[i + k]</code> if <code>pattern[k] == 0</code>.</li>\n\t<li><code>nums[i + k + 1] &lt; nums[i + k]</code> if <code>pattern[k] == -1</code>.</li>\n</ul>\n\n<p>Return <em>the<strong> count</strong> of subarrays in</em> <code>nums</code> <em>that match the</em> <code>pattern</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], pattern = [1,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == pattern.length &lt; n</code></li>\n\t<li><code>-1 &lt;= pattern[i] &lt;= 1</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4,5,6]\n[1,1]\n[1,4,4,1,3,5,5,3]\n[1,0,-1]",
        "formTitle": "[3034]Number of Subarrays That Match a Pattern I",
        "frequency": 0.0,
        "frontendQuestionId": "3034",
        "hints": [
            "Iterate over all indices <code>i</code> then, using a second loop, check if the subarray starting at index <code>i</code> matches the pattern."
        ],
        "level": 2,
        "metaData": {
            "name": "countMatchingSubarrays",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "pattern",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3269",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,4,5,6]\n[1,1]",
        "title": "Number of Subarrays That Match a Pattern I",
        "titleSlug": "number-of-subarrays-that-match-a-pattern-i",
        "infer_hints": [
            "What are the possible outcomes for a[i] < a[i+1]?",
            "How can we find all the subarrays that match the pattern?",
            "How can we efficiently calculate the number of subarrays with a certain condition?",
            "Try to match each subarray with the pattern and count how many subarrays match.",
            "This problem is similar to \"Find All Anagrams in a String\".",
            "You can use a stack to keep track of the previous smaller number in the array.",
            "How many subarrays can we choose to make all elements equal to nums[i]?",
            "Try to solve the problem by counting the number of subarrays that match the pattern.",
            "For each position in the array, we need to know how many subarrays we can create that end at that position.",
            "If you are trying to find all subarrays that match the pattern, you can use a sliding window.",
            "Can we solve this using prefix sums and binary search?",
            "How can we convert the pattern into an array of comparisons?",
            "How many subarrays of nums have length m + 1?",
            "How can you maintain the number of subarrays that match the pattern?",
            "Create an array of size n + 1, where each element is the difference of two consecutive elements in the array.",
            "You can use a stack to find the next greater number.",
            "How can we use a sliding window to solve this problem?",
            "How many subarrays can we get?  How many subarrays of size 2 can we get?  How many subarrays of size 3 can we get?",
            "Use a stack to keep track of the previous values.",
            "For each position in the array, you want to know the next position in the array where the difference is positive, negative, or zero."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minMovesToCaptureTheQueen(self, a, b, c, d, e, f):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :type d: int\n        :type e: int\n        :type f: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minMovesToCaptureTheQueen(self, a: int, b: int, c: int, d: int, e: int, f: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @param {number} e\n * @param {number} f\n * @return {number}\n */\nvar minMovesToCaptureTheQueen = function(a, b, c, d, e, f) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minMovesToCaptureTheQueen(a: number, b: number, c: number, d: number, e: number, f: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @param Integer $d\n     * @param Integer $e\n     * @param Integer $f\n     * @return Integer\n     */\n    function minMovesToCaptureTheQueen($a, $b, $c, $d, $e, $f) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minMovesToCaptureTheQueen(_ a: Int, _ b: Int, _ c: Int, _ d: Int, _ e: Int, _ f: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minMovesToCaptureTheQueen(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minMovesToCaptureTheQueen(a int, b int, c int, d int, e int, f int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @param {Integer} d\n# @param {Integer} e\n# @param {Integer} f\n# @return {Integer}\ndef min_moves_to_capture_the_queen(a, b, c, d, e, f)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minMovesToCaptureTheQueen(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_moves_to_capture_the_queen(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-moves-to-capture-the-queen a b c d e f)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_moves_to_capture_the_queen(A :: integer(), B :: integer(), C :: integer(), D :: integer(), E :: integer(), F :: integer()) -> integer().\nmin_moves_to_capture_the_queen(A, B, C, D, E, F) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_moves_to_capture_the_queen(a :: integer, b :: integer, c :: integer, d :: integer, e :: integer, f :: integer) :: integer\n  def min_moves_to_capture_the_queen(a, b, c, d, e, f) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is a <strong>1-indexed</strong> <code>8 x 8</code> chessboard containing <code>3</code> pieces.</p>\n\n<p>You are given <code>6</code> integers <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>, and <code>f</code> where:</p>\n\n<ul>\n\t<li><code>(a, b)</code> denotes the position of the white rook.</li>\n\t<li><code>(c, d)</code> denotes the position of the white bishop.</li>\n\t<li><code>(e, f)</code> denotes the position of the black queen.</li>\n</ul>\n\n<p>Given that you can only move the white pieces, return <em>the <strong>minimum</strong> number of moves required to capture the black queen</em>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>Rooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.</li>\n\t<li>Bishops can move any number of squares diagonally, but cannot jump over other pieces.</li>\n\t<li>A rook or a bishop can capture the queen if it is located in a square that they can move to.</li>\n\t<li>The queen does not move.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/ex1.png\" style=\"width: 600px; height: 600px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> a = 1, b = 1, c = 8, d = 8, e = 2, f = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3).\nIt is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/ex2.png\" style=\"width: 600px; height: 600px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> a = 5, b = 3, c = 3, d = 4, e = 5, f = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can capture the black queen in a single move by doing one of the following: \n- Move the white rook to (5, 2).\n- Move the white bishop to (5, 2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a, b, c, d, e, f &lt;= 8</code></li>\n\t<li>No two pieces are on the same square.</li>\n</ul>\n",
        "exampleTestcases": "1\n1\n8\n8\n2\n3\n5\n3\n3\n4\n5\n2",
        "formTitle": "[3001]Minimum Moves to Capture The Queen",
        "frequency": 0.0,
        "frontendQuestionId": "3001",
        "hints": [
            "The minimum number of moves can be either <code>1</code> or <code>2</code>.",
            "The answer will be <code>1</code> if the queen is on the path of the rook or bishop and none of them is in between."
        ],
        "level": 2,
        "metaData": {
            "name": "minMovesToCaptureTheQueen",
            "params": [
                {
                    "name": "a",
                    "type": "integer"
                },
                {
                    "name": "b",
                    "type": "integer"
                },
                {
                    "name": "c",
                    "type": "integer"
                },
                {
                    "name": "d",
                    "type": "integer"
                },
                {
                    "name": "e",
                    "type": "integer"
                },
                {
                    "name": "f",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3270",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "1\n1\n8\n8\n2\n3",
        "title": "Minimum Moves to Capture The Queen",
        "titleSlug": "minimum-moves-to-capture-the-queen",
        "infer_hints": [
            "What if the black queen is on the same row or column as the white rook or bishop?",
            "Try all possible moves.  How many?",
            "Find the number of moves each piece needs to move to the queen.",
            "If the bishop and the rook are in the same row or column, then they can capture the queen in one move.",
            "You can find the distance between the rook and bishop using the Manhattan distance.",
            "We can move the rook or the bishop to any square that the queen can move to.",
            "What if the black queen can be moved to any of the four corners?",
            "Can you move the bishop and rook simultaneously?",
            "Can you find out the difference in the x and y coordinates of the queen and the bishop or rook?",
            "If the white bishop and rook are in the same row or column, then they can attack each other.",
            "What if the white rook is already on the square where the black queen is?",
            "If the white rook and bishop can move to the black queen, then return 0.",
            "Can we move the rook or the bishop to any of the 8 cells around the black queen?",
            "If both the bishop and the rook can reach the black queen, return the minimum number of moves they can take to reach it.",
            "The minimum moves to capture the queen is the maximum of the minimum moves to capture the bishop or the minimum moves to capture the rook.",
            "We can calculate the number of squares the rook and bishop can reach. The total number of squares they can reach is the sum of the number of squares they can reach.",
            "If a bishop and a rook are in the same diagonal, how do you capture the queen?",
            "The rook and bishop can be captured if they are on the same line of sight.",
            "If the white rook and bishop can move to the black queen, then return 0.",
            "Use the distance formula to calculate the distance to the black queen."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> countOfPairs(int n, int x, int y) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countOfPairs(self, n, x, y):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :type y: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countOfPairs(self, n: int, x: int, y: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countOfPairs(int n, int x, int y, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] CountOfPairs(int n, int x, int y) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @return {number[]}\n */\nvar countOfPairs = function(n, x, y) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countOfPairs(n: number, x: number, y: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer[]\n     */\n    function countOfPairs($n, $x, $y) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countOfPairs(_ n: Int, _ x: Int, _ y: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countOfPairs(n: Int, x: Int, y: Int): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> countOfPairs(int n, int x, int y) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countOfPairs(n int, x int, y int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer[]}\ndef count_of_pairs(n, x, y)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countOfPairs(n: Int, x: Int, y: Int): Array[Int] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_of_pairs(n: i32, x: i32, y: i32) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-of-pairs n x y)\n  (-> exact-integer? exact-integer? exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_of_pairs(N :: integer(), X :: integer(), Y :: integer()) -> [integer()].\ncount_of_pairs(N, X, Y) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_of_pairs(n :: integer, x :: integer, y :: integer) :: [integer]\n  def count_of_pairs(n, x, y) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given three <strong>positive</strong> integers <code>n</code>, <code>x</code>, and <code>y</code>.</p>\n\n<p>In a city, there exist houses numbered <code>1</code> to <code>n</code> connected by <code>n</code> streets. There is a street connecting the house numbered <code>i</code> with the house numbered <code>i + 1</code> for all <code>1 &lt;= i &lt;= n - 1</code> . An additional street connects the house numbered <code>x</code> with the house numbered <code>y</code>.</p>\n\n<p>For each <code>k</code>, such that <code>1 &lt;= k &lt;= n</code>, you need to find the number of <strong>pairs of houses</strong> <code>(house<sub>1</sub>, house<sub>2</sub>)</code> such that the <strong>minimum</strong> number of streets that need to be traveled to reach <code>house<sub>2</sub></code> from <code>house<sub>1</sub></code> is <code>k</code>.</p>\n\n<p>Return <em>a <strong>1-indexed</strong> array </em><code>result</code><em> of length </em><code>n</code><em> where </em><code>result[k]</code><em> represents the <strong>total</strong> number of pairs of houses such that the <strong>minimum</strong> streets required to reach one house from the other is </em><code>k</code>.</p>\n\n<p><strong>Note</strong> that <code>x</code> and <code>y</code> can be <strong>equal</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example2.png\" style=\"width: 474px; height: 197px;\" />\n<pre>\n<strong>Input:</strong> n = 3, x = 1, y = 3\n<strong>Output:</strong> [6,0,0]\n<strong>Explanation:</strong> Let&#39;s look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example3.png\" style=\"width: 668px; height: 174px;\" />\n<pre>\n<strong>Input:</strong> n = 5, x = 2, y = 4\n<strong>Output:</strong> [10,8,2,0,0]\n<strong>Explanation:</strong> For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k == 3, the pairs are (1, 5), and (5, 1).\n- For k == 4 and k == 5, there are no pairs.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example5.png\" style=\"width: 544px; height: 130px;\" />\n<pre>\n<strong>Input:</strong> n = 4, x = 1, y = 1\n<strong>Output:</strong> [6,4,2,0]\n<strong>Explanation:</strong> For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k == 3, the pairs are (1, 4), and (4, 1).\n- For k == 4, there are no pairs.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= x, y &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "3\n1\n3\n5\n2\n4\n4\n1\n1",
        "formTitle": "[3015]Count the Number of Houses at a Certain Distance I",
        "frequency": 0.0,
        "frontendQuestionId": "3015",
        "hints": [
            "Start from each house, run a BFS to get all the distances from this house to all the other houses."
        ],
        "level": 2,
        "metaData": {
            "name": "countOfPairs",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "x",
                    "type": "integer"
                },
                {
                    "name": "y",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3271",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "3\n1\n3",
        "title": "Count the Number of Houses at a Certain Distance I",
        "titleSlug": "count-the-number-of-houses-at-a-certain-distance-i",
        "infer_hints": [
            "We can do a depth-first search (DFS) to find the number of houses that can be reached within k steps.",
            "The number of houses at distance 1 is 2.",
            "Consider a graph where each house is a node and there is an edge between two houses if there is a street between them.",
            "The shortest distance between two houses will be either directly between them, or through the X-Y connection.",
            "Can we solve this problem in one pass?",
            "Find the distance between each pair of houses and store it in an array.",
            "Use a breadth-first search (BFS) to count the number of houses that are at a distance of 1, 2, 3,..., n from the house numbered 1.",
            "You can use a BFS with some tweaks to count the number of houses at a certain distance.",
            "The minimum number of streets that need to be traveled to reach one house from another is either the Manhattan distance (distance between the two houses along the grid) or the distance along one axis (distance between the two houses on that axis).",
            "Calculate the distance between all pairs of houses and store the results in a list.",
            "Can you calculate the number of pairs of houses for each possible distance?",
            "Can you solve this problem using dynamic programming?",
            "Use dynamic programming.",
            "If you know the distances between all pairs of houses, you can use dynamic programming to find the answer.",
            "Think about the number of houses at a distance of k.",
            "Think about the possible distances between two houses.",
            "Think about the number of pairs of houses that can be at distance k.",
            "Use the Breadth-First Search (BFS) to find the minimum distance from the houses to the other houses.",
            "Use prefix sum array to get the number of houses at a certain distance.",
            "Can we consider the graph as a tree and calculate the shortest path between two nodes?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<vector<int>> resultGrid(vector<vector<int>>& image, int threshold) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[][] resultGrid(int[][] image, int threshold) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def resultGrid(self, image, threshold):\n        \"\"\"\n        :type image: List[List[int]]\n        :type threshold: int\n        :rtype: List[List[int]]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def resultGrid(self, image: List[List[int]], threshold: int) -> List[List[int]]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** resultGrid(int** image, int imageSize, int* imageColSize, int threshold, int* returnSize, int** returnColumnSizes) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[][] ResultGrid(int[][] image, int threshold) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} image\n * @param {number} threshold\n * @return {number[][]}\n */\nvar resultGrid = function(image, threshold) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function resultGrid(image: number[][], threshold: number): number[][] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $image\n     * @param Integer $threshold\n     * @return Integer[][]\n     */\n    function resultGrid($image, $threshold) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func resultGrid(_ image: [[Int]], _ threshold: Int) -> [[Int]] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun resultGrid(image: Array<IntArray>, threshold: Int): Array<IntArray> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<List<int>> resultGrid(List<List<int>> image, int threshold) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func resultGrid(image [][]int, threshold int) [][]int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} image\n# @param {Integer} threshold\n# @return {Integer[][]}\ndef result_grid(image, threshold)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def resultGrid(image: Array[Array[Int]], threshold: Int): Array[Array[Int]] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn result_grid(image: Vec<Vec<i32>>, threshold: i32) -> Vec<Vec<i32>> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (result-grid image threshold)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof (listof exact-integer?)))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec result_grid(Image :: [[integer()]], Threshold :: integer()) -> [[integer()]].\nresult_grid(Image, Threshold) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec result_grid(image :: [[integer]], threshold :: integer) :: [[integer]]\n  def result_grid(image, threshold) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> grid <code>image</code> which represents a grayscale image, where <code>image[i][j]</code> represents a pixel with intensity in the range<code>[0..255]</code>. You are also given a <strong>non-negative</strong> integer <code>threshold</code>.</p>\n\n<p>Two pixels <code>image[a][b]</code> and <code>image[c][d]</code> are said to be <strong>adjacent</strong> if <code>|a - c| + |b - d| == 1</code>.</p>\n\n<p>A <strong>region</strong> is a <code>3 x 3</code> subgrid where the <strong>absolute difference</strong> in intensity between any two <strong>adjacent</strong> pixels is <strong>less than or equal to</strong> <code>threshold</code>.</p>\n\n<p>All pixels in a <strong>region</strong> belong to that region, note that a pixel <strong>can</strong> belong to <strong>multiple</strong> regions.</p>\n\n<p>You need to calculate a <strong>0-indexed</strong> <code>m x n</code> grid <code>result</code>, where <code>result[i][j]</code> is the <strong>average</strong> intensity of the region to which <code>image[i][j]</code> belongs, <strong>rounded down</strong> to the nearest integer. If <code>image[i][j]</code> belongs to multiple regions, <code>result[i][j]</code> is the <strong>average </strong>of the<strong> rounded down average </strong>intensities of these regions, <strong>rounded down</strong> to the nearest integer. If <code>image[i][j]</code> does<strong> not</strong> belong to any region, <code>result[i][j]</code> is <strong>equal to</strong> <code>image[i][j]</code>.</p>\n\n<p>Return <em>the grid</em> <code>result</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/example0corrected.png\" style=\"width: 832px; height: 275px;\" />\n<pre>\n<strong>Input:</strong> image = [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold = 3\n<strong>Output:</strong> [[9,9,9,9],[9,9,9,9],[9,9,9,9]]\n<strong>Explanation:</strong> There exist two regions in the image, which are shown as the shaded areas in the picture. The average intensity of the first region is 9, while the average intensity of the second region is 9.67 which is rounded down to 9. The average intensity of both of the regions is (9 + 9) / 2 = 9. As all the pixels belong to either region 1, region 2, or both of them, the intensity of every pixel in the result is 9. \nPlease note that the rounded-down values are used when calculating the average of multiple regions, hence the calculation is done using 9 as the average intensity of region 2, not 9.67.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/example1corrected.png\" style=\"width: 805px; height: 377px;\" />\n<pre>\n<strong>Input:</strong> image = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold = 12\n<strong>Output:</strong> [[25,25,25],[27,27,27],[27,27,27],[30,30,30]]\n<strong>Explanation:</strong> There exist two regions in the image, which are shown as the shaded areas in the picture. The average intensity of the first region is 25, while the average intensity of the second region is 30. The average intensity of both of the regions is (25 + 30) / 2 = 27.5 which is rounded down to 27. All the pixels in row 0 of the image belong to region 1, hence all the pixels in row 0 in the result are 25. Similarly, all the pixels in row 3 in the result are 30. The pixels in rows 1 and 2 of the image belong to region 1 and region 2, hence their assigned value is 27 in the result.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> image = [[5,6,7],[8,9,10],[11,12,13]], threshold = 1\n<strong>Output:</strong> [[5,6,7],[8,9,10],[11,12,13]]\n<strong>Explanation:</strong> There does not exist any region in image, hence result[i][j] == image[i][j] for all the pixels.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n, m &lt;= 500</code></li>\n\t<li><code>0 &lt;= image[i][j] &lt;= 255</code></li>\n\t<li><code>0 &lt;= threshold &lt;= 255</code></li>\n</ul>\n",
        "exampleTestcases": "[[5,6,7,10],[8,9,10,10],[11,12,13,10]]\n3\n[[10,20,30],[15,25,35],[20,30,40],[25,35,45]]\n12\n[[5,6,7],[8,9,10],[11,12,13]]\n1",
        "formTitle": "[3030]Find the Grid of Region Average",
        "frequency": 0.0,
        "frontendQuestionId": "3030",
        "hints": [
            "Try all the <code>3 * 3</code> sub-grids to find all the regions.",
            "Keep two 2-D arrays <code>sum</code> and <code>num</code>, for each position <code>(x, y)</code> in a region, increase <code>sum[x][y]</code> by the average sum of the region and increase <code>num[x][y]</code> by <code>1</code>.",
            "For each position (x, y), <code>sum[x][y] / num[x][y]</code> is the answer. Note when <code>num[x][y] == 0</code>, we use the original value in <code>image</code> instead."
        ],
        "level": 2,
        "metaData": {
            "name": "resultGrid",
            "params": [
                {
                    "name": "image",
                    "type": "integer[][]"
                },
                {
                    "name": "threshold",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3272",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[5,6,7,10],[8,9,10,10],[11,12,13,10]]\n3",
        "title": "Find the Grid of Region Average",
        "titleSlug": "find-the-grid-of-region-average",
        "infer_hints": [
            "You can use a depth-first search (DFS) or a breadth-first search (BFS) to calculate the average intensity of a region.",
            "You can use a 4-directional BFS to flood fill all the cells that belong to the same region.",
            "How to calculate the average intensity of a region?",
            "How can you store the average of the intensity of region to which each pixel belongs?",
            "What is the average of a group of numbers?",
            "Can you use depth-first search (DFS) or breadth-first search (BFS) to solve this problem?",
            "You can use DFS or BFS to traverse the grid.",
            "We can solve this problem by iterating over each pixel and for each pixel, we calculate the average intensity of the 3x3 grid around the pixel.",
            "You need to calculate the average intensity of each region and the average intensity of each adjacent region.",
            "Use DFS to find the average intensity of the region.",
            "You can use DFS to traverse the grid and for each cell, you calculate the average intensity of its region.",
            "Find the region for each pixel and calculate the average intensity of each region.",
            "Try to find the average intensity of the region.",
            "We can use depth-first search to find all the pixels that belong to the same region.",
            "How many regions are there?",
            "If a pixel belongs to a region, what are the conditions to be met?",
            "We can solve this problem by using a flood-fill algorithm to calculate the average intensity of the region to which a pixel belongs.",
            "Do you know how to calculate the average intensity of a region?",
            "Use the concept of DFS or BFS to solve this problem.",
            "You can calculate the average intensity of the region to which the pixel belongs by first finding all the pixels that belong to the region, then calculate their average."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumPushes(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumPushes(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumPushes(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumPushes(self, word: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumPushes(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumPushes(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar minimumPushes = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumPushes(word: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function minimumPushes($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumPushes(_ word: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumPushes(word: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumPushes(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumPushes(word string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Integer}\ndef minimum_pushes(word)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumPushes(word: String): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_pushes(word: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-pushes word)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_pushes(Word :: unicode:unicode_binary()) -> integer().\nminimum_pushes(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_pushes(word :: String.t) :: integer\n  def minimum_pushes(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code> containing <strong>distinct</strong> lowercase English letters.</p>\n\n<p>Telephone keypads have keys mapped with <strong>distinct</strong> collections of lowercase English letters, which can be used to form words by pushing them. For example, the key <code>2</code> is mapped with <code>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code>, we need to push the key one time to type <code>&quot;a&quot;</code>, two times to type <code>&quot;b&quot;</code>, and three times to type <code>&quot;c&quot;</code> <em>.</em></p>\n\n<p>It is allowed to remap the keys numbered <code>2</code> to <code>9</code> to <strong>distinct</strong> collections of letters. The keys can be remapped to <strong>any</strong> amount of letters, but each letter <strong>must</strong> be mapped to <strong>exactly</strong> one key. You need to find the <strong>minimum</strong> number of times the keys will be pushed to type the string <code>word</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of pushes needed to type </em><code>word</code> <em>after remapping the keys</em>.</p>\n\n<p>An example mapping of letters to keys on a telephone keypad is given below. Note that <code>1</code>, <code>*</code>, <code>#</code>, and <code>0</code> do <strong>not</strong> map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png\" style=\"width: 329px; height: 313px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e1.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;abcde&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e2.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;xycdefghij&quot;\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;x&quot; -&gt; one push on key 2\n&quot;y&quot; -&gt; two pushes on key 2\n&quot;c&quot; -&gt; one push on key 3\n&quot;d&quot; -&gt; two pushes on key 3\n&quot;e&quot; -&gt; one push on key 4\n&quot;f&quot; -&gt; one push on key 5\n&quot;g&quot; -&gt; one push on key 6\n&quot;h&quot; -&gt; one push on key 7\n&quot;i&quot; -&gt; one push on key 8\n&quot;j&quot; -&gt; one push on key 9\nTotal cost is 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 = 12.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 26</code></li>\n\t<li><code>word</code> consists of lowercase English letters.</li>\n\t<li>All letters in <code>word</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "\"abcde\"\n\"xycdefghij\"",
        "formTitle": "[3014]Minimum Number of Pushes to Type Word I",
        "frequency": 0.0,
        "frontendQuestionId": "3014",
        "hints": [
            "We have 8 keys in total. We can type 8 characters with one push each, 8 different characters with two pushes each, and so on.",
            "The optimal way is to map letters to keys evenly."
        ],
        "level": 1,
        "metaData": {
            "name": "minimumPushes",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3275",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"abcde\"",
        "title": "Minimum Number of Pushes to Type Word I",
        "titleSlug": "minimum-number-of-pushes-to-type-word-i",
        "infer_hints": [
            "If you have two keys 2 and 3, how do you map the letters a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z?",
            "Keep a dictionary of each letter to the key it maps to.",
            "For each letter, find the keypad key it can be typed on.",
            "For each letter, determine the set of keys that can be pressed with the least number of pushes.",
            "You can think of the keypad as a graph where each letter is a node and an edge between two nodes means you need to press the button on the keypad.",
            "What if we consider the number of pushes required to type each character in the word separately?",
            "This problem is similar to the minimum cost to reach destination problem in graph.",
            "How can we map the keys to characters?",
            "How can you find the time needed to type the word?",
            "The number of pushes for each character is the length of the path from the root of the trie to that character.",
            "If we can remap the keys to different sets of letters, how can we minimize the number of times we press the keys?",
            "Create an array that stores the number of pushes needed to type each letter.",
            "You can use a DP array dp[i]dp[i] to denote the minimum number of pushes to type the string word[0..i]word[0..i] considering the mapping given.",
            "Use dynamic programming.  Now, we need to calculate the cost of the prefix word[0..i].",
            "You can think of each character in the string as a node, and an edge between two nodes means that the second node can be reached from the first one with one step.",
            "The mapping of characters to digits is unique.",
            "Think of each letter as a node in a graph, and think of each push as an edge in the graph.",
            "Use dynamic programming.  Can we define dp[i] as the minimum number of presses to form the first i letters of word?",
            "You can use a dynamic programming approach where dp[i] is the minimum number of pushes to type the string word[:i].",
            "What are the minimum number of pushes needed to type each letter of the alphabet?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumPushes(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumPushes(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumPushes(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumPushes(self, word: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumPushes(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumPushes(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar minimumPushes = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumPushes(word: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function minimumPushes($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumPushes(_ word: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumPushes(word: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumPushes(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumPushes(word string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Integer}\ndef minimum_pushes(word)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumPushes(word: String): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_pushes(word: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-pushes word)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_pushes(Word :: unicode:unicode_binary()) -> integer().\nminimum_pushes(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_pushes(word :: String.t) :: integer\n  def minimum_pushes(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code> containing lowercase English letters.</p>\n\n<p>Telephone keypads have keys mapped with <strong>distinct</strong> collections of lowercase English letters, which can be used to form words by pushing them. For example, the key <code>2</code> is mapped with <code>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code>, we need to push the key one time to type <code>&quot;a&quot;</code>, two times to type <code>&quot;b&quot;</code>, and three times to type <code>&quot;c&quot;</code> <em>.</em></p>\n\n<p>It is allowed to remap the keys numbered <code>2</code> to <code>9</code> to <strong>distinct</strong> collections of letters. The keys can be remapped to <strong>any</strong> amount of letters, but each letter <strong>must</strong> be mapped to <strong>exactly</strong> one key. You need to find the <strong>minimum</strong> number of times the keys will be pushed to type the string <code>word</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of pushes needed to type </em><code>word</code> <em>after remapping the keys</em>.</p>\n\n<p>An example mapping of letters to keys on a telephone keypad is given below. Note that <code>1</code>, <code>*</code>, <code>#</code>, and <code>0</code> do <strong>not</strong> map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png\" style=\"width: 329px; height: 313px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e1.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;abcde&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv2e2.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;xyzxyzxyzxyz&quot;\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;x&quot; -&gt; one push on key 2\n&quot;y&quot; -&gt; one push on key 3\n&quot;z&quot; -&gt; one push on key 4\nTotal cost is 1 * 4 + 1 * 4 + 1 * 4 = 12\nIt can be shown that no other mapping can provide a lower cost.\nNote that the key 9 is not mapped to any letter: it is not necessary to map letters to every key, but to map all the letters.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/27/keypadv2.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;aabbccddeeffgghhiiiiii&quot;\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\n&quot;f&quot; -&gt; one push on key 7\n&quot;g&quot; -&gt; one push on key 8\n&quot;h&quot; -&gt; two pushes on key 9\n&quot;i&quot; -&gt; one push on key 9\nTotal cost is 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 2 * 2 + 6 * 1 = 24.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abcde\"\n\"xyzxyzxyzxyz\"\n\"aabbccddeeffgghhiiiiii\"",
        "formTitle": "[3016]Minimum Number of Pushes to Type Word II",
        "frequency": 0.0,
        "frontendQuestionId": "3016",
        "hints": [
            "We have 8 keys in total. We can type 8 characters with one push each, 8 different characters with two pushes each, and so on.",
            "The optimal way is to map letters to keys evenly.",
            "Sort the letters by frequencies in the word in non-increasing order."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumPushes",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3276",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"abcde\"",
        "title": "Minimum Number of Pushes to Type Word II",
        "titleSlug": "minimum-number-of-pushes-to-type-word-ii",
        "infer_hints": [
            "The problem can be reduced to finding the minimum number of times to press a key to type a word.",
            "The solution can be obtained by using dynamic programming.",
            "Try to solve it using dynamic programming.",
            "Can we use DP?  How should we use DP?",
            "We need to find the minimum cost of typing a word.  If we can map each letter to a key, then the cost of typing the word is the sum of the costs of typing each letter.  How can we map each letter to a key?",
            "How can we convert a word into a sequence of presses?",
            "Can we solve this problem by dynamic programming?",
            "If we push the same key on two consecutive characters, the cost is the same as if we push it on the first character.",
            "Can you use dynamic programming?",
            "The time complexity is O(n) and we need to return the minimum number of pushes.",
            "If we can store the mapping from character to key, we can simply iterate over the word, and whenever we need to type a character, we can use the mapping to determine the number of pushes.",
            "Can we use dynamic programming to solve this problem?",
            "Can you solve this problem using dynamic programming?",
            "Try to calculate the cost of typing each letter in the string.",
            "The solution will be the sum of the distances of each letter to the next.",
            "Try to find a pattern that can be used to generate the minimum cost.",
            "You should think of this problem as a DP problem with an extra state to represent the current state of the keyboard.",
            "Use dynamic programming.",
            "Use dynamic programming.",
            "We can do dynamic programming.  We keep track of the minimum cost to type each prefix of the word."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfPairs(vector<vector<int>>& points) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfPairs(int[][] points) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfPairs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfPairs(self, points: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfPairs(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfPairs(int[][] points) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfPairs = function(points) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfPairs(points: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfPairs($points) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfPairs(_ points: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfPairs(points: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfPairs(List<List<int>> points) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfPairs(points [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_pairs(points)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfPairs(points: Array[Array[Int]]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_pairs(points: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-pairs points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_pairs(Points :: [[integer()]]) -> integer().\nnumber_of_pairs(Points) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_pairs(points :: [[integer]]) :: integer\n  def number_of_pairs(points) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D array <code>points</code> of size <code>n x 2</code> representing integer coordinates of some points on a 2D-plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>We define the <strong>right</strong> direction as positive x-axis (<strong>increasing x-coordinate</strong>) and the <strong>left</strong> direction as negative x-axis (<strong>decreasing x-coordinate</strong>). Similarly, we define the <strong>up</strong> direction as positive y-axis (<strong>increasing y-coordinate</strong>) and the <strong>down</strong> direction as negative y-axis (<strong>decreasing y-coordinate</strong>)</p>\n\n<p>You have to place <code>n</code> people, including Alice and Bob, at these points such that there is <strong>exactly one</strong> person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice&#39;s position as the <strong>upper left corner</strong> and Bob&#39;s position as the <strong>lower right corner</strong> of the fence (<strong>Note</strong> that the fence <strong>might not</strong> enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either <strong>inside</strong> the fence or <strong>on</strong> the fence, Alice will be sad.</p>\n\n<p>Return <em>the number of <strong>pairs of points</strong> where you can place Alice and Bob, such that Alice <strong>does not</strong> become sad on building the fence</em>.</p>\n\n<p><strong>Note</strong> that Alice can only build a fence with Alice&#39;s position as the upper left corner, and Bob&#39;s position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners <code>(1, 1)</code>, <code>(1, 3)</code>, <code>(3, 1)</code>, and <code>(3, 3)</code>, because:</p>\n\n<ul>\n\t<li>With Alice at <code>(3, 3)</code> and Bob at <code>(1, 1)</code>, Alice&#39;s position is not the upper left corner and Bob&#39;s position is not the lower right corner of the fence.</li>\n\t<li>With Alice at <code>(1, 3)</code> and Bob at <code>(1, 1)</code>, Bob&#39;s position is not the lower right corner of the fence.</li>\n</ul>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/example0alicebob-1.png\" style=\"width: 750px; height: 308px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/example1alicebob.png\" style=\"width: 376px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no way to place Alice and Bob such that Alice can build a fence with Alice&#39;s position as the upper left corner and Bob&#39;s position as the lower right corner. Hence we return 0. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/04/example2alicebob.png\" style=\"width: 1321px; height: 363px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[6,2],[4,4],[2,6]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/04/example4alicebob.png\" style=\"width: 1123px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[3,1],[1,3],[1,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= points[i][0], points[i][1] &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>points[i]</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "[[1,1],[2,2],[3,3]]\n[[6,2],[4,4],[2,6]]\n[[3,1],[1,3],[1,1]]",
        "formTitle": "[3027]Find the Number of Ways to Place People II",
        "frequency": 0.0,
        "frontendQuestionId": "3027",
        "hints": [
            "Sort the points by x-coordinate in non-decreasing order and break the tie by sorting the y-coordinate in non-increasing order.",
            "Now consider two points upper-left corner <code>points[i]</code> and lower-right corner <code>points[j]</code>, such that <code>i < j</code> and <code>points[i][0] <= points[j][0]</code> and <code>points[i][1] >= points[j][1]</code>.",
            "Instead of brute force looping, we can save the largest y-coordinate that is no larger than <code>points[i][1]</code> when looping on <code>j</code>, say the value is <code>m</code>. And if <code>m < points[j][1]</code>, the upper-left and lower-right corner pair is valid.",
            "The actual values don’t matter, we can compress all x-coordinates and y-coordinates to the range <code>[1, n]</code>. Can we use prefix sum now?"
        ],
        "level": 3,
        "metaData": {
            "name": "numberOfPairs",
            "params": [
                {
                    "name": "points",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3277",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[1,1],[2,2],[3,3]]",
        "title": "Find the Number of Ways to Place People II",
        "titleSlug": "find-the-number-of-ways-to-place-people-ii",
        "infer_hints": [
            "Can you find all possible pairs of points that Alice can place at the upper left corner of the fence and Bob can place at the lower right corner of the fence?",
            "The number of ways to place Alice and Bob such that Alice does not become sad is the number of ways to choose a rectangle such that the four corners are the points <code>(x<sub>1</sub>, y<sub>1</sub>), (x<sub>1</sub>, y<sub>2</sub>), (x<sub>2</sub>, y<sub>1</sub>), (x<sub>2</sub>, y<sub>2</sub>)</code>.",
            "Can you find a way to find the minimum number of people needed to be outside the fence?",
            "Use the properties of line segments and convex hulls to check if a person is inside or outside the rectangle.",
            "If we sort the coordinates by x-coordinate, what do you notice about the number of ways to place Alice and Bob?",
            "If we fix Alice's position at <code>(x, y)</code>, then Bob's position will be either <code>(x, y+1)</code> or <code>(x+1, y)</code>.",
            "Try to split the points into two groups: those where Alice can be on the left and those where she can be on the right.",
            "If you can place Alice and Bob, what will be the result of their positions after the fence?",
            "Use the following four points to build the rectangle: (Ax, Ay), (Bx, By), (Cx, Cy), (Dx, Dy).  Now, let's check if the points are in the same direction as (Ax, Ay).",
            "If you can find all points with the same y-coordinate, then you can use dynamic programming to solve this problem.",
            "Count the number of ways to place Alice and Bob in the first quadrant (in the first octant) without any person being inside the fence.",
            "The number of ways to place Alice and Bob is equal to the number of ways to place Alice times the number of ways to place Bob.",
            "If Alice is at <code>(x<sub>i</sub>, y<sub>i</sub>)</code>, Bob will always be at <code>(x<sub>i</sub>, y<sub>j</sub>)</code>.",
            "If you sort the x-coordinates and y-coordinates, then the problem becomes smaller.",
            "Sort the points by x-coordinate.",
            "Use dynamic programming to solve this problem.  We can define dp[i][j][k][l] as the number of ways to place the first i people such that the left-most person is at point (j, k) and the right-most person is at point (l, r).",
            "Try to simulate the process and see if you can find any pattern.",
            "If we place Alice at (x<sub>i</sub>, y<sub>i</sub>) and Bob at (x<sub>j</sub>, y<sub>j</sub>), the total number of rectangles is (x<sub>j</sub> - x<sub>i</sub>) * (y<sub>j</sub> - y<sub>i</sub>).",
            "How many ways are there to choose the top-left and bottom-right corners?",
            "We will place Alice and Bob in the upper left corner and the lower right corner of the rectangle.  How many ways are there to place Alice and Bob such that the rectangle's sides are parallel to the axes?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfPairs(vector<vector<int>>& points) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfPairs(int[][] points) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfPairs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfPairs(self, points: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfPairs(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfPairs(int[][] points) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfPairs = function(points) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfPairs(points: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfPairs($points) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfPairs(_ points: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfPairs(points: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfPairs(List<List<int>> points) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfPairs(points [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_pairs(points)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfPairs(points: Array[Array[Int]]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_pairs(points: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-pairs points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_pairs(Points :: [[integer()]]) -> integer().\nnumber_of_pairs(Points) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_pairs(points :: [[integer]]) :: integer\n  def number_of_pairs(points) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D array <code>points</code> of size <code>n x 2</code> representing integer coordinates of some points on a 2D-plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>We define the <strong>right</strong> direction as positive x-axis (<strong>increasing x-coordinate</strong>) and the <strong>left</strong> direction as negative x-axis (<strong>decreasing x-coordinate</strong>). Similarly, we define the <strong>up</strong> direction as positive y-axis (<strong>increasing y-coordinate</strong>) and the <strong>down</strong> direction as negative y-axis (<strong>decreasing y-coordinate</strong>)</p>\n\n<p>You have to place <code>n</code> people, including Alice and Bob, at these points such that there is <strong>exactly one</strong> person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice&#39;s position as the <strong>upper left corner</strong> and Bob&#39;s position as the <strong>lower right corner</strong> of the fence (<strong>Note</strong> that the fence <strong>might not</strong> enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either <strong>inside</strong> the fence or <strong>on</strong> the fence, Alice will be sad.</p>\n\n<p>Return <em>the number of <strong>pairs of points</strong> where you can place Alice and Bob, such that Alice <strong>does not</strong> become sad on building the fence</em>.</p>\n\n<p><strong>Note</strong> that Alice can only build a fence with Alice&#39;s position as the upper left corner, and Bob&#39;s position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners <code>(1, 1)</code>, <code>(1, 3)</code>, <code>(3, 1)</code>, and <code>(3, 3)</code>, because:</p>\n\n<ul>\n\t<li>With Alice at <code>(3, 3)</code> and Bob at <code>(1, 1)</code>, Alice&#39;s position is not the upper left corner and Bob&#39;s position is not the lower right corner of the fence.</li>\n\t<li>With Alice at <code>(1, 3)</code> and Bob at <code>(1, 1)</code>, Bob&#39;s position is not the lower right corner of the fence.</li>\n</ul>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/example0alicebob-1.png\" style=\"width: 750px; height: 308px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/example1alicebob.png\" style=\"width: 376px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no way to place Alice and Bob such that Alice can build a fence with Alice&#39;s position as the upper left corner and Bob&#39;s position as the lower right corner. Hence we return 0. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/04/example2alicebob.png\" style=\"width: 1321px; height: 363px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[6,2],[4,4],[2,6]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/04/example4alicebob.png\" style=\"width: 1123px; height: 308px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> points = [[3,1],[1,3],[1,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 50</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= points[i][0], points[i][1] &lt;= 50</code></li>\n\t<li>All <code>points[i]</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "[[1,1],[2,2],[3,3]]\n[[6,2],[4,4],[2,6]]\n[[3,1],[1,3],[1,1]]",
        "formTitle": "[3025]Find the Number of Ways to Place People I",
        "frequency": 0.0,
        "frontendQuestionId": "3025",
        "hints": [
            "We can enumerate all the upper-left and lower-right corners.",
            "If the upper-left corner is <code>(x1, y1)</code> and lower-right corner is <code>(x2, y2)</code>, check that there is no point <code>(x, y)</code> such that <code>x1 <= x <= x2</code> and <code>y2 <= y <= y1</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfPairs",
            "params": [
                {
                    "name": "points",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3278",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[1,1],[2,2],[3,3]]",
        "title": "Find the Number of Ways to Place People I",
        "titleSlug": "find-the-number-of-ways-to-place-people-i",
        "infer_hints": [
            "How many ways are there to place Alice and Bob such that Alice is to the right of Bob?",
            "Use two dimensions array dp to represent the state.",
            "Use dynamic programming to calculate the number of ways to place Alice and Bob on the grid.",
            "If Alice and Bob are in the same vertical line, or in the same horizontal line, or in the same diagonal line, Alice will be sad.",
            "For each point (x<sub>i</sub>, y<sub>i</sub>), count how many other points are on the same line with it.",
            "Think of the fence as a rectangle and think about how you can count the number of ways to place Alice and Bob.",
            "How many ways are there to choose Alice's and Bob's positions?",
            "We need to find all the possible positions for Alice and Bob.",
            "Sort the points by x-coordinate and then by y-coordinate.",
            "Find the number of ways to place Alice and Bob such that Alice is on the left side and Bob is on the right side.",
            "Use a 2D prefix sum.",
            "Sort the x-coordinates and y-coordinates.",
            "For every pair of points (A, B), if they are both on the same x-coordinate or y-coordinate, they can be the upper left corner and the lower right corner of a rectangle.",
            "Can we calculate the number of ways to place Alice and Bob such that Alice is not sad?",
            "If Alice is at <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and Bob is at <code>(x<sub>j</sub>, y<sub>j</sub>)</code>, we can place Alice at <code>(x<sub>k</sub>, y<sub>k</sub>)</code> for <code>(x<sub>k</sub>, y<sub>k</sub>)</code> where <code>x<sub>k</sub> &lt;= x<sub>i</sub> and y<sub>k</sub> &lt;= y<sub>i</sub></code>.",
            "Can you use a 2D prefix sum array?",
            "Sort the points in the increasing order of x-coordinate.",
            "Try to count the number of ways to place Alice and Bob.",
            "How many ways can you place Alice and Bob such that Alice is not sad?",
            "Sort the array."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long flowerGame(int n, int m) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long flowerGame(int n, int m) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def flowerGame(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def flowerGame(self, n: int, m: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long flowerGame(int n, int m) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long FlowerGame(int n, int m) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar flowerGame = function(n, m) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function flowerGame(n: number, m: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $m\n     * @return Integer\n     */\n    function flowerGame($n, $m) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func flowerGame(_ n: Int, _ m: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun flowerGame(n: Int, m: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int flowerGame(int n, int m) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func flowerGame(n int, m int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} m\n# @return {Integer}\ndef flower_game(n, m)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def flowerGame(n: Int, m: Int): Long = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn flower_game(n: i32, m: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (flower-game n m)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec flower_game(N :: integer(), M :: integer()) -> integer().\nflower_game(N, M) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec flower_game(n :: integer, m :: integer) :: integer\n  def flower_game(n, m) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Alice and Bob are playing a turn-based game on a circular field surrounded by flowers. The circle represents the field, and there are <code>x</code> flowers in the clockwise direction between Alice and Bob, and <code>y</code> flowers in the anti-clockwise direction between them.</p>\n\n<p>The game proceeds as follows:</p>\n\n<ol>\n\t<li>Alice takes the first turn.</li>\n\t<li>In each turn, a player must choose either the clockwise or anti-clockwise direction and pick one flower from that side.</li>\n\t<li>At the end of the turn, if there are no flowers left at all, the <strong>current</strong> player captures their opponent and wins the game.</li>\n</ol>\n\n<p>Given two integers, <code>n</code> and <code>m</code>, the task is to compute the number of possible pairs <code>(x, y)</code> that satisfy the conditions:</p>\n\n<ul>\n\t<li>Alice must win the game according to the described rules.</li>\n\t<li>The number of flowers <code>x</code> in the clockwise direction must be in the range <code>[1,n]</code>.</li>\n\t<li>The number of flowers <code>y</code> in the anti-clockwise direction must be in the range <code>[1,m]</code>.</li>\n</ul>\n\n<p>Return <em>the number of possible pairs</em> <code>(x, y)</code> <em>that satisfy the conditions mentioned in the statement</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, m = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The following pairs satisfy conditions described in the statement: (1,2), (3,2), (2,1).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, m = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No pairs satisfy the conditions described in the statement.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "3\n2\n1\n1",
        "formTitle": "[3021]Alice and Bob Playing Flower Game",
        "frequency": 0.0,
        "frontendQuestionId": "3021",
        "hints": [
            "(x, y) is valid if and only if they have different parities."
        ],
        "level": 2,
        "metaData": {
            "name": "flowerGame",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "m",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3279",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "3\n2",
        "title": "Alice and Bob Playing Flower Game",
        "titleSlug": "alice-and-bob-playing-flower-game",
        "infer_hints": [
            "Alice can always win if there are more than one flowers.",
            "Find the cycle with the minimum length that Bob can win with, and count the number of cycles Alice can win with.",
            "The problem is to find all pairs (x, y) where x ≤ n and y ≤ m such that Alice can win.",
            "What happens if we choose a flower from the clockwise direction?",
            "Can we always make the game of the two flowers with Bob?  If so, how?",
            "Alice will always win if the number of flowers in the circle is not a multiple of 3.",
            "Think about the smallest possible sum of <code>x</code> and <code>y</code>.",
            "We can use a simple brute force method. Loop through all possible flower positions (1 ≤ x, y ≤ 10^5) and check if Alice can win.",
            "For each x, you need to calculate the number of y's for which Alice can win.",
            "If Alice can win, then she must have a strategy that makes it possible to reach a state where she has a winning strategy no matter what the state is.",
            "If Alice has n flowers on one side and Bob has m flowers on the other side, she wins iff n mod 2 = m mod 2.",
            "Alice can always win if she has more flowers than Bob.  Can you solve it for a single case?",
            "Consider the game in a recursive manner.",
            "Think about the game in terms of dynamic programming.",
            "Alice can always pick the last flower if Bob picks the flower in the middle.",
            "Alice wins iff there are no more flowers left.",
            "Use Dynamic Programming to solve this problem.",
            "For each possible number of flowers on one side, we can calculate the other side.",
            "If there are 2 flowers on the circle, Alice can always win the game.",
            "If Alice is to win, what is the best strategy for Bob to play?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int earliestSecondToMarkIndices(vector<int>& nums, vector<int>& changeIndices) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def earliestSecondToMarkIndices(self, nums, changeIndices):\n        \"\"\"\n        :type nums: List[int]\n        :type changeIndices: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int earliestSecondToMarkIndices(int* nums, int numsSize, int* changeIndices, int changeIndicesSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int EarliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} changeIndices\n * @return {number}\n */\nvar earliestSecondToMarkIndices = function(nums, changeIndices) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function earliestSecondToMarkIndices(nums: number[], changeIndices: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $changeIndices\n     * @return Integer\n     */\n    function earliestSecondToMarkIndices($nums, $changeIndices) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func earliestSecondToMarkIndices(_ nums: [Int], _ changeIndices: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun earliestSecondToMarkIndices(nums: IntArray, changeIndices: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int earliestSecondToMarkIndices(List<int> nums, List<int> changeIndices) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func earliestSecondToMarkIndices(nums []int, changeIndices []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} change_indices\n# @return {Integer}\ndef earliest_second_to_mark_indices(nums, change_indices)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def earliestSecondToMarkIndices(nums: Array[Int], changeIndices: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn earliest_second_to_mark_indices(nums: Vec<i32>, change_indices: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (earliest-second-to-mark-indices nums changeIndices)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec earliest_second_to_mark_indices(Nums :: [integer()], ChangeIndices :: [integer()]) -> integer().\nearliest_second_to_mark_indices(Nums, ChangeIndices) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec earliest_second_to_mark_indices(nums :: [integer], change_indices :: [integer]) :: integer\n  def earliest_second_to_mark_indices(nums, change_indices) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two <strong>1-indexed</strong> integer arrays, <code>nums</code> and, <code>changeIndices</code>, having lengths <code>n</code> and <code>m</code>, respectively.</p>\n\n<p>Initially, all indices in <code>nums</code> are unmarked. Your task is to mark <strong>all</strong> indices in <code>nums</code>.</p>\n\n<p>In each second, <code>s</code>, in order from <code>1</code> to <code>m</code> (<strong>inclusive</strong>), you can perform <strong>one</strong> of the following operations:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[1, n]</code> and <strong>decrement</strong> <code>nums[i]</code> by <code>1</code>.</li>\n\t<li>Set <code>nums[changeIndices[s]]</code> to any <strong>non-negative</strong> value.</li>\n\t<li>Choose an index <code>i</code> in the range <code>[1, n]</code>, where <code>nums[i]</code> is <strong>equal</strong> to <code>0</code>, and <strong>mark</strong> index <code>i</code>.</li>\n\t<li>Do nothing.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>earliest second</strong> in the range </em><code>[1, m]</code><em> when <strong>all</strong> indices in </em><code>nums</code><em> can be marked by choosing operations optimally, or </em><code>-1</code><em> if it is impossible.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,3], changeIndices = [1,3,2,2,2,2,3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Set nums[changeIndices[1]] to 0. nums becomes [0,2,3].\nSecond 2: Set nums[changeIndices[2]] to 0. nums becomes [0,2,0].\nSecond 3: Set nums[changeIndices[3]] to 0. nums becomes [0,0,0].\nSecond 4: Mark index 1, since nums[1] is equal to 0.\nSecond 5: Mark index 2, since nums[2] is equal to 0.\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,2], changeIndices = [1,2,1,2,1,2,1,2]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Mark index 1, since nums[1] is equal to 0.\nSecond 2: Mark index 2, since nums[2] is equal to 0.\nSecond 3: Decrement index 4 by one. nums becomes [0,0,1,1].\nSecond 4: Decrement index 4 by one. nums becomes [0,0,1,0].\nSecond 5: Decrement index 3 by one. nums becomes [0,0,0,0].\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nSecond 7: Mark index 4, since nums[4] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 7th second.\nHence, the answer is 7.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], changeIndices = [1,2,3]\n<strong>Output:</strong> -1\n<strong>Explanation: </strong>In this example, it can be shown that it is impossible to mark all indices, as we don&#39;t have enough seconds. \nHence, the answer is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == changeIndices.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= changeIndices[i] &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "[3,2,3]\n[1,3,2,2,2,2,3]\n[0,0,1,2]\n[1,2,1,2,1,2,1,2]\n[1,2,3]\n[1,2,3]",
        "formTitle": "[3049]Earliest Second to Mark Indices II",
        "frequency": 0.0,
        "frontendQuestionId": "3049",
        "hints": [
            "We need at least <code>n</code> seconds, and at most <code>sum(nums[i]) + n</code> seconds.",
            "We can binary search the earliest second where all indices can be marked.",
            "If there is an operation where we change <code>nums[changeIndices[i]]</code> to a non-negative value, it is best for it to satisfy the following constraints:<ul>\r\n<li><code>nums[changeIndices[i]]</code> should not be equal to <code>0</code>.</li>\r\n<li><code>nums[changeIndices[i]]</code> should be changed to <code>0</code>.</li>\r\n<li>It should be the first position where <code>changeIndices[i]</code> occurs in <code>changeIndices</code>.</li>\r\n<li>There should be another second, <code>j</code>, where <code>changeIndices[i]</code> will be marked. <code>j</code> is in the range <code>[i + 1, m]</code>.</li>\r\n</ul>",
            "Let <code>time_needed = sum(nums[i]) + n</code>. To check if we can mark all indices at some second <code>x</code>, we need to make <code>time_needed <= x</code>, using non-negative change operations as described previously.",
            "Using a non-negative change operation on some <code>nums[changeIndices[i]]</code> that satisfies the constraints described previously reduces <code>time_needed</code> by <code>nums[changeIndices[i]] - 1</code>. So, we need to maximize the sum of <code>(nums[changeIndices[i]] - 1)</code> while ensuring that the non-negative change operations still satisfy the constraints.",
            "Maximizing the sum of <code>(nums[changeIndices[i]] - 1)</code> can be done greedily using a min-priority queue and going in reverse starting from second <code>x</code> to second <code>1</code>, maximizing the sum of the values in the priority queue and ensuring that for every non-negative change operation on <code>nums[changeIndices[i]]</code> chosen, there is another second <code>j</code> in the range <code>[i + 1, x]</code> where <code>changeIndices[i]</code> can be marked.",
            "The answer is the first value of <code>x</code> in the range <code>[1, m]</code> where it is possible to make <code>time_needed <= x</code>, or <code>-1</code> if there is no such second."
        ],
        "level": 3,
        "metaData": {
            "name": "earliestSecondToMarkIndices",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "changeIndices",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3289",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,2,3]\n[1,3,2,2,2,2,3]",
        "title": "Earliest Second to Mark Indices II",
        "titleSlug": "earliest-second-to-mark-indices-ii",
        "infer_hints": [
            "Think of the problem as a game where we have to make certain moves. \r\n(Do we need to decrease the value of a number or do we need to set it to zero or do we need to increase the value of a number or do we need to set it to a certain value or do we need to do nothing)",
            "For each index, you can determine how much time it takes for you to mark it.",
            "We can use BFS.",
            "Can we maintain the minimum number of operations to mark all indices at each second?",
            "For each number, find out the earliest time it will be zero.",
            "Consider the optimal strategy.",
            "How many seconds are there to decrement each index in the array?",
            "For each second, what operations can we perform optimally?",
            "Can you use a queue to perform BFS on the state space?",
            "You can simulate the process, keeping track of the maximum value you can reach in each second.",
            "Use a priority queue to store the indices that we need to process.",
            "You can use a heap to store the minimum non-negative integer at each second.",
            "We can simulate the process and use binary search to find the earliest time.",
            "We need to maintain a priority queue of indices, sorted by the value at the index.",
            "Think of the indices as a set of intervals, where each interval can be of length 1 or 2.",
            "The optimal solution for each index is determined by the smallest time we need to reach it.",
            "Try all possibilities using BFS or DFS.",
            "How many operations do we need to mark each index?",
            "Use BFS and a queue to store the current state.",
            "You can maintain a set of unmarked indices and for each second, you can check whether the number of unmarked indices can be reduced."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countMatchingSubarrays(vector<int>& nums, vector<int>& pattern) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countMatchingSubarrays(self, nums, pattern):\n        \"\"\"\n        :type nums: List[int]\n        :type pattern: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countMatchingSubarrays(self, nums: List[int], pattern: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countMatchingSubarrays(int* nums, int numsSize, int* pattern, int patternSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountMatchingSubarrays(int[] nums, int[] pattern) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} pattern\n * @return {number}\n */\nvar countMatchingSubarrays = function(nums, pattern) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countMatchingSubarrays(nums: number[], pattern: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $pattern\n     * @return Integer\n     */\n    function countMatchingSubarrays($nums, $pattern) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countMatchingSubarrays(_ nums: [Int], _ pattern: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countMatchingSubarrays(nums: IntArray, pattern: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countMatchingSubarrays(List<int> nums, List<int> pattern) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countMatchingSubarrays(nums []int, pattern []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} pattern\n# @return {Integer}\ndef count_matching_subarrays(nums, pattern)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countMatchingSubarrays(nums: Array[Int], pattern: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_matching_subarrays(nums: Vec<i32>, pattern: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-matching-subarrays nums pattern)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_matching_subarrays(Nums :: [integer()], Pattern :: [integer()]) -> integer().\ncount_matching_subarrays(Nums, Pattern) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_matching_subarrays(nums :: [integer], pattern :: [integer]) :: integer\n  def count_matching_subarrays(nums, pattern) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code>, and a <strong>0-indexed</strong> integer array <code>pattern</code> of size <code>m</code> consisting of integers <code>-1</code>, <code>0</code>, and <code>1</code>.</p>\n\n<p>A <span data-keyword=\"subarray\">subarray</span> <code>nums[i..j]</code> of size <code>m + 1</code> is said to match the <code>pattern</code> if the following conditions hold for each element <code>pattern[k]</code>:</p>\n\n<ul>\n\t<li><code>nums[i + k + 1] &gt; nums[i + k]</code> if <code>pattern[k] == 1</code>.</li>\n\t<li><code>nums[i + k + 1] == nums[i + k]</code> if <code>pattern[k] == 0</code>.</li>\n\t<li><code>nums[i + k + 1] &lt; nums[i + k]</code> if <code>pattern[k] == -1</code>.</li>\n</ul>\n\n<p>Return <em>the<strong> count</strong> of subarrays in</em> <code>nums</code> <em>that match the</em> <code>pattern</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], pattern = [1,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == pattern.length &lt; n</code></li>\n\t<li><code>-1 &lt;= pattern[i] &lt;= 1</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4,5,6]\n[1,1]\n[1,4,4,1,3,5,5,3]\n[1,0,-1]",
        "formTitle": "[3036]Number of Subarrays That Match a Pattern II",
        "frequency": 0.0,
        "frontendQuestionId": "3036",
        "hints": [
            "Create a second array <code>nums2</code> such that <code>nums2[i] = 1</code> if <code>nums[i + 1] > nums[i]</code>, <code>nums2[i] = 0</code> if <code>nums[i + 1] == nums[i]</code>, and <code>nums2[i] = -1</code> if <code>nums[i + 1] < nums[i]</code>.",
            "The problem becomes: “Count the number of subarrays in <code>nums2</code> that are equal to <code>pattern</code>.",
            "Use Knuth-Morris-Pratt or Z-Function algorithms."
        ],
        "level": 3,
        "metaData": {
            "name": "countMatchingSubarrays",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "pattern",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3290",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,4,5,6]\n[1,1]",
        "title": "Number of Subarrays That Match a Pattern II",
        "titleSlug": "number-of-subarrays-that-match-a-pattern-ii",
        "infer_hints": [
            "We can maintain a map of the last seen positions for each number.",
            "We can use a two-pointer approach.  We will maintain two pointers at the start of the array.  We will then move the right pointer until the condition is not satisfied.  When the condition is satisfied, we will then move the left pointer until the condition is not satisfied.  This way, we can get all the subarrays.",
            "We can solve this problem using a sliding window.",
            "How many subarrays are there that match the pattern?  Do you think you can use dynamic programming to solve this problem?",
            "If the pattern is [1,1,0,1,1], can you find out the count of the subarrays that match the pattern?",
            "How many subarrays can we create with this pattern?  (Picture the pattern as a sliding window on the array.)",
            "The idea is to iterate over the array and for each element, count the number of subarrays that start at this position and match the pattern.",
            "Create a mapping from pattern to the next indices in nums that it can be extended to.",
            "Use a prefix sum array to calculate the differences.",
            "Find all subarrays of the array nums.",
            "Think of a sliding window that expands to the right and keeps the condition of the pattern.",
            "This problem is about comparing sequences. Can you try comparing two sequences of the same length?",
            "We need to find all the subarrays of the given array which have the same length as the pattern.",
            "For each position, check if the next position follows the pattern.",
            "Find the first number that is larger than the second one, then check the next number.",
            "We need to count the number of valid subarrays.  How can we do this?  Do we need to store all the subarrays?  What if we have a valid subarray and we append a number to it?  What is the new subarray?",
            "Find the length of the longest subarray that matches the pattern.",
            "How many subarrays of nums[] can we form such that it matches the pattern?",
            "Use a sliding window to find all subarrays that match the pattern.",
            "Use two pointers to check all possible subarrays."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool canSortArray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean canSortArray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def canSortArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def canSortArray(self, nums: List[int]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool canSortArray(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool CanSortArray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canSortArray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function canSortArray(nums: number[]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canSortArray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func canSortArray(_ nums: [Int]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun canSortArray(nums: IntArray): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool canSortArray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func canSortArray(nums []int) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_sort_array(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def canSortArray(nums: Array[Int]): Boolean = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn can_sort_array(nums: Vec<i32>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (can-sort-array nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec can_sort_array(Nums :: [integer()]) -> boolean().\ncan_sort_array(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec can_sort_array(nums :: [integer]) :: boolean\n  def can_sort_array(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array of <strong>positive</strong> integers <code>nums</code>.</p>\n\n<p>In one <strong>operation</strong>, you can swap any two <strong>adjacent</strong> elements if they have the <strong>same</strong> number of <span data-keyword=\"set-bit\">set bits</span>. You are allowed to do this operation <strong>any</strong> number of times (<strong>including zero</strong>).</p>\n\n<p>Return <code>true</code> <em>if you can sort the array, else return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [8,4,2,30,15]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Let&#39;s look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation &quot;10&quot;, &quot;100&quot;, and &quot;1000&quot; respectively. The numbers 15 and 30 have four set bits each with binary representation &quot;1111&quot; and &quot;11110&quot;.\nWe can sort the array using 4 operations:\n- Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15].\n- Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15].\n- Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15].\n- Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30].\nThe array has become sorted, hence we return true.\nNote that there may be other sequences of operations which also sort the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The array is already sorted, hence we return true.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,16,8,4,2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It can be shown that it is not possible to sort the input array using any number of operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2<sup>8</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[8,4,2,30,15]\n[1,2,3,4,5]\n[3,16,8,4,2]",
        "formTitle": "[3011]Find if Array Can Be Sorted",
        "frequency": 0.0,
        "frontendQuestionId": "3011",
        "hints": [
            "Split the array into segments. Each segment contains consecutive elements with the same number of set bits.",
            "From left to right, the previous segment’s largest element should be smaller than the current segment’s smallest element."
        ],
        "level": 2,
        "metaData": {
            "name": "canSortArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3291",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[8,4,2,30,15]",
        "title": "Find if Array Can Be Sorted",
        "titleSlug": "find-if-array-can-be-sorted",
        "infer_hints": [
            "We can count the number of swaps needed to sort the array. Can you find this out?",
            "Try to check if the array can be sorted by performing only one operation at a time.",
            "We can simulate the process of sorting the array.",
            "You can perform operations only on the array and not the actual values of the array.",
            "You can use the fact that a number is a power of two if and only if its binary representation has exactly one set bit.",
            "For each number, how many numbers in the array can be swapped with it?",
            "You can perform the operations in any order.",
            "For each number in the array, count the number of set bits in its binary representation.",
            "What is the maximum number of different set bits between any two numbers?",
            "Can you use sorting or any other data structure to solve this?",
            "Can you solve this problem if the number of set bits in the number is not important?",
            "Count the number of set bits in each number and sort them based on this count.",
            "We need to count the number of elements in the array that have less than or equal to one set bit.",
            "Can we sort the array in increasing order?",
            "We need to check if we can sort the array in non-decreasing order.",
            "The array is sorted if and only if the number of inversions in the array is zero.",
            "Sorting the array is not enough. How can we know if we can sort the array?",
            "Count the number of inversions in the array.",
            "If the array can be sorted, then for each number x, we should be able to find a number y in the array such that if we swap x and y, then the array becomes sorted.",
            "Can you do it in O(n) time?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int earliestSecondToMarkIndices(vector<int>& nums, vector<int>& changeIndices) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def earliestSecondToMarkIndices(self, nums, changeIndices):\n        \"\"\"\n        :type nums: List[int]\n        :type changeIndices: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int earliestSecondToMarkIndices(int* nums, int numsSize, int* changeIndices, int changeIndicesSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int EarliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} changeIndices\n * @return {number}\n */\nvar earliestSecondToMarkIndices = function(nums, changeIndices) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function earliestSecondToMarkIndices(nums: number[], changeIndices: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $changeIndices\n     * @return Integer\n     */\n    function earliestSecondToMarkIndices($nums, $changeIndices) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func earliestSecondToMarkIndices(_ nums: [Int], _ changeIndices: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun earliestSecondToMarkIndices(nums: IntArray, changeIndices: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int earliestSecondToMarkIndices(List<int> nums, List<int> changeIndices) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func earliestSecondToMarkIndices(nums []int, changeIndices []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} change_indices\n# @return {Integer}\ndef earliest_second_to_mark_indices(nums, change_indices)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def earliestSecondToMarkIndices(nums: Array[Int], changeIndices: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn earliest_second_to_mark_indices(nums: Vec<i32>, change_indices: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (earliest-second-to-mark-indices nums changeIndices)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec earliest_second_to_mark_indices(Nums :: [integer()], ChangeIndices :: [integer()]) -> integer().\nearliest_second_to_mark_indices(Nums, ChangeIndices) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec earliest_second_to_mark_indices(nums :: [integer], change_indices :: [integer]) :: integer\n  def earliest_second_to_mark_indices(nums, change_indices) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two <strong>1-indexed</strong> integer arrays, <code>nums</code> and, <code>changeIndices</code>, having lengths <code>n</code> and <code>m</code>, respectively.</p>\n\n<p>Initially, all indices in <code>nums</code> are unmarked. Your task is to mark <strong>all</strong> indices in <code>nums</code>.</p>\n\n<p>In each second, <code>s</code>, in order from <code>1</code> to <code>m</code> (<strong>inclusive</strong>), you can perform <strong>one</strong> of the following operations:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[1, n]</code> and <strong>decrement</strong> <code>nums[i]</code> by <code>1</code>.</li>\n\t<li>If <code>nums[changeIndices[s]]</code> is <strong>equal</strong> to <code>0</code>, <strong>mark</strong> the index <code>changeIndices[s]</code>.</li>\n\t<li>Do nothing.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>earliest second</strong> in the range </em><code>[1, m]</code><em> when <strong>all</strong> indices in </em><code>nums</code><em> can be marked by choosing operations optimally, or </em><code>-1</code><em> if it is impossible.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].\nSecond 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].\nSecond 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].\nSecond 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.\nSecond 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.\nSecond 7: Do nothing.\nSecond 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 8th second.\nHence, the answer is 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3], changeIndices = [1,1,1,2,1,1,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2].\nSecond 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0].\nSecond 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0.\nSecond 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0].\nSecond 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1], changeIndices = [2,2,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> In this example, it is impossible to mark all indices because index 1 isn&#39;t in changeIndices.\nHence, the answer is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == changeIndices.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= changeIndices[i] &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "[2,2,0]\n[2,2,2,2,3,2,2,1]\n[1,3]\n[1,1,1,2,1,1,1]\n[0,1]\n[2,2,2]",
        "formTitle": "[3048]Earliest Second to Mark Indices I",
        "frequency": 0.0,
        "frontendQuestionId": "3048",
        "hints": [
            "Consider using binary search.",
            "Suppose the <code>answer <= x</code>; we can mark each index as late as possible. Namely, mark each index at the last occurrence in the array <code>changeIndices[1..x]</code>.",
            "When marking an index, which is the last occurrence at the second <code>i</code>, we check whether we have a sufficient number of decrement operations to mark all the previous indices whose last occurrences have already been marked, and the current index, i.e., <code>i - sum_of_marked_indices_values - cnt_of_marked_indices >= nums[changeIndices[i]]</code>.",
            "The answer is the earliest second when all indices can be marked after running the binary search or <code>-1</code> if there is no such second."
        ],
        "level": 2,
        "metaData": {
            "name": "earliestSecondToMarkIndices",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "changeIndices",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3292",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,2,0]\n[2,2,2,2,3,2,2,1]",
        "title": "Earliest Second to Mark Indices I",
        "titleSlug": "earliest-second-to-mark-indices-i",
        "infer_hints": [
            "If the sum of nums is less than the length of nums, then it's impossible to mark all indices.",
            "Use Breadth-First Search.",
            "Use a priority queue (heap) to track the indices that need to be decremented.",
            "If you can mark all indices in time 1, can you mark all indices in time 2?",
            "Can we use dynamic programming to solve this problem?",
            "The problem is a shortest path problem with multiple source and destination nodes.",
            "Use a queue and an array to store the values at the indices at each second.",
            "Keep track of the maximum number of indices you can mark with the operations.",
            "What can we do to make it faster?",
            "Can we perform a binary search on the answer?",
            "Consider a dp state dp[i][j] where i is the current index and j is the current value of the sum of all elements in nums. The dp transition will be to either change the value of the current index to 0 or to decrement the current index.",
            "You can perform the operation in an optimal way. Think of each operation as a single state.",
            "How many operations are needed to mark an index?",
            "We need to perform operations in such a way that we can maximize the indices we can mark.",
            "Use a priority queue to store all the indices that have a value of 0.",
            "Keep track of the maximum value in the array, and how many times it appears.",
            "Can we maintain a list of the maximum numbers we have seen so far for each index?",
            "Try to simulate the process, keeping track of the minimum number of operations to reach each index.",
            "If we have a way to mark the indices in less than m seconds, we can also mark them in m seconds.",
            "Think about the states of the game."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumTimeToInitialState(string word, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumTimeToInitialState(String word, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumTimeToInitialState(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumTimeToInitialState(self, word: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumTimeToInitialState(char* word, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumTimeToInitialState(string word, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumTimeToInitialState = function(word, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumTimeToInitialState(word: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumTimeToInitialState($word, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumTimeToInitialState(_ word: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumTimeToInitialState(word: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumTimeToInitialState(String word, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumTimeToInitialState(word string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_time_to_initial_state(word, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumTimeToInitialState(word: String, k: Int): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_time_to_initial_state(word: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-time-to-initial-state word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_time_to_initial_state(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_time_to_initial_state(Word, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_time_to_initial_state(word :: String.t, k :: integer) :: integer\n  def minimum_time_to_initial_state(word, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>At every second, you must perform the following operations:</p>\n\n<ul>\n\t<li>Remove the first <code>k</code> characters of <code>word</code>.</li>\n\t<li>Add any <code>k</code> characters to the end of <code>word</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that you do not necessarily need to add the same characters that you removed. However, you must perform <strong>both</strong> operations at every second.</p>\n\n<p>Return <em>the <strong>minimum</strong> time greater than zero required for</em> <code>word</code> <em>to revert to its <strong>initial</strong> state</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;aba&quot; from the prefix of word, and add characters &quot;bac&quot; to the end of word. Thus, word becomes equal to &quot;cababac&quot;.\nAt the 2nd second, we remove characters &quot;cab&quot; from the prefix of word, and add &quot;aba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 4\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;abac&quot; from the prefix of word, and add characters &quot;caba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abcbabcd&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to &quot;abcbabcd&quot; and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abacaba\"\n3\n\"abacaba\"\n4\n\"abcbabcd\"\n2",
        "formTitle": "[3031]Minimum Time to Revert Word to Initial State II",
        "frequency": 0.0,
        "frontendQuestionId": "3031",
        "hints": [
            "Find the longest suffix which is also a prefix and whose length is a multiple of <code>K</code> in <code>O(N)</code>.",
            "Use Z-function."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumTimeToInitialState",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3296",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"abacaba\"\n3",
        "title": "Minimum Time to Revert Word to Initial State II",
        "titleSlug": "minimum-time-to-revert-word-to-initial-state-ii",
        "infer_hints": [
            "What if the characters of word were rotated?",
            "Use a hashmap to store the positions of each character in the word.",
            "If you have 2 strings of the same, then it's impossible to get back to the original string.",
            "We can use a sliding window with a dynamic array to solve this problem.",
            "How many operations are needed to revert the word to its initial state?",
            "If the first k characters of word are different from the last k characters of word, you can perform the operations at the same time. Otherwise, you need to perform the operations at different times.",
            "Use two pointers to keep track of the two most recent substrings that you have removed.",
            "What if we try to add the characters to the end of the word?",
            "What if we instead consider the \"cost\" of moving the characters to the end of the word as a cost function?",
            "Can you use a set to keep track of all possible states?",
            "Try to find a pattern of the smallest possible time.",
            "Use a deque and keep track of the prefixes of the word.",
            "We can do a dynamic programming on the string.",
            "Can you think of a way to use Manacher's algorithm to solve this problem?",
            "If you remove all the first k characters of word and add k characters to the end, what will be the result?",
            "Think of a brute force solution.",
            "Can we find the longest prefix that is repeated?",
            "How many characters are removed at the start of the game?",
            "We can simulate the process, but it's hard to make it optimal.  Can you optimize it?",
            "Think of the operation as a shift in a cycle."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumTimeToInitialState(string word, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumTimeToInitialState(String word, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumTimeToInitialState(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumTimeToInitialState(self, word: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumTimeToInitialState(char* word, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumTimeToInitialState(string word, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumTimeToInitialState = function(word, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumTimeToInitialState(word: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumTimeToInitialState($word, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumTimeToInitialState(_ word: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumTimeToInitialState(word: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumTimeToInitialState(String word, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumTimeToInitialState(word string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_time_to_initial_state(word, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumTimeToInitialState(word: String, k: Int): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_time_to_initial_state(word: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-time-to-initial-state word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_time_to_initial_state(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_time_to_initial_state(Word, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_time_to_initial_state(word :: String.t, k :: integer) :: integer\n  def minimum_time_to_initial_state(word, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>At every second, you must perform the following operations:</p>\n\n<ul>\n\t<li>Remove the first <code>k</code> characters of <code>word</code>.</li>\n\t<li>Add any <code>k</code> characters to the end of <code>word</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that you do not necessarily need to add the same characters that you removed. However, you must perform <strong>both</strong> operations at every second.</p>\n\n<p>Return <em>the <strong>minimum</strong> time greater than zero required for</em> <code>word</code> <em>to revert to its <strong>initial</strong> state</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;aba&quot; from the prefix of word, and add characters &quot;bac&quot; to the end of word. Thus, word becomes equal to &quot;cababac&quot;.\nAt the 2nd second, we remove characters &quot;cab&quot; from the prefix of word, and add &quot;aba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 4\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;abac&quot; from the prefix of word, and add characters &quot;caba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abcbabcd&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to &quot;abcbabcd&quot; and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 50 </code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abacaba\"\n3\n\"abacaba\"\n4\n\"abcbabcd\"\n2",
        "formTitle": "[3029]Minimum Time to Revert Word to Initial State I",
        "frequency": 0.0,
        "frontendQuestionId": "3029",
        "hints": [
            "Find the longest suffix which is also a prefix and the length is multiple of <code>k</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumTimeToInitialState",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3297",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"abacaba\"\n3",
        "title": "Minimum Time to Revert Word to Initial State I",
        "titleSlug": "minimum-time-to-revert-word-to-initial-state-i",
        "infer_hints": [
            "Do a simulation.",
            "Use a hashmap to keep track of the smallest prefix that can be restored to the initial state of the word.",
            "Consider all possible states of the word.",
            "The answer will be at most n, where n is the length of word.",
            "If we have to return the word to its initial state, we must remove and add the same characters.",
            "If you have the same string word[i...i+k] for all i, then you can revert word to its initial state in one second.",
            "Use the \"Rolling Hash\" technique to determine if the string equals its reversed version.",
            "The key to this problem is realizing that if the word can be reverted back to its initial state, then the word can be reverted back to its initial state in 2 steps.",
            "We need to calculate the prefix and suffix of word.",
            "Use a greedy approach.",
            "What if we can reverse the string?",
            "We can simulate the process.",
            "For each prefix of word, calculate the time it takes to revert it to its initial state.",
            "If the first k characters are the same for all strings, then we only need to perform the operation at every second.",
            "For each prefix, calculate the number of unique characters in it.",
            "If the string is of length n, then it takes n operations to remove all characters.",
            "How many times does the string need to be rotated to be in its initial state?",
            "Can you find the number of unique characters in word?",
            "Find the smallest time for a word to return to its initial state by comparing the characters in the prefix of the word.",
            "Can we use a stack to keep track of the characters we have removed?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxSelectedElements(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxSelectedElements(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxSelectedElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxSelectedElements(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxSelectedElements(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxSelectedElements(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSelectedElements = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxSelectedElements(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSelectedElements($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxSelectedElements(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxSelectedElements(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxSelectedElements(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxSelectedElements(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_selected_elements(nums)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxSelectedElements(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_selected_elements(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-selected-elements nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_selected_elements(Nums :: [integer()]) -> integer().\nmax_selected_elements(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_selected_elements(nums :: [integer]) :: integer\n  def max_selected_elements(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of <strong>positive</strong> integers.</p>\n\n<p>Initially, you can increase the value of <strong>any</strong> element in the array by <strong>at most</strong> <code>1</code>.</p>\n\n<p>After that, you need to select <strong>one or more</strong> elements from the final array such that those elements are <strong>consecutive</strong> when sorted in increasing order. For example, the elements <code>[3, 4, 5]</code> are consecutive while <code>[3, 4, 6]</code> and <code>[1, 1, 2, 3]</code> are not.<!-- notionvc: 312f8c5d-40d0-4cd1-96cc-9e96a846735b --></p>\n\n<p>Return <em>the <strong>maximum</strong> number of elements that you can select</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,5,1,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can increase the elements at indices 0 and 3. The resulting array is nums = [3,1,5,2,1].\nWe select the elements [<u><strong>3</strong></u>,<u><strong>1</strong></u>,5,<u><strong>2</strong></u>,1] and we sort them to obtain [1,2,3], which are consecutive.\nIt can be shown that we cannot select more than 3 consecutive elements.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,7,10]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The maximum consecutive elements that we can select is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[2,1,5,1,1]\n[1,4,7,10]",
        "formTitle": "[3041]Maximize Consecutive Elements in an Array After Modification",
        "frequency": 0.0,
        "frontendQuestionId": "3041",
        "hints": [
            "Sort the array and try using dynamic programming.",
            "Let <code>dp[i]</code> be the length of the longest consecutive elements ending at element at index <code>i</code> in the sorted array."
        ],
        "level": 3,
        "metaData": {
            "name": "maxSelectedElements",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3298",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,1,5,1,1]",
        "title": "Maximize Consecutive Elements in an Array After Modification",
        "titleSlug": "maximize-consecutive-elements-in-an-array-after-modification",
        "infer_hints": [
            "If we sort the array, we can always make the current element equal to the next one.",
            "What if you can increase all elements by 1?",
            "The array will have only one sequence of consecutive numbers.",
            "If you want to increase the value of an element to the maximum possible, you should increase it to the smallest number that can be increased to.",
            "We can sort the array and try to find the longest consecutive sequence.",
            "Use a prefix sum array to count the number of consecutive elements.",
            "Sort the array and find the length of the longest sequence.",
            "How can you find the maximum number of consecutive elements after modifying each element at most once?",
            "Think of the smallest possible values for the elements in the array.",
            "How many operations are needed to convert all elements in the array to 1?",
            "Can you optimize the problem in a way that you use the array in a way that allows you to find the next number easily?",
            "If we try to increase the element at the index `i`, then we have to increase the elements at the indices `i - 1` and `i + 1` as well.",
            "If the difference between the current number and the next number is greater than 1, then we can increase the current number to the next number - 1.",
            "For each element, check the number of consecutive elements that we can increase.",
            "How many consecutive elements can you have?",
            "What if you try to sort the array first?",
            "If we can increase an element, we can also increase the elements on its right.",
            "Sort the array and find the longest subarray with a difference of 1.",
            "Sort the array, then iterate through it, and at each point, add 1 to the answer if the next element in the sorted array is the current element plus one.",
            "If you have an array [a, b, c] and you increase the first element by 1, the new array will be [b+1, b+1, b+1]. If you increase the second element by 1, the new array will be [a+1, c+1, c+1]. If you increase the third element by 1, the new array will be [a+1, b+1, c+1]."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumLength(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumLength(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumLength(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumLength(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumLength = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumLength(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumLength($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumLength(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumLength(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumLength(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumLength(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_length(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumLength(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_length(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_length(Nums :: [integer()]) -> integer().\nmaximum_length(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_length(nums :: [integer]) :: integer\n  def maximum_length(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of <strong>positive</strong> integers <code>nums</code>.</p>\n\n<p>You need to select a <span data-keyword=\"subset\">subset</span> of <code>nums</code> which satisfies the following condition:</p>\n\n<ul>\n\t<li>You can place the selected elements in a <strong>0-indexed</strong> array such that it follows the pattern: <code>[x, x<sup>2</sup>, x<sup>4</sup>, ..., x<sup>k/2</sup>, x<sup>k</sup>, x<sup>k/2</sup>, ..., x<sup>4</sup>, x<sup>2</sup>, x]</code> (<strong>Note</strong> that <code>k</code> can be be any <strong>non-negative</strong> power of <code>2</code>). For example, <code>[2, 4, 16, 4, 2]</code> and <code>[3, 9, 3]</code> follow the pattern while <code>[2, 4, 8, 4, 2]</code> does not.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> number of elements in a subset that satisfies these conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,1,2,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can select the subset {4,2,2}, which can be placed in the array as [2,4,2] which follows the pattern and 2<sup>2</sup> == 4. Hence the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can select the subset {1}, which can be placed in the array as [1] which follows the pattern. Hence the answer is 1. Note that we could have also selected the subsets {2}, {3}, or {4}, there may be multiple subsets which provide the same answer. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[5,4,1,2,2]\n[1,3,2,4]",
        "formTitle": "[3020]Find the Maximum Number of Elements in Subset",
        "frequency": 0.0,
        "frontendQuestionId": "3020",
        "hints": [
            "We can select an odd number of <code>1</code>’s.",
            "Put all the values into a HashSet. We can start from each <code>x > 1</code> as the smallest chosen value and we can find the longest subset by checking the new values (which are the square of the previous value) in the set by brute force.",
            "Note when <code>x > 1</code>, <code>x<sup>2</sup></code>, <code>x<sup>4</sup></code>, <code>x<sup>8</sup></code>, … increases very fast, the longest subset with smallest value x cannot be very long. (The length is <code>O(log(log(10<sup>9</sup>)))</code>.",
            "Hence we can directly check all lengths less than <code>10</code> for all values of <code>x</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3299",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[5,4,1,2,2]",
        "title": "Find the Maximum Number of Elements in Subset",
        "titleSlug": "find-the-maximum-number-of-elements-in-subset",
        "infer_hints": [
            "How many elements are there in the subset?",
            "You need to find the maximum number of elements in a subset such that the product of elements in this subset follows the pattern.",
            "We can check if the number is a square of a number that is a power of 2.",
            "Sort the array.",
            "Use a greedy approach.",
            "Can you solve this problem for each number in nums?",
            "Sort the array in decreasing order.",
            "Try to find the maximum number of elements in a subset.",
            "If you are given a number, can you find the number of its square root?",
            "For every number, you can either choose it or not.",
            "The maximum number of elements in a subset is equal to the number of different prime factors.",
            "The array can be sorted in increasing order.",
            "The number of elements in a subset must be at most 2^15.",
            "How can we ensure that the pattern is followed by the selected elements?",
            "How can we generate all possible subsets of nums?",
            "Find all the distinct prime factors of all the numbers.",
            "Try to find the smallest number that can be represented as <code>x^k</code>.",
            "Think about what you need to check for each number in the array.",
            "Think of a DP(Dynamic Programming) approach.",
            "We can check for every number if it can be placed in the subset."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> beautifulIndices(string s, string a, string b, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def beautifulIndices(self, s, a, b, k):\n        \"\"\"\n        :type s: str\n        :type a: str\n        :type b: str\n        :type k: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* beautifulIndices(char* s, char* a, char* b, int k, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public IList<int> BeautifulIndices(string s, string a, string b, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {string} a\n * @param {string} b\n * @param {number} k\n * @return {number[]}\n */\nvar beautifulIndices = function(s, a, b, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function beautifulIndices(s: string, a: string, b: string, k: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $a\n     * @param String $b\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function beautifulIndices($s, $a, $b, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func beautifulIndices(_ s: String, _ a: String, _ b: String, _ k: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun beautifulIndices(s: String, a: String, b: String, k: Int): List<Int> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> beautifulIndices(String s, String a, String b, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func beautifulIndices(s string, a string, b string, k int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {String} a\n# @param {String} b\n# @param {Integer} k\n# @return {Integer[]}\ndef beautiful_indices(s, a, b, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def beautifulIndices(s: String, a: String, b: String, k: Int): List[Int] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn beautiful_indices(s: String, a: String, b: String, k: i32) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (beautiful-indices s a b k)\n  (-> string? string? string? exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec beautiful_indices(S :: unicode:unicode_binary(), A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), K :: integer()) -> [integer()].\nbeautiful_indices(S, A, B, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec beautiful_indices(s :: String.t, a :: String.t, b :: String.t, k :: integer) :: [integer]\n  def beautiful_indices(s, a, b, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code>, a string <code>a</code>, a string <code>b</code>, and an integer <code>k</code>.</p>\n\n<p>An index <code>i</code> is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt;= s.length - a.length</code></li>\n\t<li><code>s[i..(i + a.length - 1)] == a</code></li>\n\t<li>There exists an index <code>j</code> such that:\n\t<ul>\n\t\t<li><code>0 &lt;= j &lt;= s.length - b.length</code></li>\n\t\t<li><code>s[j..(j + b.length - 1)] == b</code></li>\n\t\t<li><code>|j - i| &lt;= k</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the array that contains beautiful indices in <strong>sorted order from smallest to largest</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;isawsquirrelnearmysquirrelhouseohmy&quot;, a = &quot;my&quot;, b = &quot;squirrel&quot;, k = 15\n<strong>Output:</strong> [16,33]\n<strong>Explanation:</strong> There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == &quot;my&quot; and there exists an index 4 with s[4..11] == &quot;squirrel&quot; and |16 - 4| &lt;= 15.\n- The index 33 is beautiful as s[33..34] == &quot;my&quot; and there exists an index 18 with s[18..25] == &quot;squirrel&quot; and |33 - 18| &lt;= 15.\nThus we return [16,33] as the result.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, a = &quot;a&quot;, b = &quot;a&quot;, k = 4\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == &quot;a&quot; and there exists an index 0 with s[0..0] == &quot;a&quot; and |0 - 0| &lt;= 4.\nThus we return [0] as the result.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>s</code>, <code>a</code>, and <code>b</code> contain only lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15\n\"abcd\"\n\"a\"\n\"a\"\n4",
        "formTitle": "[3008]Find Beautiful Indices in the Given Array II",
        "frequency": 0.0,
        "frontendQuestionId": "3008",
        "hints": [
            "Use KMP or string hashing."
        ],
        "level": 3,
        "metaData": {
            "name": "beautifulIndices",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "a",
                    "type": "string"
                },
                {
                    "name": "b",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3303",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
        "title": "Find Beautiful Indices in the Given Array II",
        "titleSlug": "find-beautiful-indices-in-the-given-array-ii",
        "infer_hints": [
            "Can we use the fact that the index j is in the range [0, s.length - b.length] to do the same for the index i?",
            "The maximum number of indices that we need to check is O(n)!",
            "You can use a map to keep track of the last seen positions of each substring.",
            "Create a list of all indices where the string a appears in s. Then for each of these indices, check all indices where the string b appears in s.",
            "If we consider the prefixes of the string, how many prefixes can be of the string b?",
            "Can you solve this problem in O(n) time complexity?",
            "Can we do this in O(n) time complexity?",
            "If there exists an index j such that s[j..(j + b.length - 1)] == b, can we find such an index i such that s[i..(i + a.length - 1)] == a?",
            "You can use two pointers to iterate through the string.",
            "Use the rolling hash concept to check if there exists an index j such that s[j..(j + b.length - 1)] == b and |j - i| &lt;= k.",
            "Try to use a sliding window to find all the possible indices.",
            "For every position i, try to find the next occurrence of b.",
            "For each index <code>i</code>, try to find the next index <code>j</code> that meets the conditions.",
            "Use a hashmap to store all the indices where string a and string b are found.",
            "Can we use a prefix sum to solve this problem?",
            "You can use the Rabin-Karp algorithm for string matching.",
            "Find all indices where s[i:i+len(a)] == a and s[j:j+len(b)] == b for j in the range (i-k, i+k).",
            "Use a sliding window approach with 2 pointers to keep track of the number of occurrences of strings a and b.",
            "Use the concept of sliding window to solve this problem.",
            "Find all the positions of a and b in the string."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long countPrefixSuffixPairs(vector<string>& words) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long countPrefixSuffixPairs(String[] words) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countPrefixSuffixPairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long countPrefixSuffixPairs(char** words, int wordsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long CountPrefixSuffixPairs(string[] words) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar countPrefixSuffixPairs = function(words) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countPrefixSuffixPairs(words: string[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function countPrefixSuffixPairs($words) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countPrefixSuffixPairs(_ words: [String]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countPrefixSuffixPairs(words: Array<String>): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countPrefixSuffixPairs(List<String> words) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countPrefixSuffixPairs(words []string) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} words\n# @return {Integer}\ndef count_prefix_suffix_pairs(words)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countPrefixSuffixPairs(words: Array[String]): Long = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_prefix_suffix_pairs(words: Vec<String>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-prefix-suffix-pairs words)\n  (-> (listof string?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_prefix_suffix_pairs(Words :: [unicode:unicode_binary()]) -> integer().\ncount_prefix_suffix_pairs(Words) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_prefix_suffix_pairs(words :: [String.t]) :: integer\n  def count_prefix_suffix_pairs(words) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code>.</p>\n\n<p>Let&#39;s define a <strong>boolean</strong> function <code>isPrefixAndSuffix</code> that takes two strings, <code>str1</code> and <code>str2</code>:</p>\n\n<ul>\n\t<li><code>isPrefixAndSuffix(str1, str2)</code> returns <code>true</code> if <code>str1</code> is <strong>both</strong> a <span data-keyword=\"string-prefix\">prefix</span> and a <span data-keyword=\"string-suffix\">suffix</span> of <code>str2</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>For example, <code>isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;)</code> is <code>true</code> because <code>&quot;aba&quot;</code> is a prefix of <code>&quot;ababa&quot;</code> and also a suffix, but <code>isPrefixAndSuffix(&quot;abc&quot;, &quot;abcd&quot;)</code> is <code>false</code>.</p>\n\n<p>Return <em>an integer denoting the <strong>number</strong> of index pairs </em><code>(i<em>, </em>j)</code><em> such that </em><code>i &lt; j</code><em>, and </em><code>isPrefixAndSuffix(words[i], words[j])</code><em> is </em><code>true</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;aba&quot;,&quot;ababa&quot;,&quot;aa&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;a&quot;, &quot;aba&quot;) is true.\ni = 0 and j = 2 because isPrefixAndSuffix(&quot;a&quot;, &quot;ababa&quot;) is true.\ni = 0 and j = 3 because isPrefixAndSuffix(&quot;a&quot;, &quot;aa&quot;) is true.\ni = 1 and j = 2 because isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;) is true.\nTherefore, the answer is 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;pa&quot;,&quot;papa&quot;,&quot;ma&quot;,&quot;mama&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;pa&quot;, &quot;papa&quot;) is true.\ni = 2 and j = 3 because isPrefixAndSuffix(&quot;ma&quot;, &quot;mama&quot;) is true.\nTherefore, the answer is 2.  </pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abab&quot;,&quot;ab&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(&quot;abab&quot;, &quot;ab&quot;) is false.\nTherefore, the answer is 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n\t<li>The sum of the lengths of all <code>words[i]</code> does not exceed <code>5 * 10<sup>5</sup></code>.</li>\n</ul>\n",
        "exampleTestcases": "[\"a\",\"aba\",\"ababa\",\"aa\"]\n[\"pa\",\"papa\",\"ma\",\"mama\"]\n[\"abab\",\"ab\"]",
        "formTitle": "[3045]Count Prefix and Suffix Pairs II",
        "frequency": 0.0,
        "frontendQuestionId": "3045",
        "hints": [
            "We can use a trie to solve it.",
            "Process all <code>words[i]</code> from left to right. The trie stores the pair <code>(words[i][j], words[i][words[i].length - j - 1])</code> as a single character; we process all the words in this way.",
            "During insertion, keep a counter in each trie node, as in a normal trie. If the current node is the end of a word (namely, the pair on that node is <code>(words[i][words[i].length - 1], words[i][0])</code>), increase the node's counter by <code>1</code>.",
            "From left to right, insert each word into the trie, and increase our final result by each node's counter when going down the trie during insertion. This means there was at least one word that is both a prefix and a suffix of the current word before."
        ],
        "level": 3,
        "metaData": {
            "name": "countPrefixSuffixPairs",
            "params": [
                {
                    "name": "words",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3305",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[\"a\",\"aba\",\"ababa\",\"aa\"]",
        "title": "Count Prefix and Suffix Pairs II",
        "titleSlug": "count-prefix-and-suffix-pairs-ii",
        "infer_hints": [
            "What if we preprocess all possible suffixes of a word?",
            "Think about how you can check whether a string is a prefix or a suffix of another string.",
            "Use a Trie to store all the prefixes and suffixes.",
            "For each string in words, count the number of strings that are prefixes of it, and the number of strings that are suffixes of it.",
            "You can use a trie to solve this problem.",
            "You can use a trie to solve this problem.",
            "Try to find a solution with a O(n log(n)) time complexity.",
            "We can solve this problem in O(nlogn) time by using a trie.",
            "For each string, try all possible prefixes and suffixes.",
            "Try to use a data structure that allows fast prefix and suffix checks.",
            "We need to count how many pairs of strings <code>words[i]</code> and <code>words[j]</code> are prefixes and suffixes of each other. ",
            "For each string, we need to check whether it can be a prefix and a suffix of any other string.",
            "Try to build a prefix and suffix tree for all the words.",
            "Think about the problem in the opposite direction.  We can compute the number of prefixes and suffixes of each word and store them.",
            "For each word, count how many words have it as a prefix or a suffix.",
            "The length of the prefix and suffix can be at most 5 * 10^5.  What data structure can we use to store them?",
            "You can solve this problem with prefix sums and a trie.",
            "Use a trie to solve the problem.",
            "For each word, you can calculate the number of prefixes and suffixes.",
            "Use a hash map to store all the words[i] for fast lookup."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<long long> unmarkedSumArray(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long[] unmarkedSumArray(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def unmarkedSumArray(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def unmarkedSumArray(self, nums: List[int], queries: List[List[int]]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* unmarkedSumArray(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long[] UnmarkedSumArray(int[] nums, int[][] queries) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar unmarkedSumArray = function(nums, queries) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function unmarkedSumArray(nums: number[], queries: number[][]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function unmarkedSumArray($nums, $queries) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func unmarkedSumArray(_ nums: [Int], _ queries: [[Int]]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun unmarkedSumArray(nums: IntArray, queries: Array<IntArray>): LongArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> unmarkedSumArray(List<int> nums, List<List<int>> queries) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func unmarkedSumArray(nums []int, queries [][]int) []int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef unmarked_sum_array(nums, queries)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def unmarkedSumArray(nums: Array[Int], queries: Array[Array[Int]]): Array[Long] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn unmarked_sum_array(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i64> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (unmarked-sum-array nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec unmarked_sum_array(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\nunmarked_sum_array(Nums, Queries) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec unmarked_sum_array(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def unmarked_sum_array(nums, queries) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of size <code>n</code> consisting of positive integers.</p>\n\n<p>You are also given a 2D array <code>queries</code> of size <code>m</code> where <code>queries[i] = [index<sub>i</sub>, k<sub>i</sub>]</code>.</p>\n\n<p>Initially all elements of the array are <strong>unmarked</strong>.</p>\n\n<p>You need to apply <code>m</code> queries on the array in order, where on the <code>i<sup>th</sup></code> query you do the following:</p>\n\n<ul>\n\t<li>Mark the element at index <code>index<sub>i</sub></code> if it is not already marked.</li>\n\t<li>Then mark <code>k<sub>i</sub></code> unmarked elements in the array with the <strong>smallest</strong> values. If multiple such elements exist, mark the ones with the smallest indices. And if less than <code>k<sub>i</sub></code> unmarked elements exist, then mark all of them.</li>\n</ul>\n\n<p>Return <em>an array answer of size </em><code>m</code><em> where </em><code>answer[i]</code><em> is the <strong>sum</strong> of unmarked elements in the array after the </em><code>i<sup>th</sup></code><em> query</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,2,2,1,2,3,1], queries = [[1,2],[3,3],[4,2]]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">[8,3,0]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We do the following queries on the array:</p>\n\n<ul>\n\t<li>Mark the element at index <code>1</code>, and <code>2</code> of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are <code>nums = [<strong><u>1</u></strong>,<u><strong>2</strong></u>,2,<u><strong>1</strong></u>,2,3,1]</code>. The sum of unmarked elements is <code>2 + 2 + 3 + 1 = 8</code>.</li>\n\t<li>Mark the element at index <code>3</code>, since it is already marked we skip it. Then we mark <code>3</code> of the smallest unmarked elements with the smallest indices, the marked elements now are <code>nums = [<strong><u>1</u></strong>,<u><strong>2</strong></u>,<u><strong>2</strong></u>,<u><strong>1</strong></u>,<u><strong>2</strong></u>,3,<strong><u>1</u></strong>]</code>. The sum of unmarked elements is <code>3</code>.</li>\n\t<li>Mark the element at index <code>4</code>, since it is already marked we skip it. Then we mark <code>2</code> of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are <code>nums = [<strong><u>1</u></strong>,<u><strong>2</strong></u>,<u><strong>2</strong></u>,<u><strong>1</strong></u>,<u><strong>2</strong></u>,<strong><u>3</u></strong>,<u><strong>1</strong></u>]</code>. The sum of unmarked elements is <code>0</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,4,2,3], queries = [[0,1]]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">[7]</span></p>\n\n<p><strong>Explanation: </strong> We do one query which is mark the element at index <code>0</code> and mark the smallest element among unmarked elements. The marked elements will be <code>nums = [<strong><u>1</u></strong>,4,<u><strong>2</strong></u>,3]</code>, and the sum of unmarked elements is <code>4 + 3 = 7</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>m == queries.length</code></li>\n\t<li><code>1 &lt;= m &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= index<sub>i</sub>, k<sub>i</sub> &lt;= n - 1</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,2,1,2,3,1]\n[[1,2],[3,3],[4,2]]\n[1,4,2,3]\n[[0,1]]",
        "formTitle": "[3080]Mark Elements on Array by Performing Queries",
        "frequency": 0.0,
        "frontendQuestionId": "3080",
        "hints": [
            "Use another array to keep track of marked indices.",
            "Sort the array <code>nums</code> to be able to find the smallest unmarked elements quickly in each query."
        ],
        "level": 2,
        "metaData": {
            "name": "unmarkedSumArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "queries",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3306",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,2,1,2,3,1]\n[[1,2],[3,3],[4,2]]",
        "title": "Mark Elements on Array by Performing Queries",
        "titleSlug": "mark-elements-on-array-by-performing-queries",
        "infer_hints": [
            "Use a priority queue to keep track of the smallest unmarked elements.",
            "Try to maintain the minimum heap with the k smallest elements.",
            "How can you use a heap to keep track of the unmarked elements?",
            "Use a set to store the indices of the marked elements.",
            "For each query, you can maintain a sorted list of indices and values of unmarked elements.",
            "We can use a set or a heap to keep track of the smallest unmarked elements.",
            "How can we perform the queries in a single pass?",
            "For each query, first mark the element at index i.",
            "Can you perform the operation in-place without extra space?",
            "Can you keep track of the smallest unmarked element's index and value at each step?",
            "How to check if an element is marked or not?",
            "Create an array of boolean values of size n to denote whether an index is marked or not.",
            "Use a heap to keep track of unmarked elements and their indices.",
            "How many elements have been marked so far?",
            "Sort the array and then use a priority queue to find the minimum unmarked element.",
            "Use a priority queue (or heap) to keep track of unmarked elements and their indices.",
            "Create an array to store the count of numbers up to a certain point.",
            "Use a heap data structure.",
            "Use a priority queue to store the unmarked elements and their indices.",
            "Can you do it in O(n log n) time complexity?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumValueSum(vector<int>& nums, int k, vector<vector<int>>& edges) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumValueSum(int[] nums, int k, int[][] edges) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumValueSum(self, nums, k, edges):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumValueSum(self, nums: List[int], k: int, edges: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumValueSum(int* nums, int numsSize, int k, int** edges, int edgesSize, int* edgesColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumValueSum(int[] nums, int k, int[][] edges) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number[][]} edges\n * @return {number}\n */\nvar maximumValueSum = function(nums, k, edges) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumValueSum(nums: number[], k: number, edges: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function maximumValueSum($nums, $k, $edges) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumValueSum(_ nums: [Int], _ k: Int, _ edges: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumValueSum(nums: IntArray, k: Int, edges: Array<IntArray>): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumValueSum(List<int> nums, int k, List<List<int>> edges) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumValueSum(nums []int, k int, edges [][]int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer[][]} edges\n# @return {Integer}\ndef maximum_value_sum(nums, k, edges)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumValueSum(nums: Array[Int], k: Int, edges: Array[Array[Int]]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_value_sum(nums: Vec<i32>, k: i32, edges: Vec<Vec<i32>>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-value-sum nums k edges)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_value_sum(Nums :: [integer()], K :: integer(), Edges :: [[integer()]]) -> integer().\nmaximum_value_sum(Nums, K, Edges) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_value_sum(nums :: [integer], k :: integer, edges :: [[integer]]) :: integer\n  def maximum_value_sum(nums, k, edges) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There exists an <strong>undirected</strong> tree with <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. You are given a <strong>0-indexed</strong> 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the tree. You are also given a <strong>positive</strong> integer <code>k</code>, and a <strong>0-indexed</strong> array of <strong>non-negative</strong> integers <code>nums</code> of length <code>n</code>, where <code>nums[i]</code> represents the <strong>value</strong> of the node numbered <code>i</code>.</p>\n\n<p>Alice wants the sum of values of tree nodes to be <strong>maximum</strong>, for which Alice can perform the following operation <strong>any</strong> number of times (<strong>including zero</strong>) on the tree:</p>\n\n<ul>\n\t<li>Choose any edge <code>[u, v]</code> connecting the nodes <code>u</code> and <code>v</code>, and update their values as follows:\n\n\t<ul>\n\t\t<li><code>nums[u] = nums[u] XOR k</code></li>\n\t\t<li><code>nums[v] = nums[v] XOR k</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> possible <strong>sum</strong> of the <strong>values</strong> Alice can achieve by performing the operation <strong>any</strong> number of times</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012513.png\" style=\"width: 300px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Alice can achieve the maximum sum of 6 using a single operation:\n- Choose the edge [0,2]. nums[0] and nums[2] become: 1 XOR 3 = 2, and the array nums becomes: [1,2,1] -&gt; [2,2,2].\nThe total sum of values is 2 + 2 + 2 = 6.\nIt can be shown that 6 is the maximum achievable sum of values.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/09/screenshot-2024-01-09-220017.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 300px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> nums = [2,3], k = 7, edges = [[0,1]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Alice can achieve the maximum sum of 9 using a single operation:\n- Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 = 5 and nums[1] become: 3 XOR 7 = 4, and the array nums becomes: [2,3] -&gt; [5,4].\nThe total sum of values is 5 + 4 = 9.\nIt can be shown that 9 is the maximum achievable sum of values.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012641.png\" style=\"width: 600px; height: 233px;padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The maximum achievable sum is 42 which can be achieved by Alice performing no operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li>The input is generated such that <code>edges</code> represent&nbsp;a valid tree.</li>\n</ul>\n",
        "exampleTestcases": "[1,2,1]\n3\n[[0,1],[0,2]]\n[2,3]\n7\n[[0,1]]\n[7,7,7,7,7,7]\n3\n[[0,1],[0,2],[0,3],[0,4],[0,5]]",
        "formTitle": "[3068]Find the Maximum Sum of Node Values",
        "frequency": 0.0,
        "frontendQuestionId": "3068",
        "hints": [
            "Select any node as the root.",
            "Let <code>dp[x][c]</code> be the maximum sum we can get for the subtree rooted at node <code>x</code>, where <code>c</code> is a boolean representing whether the edge between node <code>x</code> and its parent (if any) is selected or not.",
            "<code>dp[x][c] = max(sum(dp[y][cy]) + v(nums[x], sum(cy) + c))</code>\r\nwhere <code>cy</code> is <code>0</code> or <code>1</code>. \r\nWhen <code>sum(cy) + c</code> is odd, <code>v(nums[x], sum(cy) + c) = nums[x] XOR k</code>. \r\nWhen <code>sum(cy) + c</code> is even, <code>v(nums[x], sum(cy) + c) = nums[x]</code>.",
            "There’s also an easier solution - does the parity of the number of elements where <code>nums[i] XOR k > nums[i]</code> help?"
        ],
        "level": 3,
        "metaData": {
            "name": "maximumValueSum",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                },
                {
                    "name": "edges",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3307",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,1]\n3\n[[0,1],[0,2]]",
        "title": "Find the Maximum Sum of Node Values",
        "titleSlug": "find-the-maximum-sum-of-node-values",
        "infer_hints": [
            "Do a DFS to find the values of the subtree of each node.",
            "For each node, find the maximum value if it is a root of the subtree.",
            "For each node, you can choose to keep the node value, or replace it with the value of another node.",
            "We can solve this problem by calculating the sum of all nodes, and then try to maximize the result.",
            "Can you solve this problem using depth-first search (DFS)?",
            "Do a depth-first search (DFS) to find the size of each subtree.",
            "What are the possible values for the XOR operation?",
            "Use depth-first search (DFS) to compute the sum of each subtree.",
            "Do a DFS on the tree and keep track of the best answer for each subtree.",
            "Try to use depth-first search (DFS) and dynamic programming (DP).",
            "How to calculate the sum of all nodes?",
            "Do we need to do something special for the root node?",
            "Can we use dynamic programming to solve this problem?",
            "For each node, calculate the maximum value that can be obtained by applying XOR operation.",
            "Try to find the sum of the maximum values for each subtree.",
            "Consider each node as the root of the tree.",
            "Use depth-first search to compute the maximum achievable sum for each node.",
            "For each node, find the maximum sum that can be achieved by choosing some of its children and XORing with k.",
            "How many times does each number appear in the tree?",
            "Find the subtree that can get the maximum sum."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string lastNonEmptyString(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String lastNonEmptyString(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def lastNonEmptyString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def lastNonEmptyString(self, s: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* lastNonEmptyString(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string LastNonEmptyString(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar lastNonEmptyString = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function lastNonEmptyString(s: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function lastNonEmptyString($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func lastNonEmptyString(_ s: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun lastNonEmptyString(s: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String lastNonEmptyString(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func lastNonEmptyString(s string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {String}\ndef last_non_empty_string(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def lastNonEmptyString(s: String): String = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn last_non_empty_string(s: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (last-non-empty-string s)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec last_non_empty_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlast_non_empty_string(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec last_non_empty_string(s :: String.t) :: String.t\n  def last_non_empty_string(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>.</p>\n\n<p>Consider performing the following operation until <code>s</code> becomes <strong>empty</strong>:</p>\n\n<ul>\n\t<li>For <strong>every</strong> alphabet character from <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>, remove the <strong>first</strong> occurrence of that character in <code>s</code> (if it exists).</li>\n</ul>\n\n<p>For example, let initially <code>s = &quot;aabcbbca&quot;</code>. We do the following operations:</p>\n\n<ul>\n\t<li>Remove the underlined characters <code>s = &quot;<u><strong>a</strong></u>a<strong><u>bc</u></strong>bbca&quot;</code>. The resulting string is <code>s = &quot;abbca&quot;</code>.</li>\n\t<li>Remove the underlined characters <code>s = &quot;<u><strong>ab</strong></u>b<u><strong>c</strong></u>a&quot;</code>. The resulting string is <code>s = &quot;ba&quot;</code>.</li>\n\t<li>Remove the underlined characters <code>s = &quot;<u><strong>ba</strong></u>&quot;</code>. The resulting string is <code>s = &quot;&quot;</code>.</li>\n</ul>\n\n<p>Return <em>the value of the string </em><code>s</code><em> right <strong>before</strong> applying the <strong>last</strong> operation</em>. In the example above, answer is <code>&quot;ba&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabcbbca&quot;\n<strong>Output:</strong> &quot;ba&quot;\n<strong>Explanation:</strong> Explained in the statement.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;\n<strong>Output:</strong> &quot;abcd&quot;\n<strong>Explanation:</strong> We do the following operation:\n- Remove the underlined characters s = &quot;<u><strong>abcd</strong></u>&quot;. The resulting string is s = &quot;&quot;.\nThe string just before the last operation is &quot;abcd&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aabcbbca\"\n\"abcd\"",
        "formTitle": "[3039]Apply Operations to Make String Empty",
        "frequency": 0.0,
        "frontendQuestionId": "3039",
        "hints": [
            "Before the last operation, only the most frequent characters in the original string will remain.",
            "Keep only the last occurence of each of the most frequent characters."
        ],
        "level": 2,
        "metaData": {
            "name": "lastNonEmptyString",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3308",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"aabcbbca\"",
        "title": "Apply Operations to Make String Empty",
        "titleSlug": "apply-operations-to-make-string-empty",
        "infer_hints": [
            "Use stack to keep track of the characters.",
            "You can use a stack or a heap.",
            "Find the first occurrence of each character in the string.",
            "Use a stack to store the characters.",
            "We can sort the string s by its frequency of each character.",
            "Use the operation on the smallest lexicographically character.",
            "Use a stack to solve this problem.",
            "What if you just keep track of the count of each letter in the string?",
            "The idea is to remove all occurrences of a character from the string.",
            "Keep track of the minimum character that is not removed yet.",
            "How to count the frequency of each character?",
            "Keep track of the smallest character in the string.",
            "Keep track of the first occurrence of each character in the string.",
            "For each character, what is the last position it appears in?",
            "Try to remove the first character from each operation.",
            "How can you solve this using a priority queue or a stack?",
            "Try to find a pattern in the given string.",
            "You can use the deque data structure in Python to perform the required operations.",
            "Use a stack.",
            "Keep track of the smallest lexicographical character you can take."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countPrefixSuffixPairs(vector<string>& words) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countPrefixSuffixPairs(String[] words) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countPrefixSuffixPairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countPrefixSuffixPairs(char** words, int wordsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountPrefixSuffixPairs(string[] words) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar countPrefixSuffixPairs = function(words) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countPrefixSuffixPairs(words: string[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function countPrefixSuffixPairs($words) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countPrefixSuffixPairs(_ words: [String]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countPrefixSuffixPairs(words: Array<String>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countPrefixSuffixPairs(List<String> words) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countPrefixSuffixPairs(words []string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} words\n# @return {Integer}\ndef count_prefix_suffix_pairs(words)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countPrefixSuffixPairs(words: Array[String]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_prefix_suffix_pairs(words: Vec<String>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-prefix-suffix-pairs words)\n  (-> (listof string?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_prefix_suffix_pairs(Words :: [unicode:unicode_binary()]) -> integer().\ncount_prefix_suffix_pairs(Words) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_prefix_suffix_pairs(words :: [String.t]) :: integer\n  def count_prefix_suffix_pairs(words) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code>.</p>\n\n<p>Let&#39;s define a <strong>boolean</strong> function <code>isPrefixAndSuffix</code> that takes two strings, <code>str1</code> and <code>str2</code>:</p>\n\n<ul>\n\t<li><code>isPrefixAndSuffix(str1, str2)</code> returns <code>true</code> if <code>str1</code> is <strong>both</strong> a <span data-keyword=\"string-prefix\">prefix</span> and a <span data-keyword=\"string-suffix\">suffix</span> of <code>str2</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>For example, <code>isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;)</code> is <code>true</code> because <code>&quot;aba&quot;</code> is a prefix of <code>&quot;ababa&quot;</code> and also a suffix, but <code>isPrefixAndSuffix(&quot;abc&quot;, &quot;abcd&quot;)</code> is <code>false</code>.</p>\n\n<p>Return <em>an integer denoting the <strong>number</strong> of index pairs </em><code>(i, j)</code><em> such that </em><code>i &lt; j</code><em>, and </em><code>isPrefixAndSuffix(words[i], words[j])</code><em> is </em><code>true</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;aba&quot;,&quot;ababa&quot;,&quot;aa&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;a&quot;, &quot;aba&quot;) is true.\ni = 0 and j = 2 because isPrefixAndSuffix(&quot;a&quot;, &quot;ababa&quot;) is true.\ni = 0 and j = 3 because isPrefixAndSuffix(&quot;a&quot;, &quot;aa&quot;) is true.\ni = 1 and j = 2 because isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;) is true.\nTherefore, the answer is 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;pa&quot;,&quot;papa&quot;,&quot;ma&quot;,&quot;mama&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;pa&quot;, &quot;papa&quot;) is true.\ni = 2 and j = 3 because isPrefixAndSuffix(&quot;ma&quot;, &quot;mama&quot;) is true.\nTherefore, the answer is 2.  </pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abab&quot;,&quot;ab&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(&quot;abab&quot;, &quot;ab&quot;) is false.\nTherefore, the answer is 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "[\"a\",\"aba\",\"ababa\",\"aa\"]\n[\"pa\",\"papa\",\"ma\",\"mama\"]\n[\"abab\",\"ab\"]",
        "formTitle": "[3042]Count Prefix and Suffix Pairs I",
        "frequency": 0.0,
        "frontendQuestionId": "3042",
        "hints": [
            "Iterate through all index pairs <code>(i, j)</code>, such that <code>i < j</code>, and check <code>isPrefixAndSuffix(words[i], words[j])</code>.",
            "The answer is the total number of pairs where <code>isPrefixAndSuffix(words[i], words[j]) == true</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "countPrefixSuffixPairs",
            "params": [
                {
                    "name": "words",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3309",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[\"a\",\"aba\",\"ababa\",\"aa\"]",
        "title": "Count Prefix and Suffix Pairs I",
        "titleSlug": "count-prefix-and-suffix-pairs-i",
        "infer_hints": [
            "Use a Trie to store the words.",
            "The prefix and suffix of a string are the same if and only if the string starts with the same substring it ends with.",
            "You can use a Trie to store all the words, and for each word you can try to find if it is a prefix and a suffix.",
            "Build an array of all prefixes and suffixes of each word.",
            "Try checking for each possible prefix and suffix.",
            "Create an array of all possible prefixes and suffixes of a word.",
            "How can we efficiently check if a word is a prefix or suffix of another word?",
            "Can you use a hash table to solve this problem?",
            "If we have a word and we know the prefixes and suffixes of the word, how can we efficiently count the pairs?",
            "Can you use a hash table to store all prefixes and suffixes of words[i]?",
            "Use a HashMap to store all the prefixes and suffixes.",
            "Can we use a Trie data structure for this problem?",
            "Consider all the prefixes and suffixes of a string.",
            "Build a hash table of the words, and then for each word, count the number of words that are prefixes or suffixes of it.",
            "We can solve this problem in O(n^2) time by checking all possible pairs of strings in the array.",
            "What is the maximum length of the word in words?",
            "Can we use a trie to solve this problem?",
            "What if we reverse each string in the list?",
            "Check all possible prefixes and suffixes of each word, and see if they appear in the array.",
            "Find all the prefixes and suffixes of each word."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<long long> countOfPairs(int n, int x, int y) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long[] countOfPairs(int n, int x, int y) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countOfPairs(self, n, x, y):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :type y: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countOfPairs(self, n: int, x: int, y: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* countOfPairs(int n, int x, int y, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long[] CountOfPairs(int n, int x, int y) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @return {number[]}\n */\nvar countOfPairs = function(n, x, y) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countOfPairs(n: number, x: number, y: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer[]\n     */\n    function countOfPairs($n, $x, $y) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countOfPairs(_ n: Int, _ x: Int, _ y: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countOfPairs(n: Int, x: Int, y: Int): LongArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> countOfPairs(int n, int x, int y) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countOfPairs(n int, x int, y int) []int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer[]}\ndef count_of_pairs(n, x, y)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countOfPairs(n: Int, x: Int, y: Int): Array[Long] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_of_pairs(n: i32, x: i32, y: i32) -> Vec<i64> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-of-pairs n x y)\n  (-> exact-integer? exact-integer? exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_of_pairs(N :: integer(), X :: integer(), Y :: integer()) -> [integer()].\ncount_of_pairs(N, X, Y) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_of_pairs(n :: integer, x :: integer, y :: integer) :: [integer]\n  def count_of_pairs(n, x, y) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given three <strong>positive</strong> integers <code>n</code>, <code>x</code>, and <code>y</code>.</p>\n\n<p>In a city, there exist houses numbered <code>1</code> to <code>n</code> connected by <code>n</code> streets. There is a street connecting the house numbered <code>i</code> with the house numbered <code>i + 1</code> for all <code>1 &lt;= i &lt;= n - 1</code> . An additional street connects the house numbered <code>x</code> with the house numbered <code>y</code>.</p>\n\n<p>For each <code>k</code>, such that <code>1 &lt;= k &lt;= n</code>, you need to find the number of <strong>pairs of houses</strong> <code>(house<sub>1</sub>, house<sub>2</sub>)</code> such that the <strong>minimum</strong> number of streets that need to be traveled to reach <code>house<sub>2</sub></code> from <code>house<sub>1</sub></code> is <code>k</code>.</p>\n\n<p>Return <em>a <strong>1-indexed</strong> array </em><code>result</code><em> of length </em><code>n</code><em> where </em><code>result[k]</code><em> represents the <strong>total</strong> number of pairs of houses such that the <strong>minimum</strong> streets required to reach one house from the other is </em><code>k</code>.</p>\n\n<p><strong>Note</strong> that <code>x</code> and <code>y</code> can be <strong>equal</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example2.png\" style=\"width: 474px; height: 197px;\" />\n<pre>\n<strong>Input:</strong> n = 3, x = 1, y = 3\n<strong>Output:</strong> [6,0,0]\n<strong>Explanation:</strong> Let&#39;s look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example3.png\" style=\"width: 668px; height: 174px;\" />\n<pre>\n<strong>Input:</strong> n = 5, x = 2, y = 4\n<strong>Output:</strong> [10,8,2,0,0]\n<strong>Explanation:</strong> For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k == 3, the pairs are (1, 5), and (5, 1).\n- For k == 4 and k == 5, there are no pairs.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/20/example5.png\" style=\"width: 544px; height: 130px;\" />\n<pre>\n<strong>Input:</strong> n = 4, x = 1, y = 1\n<strong>Output:</strong> [6,4,2,0]\n<strong>Explanation:</strong> For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k == 3, the pairs are (1, 4), and (4, 1).\n- For k == 4, there are no pairs.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= x, y &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "3\n1\n3\n5\n2\n4\n4\n1\n1",
        "formTitle": "[3017]Count the Number of Houses at a Certain Distance II",
        "frequency": 0.0,
        "frontendQuestionId": "3017",
        "hints": [
            "If there were no additional street connecting house <code>x</code> to house <code>y</code>, there would be <code>2 * (n - i)</code> pairs of houses at distance <code>i</code>.",
            "The shortest distance between house <code>i</code> and house <code>j</code> (<code>j < i</code>) is along one of these paths:\r\n- <code>i -> j</code>\r\n- <code>i -> y---x -> j</code>",
            "Try to change the distances calculated by path <code>i ->j</code> to the other path.",
            "Can we use prefix sums to compute the answer?"
        ],
        "level": 3,
        "metaData": {
            "name": "countOfPairs",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "x",
                    "type": "integer"
                },
                {
                    "name": "y",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3310",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "3\n1\n3",
        "title": "Count the Number of Houses at a Certain Distance II",
        "titleSlug": "count-the-number-of-houses-at-a-certain-distance-ii",
        "infer_hints": [
            "Use a prefix sum array.",
            "How many houses can be reached in distance k if we are at house i?",
            "Consider the pairs of houses.  How many pairs of houses are there?  Now, how many of those pairs are at distance k?",
            "Use prefix sum and a 2D prefix sum.",
            "How many houses are within distance 1, 2, 3,..., k from house x?",
            "Consider the graph of houses as a tree.  (You can think of the houses as a tree and each street as an edge.  Can you use DFS/BFS on this tree?)",
            "For each house i, calculate the minimum distance from house 1.",
            "You need to calculate the number of houses at each distance and then cumulatively add them up.",
            "Try to break down the problem into smaller subproblems.",
            "Consider the number of ways to go from a house to a house.  There are 4 ways to go from house 1 to house 2.  There are 2 ways to go from house 2 to house 3.  There are 2 ways to go from house 3 to house 4.  How can you use these observations to solve the problem?",
            "We can use a prefix sum array to count the number of houses at a certain distance.",
            "For each distance, how many houses are there?",
            "For each house, find the minimum distance to the closest house.",
            "The total number of pairs is n * (n - 1) / 2.  We can iterate over each pair and calculate the minimum distance between them.",
            "Can you find the total number of pairs (house1, house2) such that the minimum distance between house1 and house2 is exactly k?",
            "Can we use a BFS or DFS to count the number of houses at each distance?",
            "Consider the distance between two houses as an edge in a graph.",
            "What is the number of pairs of houses that are distance 1, 2, 3,..., k apart?",
            "We can use Dijkstra's algorithm to calculate the minimum distance from the houses to the other houses.",
            "Use dynamic programming."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int returnToBoundaryCount(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int returnToBoundaryCount(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def returnToBoundaryCount(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def returnToBoundaryCount(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int returnToBoundaryCount(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int ReturnToBoundaryCount(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar returnToBoundaryCount = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function returnToBoundaryCount(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function returnToBoundaryCount($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func returnToBoundaryCount(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun returnToBoundaryCount(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int returnToBoundaryCount(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func returnToBoundaryCount(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef return_to_boundary_count(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def returnToBoundaryCount(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn return_to_boundary_count(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (return-to-boundary-count nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec return_to_boundary_count(Nums :: [integer()]) -> integer().\nreturn_to_boundary_count(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec return_to_boundary_count(nums :: [integer]) :: integer\n  def return_to_boundary_count(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>An ant is on a boundary. It sometimes goes <strong>left</strong> and sometimes <strong>right</strong>.</p>\n\n<p>You are given an array of <strong>non-zero</strong> integers <code>nums</code>. The ant starts reading <code>nums</code> from the first element of it to its end. At each step, it moves according to the value of the current element:</p>\n\n<ul>\n\t<li>If <code>nums[i] &lt; 0</code>, it moves <strong>left</strong> by<!-- notionvc: 55fee232-4fc9-445f-952a-f1b979415864 --> <code>-nums[i]</code> units.</li>\n\t<li>If <code>nums[i] &gt; 0</code>, it moves <strong>right</strong> by <code>nums[i]</code> units.</li>\n</ul>\n\n<p>Return <em>the number of times the ant <strong>returns</strong> to the boundary.</em></p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>There is an infinite space on both sides of the boundary.</li>\n\t<li>We check whether the ant is on the boundary only after it has moved <code>|nums[i]|</code> units. In other words, if the ant crosses the boundary during its movement, it does not count.<!-- notionvc: 5ff95338-8634-4d02-a085-1e83c0be6fcd --></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,-5]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> After the first step, the ant is 2 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the second step, the ant is 5 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the third step, the ant is on the boundary.\nSo the answer is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,-3,-4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> After the first step, the ant is 3 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the second step, the ant is 5 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the third step, the ant is 2 steps to the right of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nAfter the fourth step, the ant is 2 steps to the left of the boundary<!-- notionvc: 61ace51c-559f-4bc6-800f-0a0db2540433 -->.\nThe ant never returned to the boundary, so the answer is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li><code>nums[i] != 0</code></li>\n</ul>\n",
        "exampleTestcases": "[2,3,-5]\n[3,2,-3,-4]",
        "formTitle": "[3028]Ant on the Boundary",
        "frequency": 0.0,
        "frontendQuestionId": "3028",
        "hints": [
            "Define a variable and add <code>nums[i]</code> to it in each step."
        ],
        "level": 1,
        "metaData": {
            "name": "returnToBoundaryCount",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3311",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,3,-5]",
        "title": "Ant on the Boundary",
        "titleSlug": "ant-on-the-boundary",
        "infer_hints": [
            "The ant is moving left if the current number is negative and moving right if the current number is positive.",
            "You need to track the ant's current position and its direction.",
            "Use a hash set to record the steps that the ant has already visited.",
            "If the ant is on the boundary, then it's on the left side if the previous step was right or on the right side if the previous step was left.",
            "For every step, the ant is moving either right or left. If it moves right, the distance it will move will be the absolute value of the number. If it moves left, the distance it will move will be the absolute value of the number.",
            "If the ant is moving left, it can only return to the boundary if the next cell is the boundary. If the ant is moving right, it can only return to the boundary if the previous cell is the boundary.",
            "Can you use a set or a hash map to track the visited cells?",
            "Keep track of the total distance travelled by the ant.",
            "Can we maintain a boolean flag to denote if the ant is going right or left?",
            "Keep track of the position of the ant.",
            "The ant returns to the boundary iff the sum of the numbers in the array is zero.",
            "What if the ant is going right and the next position is going left?",
            "The problem is a classic case of a state machine.  How can you build the state machine?",
            "We can use a stack to keep track of the last position of the ant.",
            "What happens when the ant is on the boundary?",
            "What if we only move to the right or left once?",
            "If the ant is on the boundary, then the next step it will be on the boundary too.",
            "Can you think of a way to solve this problem by keeping track of the sum of the absolute values of the elements in the array?",
            "Keep track of the number of times the ant returns to the boundary.",
            "Keep track of the number of times the ant returns to the boundary."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countKeyChanges(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countKeyChanges(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countKeyChanges(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countKeyChanges(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countKeyChanges(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountKeyChanges(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countKeyChanges = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countKeyChanges(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countKeyChanges($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countKeyChanges(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countKeyChanges(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countKeyChanges(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countKeyChanges(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef count_key_changes(s)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countKeyChanges(s: String): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_key_changes(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-key-changes s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_key_changes(S :: unicode:unicode_binary()) -> integer().\ncount_key_changes(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_key_changes(s :: String.t) :: integer\n  def count_key_changes(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed </strong>string <code>s</code> typed by a user. Changing a key is defined as using a key different from the last used key. For example, <code>s = &quot;ab&quot;</code> has a change of a key while <code>s = &quot;bBBb&quot;</code> does not have any.</p>\n\n<p>Return <em>the number of times the user had to change the key. </em></p>\n\n<p><strong>Note: </strong>Modifiers like <code>shift</code> or <code>caps lock</code> won&#39;t be counted in changing the key that is if a user typed the letter <code>&#39;a&#39;</code> and then the letter <code>&#39;A&#39;</code> then it will not be considered as a changing of key.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aAbBcC&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nFrom s[0] = &#39;a&#39; to s[1] = &#39;A&#39;, there is no change of key as caps lock or shift is not counted.\nFrom s[1] = &#39;A&#39; to s[2] = &#39;b&#39;, there is a change of key.\nFrom s[2] = &#39;b&#39; to s[3] = &#39;B&#39;, there is no change of key as caps lock or shift is not counted.\nFrom s[3] = &#39;B&#39; to s[4] = &#39;c&#39;, there is a change of key.\nFrom s[4] = &#39;c&#39; to s[5] = &#39;C&#39;, there is no change of key as caps lock or shift is not counted.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;AaAaAaaA&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no change of key since only the letters &#39;a&#39; and &#39;A&#39; are<!-- notionvc: 8849fe75-f31e-41dc-a2e0-b7d33d8427d2 --> pressed which does not require change of key.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of only upper case and lower case English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aAbBcC\"\n\"AaAaAaaA\"",
        "formTitle": "[3019]Number of Changing Keys",
        "frequency": 0.0,
        "frontendQuestionId": "3019",
        "hints": [
            "Change all the characters to lowercase and then return the number of indices where the character does not match with the last index character."
        ],
        "level": 1,
        "metaData": {
            "name": "countKeyChanges",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3312",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"aAbBcC\"",
        "title": "Number of Changing Keys",
        "titleSlug": "number-of-changing-keys",
        "infer_hints": [
            "Check for every character if it is lower case or upper case and compare it with the previous character.",
            "Keep track of the number of distinct characters.",
            "You can use a stack to keep track of the current state.",
            "We can use a sliding window to check if the next character in the string is in the same case or not.",
            "The answer is the number of times you have to change the caps lock state.",
            "If the ith character is the same as the (i-1)th character, it is not necessary to change the key.",
            "Try to compare the string with its next shifted version.",
            "You can keep track of the number of changes in the keyboard layout as you type.",
            "How many lowercase letters are there in the English alphabet?",
            "Use the fact that a character is lowercase iff it is equal to its uppercase counterpart.",
            "For each character, check if it is the same case as the previous character.",
            "Count the number of times we change the case.",
            "Can you use the property of a string that it is cyclic to solve the problem?",
            "Count the number of distinct upper case and lower case English letters in s.",
            "If the character is lowercase and the last character was uppercase, then the key was changed.",
            "Count the number of distinct lowercase and uppercase letters in the string.",
            "Can you use prefix sum to solve this problem?",
            "Check if the next character is uppercase or lowercase.",
            "Use a counter to count the number of times a letter appears.",
            "If you have a key, you need to change it to a different key."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumStrength(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumStrength(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumStrength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumStrength(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumStrength(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumStrength(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumStrength = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumStrength(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumStrength($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumStrength(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumStrength(nums: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumStrength(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumStrength(nums []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_strength(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumStrength(nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_strength(nums: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-strength nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_strength(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_strength(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_strength(nums :: [integer], k :: integer) :: integer\n  def maximum_strength(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>, and a <strong>positive</strong> <strong>odd</strong> integer <code>k</code>.</p>\n\n<p>The strength of <code>x</code> subarrays is defined as <code>strength = sum[1] * x - sum[2] * (x - 1) + sum[3] * (x - 2) - sum[4] * (x - 3) + ... + sum[x] * 1</code> where <code>sum[i]</code> is the sum of the elements in the <code>i<sup>th</sup></code> subarray. Formally, strength is sum of <code>(-1)<sup>i+1</sup> * sum[i] * (x - i + 1)</code> over all <code>i</code>&#39;s such that <code>1 &lt;= i &lt;= x</code>.</p>\n\n<p>You need to select <code>k</code> <strong>disjoint <span data-keyword=\"subarray-nonempty\">subarrays</span></strong> from <code>nums</code>, such that their <strong>strength</strong> is <strong>maximum</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible <strong>strength</strong> that can be obtained</em>.</p>\n\n<p><strong>Note</strong> that the selected subarrays <strong>don&#39;t</strong> need to cover the entire array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,-1,2], k = 3\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> The best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is (1 + 2 + 3) * 3 - (-1) * 2 + 2 * 1 = 22.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [12,-2,-2,-2,-2], k = 5\n<strong>Output:</strong> 64\n<strong>Explanation:</strong> The only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is 12 * 5 - (-2) * 4 + (-2) * 3 - (-2) * 2 + (-2) * 1 = 64.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3], k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The best possible way to select 1 subarray is: nums[0..0]. The strength is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n\t<li><code>1 &lt;= n * k &lt;= 10<sup>6</sup></code></li>\n\t<li><code>k</code> is odd.</li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,-1,2]\n3\n[12,-2,-2,-2,-2]\n5\n[-1,-2,-3]\n1",
        "formTitle": "[3077]Maximum Strength of K Disjoint Subarrays",
        "frequency": 0.0,
        "frontendQuestionId": "3077",
        "hints": [
            "Let <code>dp[i][j][x == 0/1]</code> be the maximum strength to select <code>j</code> disjoint subarrays from the original array’s suffix (<code>nums[i..(n - 1)]</code>), x denotes whether we select the element or not.",
            "Initially <code>dp[n][0][0] == 0</code>.",
            "We have \r\n<code>dp[i][j][1] = nums[i] * get(j) + max(dp[i + 1][j - 1][0], dp[i + 1][j][1])</code> where <code>get(j) = j</code> if <code>j</code> is odd, otherwise <code>-j</code>.",
            "We can select <code>nums[i]</code> as a separate subarray or select at least <code>nums[i]</code> and <code>nums[i + 1]</code> as the first subarray.\r\n<code>dp[i][j][0] = max(dp[i + 1][j][0], dp[i][j][1])</code>.",
            "The answer is <code>dp[0][k][0]</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "maximumStrength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3313",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,-1,2]\n3",
        "title": "Maximum Strength of K Disjoint Subarrays",
        "titleSlug": "maximum-strength-of-k-disjoint-subarrays",
        "infer_hints": [
            "Try a greedy approach.",
            "Use dynamic programming.",
            "Consider the prefix sum array of the array nums.",
            "Can we use dynamic programming?",
            "Try all possible subarrays and take the maximum.",
            "Can you calculate the sum of the first <code>i</code> elements for all possible subarrays of length <code>i</code> in O(n) time?",
            "Think of the problem in a dynamic programming way.  What is the state of dp[i][j]?",
            "Try to convert the problem to a prefix-sum problem.",
            "We can use a greedy approach where we always choose the subarray with the maximum sum to maximize the total sum.",
            "Use dynamic programming to store the prefix sum of the array.",
            "Use dynamic programming to solve this problem.",
            "Can we use prefix sums to solve this problem?",
            "Think about a simple brute force approach.",
            "Use dynamic programming to pre-calculate the sum of all subarrays.",
            "The maximum strength is obtained by making the sums of the elements of the subarrays as large as possible.",
            "Calculate the prefix sum of the array.",
            "How can we use dynamic programming to solve this problem?",
            "Find the prefix sum of the array.",
            "You can use dynamic programming to solve this problem.",
            "Use prefix sum to get the sum of any subarray in O(1) time."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int mostFrequentPrime(vector<vector<int>>& mat) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int mostFrequentPrime(int[][] mat) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def mostFrequentPrime(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def mostFrequentPrime(self, mat: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int mostFrequentPrime(int** mat, int matSize, int* matColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MostFrequentPrime(int[][] mat) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} mat\n * @return {number}\n */\nvar mostFrequentPrime = function(mat) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function mostFrequentPrime(mat: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function mostFrequentPrime($mat) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func mostFrequentPrime(_ mat: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun mostFrequentPrime(mat: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int mostFrequentPrime(List<List<int>> mat) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func mostFrequentPrime(mat [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} mat\n# @return {Integer}\ndef most_frequent_prime(mat)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def mostFrequentPrime(mat: Array[Array[Int]]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn most_frequent_prime(mat: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (most-frequent-prime mat)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec most_frequent_prime(Mat :: [[integer()]]) -> integer().\nmost_frequent_prime(Mat) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec most_frequent_prime(mat :: [[integer]]) :: integer\n  def most_frequent_prime(mat) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <code>m x n</code> <strong>0-indexed </strong>2D<strong> </strong>matrix <code>mat</code>. From every cell, you can create numbers in the following way:</p>\n\n<ul>\n\t<li>There could be at most <code>8</code> paths from the cells namely: east, south-east, south, south-west, west, north-west, north, and north-east.</li>\n\t<li>Select a path from them and append digits in this path to the number being formed by traveling in this direction.</li>\n\t<li>Note that numbers are generated at every step, for example, if the digits along the path are <code>1, 9, 1</code>, then there will be three numbers generated along the way: <code>1, 19, 191</code>.</li>\n</ul>\n\n<p>Return <em>the most frequent <span data-keyword=\"prime-number\">prime number</span> <strong>greater</strong> than </em><code>10</code><em> out of all the numbers created by traversing the matrix or </em><code>-1</code><em> if no such prime number exists. If there are multiple prime numbers with the highest frequency, then return the <b>largest</b> among them.</em></p>\n\n<p><strong>Note:</strong> It is invalid to change the direction during the move.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/15/south\" style=\"width: 641px; height: 291px;\" /> </strong>\n\n<pre>\n<strong>\nInput:</strong> mat = [[1,1],[9,9],[1,1]]\n<strong>Output:</strong> 19\n<strong>Explanation:</strong> \nFrom cell (0,0) there are 3 possible directions and the numbers greater than 10 which can be created in those directions are:\nEast: [11], South-East: [19], South: [19,191].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [19,191,19,11].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [99,91,91,91,91].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [91,91,99,91,91].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [11,19,191,19].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [11,19,19,191].\nThe most frequent prime number among all the created numbers is 19.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[7]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The only number which can be formed is 7. It is a prime number however it is not greater than 10, so return -1.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[9,7,8],[4,6,5],[2,8,6]]\n<strong>Output:</strong> 97\n<strong>Explanation:</strong> \nNumbers greater than 10 created from the cell (0,0) in all possible directions are: [97,978,96,966,94,942].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [78,75,76,768,74,79].\nNumbers greater than 10 created from the cell (0,2) in all possible directions are: [85,856,86,862,87,879].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [46,465,48,42,49,47].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [65,66,68,62,64,69,67,68].\nNumbers greater than 10 created from the cell (1,2) in all possible directions are: [56,58,56,564,57,58].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [28,286,24,249,26,268].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [86,82,84,86,867,85].\nNumbers greater than 10 created from the cell (2,2) in all possible directions are: [68,682,66,669,65,658].\nThe most frequent prime number among all the created numbers is 97.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 6</code></li>\n\t<li><code>1 &lt;= mat[i][j] &lt;= 9</code></li>\n</ul>\n",
        "exampleTestcases": "[[1,1],[9,9],[1,1]]\n[[7]]\n[[9,7,8],[4,6,5],[2,8,6]]",
        "formTitle": "[3044]Most Frequent Prime",
        "frequency": 0.0,
        "frontendQuestionId": "3044",
        "hints": [
            "Use recursion to find all possible numbers for each cell and then check for prime."
        ],
        "level": 2,
        "metaData": {
            "name": "mostFrequentPrime",
            "params": [
                {
                    "name": "mat",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3314",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[1,1],[9,9],[1,1]]",
        "title": "Most Frequent Prime",
        "titleSlug": "most-frequent-prime",
        "infer_hints": [
            "Do a depth-first search for each cell to generate all the numbers.",
            "If the number of digits in a cell is more than 2, then we need to find the prime numbers with a number of digits more than 2.",
            "Since the matrix cells can have values between 1 and 9, you can use dynamic programming to keep track of the numbers you can create.",
            "How to check if a number is prime or not?",
            "How to handle the prime number generation?",
            "If the number is prime, then return it.",
            "What if we start from each cell in the grid?",
            "For every cell, perform a depth first search to generate all possible numbers starting from the current cell.",
            "Create a function to check if a number is prime or not.",
            "Try to solve it with dynamic programming.",
            "The number of possible paths from one cell to another is at most 8.",
            "Generate all the numbers possible by traversing the matrix.",
            "You can use depth-first search (DFS) to traverse all the cells of the grid and generate all the numbers.",
            "We need to keep track of the counts of each number generated. Can we use a HashMap to do this?",
            "We can generate all prime numbers up to 10000 using the Sieve of Eratosthenes.",
            "The next digit can be at most <code>9</code> and it can be the last digit of the number or it can be the first digit of the number.",
            "Can we keep track of the count of the generated prime numbers for each cell in the matrix?",
            "If a prime number is generated more than 10, return it.",
            "Use dynamic programming to store the values of the numbers created by traversing the matrix.",
            "Try to convert each number to string."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int sumOfPowers(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int sumOfPowers(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def sumOfPowers(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def sumOfPowers(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int sumOfPowers(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int SumOfPowers(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumOfPowers = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function sumOfPowers(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumOfPowers($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func sumOfPowers(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun sumOfPowers(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int sumOfPowers(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func sumOfPowers(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_of_powers(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def sumOfPowers(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn sum_of_powers(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (sum-of-powers nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec sum_of_powers(Nums :: [integer()], K :: integer()) -> integer().\nsum_of_powers(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec sum_of_powers(nums :: [integer], k :: integer) :: integer\n  def sum_of_powers(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code>, and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>The <strong>power</strong> of a <span data-keyword=\"subsequence-array\">subsequence</span> is defined as the <strong>minimum</strong> absolute difference between <strong>any</strong> two elements in the subsequence.</p>\n\n<p>Return <em>the <strong>sum</strong> of <strong>powers</strong> of <strong>all</strong> subsequences of </em><code>nums</code><em> which have length</em> <strong><em>equal to</em></strong> <code>k</code>.</p>\n\n<p>Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 4 subsequences in <code>nums</code> which have length 3: <code>[1,2,3]</code>, <code>[1,3,4]</code>, <code>[1,2,4]</code>, and <code>[2,3,4]</code>. The sum of powers is <code>|2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,2], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only subsequence in <code>nums</code> which has length 2 is&nbsp;<code>[2,2]</code>. The sum of powers is <code>|2 - 2| = 0</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,-1], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 3 subsequences in <code>nums</code> which have length 2: <code>[4,3]</code>, <code>[4,-1]</code>, and <code>[3,-1]</code>. The sum of powers is <code>|4 - 3| + |4 - (-1)| + |3 - (-1)| = 10</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 50</code></li>\n\t<li><code>-10<sup>8</sup> &lt;= nums[i] &lt;= 10<sup>8</sup> </code></li>\n\t<li><code>2 &lt;= k &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3,4]\n3\n[2,2]\n2\n[4,3,-1]\n2",
        "formTitle": "[3098]Find the Sum of Subsequence Powers",
        "frequency": 0.0,
        "frontendQuestionId": "3098",
        "hints": [
            "Sort <code>nums</code>.",
            "There are at most <code>n<sup>2</sup></code> distinct differences.",
            "For a particular difference <code>d</code>, let <code>dp[len][i][j]</code> be the number of subsequences of length <code>len</code> in the subarray <code>nums[0..i]</code> where the last element picked was at index <code>j</code>.",
            "For each index, we can check if it can be picked if <code>nums[i] - nums[j] <= d</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "sumOfPowers",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3316",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3,4]\n3",
        "title": "Find the Sum of Subsequence Powers",
        "titleSlug": "find-the-sum-of-subsequence-powers",
        "infer_hints": [
            "Try to break it down into smaller problems.",
            "For each element in nums, we can either include it in a subsequence or not.",
            "What if we iterate over all possible subsequences of nums?",
            "You can generate all subsequences using a binary mask.",
            "Try to solve the problem for a single subsequence first.",
            "The total number of subsequences of length k is 2^k.",
            "How many subsequences of length k are there?",
            "Calculate the number of subsequences that contain each element.",
            "Consider each number in the array as a point.  What are the number of subsequences that start at this point?  How many subsequences that end at this point?",
            "If you fix one element, what can you do to make the rest of the array sorted?",
            "Can we use dynamic programming to solve this problem?",
            "Use dynamic programming to count the number of subsequences of each length.",
            "If we can find the sum of the powers of all subsequences with length equal to k that contain a certain element, we can calculate the sum of the powers of all subsequences with length equal to k.",
            "The power of a subsequence is the minimum difference between two elements in the subsequence.",
            "For each number in nums, we have two options: whether to pick it or not.",
            "Use dynamic programming.",
            "Try generating all possible subsequences of length k and calculate their powers.",
            "Think about how you can solve this problem in O(n log n) time complexity.",
            "Can you calculate the number of subsequences with length k?",
            "If we consider all subsequences, how many of them have length k?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxPalindromesAfterOperations(vector<string>& words) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxPalindromesAfterOperations(String[] words) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxPalindromesAfterOperations(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxPalindromesAfterOperations(self, words: List[str]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxPalindromesAfterOperations(char** words, int wordsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxPalindromesAfterOperations(string[] words) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxPalindromesAfterOperations = function(words) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxPalindromesAfterOperations(words: string[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function maxPalindromesAfterOperations($words) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxPalindromesAfterOperations(_ words: [String]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxPalindromesAfterOperations(words: Array<String>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxPalindromesAfterOperations(List<String> words) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxPalindromesAfterOperations(words []string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} words\n# @return {Integer}\ndef max_palindromes_after_operations(words)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxPalindromesAfterOperations(words: Array[String]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_palindromes_after_operations(words: Vec<String>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-palindromes-after-operations words)\n  (-> (listof string?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_palindromes_after_operations(Words :: [unicode:unicode_binary()]) -> integer().\nmax_palindromes_after_operations(Words) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_palindromes_after_operations(words :: [String.t]) :: integer\n  def max_palindromes_after_operations(words) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code> having length <code>n</code> and containing <strong>0-indexed</strong> strings.</p>\n\n<p>You are allowed to perform the following operation <strong>any</strong> number of times (<strong>including</strong> <strong>zero</strong>):</p>\n\n<ul>\n\t<li>Choose integers <code>i</code>, <code>j</code>, <code>x</code>, and <code>y</code> such that <code>0 &lt;= i, j &lt; n</code>, <code>0 &lt;= x &lt; words[i].length</code>, <code>0 &lt;= y &lt; words[j].length</code>, and <strong>swap</strong> the characters <code>words[i][x]</code> and <code>words[j][y]</code>.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>maximum</strong> number of <span data-keyword=\"palindrome-string\">palindromes</span> </em><code>words</code><em> can contain, after performing some operations.</em></p>\n\n<p><strong>Note:</strong> <code>i</code> and <code>j</code> may be equal during an operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abbb&quot;,&quot;ba&quot;,&quot;aa&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> In this example, one way to get the maximum number of palindromes is:\nChoose i = 0, j = 1, x = 0, y = 0, so we swap words[0][0] and words[1][0]. words becomes [&quot;bbbb&quot;,&quot;aa&quot;,&quot;aa&quot;].\nAll strings in words are now palindromes.\nHence, the maximum number of palindromes achievable is 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;ab&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>In this example, one way to get the maximum number of palindromes is: \nChoose i = 0, j = 1, x = 1, y = 0, so we swap words[0][1] and words[1][0]. words becomes [&quot;aac&quot;,&quot;bb&quot;].\nChoose i = 0, j = 0, x = 1, y = 2, so we swap words[0][1] and words[0][2]. words becomes [&quot;aca&quot;,&quot;bb&quot;].\nBoth strings are now palindromes.\nHence, the maximum number of palindromes achievable is 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cd&quot;,&quot;ef&quot;,&quot;a&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In this example, there is no need to perform any operation.\nThere is one palindrome in words &quot;a&quot;.\nIt can be shown that it is not possible to get more than one palindrome after any number of operations.\nHence, the answer is 1.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "[\"abbb\",\"ba\",\"aa\"]\n[\"abc\",\"ab\"]\n[\"cd\",\"ef\",\"a\"]",
        "formTitle": "[3035]Maximum Palindromes After Operations",
        "frequency": 0.0,
        "frontendQuestionId": "3035",
        "hints": [
            "We can redistribute all the letters freely among the words.",
            "Calculate the frequency of each letter and total the number of matching letter pairs that can be formed from the letters, i.e., <code>total = sum(freq[ch] / 2)</code> for all <code>'a' <= ch <= 'z'</code>.",
            "We can greedily try making palindromes from <code>words[i]</code> with the smallest length to <code>words[i]</code> with the longest length.",
            "For the current index, <code>i</code>, we try to make <code>words[i]</code> a palindrome. We need <code>len(words[i]) / 2</code> matching character pairs, and the letter in the middle (if it exists) can be freely chosen afterward.",
            "We can check if we have enough pairs for index <code>i</code>; if we do, we increase the number of palindromes we can make and decrease the number of pairs we have. Otherwise, we end the loop at this index.",
            "The answer is the number of palindromes we were able to make in the end."
        ],
        "level": 2,
        "metaData": {
            "name": "maxPalindromesAfterOperations",
            "params": [
                {
                    "name": "words",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3317",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[\"abbb\",\"ba\",\"aa\"]",
        "title": "Maximum Palindromes After Operations",
        "titleSlug": "maximum-palindromes-after-operations",
        "infer_hints": [
            "What if we had a way to count the number of palindromes that could be formed with each character?",
            "You can count how many strings in words are palindromes.",
            "For each word, you can choose any two indices and swap any two characters.",
            "We can use bit manipulation to track which characters we have.",
            "Think of each word as a bitmask.",
            "Try to find the relation between the frequency of a character in all the words and the number of palindromes.",
            "How many palindromes can a string have?",
            "What does it mean to be a palindrome?",
            "For each string, we need to know how many substrings are palindromes.",
            "Consider the number of palindromes each string can form.",
            "Can we perform the operations in such a way that for each word, we always get the maximum number of palindromes?",
            "The number of palindromes in a string is equal to the sum of the counts of the character's occurrences in the string divided by 2.",
            "How can you check if a string is a palindrome?",
            "If two strings have the same characters but in different orders, can they be palindromes?",
            "Can we use a similar approach as we do for the previous problem?",
            "The answer is at most n.",
            "Find the longest palindrome substring for each word.",
            "For each word, we can create a binary number which is 1 if the word can be a palindrome and 0 otherwise.",
            "If we have two strings s and t, we can check if they are anagrams by counting the occurrences of each character in s and t. If the counts are the same, they are anagrams.",
            "Use dynamic programming to find out the count of palindromes that can be formed."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxOperations(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxOperations(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxOperations(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxOperations(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxOperations(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxOperations = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxOperations(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxOperations($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxOperations(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxOperations(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxOperations(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxOperations(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_operations(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxOperations(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_operations(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_operations(Nums :: [integer()]) -> integer().\nmax_operations(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_operations(nums :: [integer]) :: integer\n  def max_operations(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given an array of integers called <code>nums</code>, you can perform <strong>any</strong> of the following operation while <code>nums</code> contains <strong>at least</strong> <code>2</code> elements:</p>\n\n<ul>\n\t<li>Choose the first two elements of <code>nums</code> and delete them.</li>\n\t<li>Choose the last two elements of <code>nums</code> and delete them.</li>\n\t<li>Choose the first and the last elements of <code>nums</code> and delete them.</li>\n</ul>\n\n<p>The<strong> score</strong> of the operation is the sum of the deleted elements.</p>\n\n<p>Your task is to find the <strong>maximum</strong> number of operations that can be performed, such that <strong>all operations have the same score</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of operations possible that satisfy the condition mentioned above</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,2,3,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [1,2,3,4].\n- Delete the first and the last elements, with score 1 + 4 = 5, nums = [2,3].\n- Delete the first and the last elements, with score 2 + 3 = 5, nums = [].\nWe are unable to perform any more operations as nums is empty.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,6,1,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4].\n- Delete the last two elements, with score 1 + 4 = 5, nums = [6].\nIt can be proven that we can perform at most 2 operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "exampleTestcases": "[3,2,1,2,3,4]\n[3,2,6,1,4]",
        "formTitle": "[3040]Maximum Number of Operations With the Same Score II",
        "frequency": 0.0,
        "frontendQuestionId": "3040",
        "hints": [
            "After the first operation, the score of other operations is fixed.",
            "For the fixed score use dynamic programming <code>dp[l][r]</code> to find a maximum number of operations on the subarray <code>nums[l..r]</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maxOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3318",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,2,1,2,3,4]",
        "title": "Maximum Number of Operations With the Same Score II",
        "titleSlug": "maximum-number-of-operations-with-the-same-score-ii",
        "infer_hints": [
            "Try to calculate the score of the first two operations first.",
            "If we can find a way to split the array into two parts so that we get the maximum score, then we can perform the operations in a way that we have the maximum score.",
            "The maximum number of operations with the same score can be calculated by comparing the first and the last element of the array.",
            "Can you perform the operations in reverse order?",
            "For each operation, the score is the sum of the two numbers being deleted. Try to maximize this score.",
            "If we remove the smallest and the largest element from the array, we get a new array which is smaller by 1.",
            "We can use dynamic programming to solve this problem.",
            "How to calculate the score of the operations?",
            "For each pair of elements, we can choose whether to delete the first or the last element.",
            "If you can keep removing the two elements with the same score, then you can always keep removing two elements that are the same.",
            "The maximum number of operations possible is at most min(n1,n2), where n1 and n2 are the number of 1s and 2s in nums.",
            "How to find the maximum number of operations?",
            "Try to find the score of each operation and store it in a set.",
            "For each number x, if we delete it, the score will be x * (freq(x) - 1) + f(l) + f(r) - 2 * freq(x) * freq(x).",
            "Use dynamic programming to solve this problem.",
            "We can use dynamic programming to solve this problem.",
            "Use a dynamic programming approach.",
            "The score of each operation is equal to the sum of the two elements removed. If we remove the smallest and largest elements, we get a score of a[r] + a[l] where r is the right index and l is the left index.",
            "How many operations can be performed for the score X?",
            "You can do it in O(n^2) time complexity."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxOperations(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxOperations(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxOperations(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxOperations(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxOperations(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxOperations = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxOperations(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxOperations($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxOperations(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxOperations(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxOperations(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxOperations(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_operations(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxOperations(nums: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_operations(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_operations(Nums :: [integer()]) -> integer().\nmax_operations(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_operations(nums :: [integer]) :: integer\n  def max_operations(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given an array of integers called <code>nums</code>, you can perform the following operation while <code>nums</code> contains <strong>at least</strong> <code>2</code> elements:</p>\n\n<ul>\n\t<li>Choose the first two elements of <code>nums</code> and delete them.</li>\n</ul>\n\n<p>The<strong> score</strong> of the operation is the sum of the deleted elements.</p>\n\n<p>Your task is to find the <strong>maximum</strong> number of operations that can be performed, such that <strong>all operations have the same score</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of operations possible that satisfy the condition mentioned above</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,4,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [1,4,5].\n- Delete the first two elements, with score 1 + 4 = 5, nums = [5].\nWe are unable to perform any more operations as nums contain only 1 element.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,6,1,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4].\nWe are unable to perform any more operations as the score of the next operation isn&#39;t the same as the previous one.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "exampleTestcases": "[3,2,1,4,5]\n[3,2,6,1,4]",
        "formTitle": "[3038]Maximum Number of Operations With the Same Score I",
        "frequency": 0.0,
        "frontendQuestionId": "3038",
        "hints": [],
        "level": 1,
        "metaData": {
            "name": "maxOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3320",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,2,1,4,5]",
        "title": "Maximum Number of Operations With the Same Score I",
        "titleSlug": "maximum-number-of-operations-with-the-same-score-i",
        "infer_hints": [
            "Use a priority queue to get the two largest numbers.",
            "How can we maximize the number of operations?",
            "Can you use dynamic programming to solve this problem?",
            "The score of the operation is the sum of the deleted elements.",
            "Sort the array in descending order.",
            "Sort the array.",
            "Keep track of the number of times each score appears.",
            "Try sorting the array in decreasing order.",
            "If the sum of the first two elements is the same as the sum of the next two elements, you can perform the same operation.",
            "Sort the array and then, try to make the pairs of the smallest elements to get the maximum score.",
            "Can we sort the array in increasing order and then perform the operations?",
            "You can sort the array and use a greedy approach to delete the smallest two elements.",
            "Sort the array in descending order.",
            "The minimum number of operations required to make the array empty is equal to the sum of the array elements.",
            "If we have the same score, we can always delete two numbers with the same score.",
            "Can you perform multiple operations with the same score?",
            "If we want all the operations to have the same score, we must keep the first two elements with the smallest values.",
            "Keep track of the current score.",
            "You can sort the array and perform the operations.",
            "Sort the array in descending order."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string triangleType(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String triangleType(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def triangleType(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def triangleType(self, nums: List[int]) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* triangleType(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string TriangleType(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar triangleType = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function triangleType(nums: number[]): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function triangleType($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func triangleType(_ nums: [Int]) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun triangleType(nums: IntArray): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String triangleType(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func triangleType(nums []int) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {String}\ndef triangle_type(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def triangleType(nums: Array[Int]): String = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn triangle_type(nums: Vec<i32>) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (triangle-type nums)\n  (-> (listof exact-integer?) string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec triangle_type(Nums :: [integer()]) -> unicode:unicode_binary().\ntriangle_type(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec triangle_type(nums :: [integer]) :: String.t\n  def triangle_type(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>3</code> which can form the sides of a triangle.</p>\n\n<ul>\n\t<li>A triangle is called <strong>equilateral</strong> if it has all sides of equal length.</li>\n\t<li>A triangle is called <strong>isosceles</strong> if it has exactly two sides of equal length.</li>\n\t<li>A triangle is called <strong>scalene</strong> if all its sides are of different lengths.</li>\n</ul>\n\n<p>Return <em>a string representing</em> <em>the type of triangle that can be formed </em><em>or </em><code>&quot;none&quot;</code><em> if it <strong>cannot</strong> form a triangle.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3,3]\n<strong>Output:</strong> &quot;equilateral&quot;\n<strong>Explanation:</strong> Since all the sides are of equal length, therefore, it will form an equilateral triangle.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,5]\n<strong>Output:</strong> &quot;scalene&quot;\n<strong>Explanation:</strong> \nnums[0] + nums[1] = 3 + 4 = 7, which is greater than nums[2] = 5.\nnums[0] + nums[2] = 3 + 5 = 8, which is greater than nums[1] = 4.\nnums[1] + nums[2] = 4 + 5 = 9, which is greater than nums[0] = 3. \nSince the sum of the two sides is greater than the third side for all three cases, therefore, it can form a triangle.\nAs all the sides are of different lengths, it will form a scalene triangle.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == 3</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "[3,3,3]\n[3,4,5]",
        "formTitle": "[3024]Type of Triangle",
        "frequency": 0.0,
        "frontendQuestionId": "3024",
        "hints": [
            "The condition for a valid triangle is that for any two sides, the sum of their lengths must be greater than the third side.",
            "Simply count the number of unique edge lengths after checking it’s a valid triangle."
        ],
        "level": 1,
        "metaData": {
            "name": "triangleType",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3321",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,3,3]",
        "title": "Type of Triangle",
        "titleSlug": "type-of-triangle",
        "infer_hints": [
            "The triangle inequality theorem states that for any triangle, the sum of the lengths of any two sides must be greater than or equal to the length of the remaining side.",
            "If the triangle can be formed, you need to check the type of triangle that can be formed.",
            "If the sum of the two sides is greater than the third side, it can form a triangle.",
            "How to check if a triangle can be formed by the given sides?",
            "Check if the sum of the two sides is greater than the third side.",
            "The triangle inequality theorem states that for any triangle, the sum of the lengths of any two sides must be greater than or equal to the length of the remaining side.",
            "If you sort the array, you can see if you can form a triangle by checking the sum of the two smallest numbers.",
            "Sort the sides.",
            "Can you solve this problem without using any conditional statements?",
            "If you sort the array, you can just check if the sum of the two smallest numbers is greater than the biggest number.",
            "For a triangle to be possible, the sum of lengths of any two sides must be greater than or equal to the length of the remaining side.",
            "If the sum of the two sides is greater than the third side, then a triangle can be formed.",
            "You can sort the array and then check the triangle condition.",
            "Can we form a triangle with 3 sides?",
            "Can the sides form a triangle?",
            "If the sides form a triangle, then the sum of the lengths of any two sides must be greater than or equal to the length of the remaining side.",
            "Sort the given sides of the triangle.",
            "Can you form a triangle with these lengths?  How can you check this?",
            "How to check if a triangle can be formed from given sides?",
            "Sort the array and check the sum of the first two numbers to see if it's greater than the third one."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool isPossibleToSplit(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean isPossibleToSplit(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def isPossibleToSplit(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def isPossibleToSplit(self, nums: List[int]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool isPossibleToSplit(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool IsPossibleToSplit(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isPossibleToSplit = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function isPossibleToSplit(nums: number[]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isPossibleToSplit($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func isPossibleToSplit(_ nums: [Int]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun isPossibleToSplit(nums: IntArray): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool isPossibleToSplit(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func isPossibleToSplit(nums []int) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_possible_to_split(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def isPossibleToSplit(nums: Array[Int]): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn is_possible_to_split(nums: Vec<i32>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (is-possible-to-split nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec is_possible_to_split(Nums :: [integer()]) -> boolean().\nis_possible_to_split(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec is_possible_to_split(nums :: [integer]) :: boolean\n  def is_possible_to_split(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> of <strong>even</strong> length. You have to split the array into two parts <code>nums1</code> and <code>nums2</code> such that:</p>\n\n<ul>\n\t<li><code>nums1.length == nums2.length == nums.length / 2</code>.</li>\n\t<li><code>nums1</code> should contain <strong>distinct </strong>elements.</li>\n\t<li><code>nums2</code> should also contain <strong>distinct</strong> elements.</li>\n</ul>\n\n<p>Return <code>true</code><em> if it is possible to split the array, and </em><code>false</code> <em>otherwise</em><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,2,3,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> One of the possible ways to split nums is nums1 = [1,2,3] and nums2 = [1,2,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The only possible way to split nums is nums1 = [1,1] and nums2 = [1,1]. Both nums1 and nums2 do not contain distinct elements. Therefore, we return false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>nums.length % 2 == 0 </code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "[1,1,2,2,3,4]\n[1,1,1,1]",
        "formTitle": "[3046]Split the Array",
        "frequency": 0.0,
        "frontendQuestionId": "3046",
        "hints": [
            "It’s impossible if the same number occurs more than twice. So just check the frequency of each value."
        ],
        "level": 1,
        "metaData": {
            "name": "isPossibleToSplit",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3324",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,1,2,2,3,4]",
        "title": "Split the Array",
        "titleSlug": "split-the-array",
        "infer_hints": [
            "For each index, try to split the array at that index and check if both parts satisfy the conditions.",
            "If the sum of the array is odd, it is impossible to split it into two parts with distinct elements.",
            "You need to consider the possible split points of the array.",
            "Can you use the concept of \"partitioning\" and divide it into two sets with distinct elements?",
            "Do you need to store all the numbers in a set or hash map?",
            "Try all possible ways to split the array.",
            "Consider every prefix and postfix array.",
            "Can you split the array into two parts and check if both parts contain distinct elements?",
            "Use a HashSet to keep track of the distinct elements in nums.",
            "For every element in the array, you have to try to place it in one of the two arrays.",
            "What if we tried all the possible ways to split the array? Will it be enough?",
            "The total number of possible splits is (2^n) - 1.",
            "The problem is asking us to split the array into two parts, such that both parts contain distinct elements.",
            "How many ways are there to split the array into two parts so that both parts have distinct elements?",
            "We need to split the array into two parts, and we can use a hashset to check whether an element is in the array or not.",
            "What if you try to split the array at every possible index?",
            "Use two maps to store the number of distinct elements in nums1 and nums2.",
            "Use a greedy approach.",
            "You can use the same technique to check if it is possible to split the array into two parts with distinct elements.",
            "Do you need to store the counts of all the numbers in the array?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long largestSquareArea(vector<vector<int>>& bottomLeft, vector<vector<int>>& topRight) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long largestSquareArea(int[][] bottomLeft, int[][] topRight) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def largestSquareArea(self, bottomLeft, topRight):\n        \"\"\"\n        :type bottomLeft: List[List[int]]\n        :type topRight: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def largestSquareArea(self, bottomLeft: List[List[int]], topRight: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long largestSquareArea(int** bottomLeft, int bottomLeftSize, int* bottomLeftColSize, int** topRight, int topRightSize, int* topRightColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long LargestSquareArea(int[][] bottomLeft, int[][] topRight) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} bottomLeft\n * @param {number[][]} topRight\n * @return {number}\n */\nvar largestSquareArea = function(bottomLeft, topRight) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function largestSquareArea(bottomLeft: number[][], topRight: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $bottomLeft\n     * @param Integer[][] $topRight\n     * @return Integer\n     */\n    function largestSquareArea($bottomLeft, $topRight) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func largestSquareArea(_ bottomLeft: [[Int]], _ topRight: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun largestSquareArea(bottomLeft: Array<IntArray>, topRight: Array<IntArray>): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int largestSquareArea(List<List<int>> bottomLeft, List<List<int>> topRight) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func largestSquareArea(bottomLeft [][]int, topRight [][]int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} bottom_left\n# @param {Integer[][]} top_right\n# @return {Integer}\ndef largest_square_area(bottom_left, top_right)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def largestSquareArea(bottomLeft: Array[Array[Int]], topRight: Array[Array[Int]]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn largest_square_area(bottom_left: Vec<Vec<i32>>, top_right: Vec<Vec<i32>>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (largest-square-area bottomLeft topRight)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec largest_square_area(BottomLeft :: [[integer()]], TopRight :: [[integer()]]) -> integer().\nlargest_square_area(BottomLeft, TopRight) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec largest_square_area(bottom_left :: [[integer]], top_right :: [[integer]]) :: integer\n  def largest_square_area(bottom_left, top_right) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There exist <code>n</code> rectangles in a 2D plane. You are given two <strong>0-indexed</strong> 2D integer arrays <code>bottomLeft</code> and <code>topRight</code>, both of size <code>n x 2</code>, where <code>bottomLeft[i]</code> and <code>topRight[i]</code> represent the <strong>bottom-left</strong> and <strong>top-right</strong> coordinates of the <code>i<sup>th</sup></code> rectangle respectively.</p>\n\n<p>You can select a region formed from the <strong>intersection</strong> of&nbsp;two of the given rectangles. You need to find the <strong>largest </strong>area of a <strong>square</strong> that can fit <strong>inside</strong> this region if you select the region optimally.</p>\n\n<p>Return <em>the <strong>largest </strong>possible area of a square, or </em><code>0</code><em> if there <strong>do not</strong> exist any intersecting regions between the rectangles</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/05/example12.png\" style=\"width: 443px; height: 364px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> bottomLeft = [[1,1],[2,2],[3,1]], topRight = [[3,3],[4,4],[6,6]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, or the intersecting region of rectangle 1 and rectangle 2. Hence the largest area is side * side which is 1 * 1 == 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/rectanglesexample2.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 445px; height: 365px;\" />\n<pre>\n<strong>Input:</strong> bottomLeft = [[1,1],[2,2],[1,2]], topRight = [[3,3],[4,4],[3,4]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, the intersecting region of rectangle 1 and rectangle 2, or the intersection region of all 3 rectangles. Hence the largest area is side * side which is 1 * 1 == 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region.\nNote that the region can be formed by the intersection of more than 2 rectangles.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/04/rectanglesexample3.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 444px; height: 364px;\" />\n<pre>\n<strong>Input:</strong> bottomLeft = [[1,1],[3,3],[3,1]], topRight = [[2,2],[4,4],[4,2]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No pair of rectangles intersect, hence, we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == bottomLeft.length == topRight.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>3</sup></code></li>\n\t<li><code>bottomLeft[i].length == topRight[i].length == 2</code></li>\n\t<li><code>1 &lt;= bottomLeft[i][0], bottomLeft[i][1] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>1 &lt;= topRight[i][0], topRight[i][1] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>bottomLeft[i][0] &lt; topRight[i][0]</code></li>\n\t<li><code>bottomLeft[i][1] &lt; topRight[i][1]</code></li>\n</ul>\n",
        "exampleTestcases": "[[1,1],[2,2],[3,1]]\n[[3,3],[4,4],[6,6]]\n[[1,1],[2,2],[1,2]]\n[[3,3],[4,4],[3,4]]\n[[1,1],[3,3],[3,1]]\n[[2,2],[4,4],[4,2]]",
        "formTitle": "[3047]Find the Largest Area of Square Inside Two Rectangles",
        "frequency": 0.0,
        "frontendQuestionId": "3047",
        "hints": [
            "Brute Force the intersection area of each pair of rectangles.",
            "Two rectangles will not overlap when the bottom left x coordinate of one rectangle is greater than the top right x coordinate of the other rectangle. The same is true for the y coordinate.",
            "The intersection area (if any) is also a rectangle. Find its corners."
        ],
        "level": 2,
        "metaData": {
            "name": "largestSquareArea",
            "params": [
                {
                    "name": "bottomLeft",
                    "type": "integer[][]"
                },
                {
                    "name": "topRight",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3325",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[1,1],[2,2],[3,1]]\n[[3,3],[4,4],[6,6]]",
        "title": "Find the Largest Area of Square Inside Two Rectangles",
        "titleSlug": "find-the-largest-area-of-square-inside-two-rectangles",
        "infer_hints": [
            "The rectangle can be divided into smaller squares.  There are four smaller squares: [1,1], [2,2], [3,1], [3,2].  If we try to make the side of the square equal to 3, it will fit inside the rectangle.  Now, the question is: can we find the largest possible side of the square?",
            "For each rectangle, you can use a simple approach to compute the intersection.",
            "Try to solve this problem with a brute force method.  Try to optimize it with dynamic programming.",
            "Use the 2D prefix sum.",
            "Consider a cell of the grid as the intersection of a row and a column.  How can you use this information to solve the problem?",
            "Use prefix sums to get the intersection area between two rectangles.",
            "Find the minimum of the intersections of the y-axis lines of the rectangles.",
            "If you know the area of a rectangle, how can you determine the area of a square that can fit inside it?",
            "What is the largest square that can be made from a rectangle with sides 10 and 15?",
            "How to find the intersection of two rectangles?",
            "Can we find the smallest common area for all the rectangles and then take square root of it?",
            "How to find the intersection of two rectangles?",
            "For each rectangle, you need to find the intersection rectangle with the rectangle of the same area.",
            "Find the intersection of the rectangles.",
            "We can calculate the intersection of two rectangles by finding the intersection of the x-coordinates and y-coordinates.",
            "How can we determine the maximum side length of a square that can fit inside two rectangles?",
            "Consider each pair of rectangles and calculate their intersection.",
            "Find the intersection of all rectangles and then find the largest square that can fit inside this intersection.",
            "What can you do if we sort the rectangles by their bottom-left y-coordinates?",
            "The intersection of two rectangles is another rectangle."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> countPairsOfConnectableServers(vector<vector<int>>& edges, int signalSpeed) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] countPairsOfConnectableServers(int[][] edges, int signalSpeed) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countPairsOfConnectableServers(self, edges, signalSpeed):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type signalSpeed: int\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countPairsOfConnectableServers(self, edges: List[List[int]], signalSpeed: int) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countPairsOfConnectableServers(int** edges, int edgesSize, int* edgesColSize, int signalSpeed, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] CountPairsOfConnectableServers(int[][] edges, int signalSpeed) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} edges\n * @param {number} signalSpeed\n * @return {number[]}\n */\nvar countPairsOfConnectableServers = function(edges, signalSpeed) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countPairsOfConnectableServers(edges: number[][], signalSpeed: number): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer $signalSpeed\n     * @return Integer[]\n     */\n    function countPairsOfConnectableServers($edges, $signalSpeed) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countPairsOfConnectableServers(_ edges: [[Int]], _ signalSpeed: Int) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countPairsOfConnectableServers(edges: Array<IntArray>, signalSpeed: Int): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> countPairsOfConnectableServers(List<List<int>> edges, int signalSpeed) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countPairsOfConnectableServers(edges [][]int, signalSpeed int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} edges\n# @param {Integer} signal_speed\n# @return {Integer[]}\ndef count_pairs_of_connectable_servers(edges, signal_speed)\n    \nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countPairsOfConnectableServers(edges: Array[Array[Int]], signalSpeed: Int): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_pairs_of_connectable_servers(edges: Vec<Vec<i32>>, signal_speed: i32) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-pairs-of-connectable-servers edges signalSpeed)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_pairs_of_connectable_servers(Edges :: [[integer()]], SignalSpeed :: integer()) -> [integer()].\ncount_pairs_of_connectable_servers(Edges, SignalSpeed) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_pairs_of_connectable_servers(edges :: [[integer]], signal_speed :: integer) :: [integer]\n  def count_pairs_of_connectable_servers(edges, signal_speed) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an unrooted weighted tree with <code>n</code> vertices representing servers numbered from <code>0</code> to <code>n - 1</code>, an array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]</code> represents a bidirectional edge between vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> of weight <code>weight<sub>i</sub></code>. You are also given an integer <code>signalSpeed</code>.</p>\n\n<p>Two servers <code>a</code> and <code>b</code> are <strong>connectable</strong> through a server <code>c</code> if:</p>\n\n<ul>\n\t<li><code>a &lt; b</code>, <code>a != c</code> and <code>b != c</code>.</li>\n\t<li>The distance from <code>c</code> to <code>a</code> is divisible by <code>signalSpeed</code>.</li>\n\t<li>The distance from <code>c</code> to <code>b</code> is divisible by <code>signalSpeed</code>.</li>\n\t<li>The path from <code>c</code> to <code>b</code> and the path from <code>c</code> to <code>a</code> do not share any edges.</li>\n</ul>\n\n<p>Return <em>an integer array</em> <code>count</code> <em>of length</em> <code>n</code> <em>where</em> <code>count[i]</code> <em>is the <strong>number</strong> of server pairs that are <strong>connectable</strong> through</em> <em>the server</em> <code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/21/example22.png\" style=\"width: 438px; height: 243px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1\n<strong>Output:</strong> [0,4,6,6,4,0]\n<strong>Explanation:</strong> Since signalSpeed is 1, count[c] is equal to the number of pairs of paths that start at c and do not share any edges.\nIn the case of the given path graph, count[c] is equal to the number of servers to the left of c multiplied by the servers to the right of c.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/21/example11.png\" style=\"width: 495px; height: 484px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3\n<strong>Output:</strong> [2,0,0,0,0,0,2]\n<strong>Explanation:</strong> Through server 0, there are 2 pairs of connectable servers: (4, 5) and (4, 6).\nThrough server 6, there are 2 pairs of connectable servers: (4, 5) and (0, 5).\nIt can be shown that no two servers are connectable through servers other than 0 and 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]</code><!-- notionvc: a2623897-1bb1-4c07-84b6-917ffdcd83ec --></li>\n\t<li><code>1 &lt;= weight<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= signalSpeed &lt;= 10<sup>6</sup></code></li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n",
        "exampleTestcases": "[[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]]\n1\n[[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]]\n3",
        "formTitle": "[3067]Count Pairs of Connectable Servers in a Weighted Tree Network",
        "frequency": 0.0,
        "frontendQuestionId": "3067",
        "hints": [
            "Take each node as the root of the tree, run DFS, and save for each node <code>i</code>, the number of nodes in the subtree rooted at <code>i</code> whose distance to the root is divisible by <code>signalSpeed</code>.",
            "If the root has <code>m</code> children named <code>c<sub>1</sub>, c<sub>2</sub>, …, c<sub>m</sub></code> that respectively have <code>num[c<sub>1</sub>], num[c<sub>2</sub>], …, num[c<sub>m</sub>]</code> nodes in their subtrees whose distance is divisible by signalSpeed. Then, there are <code>((S - num[c<sub>i</sub>]) * num[c<sub>i</sub>]) / 2</code>that are connectable through the root that we have fixed, where <code>S</code> is the sum of <code>num[c<sub>i</sub>]</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "countPairsOfConnectableServers",
            "params": [
                {
                    "name": "edges",
                    "type": "integer[][]"
                },
                {
                    "name": "signalSpeed",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3326",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]]\n1",
        "title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
        "titleSlug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network",
        "infer_hints": [
            "For each server, compute the distance to the closest server with signal speed divisible by signalSpeed.",
            "Can you solve this problem in O(n log(n)) time complexity?",
            "Can you find the number of servers reachable from each server, modulo signalSpeed?",
            "For each server, we need to find the closest server on the left and the closest server on the right.",
            "If we sort the edges by weight, can we use a segment tree to get the answer?",
            "You can do a depth-first search (DFS) from each server and count the number of servers reachable at distance x * signalSpeed.",
            "Sort the servers by the signal speed.",
            "For each server, how many other servers can you connect to it in the given time?",
            "Sort all edges by weight and process them in increasing order.",
            "Can you sort the servers by their weights?",
            "For each server, you can calculate the distance to all other servers by using the binary lifting technique.",
            "You can find the number of servers to the left and right of a server by using depth-first search.",
            "We can use the depth-first search (DFS) to find all paths from node 0 to other nodes.",
            "How to handle multiple queries efficiently?",
            "Use a BFS or DFS to find the distance from each node to every other node.",
            "For each server, count the number of servers it can connect to, including itself.",
            "For each server, compute the distance to all other servers.",
            "What if we calculate the distance from every server to every other server?",
            "What is the maximum number of pairs of connectable servers?",
            "Try to count how many servers can reach each server in the given time."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minimumMoves(vector<int>& nums, int k, int maxChanges) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minimumMoves(int[] nums, int k, int maxChanges) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumMoves(self, nums, k, maxChanges):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type maxChanges: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumMoves(self, nums: List[int], k: int, maxChanges: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minimumMoves(int* nums, int numsSize, int k, int maxChanges) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinimumMoves(int[] nums, int k, int maxChanges) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} maxChanges\n * @return {number}\n */\nvar minimumMoves = function(nums, k, maxChanges) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumMoves(nums: number[], k: number, maxChanges: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $maxChanges\n     * @return Integer\n     */\n    function minimumMoves($nums, $k, $maxChanges) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumMoves(_ nums: [Int], _ k: Int, _ maxChanges: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumMoves(nums: IntArray, k: Int, maxChanges: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumMoves(List<int> nums, int k, int maxChanges) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumMoves(nums []int, k int, maxChanges int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} max_changes\n# @return {Integer}\ndef minimum_moves(nums, k, max_changes)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumMoves(nums: Array[Int], k: Int, maxChanges: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_moves(nums: Vec<i32>, k: i32, max_changes: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-moves nums k maxChanges)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_moves(Nums :: [integer()], K :: integer(), MaxChanges :: integer()) -> integer().\nminimum_moves(Nums, K, MaxChanges) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_moves(nums :: [integer], k :: integer, max_changes :: integer) :: integer\n  def minimum_moves(nums, k, max_changes) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a binary array <code>nums</code> of length <code>n</code>, a <strong>positive</strong> integer <code>k</code> and a <strong>non-negative</strong> integer <code>maxChanges</code>.</p>\n\n<p>Alice plays a game, where the goal is for Alice to pick up <code>k</code> ones from <code>nums</code> using the <strong>minimum</strong> number of <strong>moves</strong>. When the game starts, Alice picks up any index <code>aliceIndex</code> in the range <code>[0, n - 1]</code> and stands there. If <code>nums[aliceIndex] == 1</code> , Alice picks up the one and <code>nums[aliceIndex]</code> becomes <code>0</code>(this <strong>does not</strong> count as a move). After this, Alice can make <strong>any</strong> number of <strong>moves</strong> (<strong>including</strong> <strong>zero</strong>) where in each move Alice must perform <strong>exactly</strong> one of the following actions:</p>\n\n<ul>\n\t<li>Select any index <code>j != aliceIndex</code> such that <code>nums[j] == 0</code> and set <code>nums[j] = 1</code>. This action can be performed <strong>at</strong> <strong>most</strong> <code>maxChanges</code> times.</li>\n\t<li>Select any two adjacent indices <code>x</code> and <code>y</code> (<code>|x - y| == 1</code>) such that <code>nums[x] == 1</code>, <code>nums[y] == 0</code>, then swap their values (set <code>nums[y] = 1</code> and <code>nums[x] = 0</code>). If <code>y == aliceIndex</code>, Alice picks up the one after this move and <code>nums[y]</code> becomes <code>0</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of moves required by Alice to pick <strong>exactly </strong></em><code>k</code> <em>ones</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">3</span></p>\n\n<p><strong>Explanation:</strong> Alice can pick up <code>3</code> ones in <code>3</code> moves, if Alice performs the following actions in each move when standing at <code>aliceIndex == 1</code>:</p>\n\n<ul>\n\t<li>&nbsp;At the start of the game Alice picks up the one and <code>nums[1]</code> becomes <code>0</code>. <code>nums</code> becomes <code>[1,<strong><u>1</u></strong>,1,0,0,1,1,0,0,1]</code>.</li>\n\t<li>Select <code>j == 2</code> and perform an action of the first type. <code>nums</code> becomes <code>[1,<strong><u>0</u></strong>,1,0,0,1,1,0,0,1]</code></li>\n\t<li>Select <code>x == 2</code> and <code>y == 1</code>, and perform an action of the second type. <code>nums</code> becomes <code>[1,<strong><u>1</u></strong>,0,0,0,1,1,0,0,1]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes&nbsp;<code>[1,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n\t<li>Select <code>x == 0</code> and <code>y == 1</code>, and perform an action of the second type. <code>nums</code> becomes <code>[0,<strong><u>1</u></strong>,0,0,0,1,1,0,0,1]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes&nbsp;<code>[0,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n</ul>\n\n<p>Note that it may be possible for Alice to pick up <code>3</code> ones using some other sequence of <code>3</code> moves.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [0,0,0,0], k = 2, maxChanges = 3</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">4</span></p>\n\n<p><strong>Explanation:</strong> Alice can pick up <code>2</code> ones in <code>4</code> moves, if Alice performs the following actions in each move when standing at <code>aliceIndex == 0</code>:</p>\n\n<ul>\n\t<li>Select <code>j == 1</code> and perform an action of the first type. <code>nums</code> becomes <code>[<strong><u>0</u></strong>,1,0,0]</code>.</li>\n\t<li>Select <code>x == 1</code> and <code>y == 0</code>, and perform an action of the second type. <code>nums</code> becomes <code>[<strong><u>1</u></strong>,0,0,0]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes&nbsp;<code>[<strong><u>0</u></strong>,0,0,0]</code>.</li>\n\t<li>Select <code>j == 1</code> again and perform an action of the first type. <code>nums</code> becomes <code>[<strong><u>0</u></strong>,1,0,0]</code>.</li>\n\t<li>Select <code>x == 1</code> and <code>y == 0</code> again, and perform an action of the second type. <code>nums</code> becomes <code>[<strong><u>1</u></strong>,0,0,0]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes&nbsp;<code>[<strong><u>0</u></strong>,0,0,0]</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= maxChanges &lt;= 10<sup>5</sup></code></li>\n\t<li><code>maxChanges + sum(nums) &gt;= k</code></li>\n</ul>\n",
        "exampleTestcases": "[1,1,0,0,0,1,1,0,0,1]\n3\n1\n[0,0,0,0]\n2\n3",
        "formTitle": "[3086]Minimum Moves to Pick K Ones",
        "frequency": 0.0,
        "frontendQuestionId": "3086",
        "hints": [
            "Ones created using a change require <code>2</code> moves. Hence except for the immediate neighbors of the index where we move all the ones, we should try to use change operations.",
            "For some subset of ones, it is always better to move the ones to the median position.",
            "We only need to be concerned with the indices where <code>nums[i] == 1</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumMoves",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                },
                {
                    "name": "maxChanges",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3327",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,1,0,0,0,1,1,0,0,1]\n3\n1",
        "title": "Minimum Moves to Pick K Ones",
        "titleSlug": "minimum-moves-to-pick-k-ones",
        "infer_hints": [
            "This problem is a modified version of the 0/1 Knapsack problem.",
            "You can use dynamic programming.",
            "For each aliceIndex, calculate the number of moves to pick up k ones with at most j changes.",
            "For each possible value of Alice's score, calculate the minimum number of moves needed to get that score.",
            "If you are standing at index i, how many ways are there to pick up exactly k ones?",
            "This problem is similar to the 0/1 Knapsack problem.",
            "Think of dp[i][j][k] as the minimum number of moves to get to the state (i, j, k) where the state is defined as (the current position of Alice, the current number of ones in the array, the number of changes made so far).",
            "What if Alice is standing at index <code>i</code> and we have already processed <code>j</code> indices less than <code>i</code>?",
            "What if we have only two adjacent cells?",
            "For each position, how many operations are needed to change it to a one?",
            "Use dynamic programming.",
            "Consider dp[i][j][k], the minimum number of moves Alice needs to pick up exactly j ones in the range [i, n) using k changes.",
            "We can use dynamic programming to solve this problem. \r\n\r\nThink of the dynamic programming state as the current position of Alice and the number of ones she has picked.",
            "Can you perform all the changes in one move?",
            "You need to do some kind of dynamic programming.",
            "If we have to change all the 0's to 1's, we need at least k changes.",
            "DP[i][j][k] = minimum number of moves to get exactly i ones in the array with the last index at position j using k operations.",
            "Consider the number of moves required to pick all ones in the left part and all ones in the right part.",
            "DP[i][j] = min moves to pick exactly j ones from first i cells.",
            "The first state we have to keep track of is the number of ones we have picked up so far, for each index (from 0 to n - 1)."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOperations(int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOperations(int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperations(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperations(self, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOperations(int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOperations(int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} k\n * @return {number}\n */\nvar minOperations = function(k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperations(k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperations(_ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperations(k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperations(int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperations(k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} k\n# @return {Integer}\ndef min_operations(k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperations(k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations(k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations k)\n  (-> exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations(K :: integer()) -> integer().\nmin_operations(K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations(k :: integer) :: integer\n  def min_operations(k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>positive</strong> integer <code>k</code>. Initially, you have an array <code>nums = [1]</code>.</p>\n\n<p>You can perform <strong>any</strong> of the following operations on the array <strong>any</strong> number of times (<strong>possibly zero</strong>):</p>\n\n<ul>\n\t<li>Choose any element in the array and <strong>increase</strong> its value by <code>1</code>.</li>\n\t<li>Duplicate any element in the array and add it to the end of the array.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of operations required to make the <strong>sum</strong> of elements of the final array greater than or equal to </em><code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 11</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can do the following operations on the array <code>nums = [1]</code>:</p>\n\n<ul>\n\t<li>Increase the element by <code>1</code> three times. The resulting array is <code>nums = [4]</code>.</li>\n\t<li>Duplicate the element two times. The resulting array is <code>nums = [4,4,4]</code>.</li>\n</ul>\n\n<p>The sum of the final array is <code>4 + 4 + 4 = 12</code> which is greater than or equal to <code>k = 11</code>.<br />\nThe total number of operations performed is <code>3 + 2 = 5</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The sum of the original array is already greater than or equal to <code>1</code>, so no operations are needed.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "11\n1",
        "formTitle": "[3091]Apply Operations to Make Sum of Array Greater Than or Equal to k",
        "frequency": 0.0,
        "frontendQuestionId": "3091",
        "hints": [
            "It is optimal to make all the increase operations first and all the duplicate operations last.",
            "Iterate over all possible number of increase operations that can be done and find the corresponding number of duplicate operations."
        ],
        "level": 2,
        "metaData": {
            "name": "minOperations",
            "params": [
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3328",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "11",
        "title": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
        "titleSlug": "apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k",
        "infer_hints": [
            "Can you use BFS?",
            "What is the smallest sum we can achieve if we always multiply the smallest number by 2?",
            "Use a priority queue to keep track of the smallest element in the array.",
            "How can you use BFS?",
            "We can use a heap to keep track of the maximum value of the array.",
            "Try to use a heap to store the operations.",
            "What is the best strategy to increase the sum of the array?",
            "If we increase the first element, then it will take 2 operations to increase the second element, then it will take 3 operations to increase the third element, and so on.",
            "Use Breadth-First Search (BFS) to keep track of all possible sums that can be obtained by performing the operations.",
            "How can we find the minimum number of operations to make the sum of the array equal to k?",
            "Can you use dynamic programming to solve this problem?",
            "Try to perform the operations in a way that the maximum number is minimized.",
            "Can you solve this using a queue and a prefix sum?",
            "Use a priority queue to keep track of the current smallest sum.",
            "If the sum of the array is less than k, we can increase the smallest number by 1.",
            "How can we find the minimum operations to make the sum of the array greater than or equal to k?",
            "If we add 1 to all the elements, the maximum element will be the sum of the array.",
            "For each operation, we can either duplicate or increase. What is the maximum value we can increase it to?",
            "Consider each number as a node in a graph.",
            "If we have the minimum sum of the array, can we use it to calculate the minimum number of operations to make the sum of the array greater than or equal to k?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int longestCommonPrefix(vector<int>& arr1, vector<int>& arr2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int longestCommonPrefix(int[] arr1, int[] arr2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def longestCommonPrefix(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def longestCommonPrefix(self, arr1: List[int], arr2: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int longestCommonPrefix(int* arr1, int arr1Size, int* arr2, int arr2Size) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int LongestCommonPrefix(int[] arr1, int[] arr2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number}\n */\nvar longestCommonPrefix = function(arr1, arr2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function longestCommonPrefix(arr1: number[], arr2: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @return Integer\n     */\n    function longestCommonPrefix($arr1, $arr2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func longestCommonPrefix(_ arr1: [Int], _ arr2: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun longestCommonPrefix(arr1: IntArray, arr2: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int longestCommonPrefix(List<int> arr1, List<int> arr2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func longestCommonPrefix(arr1 []int, arr2 []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @return {Integer}\ndef longest_common_prefix(arr1, arr2)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def longestCommonPrefix(arr1: Array[Int], arr2: Array[Int]): Int = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn longest_common_prefix(arr1: Vec<i32>, arr2: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (longest-common-prefix arr1 arr2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec longest_common_prefix(Arr1 :: [integer()], Arr2 :: [integer()]) -> integer().\nlongest_common_prefix(Arr1, Arr2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec longest_common_prefix(arr1 :: [integer], arr2 :: [integer]) :: integer\n  def longest_common_prefix(arr1, arr2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two arrays with <strong>positive</strong> integers <code>arr1</code> and <code>arr2</code>.</p>\n\n<p>A <strong>prefix</strong> of a positive integer is an integer formed by one or more of its digits, starting from its <strong>leftmost</strong> digit. For example, <code>123</code> is a prefix of the integer <code>12345</code>, while <code>234</code> is <strong>not</strong>.</p>\n\n<p>A <strong>common prefix</strong> of two integers <code>a</code> and <code>b</code> is an integer <code>c</code>, such that <code>c</code> is a prefix of both <code>a</code> and <code>b</code>. For example, <code>5655359</code> and <code>56554</code> have a common prefix <code>565</code> while <code>1223</code> and <code>43456</code> <strong>do not</strong> have a common prefix.</p>\n\n<p>You need to find the length of the <strong>longest common prefix</strong> between all pairs of integers <code>(x, y)</code> such that <code>x</code> belongs to <code>arr1</code> and <code>y</code> belongs to <code>arr2</code>.</p>\n\n<p>Return <em>the length of the <strong>longest</strong> common prefix among all pairs</em>.<em> If no common prefix exists among them</em>, <em>return</em> <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,10,100], arr2 = [1000]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 pairs (arr1[i], arr2[j]):\n- The longest common prefix of (1, 1000) is 1.\n- The longest common prefix of (10, 1000) is 10.\n- The longest common prefix of (100, 1000) is 100.\nThe longest common prefix is 100 with a length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,2,3], arr2 = [4,4,4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There exists no common prefix for any pair (arr1[i], arr2[j]), hence we return 0.\nNote that common prefixes between elements of the same array do not count.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= arr1[i], arr2[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,10,100]\n[1000]\n[1,2,3]\n[4,4,4]",
        "formTitle": "[3043]Find the Length of the Longest Common Prefix",
        "frequency": 0.0,
        "frontendQuestionId": "3043",
        "hints": [
            "Put all the possible prefixes of each element in <code>arr1</code> into a HashSet.",
            "For all the possible prefixes of each element in <code>arr2</code>, check if it exists in the HashSet."
        ],
        "level": 2,
        "metaData": {
            "name": "longestCommonPrefix",
            "params": [
                {
                    "name": "arr1",
                    "type": "integer[]"
                },
                {
                    "name": "arr2",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3329",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,10,100]\n[1000]",
        "title": "Find the Length of the Longest Common Prefix",
        "titleSlug": "find-the-length-of-the-longest-common-prefix",
        "infer_hints": [
            "Can you perform a binary search on the prefix length?",
            "For each pair (x, y), we know that the longest common prefix of x and y is at most min(|x|, |y|).",
            "For every pair of numbers, you can find their common prefix by comparing the numbers digit by digit.",
            "If two integers share a common prefix, then it's also true that their difference also shares the same prefix.",
            "You can find the common prefixes for each pair (x, y), then find the maximum length among all common prefixes.",
            "We can use a common prefix array to solve this problem.",
            "We need to find the longest common prefix between all pairs of integers (x, y).",
            "What if we tried to find the longest common prefix of the entire array?",
            "Try to find the longest common prefix between the first two elements of each array.",
            "For every pair of numbers (x, y), find the longest common prefix of x and y.",
            "Use binary search to find the longest common prefix.",
            "The longest common prefix between two integers x and y is the longest common prefix of the digits of x and y.",
            "What is the length of the longest common prefix of two strings?",
            "Find the common prefix between arr1[0] and arr2[0].",
            "For each number, try to find the longest common prefix with all other numbers.",
            "The maximum length of the longest common prefix is min(len(a), len(b)).",
            "Can you use the built-in split function?",
            "For every pair of numbers, find their longest common prefix.",
            "Think about the smallest possible length of the longest common prefix of two integers.",
            "What if we have to compare each pair of numbers (x, y)?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<vector<int>> modifiedMatrix(vector<vector<int>>& matrix) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[][] modifiedMatrix(int[][] matrix) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def modifiedMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def modifiedMatrix(self, matrix: List[List[int]]) -> List[List[int]]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** modifiedMatrix(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[][] ModifiedMatrix(int[][] matrix) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar modifiedMatrix = function(matrix) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function modifiedMatrix(matrix: number[][]): number[][] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function modifiedMatrix($matrix) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func modifiedMatrix(_ matrix: [[Int]]) -> [[Int]] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun modifiedMatrix(matrix: Array<IntArray>): Array<IntArray> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<List<int>> modifiedMatrix(List<List<int>> matrix) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func modifiedMatrix(matrix [][]int) [][]int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef modified_matrix(matrix)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def modifiedMatrix(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn modified_matrix(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (modified-matrix matrix)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec modified_matrix(Matrix :: [[integer()]]) -> [[integer()]].\nmodified_matrix(Matrix) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec modified_matrix(matrix :: [[integer]]) :: [[integer]]\n  def modified_matrix(matrix) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given a <strong>0-indexed</strong> <code>m x n</code> integer matrix <code>matrix</code>, create a new <strong>0-indexed</strong> matrix called <code>answer</code>. Make <code>answer</code> equal to <code>matrix</code>, then replace each element with the value <code>-1</code> with the <strong>maximum</strong> element in its respective column.</p>\n\n<p>Return <em>the matrix</em> <code>answer</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/24/matrix1.png\" style=\"width: 491px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,-1],[4,-1,6],[7,8,9]]\n<strong>Output:</strong> [[1,2,9],[4,8,6],[7,8,9]]\n<strong>Explanation:</strong> The diagram above shows the elements that are changed (in blue).\n- We replace the value in the cell [1][1] with the maximum value in the column 1, that is 8.\n- We replace the value in the cell [0][2] with the maximum value in the column 2, that is 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/24/matrix2.png\" style=\"width: 411px; height: 111px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[3,-1],[5,2]]\n<strong>Output:</strong> [[3,2],[5,2]]\n<strong>Explanation:</strong> The diagram above shows the elements that are changed (in blue).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>-1 &lt;= matrix[i][j] &lt;= 100</code></li>\n\t<li>The input is generated such that each column contains at least one non-negative integer.</li>\n</ul>\n",
        "exampleTestcases": "[[1,2,-1],[4,-1,6],[7,8,9]]\n[[3,-1],[5,2]]",
        "formTitle": "[3033]Modify the Matrix",
        "frequency": 0.0,
        "frontendQuestionId": "3033",
        "hints": [],
        "level": 1,
        "metaData": {
            "name": "modifiedMatrix",
            "params": [
                {
                    "name": "matrix",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3330",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[1,2,-1],[4,-1,6],[7,8,9]]",
        "title": "Modify the Matrix",
        "titleSlug": "modify-the-matrix",
        "infer_hints": [
            "You need to make two passes through the matrix. 1) First, for each cell, find the maximum value in its column. 2) Then, for each cell, replace it with the maximum value in its column.",
            "You need to keep track of the maximum of each column.",
            "If you're at cell (r, c), what is the maximum number you can put in it?",
            "Use a 2D prefix sum to get the maximum element in each column.",
            "For each cell in the matrix, check if it's a -1.",
            "If you use a queue to perform a breadth-first search (BFS), you will need to keep track of the number of 0s that are in the current set of cells.",
            "We can iterate over the matrix, for each cell, find the maximum in its row and column.",
            "Create another matrix to keep track of the maximum number in each column.",
            "How can we solve this problem with a single pass?  (You can't use extra space that is not a matrix.)",
            "We can create a copy of the original matrix. We iterate over the matrix and replace the current element with the maximum of its value and the element to its right.",
            "You can iterate over each cell and calculate the maximum value in each column.",
            "For each cell in the matrix, if it is -1, replace it with the maximum element in its column.",
            "Do you know how to check the element on the right or the bottom?",
            "How can we solve this in O(m*n) time?  We can iterate over the matrix twice: once to keep track of the maximum value in each column, and once to replace the elements with the maximum value in their respective column.",
            "Use another matrix to store the maximum of each column.",
            "What are the possible values of the maximum element in each column?",
            "For each cell in the matrix, find the maximum element in its column.",
            "For each cell, we have 4 options.",
            "Create another matrix maxCols where maxCols[j] is the maximum of the elements in the j-th column of the matrix.",
            "Create another matrix to keep track of the maximum element in each column."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperations(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOperations(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOperations = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperations(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperations(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperations(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperations(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperations(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_operations(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], k :: integer) :: integer\n  def min_operations(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and an integer <code>k</code>.</p>\n\n<p>In one operation, you can remove one occurrence of the smallest element of <code>nums</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed so that all elements of the array are greater than or equal to</em> <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,11,10,1,3], k = 10\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> After one operation, nums becomes equal to [2, 11, 10, 3].\nAfter two operations, nums becomes equal to [11, 10, 3].\nAfter three operations, nums becomes equal to [11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 3 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,4,9], k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All elements of the array are greater than or equal to 1 so we do not need to apply any operations on nums.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,4,9], k = 9\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> only a single element of nums is greater than or equal to 9 so we need to apply the operations 4 times on nums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li>The input is generated such that there is at least one index <code>i</code> such that <code>nums[i] &gt;= k</code>.</li>\n</ul>\n",
        "exampleTestcases": "[2,11,10,1,3]\n10\n[1,1,2,4,9]\n1\n[1,1,2,4,9]\n9",
        "formTitle": "[3065]Minimum Operations to Exceed Threshold Value I",
        "frequency": 0.0,
        "frontendQuestionId": "3065",
        "hints": [
            "Iterate over <code>nums</code> and count the number of elements less than <code>k</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "minOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3331",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,11,10,1,3]\n10",
        "title": "Minimum Operations to Exceed Threshold Value I",
        "titleSlug": "minimum-operations-to-exceed-threshold-value-i",
        "infer_hints": [
            "How many operations are needed to increase the sum of all numbers to be at least `n`?",
            "You can solve this problem by sorting and then applying binary search.",
            "Use a priority queue to keep track of the current minimum value in the array.",
            "We need to keep track of the minimum element in the array, and we can do this by using a heap.",
            "Use a heap to store the elements of the array.",
            "We can use binary search to find the minimum number of operations needed to exceed k.",
            "What if we subtract the smallest number from each number?",
            "We can use a heap data structure to solve this problem.",
            "Use a heap.",
            "If we can sort the array in non-decreasing order, then we can use a sliding window to solve this problem.",
            "How to find the minimum number of operations needed to exceed a certain threshold?",
            "Sort the array.",
            "Use a priority queue to keep track of the smallest element of the array.",
            "Can you use a heap or priority queue to solve this problem?",
            "Sort the array and then apply the operations.",
            "The best way to make all the numbers in the array equal to k is to remove the difference between the numbers and k.",
            "If the smallest element in the array is less than k, return the length of the array.",
            "We can use a priority queue to keep track of the smallest element in the array.",
            "Sort the array and use a sliding window to calculate the sum.",
            "What is the maximum number of operations needed for any number to be greater than or equal to K?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperations(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minOperations(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinOperations(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOperations = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperations(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperations(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperations(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperations(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperations(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_operations(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], k :: integer) :: integer\n  def min_operations(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and an integer <code>k</code>.</p>\n\n<p>In one operation, you will:</p>\n\n<ul>\n\t<li>Take the two smallest integers <code>x</code> and <code>y</code> in <code>nums</code>.</li>\n\t<li>Remove <code>x</code> and <code>y</code> from <code>nums</code>.</li>\n\t<li>Add <code>min(x, y) * 2 + max(x, y)</code> anywhere in the array.</li>\n</ul>\n\n<p><strong>Note</strong> that you can only apply the described operation if <code>nums</code> contains at least two elements.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed so that all elements of the array are greater than or equal to</em> <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,11,10,1,3], k = 10\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3].\nIn the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,4,9], k = 20\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> After one operation, nums becomes equal to [2, 4, 9, 3].\nAfter two operations, nums becomes equal to [7, 4, 9].\nAfter three operations, nums becomes equal to [15, 9].\nAfter four operations, nums becomes equal to [33].\nAt this stage, all the elements of nums are greater than 20 so we can stop.\nIt can be shown that 4 is the minimum number of operations needed so that all elements of the array are greater than or equal to 20.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li>The input is generated such that an answer always exists. That is, there exists some sequence of operations after which all elements of the array are greater than or equal to <code>k</code>.</li>\n</ul>\n",
        "exampleTestcases": "[2,11,10,1,3]\n10\n[1,1,2,4,9]\n20",
        "formTitle": "[3066]Minimum Operations to Exceed Threshold Value II",
        "frequency": 0.0,
        "frontendQuestionId": "3066",
        "hints": [
            "Use priority queue to keep track of minimum elements.",
            "Remove the minimum two elements, perform the operation, and insert the resulting number into the priority queue."
        ],
        "level": 2,
        "metaData": {
            "name": "minOperations",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3332",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,11,10,1,3]\n10",
        "title": "Minimum Operations to Exceed Threshold Value II",
        "titleSlug": "minimum-operations-to-exceed-threshold-value-ii",
        "infer_hints": [
            "If we want to minimize the operations, we need to add the minimum possible values to the array.",
            "Can we binary search for the answer?",
            "We can use a heap to keep track of the smallest elements.",
            "The question can be solved by using the concept of priority queue and binary search.",
            "We can use a heap to keep track of the minimum value and maximum value in the array.",
            "What is the maximum value of a * 2 + b after the first operation?",
            "You can use a priority_queue and keep track of the sum of the remaining elements.",
            "What if we try to minimize the sum of all elements?",
            "Can you find the answer using the sum of the array?",
            "We can sort the array and use a priority queue to get the smallest two elements.",
            "You can do the same operation in the opposite order and check if the sum of the array is greater than or equal to k.",
            "Use a priority_queue to keep track of the smallest values in the array.",
            "How many operations do we need to increase the smallest element in the array to a certain number?",
            "Sort the array and use a priority queue to maintain the minimum element.",
            "You need to find a way to greedily choose the smallest values to minimize the number of operations.",
            "Sort the array and then use a priority queue.",
            "Can you use binary search to find the answer?",
            "We can use a heap and maintain a running sum of the differences.",
            "If you use a priority queue to keep track of the smallest elements, then the time complexity will be O(n log n) which is acceptable.",
            "For each operation, add min(x, y) * 2 + max(x, y) to the array.  Or, if we sort the array and do operations from smallest to largest, we can use a priority queue to keep track of the smallest and second smallest elements."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumBoxes(vector<int>& apple, vector<int>& capacity) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumBoxes(int[] apple, int[] capacity) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumBoxes(self, apple, capacity):\n        \"\"\"\n        :type apple: List[int]\n        :type capacity: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumBoxes(self, apple: List[int], capacity: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumBoxes(int* apple, int appleSize, int* capacity, int capacitySize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumBoxes(int[] apple, int[] capacity) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} apple\n * @param {number[]} capacity\n * @return {number}\n */\nvar minimumBoxes = function(apple, capacity) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumBoxes(apple: number[], capacity: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $apple\n     * @param Integer[] $capacity\n     * @return Integer\n     */\n    function minimumBoxes($apple, $capacity) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumBoxes(_ apple: [Int], _ capacity: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumBoxes(apple: IntArray, capacity: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumBoxes(List<int> apple, List<int> capacity) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumBoxes(apple []int, capacity []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} apple\n# @param {Integer[]} capacity\n# @return {Integer}\ndef minimum_boxes(apple, capacity)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumBoxes(apple: Array[Int], capacity: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_boxes(apple: Vec<i32>, capacity: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-boxes apple capacity)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_boxes(Apple :: [integer()], Capacity :: [integer()]) -> integer().\nminimum_boxes(Apple, Capacity) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_boxes(apple :: [integer], capacity :: [integer]) :: integer\n  def minimum_boxes(apple, capacity) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>apple</code> of size <code>n</code> and an array <code>capacity</code> of size <code>m</code>.</p>\n\n<p>There are <code>n</code> packs where the <code>i<sup>th</sup></code> pack contains <code>apple[i]</code> apples. There are <code>m</code> boxes as well, and the <code>i<sup>th</sup></code> box has a capacity of <code>capacity[i]</code> apples.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of boxes you need to select to redistribute these </em><code>n</code><em> packs of apples into boxes</em>.</p>\n\n<p><strong>Note</strong> that, apples from the same pack can be distributed into different boxes.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> apple = [1,3,2], capacity = [4,3,1,5,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We will use boxes with capacities 4 and 5.\nIt is possible to distribute the apples as the total capacity is greater than or equal to the total number of apples.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> apple = [5,5,5], capacity = [2,4,2,7]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We will need to use all the boxes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == apple.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= m == capacity.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= apple[i], capacity[i] &lt;= 50</code></li>\n\t<li>The input is generated such that it&#39;s possible to redistribute packs of apples into boxes.</li>\n</ul>\n",
        "exampleTestcases": "[1,3,2]\n[4,3,1,5,2]\n[5,5,5]\n[2,4,2,7]",
        "formTitle": "[3074]Apple Redistribution into Boxes",
        "frequency": 0.0,
        "frontendQuestionId": "3074",
        "hints": [
            "Sort array <code>capacity</code> in non-decreasing order.",
            "Select boxes greedily while the total capacity is smaller than the total number of apples."
        ],
        "level": 1,
        "metaData": {
            "name": "minimumBoxes",
            "params": [
                {
                    "name": "apple",
                    "type": "integer[]"
                },
                {
                    "name": "capacity",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3334",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,3,2]\n[4,3,1,5,2]",
        "title": "Apple Redistribution into Boxes",
        "titleSlug": "apple-redistribution-into-boxes",
        "infer_hints": [
            "Can you find out how many apples are left over after redistribution?",
            "If you can't fit an apple in a box, you need to select a new box.",
            "Sort the boxes by their capacity.",
            "For each apple, try to put it into a box that has enough capacity.",
            "If you pick a box with a smaller capacity than the remaining number of apples, it's impossible to distribute them.",
            "If you can redistribute all the apples, return the minimum number of boxes.",
            "If the current box is not full, we can always put the apple into the box.",
            "How many boxes do we need to store an apple?",
            "What if we try to fill each box with the largest number of apples?",
            "You can sort the boxes by their capacity and then distribute the apples from the smallest box to the largest.",
            "We need to redistribute the apples in such a way that the total number of apples in all the boxes is minimum.",
            "Use a heap and simulate the process.",
            "If we can't distribute the apples into boxes, we have to use more boxes.  We can use a heap to select the boxes with the most capacity each time.",
            "Use a priority queue to track the remaining capacity of the boxes.",
            "Sort the boxes by their capacities.",
            "Try to find the maximum capacity that can be used for the redistribution.",
            "What if we sorted the boxes by their capacity in ascending order?",
            "How many apples are left?",
            "Sort the boxes by their capacity.",
            "How many apples are in the boxes?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumOperationsToWriteY(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumOperationsToWriteY(int[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumOperationsToWriteY(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumOperationsToWriteY(self, grid: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumOperationsToWriteY(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumOperationsToWriteY(int[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumOperationsToWriteY = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumOperationsToWriteY(grid: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumOperationsToWriteY($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumOperationsToWriteY(_ grid: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumOperationsToWriteY(grid: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumOperationsToWriteY(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumOperationsToWriteY(grid [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_operations_to_write_y(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumOperationsToWriteY(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_operations_to_write_y(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-operations-to-write-y grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_operations_to_write_y(Grid :: [[integer()]]) -> integer().\nminimum_operations_to_write_y(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_operations_to_write_y(grid :: [[integer]]) :: integer\n  def minimum_operations_to_write_y(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> <code>n x n</code> grid where <code>n</code> is odd, and <code>grid[r][c]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</p>\n\n<p>We say that a cell belongs to the Letter <strong>Y</strong> if it belongs to one of the following:</p>\n\n<ul>\n\t<li>The diagonal starting at the top-left cell and ending at the center cell of the grid.</li>\n\t<li>The diagonal starting at the top-right cell and ending at the center cell of the grid.</li>\n\t<li>The vertical line starting at the center cell and ending at the bottom border of the grid.</li>\n</ul>\n\n<p>The Letter <strong>Y</strong> is written on the grid if and only if:</p>\n\n<ul>\n\t<li>All values at cells belonging to the Y are equal.</li>\n\t<li>All values at cells not belonging to the Y are equal.</li>\n\t<li>The values at cells belonging to the Y are different from the values at cells not belonging to the Y.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed to write the letter Y on the grid given that in one operation you can change the value at any cell to</em> <code>0</code><em>,</em> <code>1</code><em>,</em> <em>or</em> <code>2</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/22/y2.png\" style=\"width: 461px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2,2],[1,1,0],[0,1,0]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 1 while those that do not belong to Y are equal to 0.\nIt can be shown that 3 is the minimum number of operations needed to write Y on the grid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/22/y3.png\" style=\"width: 701px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 0 while those that do not belong to Y are equal to 2. \nIt can be shown that 12 is the minimum number of operations needed to write Y on the grid.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 49 </code></li>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 2</code></li>\n\t<li><code>n</code> is odd.</li>\n</ul>\n",
        "exampleTestcases": "[[1,2,2],[1,1,0],[0,1,0]]\n[[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]",
        "formTitle": "[3071]Minimum Operations to Write the Letter Y on a Grid",
        "frequency": 0.0,
        "frontendQuestionId": "3071",
        "hints": [],
        "level": 2,
        "metaData": {
            "name": "minimumOperationsToWriteY",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3335",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[1,2,2],[1,1,0],[0,1,0]]",
        "title": "Minimum Operations to Write the Letter Y on a Grid",
        "titleSlug": "minimum-operations-to-write-the-letter-y-on-a-grid",
        "infer_hints": [
            "The problem can be solved by checking each cell if it belongs to the letter Y or not.",
            "How many operations do we need to change the cells that belong to the Y to have the same value?",
            "For each cell in the grid, check if it belongs to the letter Y or not.",
            "You need to do the following:<ul>\r\n\r\nConsider the four parts of the grid separately and then count the number of cells in each part.\r\n",
            "The grid can be divided into four parts: the top-left diagonal, the top-right diagonal, the vertical line, and the rest of the grid.",
            "How can we determine which cells belong to the Y?",
            "Try to solve it by trying all the values that can be at the center cell.",
            "We can split the grid into 4 quadrants and then perform operations in the 4 quadrants independently.",
            "The minimum number of operations needed to make all cells have the same value is the Manhattan distance between cells.",
            "If we change the cell to a different value, how many cells do we need to change so that the value of the cells in the Letter Y is the same?",
            "For each cell, we need to check whether it belongs to the letter Y or not.",
            "We can consider the cells that belong to the Y, and the cells that don't belong to the Y separately.",
            "What is the maximum number of cells that are the same for the two diagonals of the grid?",
            "For each cell, check if it belongs to the Y.",
            "What if you only need to change cells to 1 or 0?",
            "Try to write the letter Y on the grid without changing the values of the cells not belonging to the Y.",
            "For each cell, you can compute the Manhattan distance from the center of the grid to it.",
            "The number of operations is the sum of the distances between each cell and the center.",
            "What are the possible values for a cell belonging to the Y if we start from the top left corner?",
            "Count the number of 0s, 1s and 2s in each row and column."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maxBottlesDrunk(int numBottles, int numExchange) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maxBottlesDrunk(int numBottles, int numExchange) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maxBottlesDrunk(self, numBottles, numExchange):\n        \"\"\"\n        :type numBottles: int\n        :type numExchange: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maxBottlesDrunk(self, numBottles: int, numExchange: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaxBottlesDrunk(int numBottles, int numExchange) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar maxBottlesDrunk = function(numBottles, numExchange) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maxBottlesDrunk(numBottles: number, numExchange: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $numBottles\n     * @param Integer $numExchange\n     * @return Integer\n     */\n    function maxBottlesDrunk($numBottles, $numExchange) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maxBottlesDrunk(_ numBottles: Int, _ numExchange: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maxBottlesDrunk(numBottles: Int, numExchange: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maxBottlesDrunk(numBottles int, numExchange int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} num_bottles\n# @param {Integer} num_exchange\n# @return {Integer}\ndef max_bottles_drunk(num_bottles, num_exchange)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maxBottlesDrunk(numBottles: Int, numExchange: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn max_bottles_drunk(num_bottles: i32, num_exchange: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (max-bottles-drunk numBottles numExchange)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec max_bottles_drunk(NumBottles :: integer(), NumExchange :: integer()) -> integer().\nmax_bottles_drunk(NumBottles, NumExchange) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec max_bottles_drunk(num_bottles :: integer, num_exchange :: integer) :: integer\n  def max_bottles_drunk(num_bottles, num_exchange) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two integers <code>numBottles</code> and <code>numExchange</code>.</p>\n\n<p><code>numBottles</code> represents the number of full water bottles that you initially have. In one operation, you can perform one of the following operations:</p>\n\n<ul>\n\t<li>Drink any number of full water bottles turning them into empty bottles.</li>\n\t<li>Exchange <code>numExchange</code> empty bottles with one full water bottle. Then, increase <code>numExchange</code> by one.</li>\n</ul>\n\n<p>Note that you cannot exchange multiple batches of empty bottles for the same value of <code>numExchange</code>. For example, if <code>numBottles == 3</code> and <code>numExchange == 1</code>, you cannot exchange <code>3</code> empty water bottles for <code>3</code> full bottles.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of water bottles you can drink</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/28/exampleone1.png\" style=\"width: 948px; height: 482px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> numBottles = 13, numExchange = 6\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/28/example231.png\" style=\"width: 990px; height: 642px; padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> numBottles = 10, numExchange = 3\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numBottles &lt;= 100 </code></li>\n\t<li><code>1 &lt;= numExchange &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "13\n6\n10\n3",
        "formTitle": "[3100]Water Bottles II",
        "frequency": 0.0,
        "frontendQuestionId": "3100",
        "hints": [
            "Simulate the process step by step. At each step, drink <code>numExchange</code> bottles of water then exchange them for a full bottle. Keep repeating this step until you cannot exchange  bottles anymore."
        ],
        "level": 2,
        "metaData": {
            "name": "maxBottlesDrunk",
            "params": [
                {
                    "name": "numBottles",
                    "type": "integer"
                },
                {
                    "name": "numExchange",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3336",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "13\n6",
        "title": "Water Bottles II",
        "titleSlug": "water-bottles-ii",
        "infer_hints": [
            "We can always drink all the full water bottles.  How many full water bottles do we have now?",
            "We can always exchange one bottle for two empty bottles, then we can exchange those two empty bottles for three empty bottles, and so on.",
            "We need to keep track of the number of full water bottles and empty water bottles we have.",
            "You can calculate the number of full bottles you can drink by dividing the number of full bottles by the number of exchange.",
            "You can think of it as a dynamic programming problem where the state of the dp is the current number of full bottles you have and the current number of empty bottles you have.",
            "Use a recursive function.",
            "The number of bottles drunk can be computed by adding numBottles and numBottles / numExchange.",
            "Use the modulus operation to calculate the number of bottles that you can get from exchanging the empty bottles.",
            "We can use a greedy approach. Instead of drinking the bottles and then exchanging them, we can think of it as drinking the bottles first and then exchanging them.",
            "The number of empty bottles equals the number of full bottles.",
            "Since you can only exchange full bottles, you should try to fill as many bottles as you can.",
            "We can use the modulus operation to determine how many bottles we get in the next operation.",
            "For each full bottle, you can drink it and get one empty bottle.  Do this until you can't anymore.",
            "For every bottle you drink, you get to exchange numExchange - 1 empty bottles.",
            "The answer is numBottles + (numBottles - 1) / (numExchange - 1).",
            "This problem is equivalent to finding the number of sets of size <code>numExchange</code> that can be made from <code>numBottles</code> full water bottles.",
            "For each full bottle you drink, you can either exchange it with a new one or use it to drink from the remaining ones.",
            "We can simulate the process.",
            "Find the number of full bottles you can drink and the remaining empty bottles.",
            "If you drink all the water in a row, you'll get 1 full bottle. If you have 3 full bottles and exchange 2, you'll get 1 more full bottle."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long countSubstrings(string s, char c) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long countSubstrings(String s, char c) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countSubstrings(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countSubstrings(self, s: str, c: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long countSubstrings(char* s, char c) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long CountSubstrings(string s, char c) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {character} c\n * @return {number}\n */\nvar countSubstrings = function(s, c) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countSubstrings(s: string, c: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $c\n     * @return Integer\n     */\n    function countSubstrings($s, $c) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countSubstrings(_ s: String, _ c: Character) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countSubstrings(s: String, c: Char): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countSubstrings(String s, String c) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countSubstrings(s string, c byte) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {Character} c\n# @return {Integer}\ndef count_substrings(s, c)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countSubstrings(s: String, c: Char): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_substrings(s: String, c: char) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-substrings s c)\n  (-> string? char? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_substrings(S :: unicode:unicode_binary(), C :: char()) -> integer().\ncount_substrings(S, C) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_substrings(s :: String.t, c :: char) :: integer\n  def count_substrings(s, c) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code> and a character <code>c</code>. Return <em>the total number of <span data-keyword=\"substring-nonempty\">substrings</span> of </em><code>s</code><em> that start and end with </em><code>c</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;abada&quot;, c = &quot;a&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">6</span></p>\n\n<p><strong>Explanation:</strong> Substrings starting and ending with <code>&quot;a&quot;</code> are: <code>&quot;<strong><u>a</u></strong>bada&quot;</code>, <code>&quot;<u><strong>aba</strong></u>da&quot;</code>, <code>&quot;<u><strong>abada</strong></u>&quot;</code>, <code>&quot;ab<u><strong>a</strong></u>da&quot;</code>, <code>&quot;ab<u><strong>ada</strong></u>&quot;</code>, <code>&quot;abad<u><strong>a</strong></u>&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;zzz&quot;, c = &quot;z&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">6</span></p>\n\n<p><strong>Explanation:</strong> There are a total of <code>6</code> substrings in <code>s</code> and all start and end with <code>&quot;z&quot;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>c</code> consist&nbsp;only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abada\"\n\"a\"\n\"zzz\"\n\"z\"",
        "formTitle": "[3084]Count Substrings Starting and Ending with Given Character",
        "frequency": 0.0,
        "frontendQuestionId": "3084",
        "hints": [
            "Count the number of characters <code>'c'</code> in string <code>s</code>, let’s call it <code>m</code>.",
            "We can select <code>2</code> numbers <code>i</code> and <code>j</code> such that <code>i <= j</code> are the start and end indices of substring. Note that <code>i</code> and <code>j</code> can be the same.",
            "The answer is <code>m * (m + 1) / 2</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "countSubstrings",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "c",
                    "type": "character"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3337",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"abada\"\n\"a\"",
        "title": "Count Substrings Starting and Ending with Given Character",
        "titleSlug": "count-substrings-starting-and-ending-with-given-character",
        "infer_hints": [
            "Create an array that will store the number of substrings that start with the character <code>c</code> and end with the character <code>c</code>.",
            "Try to use a two-pointer approach.",
            "Try to find the pattern of the count of substrings starting and ending with the given character.",
            "Find the number of substrings starting with the character c.",
            "The problem is asking for the count of substrings of a given string, where the first and last character are the same.",
            "Count all substrings that start with <code>c</code>.",
            "Count the number of substrings starting with <code>c</code>.",
            "Count the number of substrings that start with <code>c</code>.",
            "Find all substrings that start with <code>c</code> and store their lengths in an array.",
            "Create a count of the number of times the character <code>c</code> appears in the string <code>s</code>.",
            "Find all the indices where <code>s[i] == c</code>.",
            "Count the number of substrings that start with c.",
            "Use the prefix sum array to count the number of occurrences of <code>c</code> in each prefix.",
            "Use prefix sum and suffix sum to solve this problem.",
            "Can you count all substrings that start and end with the same character?",
            "The total number of substrings that start and end with a certain character can be calculated by the sum of counts of substrings that start with that character and the number of substrings that end with that character.",
            "You can use two pointers to keep track of the first and last occurrence of the character.",
            "How many substrings start with a certain character?",
            "Try to solve this problem using prefix sums.",
            "You can use the sliding window technique to solve this problem."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int countSubmatrices(vector<vector<int>>& grid, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int countSubmatrices(int[][] grid, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countSubmatrices(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countSubmatrices(self, grid: List[List[int]], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int countSubmatrices(int** grid, int gridSize, int* gridColSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int CountSubmatrices(int[][] grid, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number}\n */\nvar countSubmatrices = function(grid, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countSubmatrices(grid: number[][], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer $k\n     * @return Integer\n     */\n    function countSubmatrices($grid, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countSubmatrices(_ grid: [[Int]], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countSubmatrices(grid: Array<IntArray>, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countSubmatrices(List<List<int>> grid, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countSubmatrices(grid [][]int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @param {Integer} k\n# @return {Integer}\ndef count_submatrices(grid, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countSubmatrices(grid: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_submatrices(grid: Vec<Vec<i32>>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-submatrices grid k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_submatrices(Grid :: [[integer()]], K :: integer()) -> integer().\ncount_submatrices(Grid, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_submatrices(grid :: [[integer]], k :: integer) :: integer\n  def count_submatrices(grid, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>0-indexed</strong> integer matrix <code>grid</code> and an integer <code>k</code>.</p>\n\n<p>Return <em>the <strong>number</strong> of <span data-keyword=\"submatrix\">submatrices</span> that contain the top-left element of the</em> <code>grid</code>, <em>and have a sum less than or equal to </em><code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/01/example1.png\" style=\"padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> grid = [[7,6,3],[6,6,1]], k = 18\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are only 4 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 18.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/01/example21.png\" style=\"padding: 10px; background: #fff; border-radius: .5rem;\" />\n<pre>\n<strong>Input:</strong> grid = [[7,2,9],[1,5,0],[2,6,6]], k = 20\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are only 6 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 20.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length </code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 1000 </code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[[7,6,3],[6,6,1]]\n18\n[[7,2,9],[1,5,0],[2,6,6]]\n20",
        "formTitle": "[3070]Count Submatrices with Top-Left Element and Sum Less Than k",
        "frequency": 0.0,
        "frontendQuestionId": "3070",
        "hints": [],
        "level": 2,
        "metaData": {
            "name": "countSubmatrices",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3338",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[7,6,3],[6,6,1]]\n18",
        "title": "Count Submatrices with Top-Left Element and Sum Less Than k",
        "titleSlug": "count-submatrices-with-top-left-element-and-sum-less-than-k",
        "infer_hints": [
            "How many submatrices contain the top-left element? (Think about the number of ways to choose the top-left element of the submatrix.)",
            "You can use a 2D prefix sum to solve this problem.",
            "How many submatrices have their top-left corner at grid[i][j]?",
            "The sum of the rectangle is greater than k, we can remove the top bar and count the number of submatrices in the remaining rectangle.",
            "For each cell, we can check all possible submatrices that can end at this cell.",
            "For each submatrix, calculate the sum from the top-left element to the bottom-right element.",
            "You can solve this problem with a brute-force approach.!",
            "You can use binary search to find all possible submatrices.",
            "This problem can be solved by using dynamic programming.",
            "For each top-left corner, we can do binary search over the right and bottom boundaries.",
            "For each cell (i, j), let's consider all cells (i, k) where k < j.  How many submatrices can we get from (i, k) to (i, j)?",
            "Use prefix sum to find the sum of a submatrix in constant time.",
            "For each top-left corner, we can count the number of submatrices that contain it.",
            "Create a prefix sum of the matrix.",
            "Try to convert the problem into a problem of prefix sums.",
            "Use prefix sum and binary search to solve this problem.",
            "You can use a 2D prefix sum to solve this problem.",
            "Preprocess the sum of the rows for all the possible submatrices.",
            "For each submatrix with top-left cell (i, j), we need to count how many submatrices can be formed with top-left cell (i, j) as the top-left cell.",
            "You can solve this problem in O(n^3) time using DP.  How can you solve it in O(n^2) time?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumDistance(int[][] points) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumDistance(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumDistance(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumDistance(int[][] points) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minimumDistance = function(points) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumDistance(points: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function minimumDistance($points) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumDistance(_ points: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumDistance(points: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumDistance(List<List<int>> points) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumDistance(points [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef minimum_distance(points)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumDistance(points: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_distance(points: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-distance points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_distance(Points :: [[integer()]]) -> integer().\nminimum_distance(Points) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_distance(points :: [[integer]]) :: integer\n  def minimum_distance(points) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a array <code>points</code> representing integer coordinates of some points on a 2D plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>The distance between two points is defined as their <span data-keyword=\"manhattan-distance\">Manhattan distance</span>.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible value for <strong>maximum</strong> distance between any two points by removing exactly one point</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[3,10],[5,15],[10,2],[4,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum distance after removing each point is the following:</p>\n\n<ul>\n\t<li>After removing the 0<sup>th</sup> point the maximum distance is between points (5, 15) and (10, 2), which is <code>|5 - 10| + |15 - 2| = 18</code>.</li>\n\t<li>After removing the 1<sup>st</sup> point the maximum distance is between points (3, 10) and (10, 2), which is <code>|3 - 10| + |10 - 2| = 15</code>.</li>\n\t<li>After removing the 2<sup>nd</sup> point the maximum distance is between points (5, 15) and (4, 4), which is <code>|5 - 4| + |15 - 4| = 12</code>.</li>\n\t<li>After removing the 3<sup>rd</sup> point the maximum distance is between points (5, 15) and (10, 2), which is <code>|5 - 10| + |15 - 2| = 18</code>.</li>\n</ul>\n\n<p>12 is the minimum possible maximum distance between any two points after removing exactly one point.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [[1,1],[1,1],[1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Removing any of the points results in the maximum distance between any two points of 0.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>1 &lt;= points[i][0], points[i][1] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[[3,10],[5,15],[10,2],[4,4]]\n[[1,1],[1,1],[1,1]]",
        "formTitle": "[3102]Minimize Manhattan Distances",
        "frequency": 0.0,
        "frontendQuestionId": "3102",
        "hints": [
            "Notice that the Manhattan distance between two points <code>[x<sub>i</sub>, y<sub>i</sub>]</code> and <code>[x<sub>j</sub>, y<sub>j</sub>] is <code> max({x<sub>i</sub> - x<sub>j</sub> + y<sub>i</sub> - y<sub>j</sub>, x<sub>i</sub> - x<sub>j</sub> - y<sub>i</sub> + y<sub>j</sub>, - x<sub>i</sub> + x<sub>j</sub> + y<sub>i</sub> - y<sub>j</sub>, - x<sub>i</sub> + x<sub>j</sub> - y<sub>i</sub> + y<sub>j</sub>})</code></code>.",
            "If you replace points as <code>[x<sub>i</sub> - y<sub>i</sub>, x<sub>i</sub> + y<sub>i</sub>]</code> then the Manhattan distance is <code>max(max(x<sub>i</sub>) - min(x<sub>i</sub>), max(y<sub>i</sub>) - min(y<sub>i</sub>))</code> over all <code>i</code>.",
            "After those observations, the problem just becomes a simulation. Create multiset of points <code>[x<sub>i</sub> - y<sub>i</sub>, x<sub>i</sub> + y<sub>i</sub>]</code>, you can iterate on a point you might remove and get the maximum Manhattan distance over all other points."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumDistance",
            "params": [
                {
                    "name": "points",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3344",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[3,10],[5,15],[10,2],[4,4]]",
        "title": "Minimize Manhattan Distances",
        "titleSlug": "minimize-manhattan-distances",
        "infer_hints": [
            "We can use a bucket sort for one dimension and then find the closest pair of points.",
            "Can you sort the points by their x-coordinate?",
            "Sort the x and y coordinates separately.",
            "How to calculate the Manhattan distance between two points?",
            "What is the smallest Manhattan distance?",
            "Try to find a pattern in the Manhattan distance.",
            "How many points can you remove to minimize the maximum Manhattan distance?",
            "How can you find the Manhattan distance between two points?",
            "Can we find a way to remove the point with the smallest x or y coordinate?",
            "Can we sort the coordinates and calculate the minimum possible maximum distance?",
            "If we remove a point, we will remove it from one of the 4 quadrants.  Ordinarily, we would consider removing the point that is farthest from the other points. However, this isn't always optimal.",
            "If we remove the point (x, y), the new maximum Manhattan distance will be max(|x - x'| + |y - y'|) for all (x', y'). ",
            "Try to minimize the maximum Manhattan distance.",
            "The Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).",
            "The Manhattan distance between two points (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|.  Try all the points and see which one has the smallest maximum Manhattan distance.",
            "If we sort the coordinates, we can try all possible removals and pick the one that gives the smallest maximum Manhattan distance.",
            "Find the maximum Manhattan distance.",
            "If we can choose the pair of points that maximize the difference in x or y coordinates, then we can minimize the maximum Manhattan distance.",
            "How can we minimize the Manhattan distance?  What properties can we exploit?",
            "For each point, try to find the closest two points."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int sumOfPower(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int sumOfPower(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def sumOfPower(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def sumOfPower(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int sumOfPower(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int SumOfPower(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumOfPower = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function sumOfPower(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumOfPower($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func sumOfPower(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun sumOfPower(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int sumOfPower(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func sumOfPower(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_of_power(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def sumOfPower(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn sum_of_power(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (sum-of-power nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec sum_of_power(Nums :: [integer()], K :: integer()) -> integer().\nsum_of_power(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec sum_of_power(nums :: [integer], k :: integer) :: integer\n  def sum_of_power(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>The <strong>power</strong> of an array of integers is defined as the number of <span data-keyword=\"subsequence-array\">subsequences</span> with their sum <strong>equal</strong> to <code>k</code>.</p>\n\n<p>Return <em>the <strong>sum</strong> of <strong>power</strong> of all subsequences of</em> <code>nums</code><em>.</em></p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> nums = [1,2,3], k = 3 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 6 </span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are <code>5</code> subsequences of nums with non-zero power:</p>\n\n<ul>\n\t<li>The subsequence <code>[<u><strong>1</strong></u>,<u><strong>2</strong></u>,<u><strong>3</strong></u>]</code> has <code>2</code> subsequences with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code> and <code>[<u>1</u>,<u>2</u>,3]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>1</strong></u>,2,<u><strong>3</strong></u>]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code>.</li>\n\t<li>The subsequence <code>[1,<u><strong>2</strong></u>,<u><strong>3</strong></u>]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>1</strong></u>,<u><strong>2</strong></u>,3]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[<u>1</u>,<u>2</u>,3]</code>.</li>\n\t<li>The subsequence <code>[1,2,<u><strong>3</strong></u>]</code> has <code>1</code> subsequence with <code>sum == 3</code>: <code>[1,2,<u>3</u>]</code>.</li>\n</ul>\n\n<p>Hence the answer is <code>2 + 1 + 1 + 1 + 1 = 6</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> nums = [2,3,3], k = 5 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 4 </span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are <code>3</code> subsequences of nums with non-zero power:</p>\n\n<ul>\n\t<li>The subsequence <code>[<u><strong>2</strong></u>,<u><strong>3</strong></u>,<u><strong>3</strong></u>]</code> has 2 subsequences with <code>sum == 5</code>: <code>[<u>2</u>,3,<u>3</u>]</code> and <code>[<u>2</u>,<u>3</u>,3]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>2</strong></u>,3,<u><strong>3</strong></u>]</code> has 1 subsequence with <code>sum == 5</code>: <code>[<u>2</u>,3,<u>3</u>]</code>.</li>\n\t<li>The subsequence <code>[<u><strong>2</strong></u>,<u><strong>3</strong></u>,3]</code> has 1 subsequence with <code>sum == 5</code>: <code>[<u>2</u>,<u>3</u>,3]</code>.</li>\n</ul>\n\n<p>Hence the answer is <code>2 + 1 + 1 = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> nums = [1,2,3], k = 7 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 0 </span></p>\n\n<p><strong>Explanation:&nbsp;</strong>There exists no subsequence with sum <code>7</code>. Hence all subsequences of nums have <code>power = 0</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n3\n[2,3,3]\n5\n[1,2,3]\n7",
        "formTitle": "[3082]Find the Sum of the Power of All Subsequences",
        "frequency": 0.0,
        "frontendQuestionId": "3082",
        "hints": [
            "If there is a subsequence of length <code>j</code> with the sum of elements <code>k</code>, it contributes <code>2<sup>n - j</sup></code> to the answer.",
            "Let <code>dp[i][j]</code> represent the number of subsequences in the subarray <code>nums[0..i]</code> which have a sum of <code>j</code>.",
            "We can find the <code>dp[i][k]</code> for all <code>0 <= i <= n-1</code> and multiply them with <code>2<sup>n - j</sup></code> to get final answer."
        ],
        "level": 3,
        "metaData": {
            "name": "sumOfPower",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3345",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3]\n3",
        "title": "Find the Sum of the Power of All Subsequences",
        "titleSlug": "find-the-sum-of-the-power-of-all-subsequences",
        "infer_hints": [
            "Find the frequency of each element in the array.",
            "Consider the binary representation of the number.",
            "We can solve this problem using dynamic programming.",
            "We can solve this problem by using dynamic programming.",
            "Use Dynamic Programming.",
            "Try to find the count of all subsequences that have sum == k.",
            "Use dynamic programming.",
            "If you have the count of all subsequences, how can you get the count of subsequences with sum equal to k?",
            "Use Dynamic Programming (DP) to solve the problem.",
            "The power of a subsequence can be defined as the sum of the subsequence.",
            "Let's consider a subsequence [x1, x2,..., xk] where xi ∈ {0, 1}. Then the power of this subsequence equals to sum(xi * 2^i) for all i from 0 to k.",
            "Try to calculate the power of all subsequences first.",
            "For each element, you can choose to include it or exclude it.",
            "Let's try to understand the problem first.",
            "Do you know how to find the sum of the power of a subsequence with a specific sum?",
            "Do a depth-first search to find all subsequences.",
            "How many subsequences of a sequence of length n have sum exactly equal to x?",
            "What is the power of a subsequence?",
            "Use Dynamic Programming to store the count of subsequences with sum equals to <code>i</code>.",
            "If you are trying to calculate the sum of the power of all subsequences, you can use a dynamic programming approach."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string getSmallestString(string s, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String getSmallestString(String s, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def getSmallestString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def getSmallestString(self, s: str, k: int) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* getSmallestString(char* s, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string GetSmallestString(string s, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar getSmallestString = function(s, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function getSmallestString(s: string, k: number): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function getSmallestString($s, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func getSmallestString(_ s: String, _ k: Int) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun getSmallestString(s: String, k: Int): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String getSmallestString(String s, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func getSmallestString(s string, k int) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef get_smallest_string(s, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def getSmallestString(s: String, k: Int): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn get_smallest_string(s: String, k: i32) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (get-smallest-string s k)\n  (-> string? exact-integer? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec get_smallest_string(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nget_smallest_string(S, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec get_smallest_string(s :: String.t, k :: integer) :: String.t\n  def get_smallest_string(s, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>.</p>\n\n<p>Define a function <code>distance(s<sub>1</sub>, s<sub>2</sub>)</code> between two strings <code>s<sub>1</sub></code> and <code>s<sub>2</sub></code> of the same length <code>n</code> as:</p>\n\n<ul>\n\t<li>The<strong> sum</strong> of the <strong>minimum distance</strong> between <code>s<sub>1</sub>[i]</code> and <code>s<sub>2</sub>[i]</code> when the characters from <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code> are placed in a <strong>cyclic</strong> order, for all <code>i</code> in the range <code>[0, n - 1]</code>.</li>\n</ul>\n\n<p>For example, <code>distance(&quot;ab&quot;, &quot;cd&quot;) == 4</code>, and <code>distance(&quot;a&quot;, &quot;z&quot;) == 1</code>.</p>\n\n<p>You can <strong>change</strong> any letter of <code>s</code> to <strong>any</strong> other lowercase English letter, <strong>any</strong> number of times.</p>\n\n<p>Return a string denoting the <strong><span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span></strong> string <code>t</code> you can get after some changes, such that <code>distance(s, t) &lt;= k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;zbbz&quot;, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;aaaz&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Change <code>s</code> to <code>&quot;aaaz&quot;</code>. The distance between <code>&quot;zbbz&quot;</code> and <code>&quot;aaaz&quot;</code> is equal to <code>k = 3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;xaxcd&quot;, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;aawcd&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The distance between &quot;xaxcd&quot; and &quot;aawcd&quot; is equal to k = 4.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;lol&quot;, k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;lol&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It&#39;s impossible to change any character as <code>k = 0</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt;= 2000</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"zbbz\"\n3\n\"xaxcd\"\n4\n\"lol\"\n0",
        "formTitle": "[3106]Lexicographically Smallest String After Operations With Constraint",
        "frequency": 0.0,
        "frontendQuestionId": "3106",
        "hints": [
            "The problem can be approached greedily.",
            "For each index in order from <code>0</code> to <code>n - 1</code>, we try all letters from <code>'a'</code> to <code>'z'</code>, selecting the first one as long as the current total distance accumulated is not larger than <code>k</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "getSmallestString",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3346",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"zbbz\"\n3",
        "title": "Lexicographically Smallest String After Operations With Constraint",
        "titleSlug": "lexicographically-smallest-string-after-operations-with-constraint",
        "infer_hints": [
            "Think of the problem in terms of the distance between strings.",
            "Try to change only one character in a string.",
            "What if we change each character to the next one in the alphabet?",
            "Use dynamic programming to keep track of the minimum cost to reach each character.",
            "Try to change the characters in lexicographical order.",
            "You can simulate the process by trying all possible replacements.",
            "Use a greedy approach.",
            "Try to change the characters one by one.",
            "Try changing the characters in the string one by one.",
            "How can we convert a string into lexicographically smallest string by changing one character at a time?",
            "Try to perform the operation on each character in the string separately.",
            "For each character, what is the minimum distance it has to be changed to another character?",
            "Try to greedily change the characters in the smallest possible way.",
            "We can perform an operation where we change a character to any other character, and we will not get the lexicographically smallest string.",
            "Try to change each character to the closest character.",
            "You can use a priority queue to find the smallest distance.",
            "Use dynamic programming.",
            "Try to transform the problem into a shortest path problem.",
            "Find the best character to replace the current character with.",
            "Find the lexicographically smallest string by changing only one character."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> resultArray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] resultArray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def resultArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def resultArray(self, nums: List[int]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultArray(int* nums, int numsSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] ResultArray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar resultArray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function resultArray(nums: number[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function resultArray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func resultArray(_ nums: [Int]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun resultArray(nums: IntArray): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> resultArray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func resultArray(nums []int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef result_array(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def resultArray(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn result_array(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (result-array nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec result_array(Nums :: [integer()]) -> [integer()].\nresult_array(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec result_array(nums :: [integer]) :: [integer]\n  def result_array(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>1-indexed</strong> array of <strong>distinct</strong> integers <code>nums</code> of length <code>n</code>.</p>\n\n<p>You need to distribute all the elements of <code>nums</code> between two arrays <code>arr1</code> and <code>arr2</code> using <code>n</code> operations. In the first operation, append <code>nums[1]</code> to <code>arr1</code>. In the second operation, append <code>nums[2]</code> to <code>arr2</code>. Afterwards, in the <code>i<sup>th</sup></code> operation:</p>\n\n<ul>\n\t<li>If the last element of <code>arr1</code> is<strong> greater</strong> than the last element of <code>arr2</code>, append <code>nums[i]</code> to <code>arr1</code>. Otherwise, append <code>nums[i]</code> to <code>arr2</code>.</li>\n</ul>\n\n<p>The array <code>result</code> is formed by concatenating the arrays <code>arr1</code> and <code>arr2</code>. For example, if <code>arr1 == [1,2,3]</code> and <code>arr2 == [4,5,6]</code>, then <code>result = [1,2,3,4,5,6]</code>.</p>\n\n<p>Return <em>the array</em> <code>result</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,3]\n<strong>Output:</strong> [2,3,1]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [2] and arr2 = [1].\nIn the 3<sup>rd</sup> operation, as the last element of arr1 is greater than the last element of arr2 (2 &gt; 1), append nums[3] to arr1.\nAfter 3 operations, arr1 = [2,3] and arr2 = [1].\nHence, the array result formed by concatenation is [2,3,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,3,8]\n<strong>Output:</strong> [5,3,4,8]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [5] and arr2 = [4].\nIn the 3<sup>rd</sup> operation, as the last element of arr1 is greater than the last element of arr2 (5 &gt; 4), append nums[3] to arr1, hence arr1 becomes [5,3].\nIn the 4<sup>th</sup> operation, as the last element of arr2 is greater than the last element of arr1 (4 &gt; 3), append nums[4] to arr2, hence arr2 becomes [4,8].\nAfter 4 operations, arr1 = [5,3] and arr2 = [4,8].\nHence, the array result formed by concatenation is [5,3,4,8].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li>All elements in <code>nums</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "[2,1,3]\n[5,4,3,8]",
        "formTitle": "[3069]Distribute Elements Into Two Arrays I",
        "frequency": 0.0,
        "frontendQuestionId": "3069",
        "hints": [
            "Divide the array into two arrays by keeping track of the last elements of both subarrays."
        ],
        "level": 1,
        "metaData": {
            "name": "resultArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3347",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,1,3]",
        "title": "Distribute Elements Into Two Arrays I",
        "titleSlug": "distribute-elements-into-two-arrays-i",
        "infer_hints": [
            "Use two pointers.",
            "Can you maintain two prefix sums?",
            "Do you know how to divide an array into two parts?",
            "What if we keep two lists of the numbers we can put in the first and second list?",
            "Keep two heaps.",
            "Can you solve this problem with a greedy approach?",
            "Sort the array and then divide it into two parts.",
            "Can we use sorting to solve this problem?",
            "Use a greedy approach to distribute the elements of the array into two arrays.",
            "What if you were to sort the array and then distribute the elements in a greedy way?",
            "We can simulate the process.",
            "How can you ensure that the elements are distributed evenly between two arrays?",
            "Sort the input array and place each element into one of the two arrays.",
            "For each element in nums, append it to the array that has a larger last element.",
            "What if you can sort the array first?",
            "Keep track of the maximum number in the array.",
            "How can you make sure that the final result is the maximum possible?",
            "The first operation can always be done. For the second operation, if the last element of arr1 is greater than the last element of arr2, append nums[2] to arr1.",
            "How about using a priority queue or a heap to keep track of the elements that are yet to be distributed?",
            "Can we keep track of the maximum element we've seen so far in one pass?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> minimumCost(int n, vector<vector<int>>& edges, vector<vector<int>>& query) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] minimumCost(int n, int[][] edges, int[][] query) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumCost(self, n, edges, query):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type query: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumCost(self, n: int, edges: List[List[int]], query: List[List[int]]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minimumCost(int n, int** edges, int edgesSize, int* edgesColSize, int** query, int querySize, int* queryColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] MinimumCost(int n, int[][] edges, int[][] query) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[][]} query\n * @return {number[]}\n */\nvar minimumCost = function(n, edges, query) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumCost(n: number, edges: number[][], query: number[][]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer[][] $query\n     * @return Integer[]\n     */\n    function minimumCost($n, $edges, $query) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumCost(_ n: Int, _ edges: [[Int]], _ query: [[Int]]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumCost(n: Int, edges: Array<IntArray>, query: Array<IntArray>): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> minimumCost(int n, List<List<int>> edges, List<List<int>> query) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumCost(n int, edges [][]int, query [][]int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer[][]} query\n# @return {Integer[]}\ndef minimum_cost(n, edges, query)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumCost(n: Int, edges: Array[Array[Int]], query: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_cost(n: i32, edges: Vec<Vec<i32>>, query: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-cost n edges query)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_cost(N :: integer(), Edges :: [[integer()]], Query :: [[integer()]]) -> [integer()].\nminimum_cost(N, Edges, Query) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_cost(n :: integer, edges :: [[integer]], query :: [[integer]]) :: [integer]\n  def minimum_cost(n, edges, query) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is an undirected weighted graph with <code>n</code> vertices labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given the integer <code>n</code> and an array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between vertices <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with a weight of <code>w<sub>i</sub></code>.</p>\n\n<p>A walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It&#39;s important to note that a walk may visit the same edge or vertex more than once.</p>\n\n<p>The <strong>cost</strong> of a walk starting at node <code>u</code> and ending at node <code>v</code> is defined as the bitwise <code>AND</code> of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is <code>w<sub>0</sub>, w<sub>1</sub>, w<sub>2</sub>, ..., w<sub>k</sub></code>, then the cost is calculated as <code>w<sub>0</sub> &amp; w<sub>1</sub> &amp; w<sub>2</sub> &amp; ... &amp; w<sub>k</sub></code>, where <code>&amp;</code> denotes the bitwise <code>AND</code> operator.</p>\n\n<p>You are also given a 2D array <code>query</code>, where <code>query[i] = [s<sub>i</sub>, t<sub>i</sub>]</code>. For each query, you need to find the minimum cost of the walk starting at vertex <code>s<sub>i</sub></code> and ending at vertex <code>t<sub>i</sub></code>. If there exists no such walk, the answer is <code>-1</code>.</p>\n\n<p>Return <em>the array </em><code>answer</code><em>, where </em><code>answer[i]</code><em> denotes the <strong>minimum</strong> cost of a walk for query </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/31/q4_example1-1.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 351px; height: 141px;\" />\n<p>To achieve the cost of 1 in the first query, we need to move on the following edges: <code>0-&gt;1</code> (weight 7), <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code> (weight 1), <code>1-&gt;3</code> (weight 7).</p>\n\n<p>In the second query, there is no walk between nodes 3 and 4, so the answer is -1.</p>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0]</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/31/q4_example2e.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 211px; height: 181px;\" />\n<p>To achieve the cost of 0 in the first query, we need to move on the following edges: <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code> (weight 6), <code>1-&gt;2</code> (weight 1).</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li><code>0 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= query.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>query[i].length == 2</code></li>\n\t<li><code>0 &lt;= s<sub>i</sub>, t<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>s<sub>i</sub> !=&nbsp;t<sub>i</sub></code></li>\n</ul>\n",
        "exampleTestcases": "5\n[[0,1,7],[1,3,7],[1,2,1]]\n[[0,3],[3,4]]\n3\n[[0,2,7],[0,1,15],[1,2,6],[1,2,1]]\n[[1,2]]",
        "formTitle": "[3108]Minimum Cost Walk in Weighted Graph",
        "frequency": 0.0,
        "frontendQuestionId": "3108",
        "hints": [
            "The intended solution uses Disjoint Set Union.",
            "Notice that, if <code>u</code> and <code>v</code> are not connected then the answer is <code>-1</code>, otherwise we can use all the edges from the connected component where both belong to."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumCost",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "edges",
                    "type": "integer[][]"
                },
                {
                    "name": "query",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3348",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "5\n[[0,1,7],[1,3,7],[1,2,1]]\n[[0,3],[3,4]]",
        "title": "Minimum Cost Walk in Weighted Graph",
        "titleSlug": "minimum-cost-walk-in-weighted-graph",
        "infer_hints": [
            "You can use Floyd-Warshall algorithm to solve this problem.",
            "For each node, use a priority queue to store the distances to all other nodes in increasing order.",
            "For each node, you need to find the minimum cost to reach all other nodes.",
            "You may want to use a priority queue or a heap to select the edge with the smallest weight.",
            "Can you use Dijkstra's algorithm to solve this problem?",
            "Can you think of a way to use a BFS or DFS to solve this problem?",
            "What if we consider the bitwise AND operation as XOR operation instead of AND?",
            "Can we use a binary lifting approach?",
            "Use a modified version of Dijkstra's algorithm.",
            "Consider Dijkstra's algorithm, but with a twist.",
            "You can do this by first doing a BFS to get all shortest paths between all pairs of nodes, then for each query you can do a shortest path from the source to the destination with the minimum cost.",
            "We can use Dijkstra's algorithm to find the minimum cost walk.  We can use a priority queue to keep track of the minimum cost walk to each node.",
            "If you know the answer to the query (s, t), can you find it using the graph and the dp?",
            "If there is a path between u and v, then there is a path between u and w and between v and w.",
            "Think about the properties of the bitwise AND operation.",
            "You can use the Bellman-Ford algorithm to solve this problem.",
            "What is the complexity of the minimum spanning tree algorithm?",
            "Can you convert the problem to a graph problem and use Dijkstra's algorithm to solve it?",
            "The problem is equivalent to finding the minimum-weight cycle in the graph.",
            "We can apply a shortest path algorithm to find the minimum cost of a walk."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumLengthSubstring(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumLengthSubstring(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumLengthSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumLengthSubstring(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumLengthSubstring(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumLengthSubstring(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maximumLengthSubstring = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumLengthSubstring(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maximumLengthSubstring($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumLengthSubstring(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumLengthSubstring(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumLengthSubstring(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumLengthSubstring(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef maximum_length_substring(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumLengthSubstring(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_length_substring(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-length-substring s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_length_substring(S :: unicode:unicode_binary()) -> integer().\nmaximum_length_substring(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_length_substring(s :: String.t) :: integer\n  def maximum_length_substring(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "Given a string <code>s</code>, return the <strong>maximum</strong> length of a <span data-keyword=\"substring\">substring</span>&nbsp;such that it contains <em>at most two occurrences</em> of each character.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;bcbbbcba&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\nThe following substring has a length of 4 and contains at most two occurrences of each character: <code>&quot;bcbb<u>bcba</u>&quot;</code>.</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;aaaa&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\nThe following substring has a length of 2 and contains at most two occurrences of each character: <code>&quot;<u>aa</u>aa&quot;</code>.</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"bcbbbcba\"\n\"aaaa\"",
        "formTitle": "[3090]Maximum Length Substring With Two Occurrences",
        "frequency": 0.0,
        "frontendQuestionId": "3090",
        "hints": [
            "We can try all substrings by brute-force since the constraints are very small."
        ],
        "level": 1,
        "metaData": {
            "name": "maximumLengthSubstring",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3349",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"bcbbbcba\"",
        "title": "Maximum Length Substring With Two Occurrences",
        "titleSlug": "maximum-length-substring-with-two-occurrences",
        "infer_hints": [
            "If you use a hash map to store the counts of characters, how can you keep track of the maximum length of the substring that meets the condition?",
            "We can use a map to store the frequency of each character.",
            "How about using a queue or stack?",
            "The maximum length of a substring with at most two distinct characters is a sliding window with two pointers.",
            "Use two pointers to form a window.",
            "If the count of characters is more than 2, we can't make it valid anymore.",
            "We can use a sliding window approach with a fixed size.  How can we maintain a window that contains at most two distinct characters?",
            "Use sliding window.",
            "We can use a sliding window approach.  Keep a counter of the occurrences of each character.  What data structure should we use for the counter?",
            "Try to find a sliding window with at most 2 distinct characters.",
            "How to find a substring with at most two distinct characters?",
            "What is the maximum length of a substring containing at most two distinct characters?",
            "How can you maintain the count of characters in the sliding window?",
            "How can you maintain the information about the count of each character?",
            "Sliding window with hashmap.",
            "Use a hashmap to store the count of each character.",
            "Sliding window with two pointers.",
            "Use a sliding window to maintain the substring with two distinct characters.",
            "Use a sliding window with a hashmap to solve this problem.",
            "We need to keep track of the last two occurrences of each character."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> resultArray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] resultArray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def resultArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def resultArray(self, nums: List[int]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultArray(int* nums, int numsSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] ResultArray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar resultArray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function resultArray(nums: number[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function resultArray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func resultArray(_ nums: [Int]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun resultArray(nums: IntArray): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> resultArray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func resultArray(nums []int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef result_array(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def resultArray(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn result_array(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (result-array nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec result_array(Nums :: [integer()]) -> [integer()].\nresult_array(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec result_array(nums :: [integer]) :: [integer]\n  def result_array(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <strong>1-indexed</strong> array of integers <code>nums</code> of length <code>n</code>.</p>\n\n<p>We define a function <code>greaterCount</code> such that <code>greaterCount(arr, val)</code> returns the number of elements in <code>arr</code> that are <strong>strictly greater</strong> than <code>val</code>.</p>\n\n<p>You need to distribute all the elements of <code>nums</code> between two arrays <code>arr1</code> and <code>arr2</code> using <code>n</code> operations. In the first operation, append <code>nums[1]</code> to <code>arr1</code>. In the second operation, append <code>nums[2]</code> to <code>arr2</code>. Afterwards, in the <code>i<sup>th</sup></code> operation:</p>\n\n<ul>\n\t<li>If <code>greaterCount(arr1, nums[i]) &gt; greaterCount(arr2, nums[i])</code>, append <code>nums[i]</code> to <code>arr1</code>.</li>\n\t<li>If <code>greaterCount(arr1, nums[i]) &lt; greaterCount(arr2, nums[i])</code>, append <code>nums[i]</code> to <code>arr2</code>.</li>\n\t<li>If <code>greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i])</code>, append <code>nums[i]</code> to the array with a <strong>lesser</strong> number of elements.</li>\n\t<li>If there is still a tie, append <code>nums[i]</code> to <code>arr1</code>.</li>\n</ul>\n\n<p>The array <code>result</code> is formed by concatenating the arrays <code>arr1</code> and <code>arr2</code>. For example, if <code>arr1 == [1,2,3]</code> and <code>arr2 == [4,5,6]</code>, then <code>result = [1,2,3,4,5,6]</code>.</p>\n\n<p>Return <em>the integer array</em> <code>result</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,3,3]\n<strong>Output:</strong> [2,3,1,3]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [2] and arr2 = [1].\nIn the 3<sup>rd</sup> operation, the number of elements greater than 3 is zero in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4<sup>th</sup> operation, the number of elements greater than 3 is zero in both arrays. As the length of arr2 is lesser, hence, append nums[4] to arr2.\nAfter 4 operations, arr1 = [2,3] and arr2 = [1,3].\nHence, the array result formed by concatenation is [2,3,1,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,14,3,1,2]\n<strong>Output:</strong> [5,3,1,2,14]\n<strong>Explanation:</strong> After the first 2 operations, arr1 = [5] and arr2 = [14].\nIn the 3<sup>rd</sup> operation, the number of elements greater than 3 is one in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4<sup>th</sup> operation, the number of elements greater than 1 is greater in arr1 than arr2 (2 &gt; 1). Hence, append nums[4] to arr1.\nIn the 5<sup>th</sup> operation, the number of elements greater than 2 is greater in arr1 than arr2 (2 &gt; 1). Hence, append nums[5] to arr1.\nAfter 5 operations, arr1 = [5,3,1,2] and arr2 = [14].\nHence, the array result formed by concatenation is [5,3,1,2,14].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3,3,3]\n<strong>Output:</strong> [3,3,3,3]\n<strong>Explanation:</strong> At the end of 4 operations, arr1 = [3,3] and arr2 = [3,3].\nHence, the array result formed by concatenation is [3,3,3,3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[2,1,3,3]\n[5,14,3,1,2]\n[3,3,3,3]",
        "formTitle": "[3072]Distribute Elements Into Two Arrays II",
        "frequency": 0.0,
        "frontendQuestionId": "3072",
        "hints": [
            "We need a data structure that counts the number of integers greater than a given value <code>x</code> and supports insertion.",
            "Use Segment Tree or Binary Indexed Tree by compressing the numbers to the range <code>[1,n]</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "resultArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3350",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,1,3,3]",
        "title": "Distribute Elements Into Two Arrays II",
        "titleSlug": "distribute-elements-into-two-arrays-ii",
        "infer_hints": [
            "Can we calculate the number of elements greater than a certain value efficiently?",
            "You need to calculate the prefix and suffix sum for each number.",
            "Create a prefix sum array and a suffix sum array.",
            "Sort the array nums in ascending order.",
            "Count the number of elements that are greater than a given number.",
            "How can we use binary search to solve this problem?",
            "Try to keep track of the number of elements in each array.",
            "We can use a prefix sum array to count the number of elements greater than a certain number.",
            "Can we solve this problem in O(n) time complexity?",
            "Sort the input array in ascending order.",
            "If we sort the array in non-decreasing order, we can find the answer in O(n) time.",
            "Sort the array in non-decreasing order.",
            "How many elements are greater than a certain number?",
            "Try to sort the array first.",
            "Use the prefix sum technique to count the number of elements greater than a given value.",
            "Sort the array and distribute the elements greedily.",
            "Try to calculate the count of numbers that are strictly greater than nums[i] in the array for each operation.",
            "For each element, how many elements are greater than it?",
            "Sort the array and then perform a prefix-sum operation.",
            "Calculate the prefix and suffix count array."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long maximumHappinessSum(vector<int>& happiness, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long maximumHappinessSum(int[] happiness, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumHappinessSum(self, happiness, k):\n        \"\"\"\n        :type happiness: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumHappinessSum(self, happiness: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long maximumHappinessSum(int* happiness, int happinessSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MaximumHappinessSum(int[] happiness, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} happiness\n * @param {number} k\n * @return {number}\n */\nvar maximumHappinessSum = function(happiness, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumHappinessSum(happiness: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $happiness\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumHappinessSum($happiness, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumHappinessSum(_ happiness: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumHappinessSum(happiness: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumHappinessSum(List<int> happiness, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumHappinessSum(happiness []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} happiness\n# @param {Integer} k\n# @return {Integer}\ndef maximum_happiness_sum(happiness, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumHappinessSum(happiness: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_happiness_sum(happiness: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-happiness-sum happiness k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_happiness_sum(Happiness :: [integer()], K :: integer()) -> integer().\nmaximum_happiness_sum(Happiness, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_happiness_sum(happiness :: [integer], k :: integer) :: integer\n  def maximum_happiness_sum(happiness, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>happiness</code> of length <code>n</code>, and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>There are <code>n</code> children standing in a queue, where the <code>i<sup>th</sup></code> child has <strong>happiness value</strong> <code>happiness[i]</code>. You want to select <code>k</code> children from these <code>n</code> children in <code>k</code> turns.</p>\n\n<p>In each turn, when you select a child, the <strong>happiness value</strong> of all the children that have <strong>not</strong> been selected till now decreases by <code>1</code>. Note that the happiness value <strong>cannot</strong> become negative and gets decremented <strong>only</strong> if it is positive.</p>\n\n<p>Return <em>the <strong>maximum</strong> sum of the happiness values of the selected children you can achieve by selecting </em><code>k</code> <em>children</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> happiness = [1,2,3], k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can pick 2 children in the following way:\n- Pick the child with the happiness value == 3. The happiness value of the remaining children becomes [0,1].\n- Pick the child with the happiness value == 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.\nThe sum of the happiness values of the selected children is 3 + 1 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> happiness = [1,1,1,1], k = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can pick 2 children in the following way:\n- Pick any child with the happiness value == 1. The happiness value of the remaining children becomes [0,0,0].\n- Pick the child with the happiness value == 0. The happiness value of the remaining child becomes [0,0].\nThe sum of the happiness values of the selected children is 1 + 0 = 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> happiness = [2,3,4,5], k = 1\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We can pick 1 child in the following way:\n- Pick the child with the happiness value == 5. The happiness value of the remaining children becomes [1,2,3].\nThe sum of the happiness values of the selected children is 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == happiness.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= happiness[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n2\n[1,1,1,1]\n2\n[2,3,4,5]\n1",
        "formTitle": "[3075]Maximize Happiness of Selected Children",
        "frequency": 0.0,
        "frontendQuestionId": "3075",
        "hints": [
            "Since all the unselected numbers are decreasing at the same rate, we should greedily select <code>k</code> largest values.",
            "The <code>i<sup>th</code> largest number (<code>i = 1, 2, 3,…k</code>) should decrease by <code>(i - 1)</code> when it is picked.",
            "Add <code>0</code> if the decreased value is negative."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumHappinessSum",
            "params": [
                {
                    "name": "happiness",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3351",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3]\n2",
        "title": "Maximize Happiness of Selected Children",
        "titleSlug": "maximize-happiness-of-selected-children",
        "infer_hints": [
            "Use dynamic programming.",
            "You can use a 2D DP array to solve this problem. \r\n\r\nThe state of the DP is dp[i][j], where i is the index of the child you are considering and j is the number of children you have selected.\r\n\r\nHow can you fill up this DP array?",
            "If you have k children, you can either take the kth child or you can take the 1st child.",
            "If we sort the happiness values in descending order, we can greedily select the maximum happiness value.  What about the minimum happiness value?",
            "Try all possibilities of picking k children.",
            "Try to consider each possibility of the children.",
            "Consider the first child. Can you find out what is the maximum happiness you can get by selecting it?",
            "Can you sort the children based on the happiness value?",
            "Sort the children in descending order by happiness value.",
            "Use dynamic programming to keep track of the maximum happiness we can get for each child and each number of children we have taken.",
            "Think of this problem as a variant of a classic dynamic programming problem.",
            "What if we sort the children by happiness value?",
            "We can use a greedy approach and dynamic programming to solve this problem.",
            "We need to find the maximum sum of the happiness values of the selected children. Can we use dynamic programming to solve this?",
            "If you choose a child with a happiness value of a[i], you can get happiness value a[i] - min(a[j]) + dp[i-1][j] for each j.",
            "Think in terms of states.",
            "The most important point to consider is that the happiness value of the children decrease only if they are not picked yet.",
            "What if we have to pick exactly one child?",
            "Sort the children in increasing order of happiness.",
            "You can sort the children by their happiness value."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool isSubstringPresent(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean isSubstringPresent(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def isSubstringPresent(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def isSubstringPresent(self, s: str) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool isSubstringPresent(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool IsSubstringPresent(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isSubstringPresent = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function isSubstringPresent(s: string): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isSubstringPresent($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func isSubstringPresent(_ s: String) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun isSubstringPresent(s: String): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool isSubstringPresent(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func isSubstringPresent(s string) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Boolean}\ndef is_substring_present(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def isSubstringPresent(s: String): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn is_substring_present(s: String) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (is-substring-present s)\n  (-> string? boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec is_substring_present(S :: unicode:unicode_binary()) -> boolean().\nis_substring_present(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec is_substring_present(s :: String.t) :: boolean\n  def is_substring_present(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>Given a<strong> </strong>string <code>s</code>, find any <span data-keyword=\"substring\">substring</span> of length <code>2</code> which is also present in the reverse of <code>s</code>.</p>\n\n<p>Return <code>true</code><em> if such a substring exists, and </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;leetcode&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">true</span></p>\n\n<p><strong>Explanation:</strong> Substring <code>&quot;ee&quot;</code> is of length <code>2</code> which is also present in <code>reverse(s) == &quot;edocteel&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;abcba&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">true</span></p>\n\n<p><strong>Explanation:</strong> All of the substrings of length <code>2</code> <code>&quot;ab&quot;</code>, <code>&quot;bc&quot;</code>, <code>&quot;cb&quot;</code>, <code>&quot;ba&quot;</code> are also present in <code>reverse(s) == &quot;abcba&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;abcd&quot;</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">false</span></p>\n\n<p><strong>Explanation:</strong> There is no substring of length <code>2</code> in <code>s</code>, which is also present in the reverse of <code>s</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"leetcode\"\n\"abcba\"\n\"abcd\"",
        "formTitle": "[3083]Existence of a Substring in a String and Its Reverse",
        "frequency": 0.0,
        "frontendQuestionId": "3083",
        "hints": [
            "Make a new string by reversing the string <code>s</code>.",
            "For every substring of length <code>2</code> in <code>s</code>, check if there is a corresponding substring in the reverse of <code>s</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "isSubstringPresent",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3353",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"leetcode\"",
        "title": "Existence of a Substring in a String and Its Reverse",
        "titleSlug": "existence-of-a-substring-in-a-string-and-its-reverse",
        "infer_hints": [
            "Try all possible substrings of length 2.",
            "Try all possible substrings of the string and its reverse.",
            "We can use a sliding window approach to solve this problem.",
            "How to check whether a substring exists in a string?",
            "Check if the reversed string contains the original string as a substring.",
            "How can we use the power of hashing to solve this problem?",
            "Try to check if there is any substring of length 2 in both the string and its reverse.",
            "You can use a set to store the substring of s and its reverse.",
            "How can we check if a substring is present in the reverse of the string?",
            "How can we use the property of rolling hash to solve this problem?",
            "If you have two strings <code>s</code> and <code>t</code>, can you find a substring of <code>s</code> that is also a substring of <code>t</code>?",
            "The given string can be divided into three parts.",
            "For each substring of length 2, check if it exists in the reverse of the string.",
            "Use a Hash Set to store all the substrings of length 2.",
            "Use two pointers to compare each pair of characters.",
            "Try to find a substring of length 2 in the string and its reverse.",
            "What is the largest length of the substring that we have to check?",
            "Loop over all possible substrings of length 2.",
            "If you reverse a string, the number of substring that are present in both the string and its reverse is same.",
            "Use a hashset to store all possible substrings."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string minimizeStringValue(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String minimizeStringValue(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimizeStringValue(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimizeStringValue(self, s: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* minimizeStringValue(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string MinimizeStringValue(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar minimizeStringValue = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimizeStringValue(s: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function minimizeStringValue($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimizeStringValue(_ s: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimizeStringValue(s: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String minimizeStringValue(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimizeStringValue(s string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {String}\ndef minimize_string_value(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimizeStringValue(s: String): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimize_string_value(s: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimize-string-value s)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimize_string_value(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nminimize_string_value(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimize_string_value(s :: String.t) :: String.t\n  def minimize_string_value(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>. <code>s[i]</code> is either a lowercase English letter or <code>&#39;?&#39;</code>.</p>\n\n<p>For a string <code>t</code> having length <code>m</code> containing <strong>only</strong> lowercase English letters, we define the function <code>cost(i)</code> for an index <code>i</code>&nbsp;as the number of characters <strong>equal</strong> to <code>t[i]</code>&nbsp;that appeared before it, i.e. in the range <code>[0, i - 1]</code>.</p>\n\n<p>The <strong>value</strong> of <code>t</code> is the <strong>sum</strong> of <code>cost(i)</code> for all indices <code>i</code>.</p>\n\n<p>For example, for the string <code>t = &quot;aab&quot;</code>:</p>\n\n<ul>\n\t<li><code>cost(0) = 0</code></li>\n\t<li><code>cost(1) = 1</code></li>\n\t<li><code>cost(2) = 0</code></li>\n\t<li>Hence, the value of <code>&quot;aab&quot;</code> is <code>0 + 1 + 0 = 1</code>.</li>\n</ul>\n\n<p>Your task is to <strong>replace all</strong> occurrences of <code>&#39;?&#39;</code> in <code>s</code> with any lowercase English letter so that the <strong>value</strong> of <code>s</code> is <strong>minimized</strong>.</p>\n\n<p>Return <em>a string denoting the modified string with replaced occurrences of </em><code>&#39;?&#39;</code><em>. If there are multiple strings resulting in the <strong>minimum value</strong>, return the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span> one.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> s = &quot;???&quot; </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> &quot;abc&quot; </span></p>\n\n<p><strong>Explanation: </strong> In this example, we can replace the occurrences of <code>&#39;?&#39;</code> to make <code>s</code> equal to <code>&quot;abc&quot;</code>.</p>\n\n<p>For <code>&quot;abc&quot;</code>, <code>cost(0) = 0</code>, <code>cost(1) = 0</code>, and <code>cost(2) = 0</code>.</p>\n\n<p>The value of <code>&quot;abc&quot;</code> is <code>0</code>.</p>\n\n<p>Some other modifications of <code>s</code> that have a value of <code>0</code> are <code>&quot;cba&quot;</code>, <code>&quot;abz&quot;</code>, and, <code>&quot;hey&quot;</code>.</p>\n\n<p>Among all of them, we choose the lexicographically smallest.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;a?a?&quot;</span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">&quot;abac&quot;</span></p>\n\n<p><strong>Explanation: </strong> In this example, the occurrences of <code>&#39;?&#39;</code> can be replaced to make <code>s</code> equal to <code>&quot;abac&quot;</code>.</p>\n\n<p>For <code>&quot;abac&quot;</code>, <code>cost(0) = 0</code>, <code>cost(1) = 0</code>, <code>cost(2) = 1</code>, and <code>cost(3) = 0</code>.</p>\n\n<p>The value of <code>&quot;abac&quot;</code> is&nbsp;<code>1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either a lowercase English letter or <code>&#39;?&#39;</code>.</li>\n</ul>\n",
        "exampleTestcases": "\"???\"\n\"a?a?\"",
        "formTitle": "[3081]Replace Question Marks in String to Minimize Its Value",
        "frequency": 0.0,
        "frontendQuestionId": "3081",
        "hints": [
            "<p>The cost does not depend on the order of characters. If a character <code>c</code> appears <code>x</code> times, the cost is exactly <code>0 + 1 + 2 + … + (x − 1) = x * (x − 1) / 2</code>.</p>",
            "<p>We know the total number of question marks; for each one, we should select the letter with the minimum frequency to replace it.</p>",
            "<p>The letter selection can be achieved by a min-heap (or even by brute-forcing the <code>26</code> possibilities).</p>",
            "<p>So, we know the extra letters we need to replace finally. However, we must put those letters in order from left to right so that the resulting string is the lexicographically smallest one.</p>"
        ],
        "level": 2,
        "metaData": {
            "name": "minimizeStringValue",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3354",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"???\"",
        "title": "Replace Question Marks in String to Minimize Its Value",
        "titleSlug": "replace-question-marks-in-string-to-minimize-its-value",
        "infer_hints": [
            "Think of this problem as a sequence of letters.  What can you do to minimize the value of the sequence?",
            "If we replace '?' with a character, the total value of the string will change. How can we use this information to minimize the value of the string?",
            "How can we calculate the value of a string if we replace all occurrences of '?' with a lowercase English letter?",
            "For each character in the string, we can calculate the value of the string if we replace it with 'a'.",
            "For each character, compute how many times it appears in the prefix of the string.",
            "The cost can be calculated by counting the number of characters equal to t[i] that appeared before it.",
            "If we know the count of each character, we can easily calculate the value of a string.",
            "The string <code>t</code> is a substring of <code>s</code>.",
            "For every character c, you can calculate the value of the string without c and the value of the string with c.",
            "For each character, compute how many characters are equal to it before it and how many characters are equal to it after it.",
            "Create an array count of size 26 where count[i] will store the number of occurrences of the character i in the string.",
            "Think of this problem as a dynamic programming problem.  The dp array will have two dimensions, one for the number of ‘a’s that we have found so far and the other for the number of ‘b’s that we have found so far.",
            "We can use prefix and suffix sum to solve this problem.  There are 26 possible letters, so we can count the frequency of each letter in prefix and suffix.",
            "We can find the value of the string by replacing each question mark with each lowercase English letter and calculating the value.",
            "If you try to solve it using brute-force approach, you will realize that it will be extremely slow. Think about it carefully.",
            "Find the first '?' and then check for all possible characters that can be replaced for that '?'.",
            "We can use a dynamic programming approach to solve this problem.  Try to compute the value of the string for all possible characters at position i.",
            "Can you use the concept of prefix sum and dynamic programming to solve this problem?",
            "If you replace a '?' with 'a', the value of the string will increase by 26. If you replace it with 'b', the value of the string will increase by 25. Do you see a pattern?",
            "Use prefix sum array."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumLevels(vector<int>& possible) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumLevels(int[] possible) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumLevels(self, possible):\n        \"\"\"\n        :type possible: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumLevels(self, possible: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumLevels(int* possible, int possibleSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumLevels(int[] possible) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} possible\n * @return {number}\n */\nvar minimumLevels = function(possible) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumLevels(possible: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $possible\n     * @return Integer\n     */\n    function minimumLevels($possible) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumLevels(_ possible: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumLevels(possible: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumLevels(List<int> possible) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumLevels(possible []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} possible\n# @return {Integer}\ndef minimum_levels(possible)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumLevels(possible: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_levels(possible: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-levels possible)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_levels(Possible :: [integer()]) -> integer().\nminimum_levels(Possible) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_levels(possible :: [integer]) :: integer\n  def minimum_levels(possible) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a binary array <code>possible</code> of length <code>n</code>.</p>\n\n<p>Alice and Bob are playing a game that consists of <code>n</code> levels. Some of the levels in the game are <strong>impossible</strong> to clear while others can <strong>always</strong> be cleared. In particular, if <code>possible[i] == 0</code>, then the <code>i<sup>th</sup></code> level is <strong>impossible</strong> to clear for <strong>both</strong> the players. A player gains <code>1</code> point on clearing a level and loses <code>1</code> point if the player fails to clear it.</p>\n\n<p>At the start of the game, Alice will play some levels in the <strong>given order</strong> starting from the <code>0<sup>th</sup></code> level, after which Bob will play for the rest of the levels.</p>\n\n<p>Alice wants to know the <strong>minimum</strong> number of levels she should play to gain more points than Bob, if both players play optimally to <strong>maximize</strong> their points.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of levels Alice should play to gain more points</em>. <em>If this is <strong>not</strong> possible, return</em> <code>-1</code>.</p>\n\n<p><strong>Note</strong> that each player must play at least <code>1</code> level.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">possible = [1,0,1,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at all the levels that Alice can play up to:</p>\n\n<ul>\n\t<li>If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has -1 + 1 - 1 = -1 point.</li>\n\t<li>If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 1 - 1 = 0 points, while Bob has 1 - 1 = 0 points.</li>\n\t<li>If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 1 - 1 + 1 = 1 point, while Bob has -1 point.</li>\n</ul>\n\n<p>Alice must play a minimum of 1 level to gain more points.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">possible = [1,1,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at all the levels that Alice can play up to:</p>\n\n<ul>\n\t<li>If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has 4 points.</li>\n\t<li>If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 2 points, while Bob has 3 points.</li>\n\t<li>If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 3 points, while Bob has 2 points.</li>\n\t<li>If Alice plays till level 3 and Bob plays the rest of the levels, Alice has 4 points, while Bob has 1 point.</li>\n</ul>\n\n<p>Alice must play a minimum of 3 levels to gain more points.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">possible = [0,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible way is for both players to play 1 level each. Alice plays level 0 and loses 1 point. Bob plays level 1 and loses 1 point. As both players have equal points, Alice can&#39;t gain more points than Bob.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == possible.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>possible[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "exampleTestcases": "[1,0,1,0]\n[1,1,1,1,1]\n[0,0]",
        "formTitle": "[3096]Minimum Levels to Gain More Points",
        "frequency": 0.0,
        "frontendQuestionId": "3096",
        "hints": [
            "Change all <code>0</code> in possible array into <code>-1</code>.",
            "We need to find the shortest non-empty prefix of the new possible array such that the sum of elements in it is strictly larger than the remaining part."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumLevels",
            "params": [
                {
                    "name": "possible",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3355",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,0,1,0]",
        "title": "Minimum Levels to Gain More Points",
        "titleSlug": "minimum-levels-to-gain-more-points",
        "infer_hints": [
            "The problem is asking for the minimum number of levels Alice should play to gain more points than Bob.",
            "The best strategy for Alice to win is to always play the level that maximizes Alice's gain in the current state.",
            "Let's consider the prefix sum of the array.  Now, Alice can play any subset of the levels from the prefix sum of the array, and the prefix sum of the array is sorted in increasing order.",
            "Try to find the best way to play the levels so that Alice has more points than Bob.",
            "Find the minimum number of consecutive 1's Alice can play.",
            "How many levels does Bob need to play to be at par with Alice?",
            "How can you use prefix sums to calculate the points of both players?",
            "The problem can be solved by a dynamic programming.",
            "Consider a subarray.",
            "Try to find the smallest level Alice can play such that she can gain more points than Bob.",
            "The key to this problem is to keep track of the minimum number of levels Alice needs to play to reach a certain point.",
            "If Alice can play the level i, then she can also play the levels to the right of it.",
            "Consider a game that Alice plays in the first i levels and Bob plays the rest. ",
            "Let's denote Alice's score as a and Bob's score as b. How can we update them?",
            "Consider the sum of Alice's points as a prefix sum.  If Alice plays a certain number of levels, the total points she gets is prefix[i] - prefix[i - 1] - i + 1.  We want to maximize this sum.",
            "Try all the possible ways to split the levels between Alice and Bob.",
            "You can use prefix sums and binary search to solve this problem in O(n log n) time.",
            "If there is an optimal way to play, then the total number of points Alice can get should be greater than the total number of points Bob can get.",
            "You can use dynamic programming to solve this problem.",
            "How can we calculate the minimum number of levels Alice should play to gain more points?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<string> shortestSubstrings(vector<string>& arr) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String[] shortestSubstrings(String[] arr) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def shortestSubstrings(self, arr):\n        \"\"\"\n        :type arr: List[str]\n        :rtype: List[str]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def shortestSubstrings(self, arr: List[str]) -> List[str]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** shortestSubstrings(char** arr, int arrSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string[] ShortestSubstrings(string[] arr) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} arr\n * @return {string[]}\n */\nvar shortestSubstrings = function(arr) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function shortestSubstrings(arr: string[]): string[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $arr\n     * @return String[]\n     */\n    function shortestSubstrings($arr) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func shortestSubstrings(_ arr: [String]) -> [String] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun shortestSubstrings(arr: Array<String>): Array<String> {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<String> shortestSubstrings(List<String> arr) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func shortestSubstrings(arr []string) []string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} arr\n# @return {String[]}\ndef shortest_substrings(arr)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def shortestSubstrings(arr: Array[String]): Array[String] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn shortest_substrings(arr: Vec<String>) -> Vec<String> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (shortest-substrings arr)\n  (-> (listof string?) (listof string?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec shortest_substrings(Arr :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nshortest_substrings(Arr) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec shortest_substrings(arr :: [String.t]) :: [String.t]\n  def shortest_substrings(arr) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>arr</code> of size <code>n</code> consisting of <strong>non-empty</strong> strings.</p>\n\n<p>Find a string array <code>answer</code> of size <code>n</code> such that:</p>\n\n<ul>\n\t<li><code>answer[i]</code> is the <strong>shortest</strong> <span data-keyword=\"substring\">substring</span> of <code>arr[i]</code> that does <strong>not</strong> occur as a substring in any other string in <code>arr</code>. If multiple such substrings exist, <code>answer[i]</code> should be the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span>. And if no such substring exists, <code>answer[i]</code> should be an empty string.</li>\n</ul>\n\n<p>Return <em>the array </em><code>answer</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [&quot;cab&quot;,&quot;ad&quot;,&quot;bad&quot;,&quot;c&quot;]\n<strong>Output:</strong> [&quot;ab&quot;,&quot;&quot;,&quot;ba&quot;,&quot;&quot;]\n<strong>Explanation:</strong> We have the following:\n- For the string &quot;cab&quot;, the shortest substring that does not occur in any other string is either &quot;ca&quot; or &quot;ab&quot;, we choose the lexicographically smaller substring, which is &quot;ab&quot;.\n- For the string &quot;ad&quot;, there is no substring that does not occur in any other string.\n- For the string &quot;bad&quot;, the shortest substring that does not occur in any other string is &quot;ba&quot;.\n- For the string &quot;c&quot;, there is no substring that does not occur in any other string.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [&quot;abc&quot;,&quot;bcd&quot;,&quot;abcd&quot;]\n<strong>Output:</strong> [&quot;&quot;,&quot;&quot;,&quot;abcd&quot;]\n<strong>Explanation:</strong> We have the following:\n- For the string &quot;abc&quot;, there is no substring that does not occur in any other string.\n- For the string &quot;bcd&quot;, there is no substring that does not occur in any other string.\n- For the string &quot;abcd&quot;, the shortest substring that does not occur in any other string is &quot;abcd&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == arr.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= arr[i].length &lt;= 20</code></li>\n\t<li><code>arr[i]</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "[\"cab\",\"ad\",\"bad\",\"c\"]\n[\"abc\",\"bcd\",\"abcd\"]",
        "formTitle": "[3076]Shortest Uncommon Substring in an Array",
        "frequency": 0.0,
        "frontendQuestionId": "3076",
        "hints": [
            "Try a brute force solution where you check every substring.",
            "Use a Hash map to keep track of the substrings."
        ],
        "level": 2,
        "metaData": {
            "name": "shortestSubstrings",
            "params": [
                {
                    "name": "arr",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3356",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[\"cab\",\"ad\",\"bad\",\"c\"]",
        "title": "Shortest Uncommon Substring in an Array",
        "titleSlug": "shortest-uncommon-substring-in-an-array",
        "infer_hints": [
            "For each string in the array, generate all possible substrings and store them in a data structure that allows for fast lookup.",
            "Build the concatenated string of all the strings.",
            "Sort the array in lexicographical order.",
            "Use a hashmap to store the frequency of each substring in all strings.",
            "What about a rolling hash for each string?",
            "You can use a set to store all substrings of a string.",
            "You can try generating all substrings and then checking if they are uncommon.",
            "The key to solve this problem is to create a substring of each string and then check if it is the shortest and unique.",
            "We can use a trie data structure to solve this problem.",
            "Use Trie data structure.",
            "Use Trie data structure.",
            "You can check if a substring is uncommon by storing all substrings in a set and checking if they appear only once.",
            "Try to create a substring of every possible length.",
            "Use Trie data structure to solve this problem.",
            "Try to build the trie in a way that each node stores the shortest uncommon substring for the corresponding string.",
            "You can use the Trie data structure to solve this problem.",
            "Build the prefix tree for all the strings.",
            "We can use a set to store all substrings and their indices.",
            "How can you check if a string <code>S</code> is a substring of another string <code>T</code>?",
            "Try to use a hash map to record the first occurrence of each substring."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumDeletions(string word, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumDeletions(String word, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumDeletions(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumDeletions(self, word: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumDeletions(char* word, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumDeletions(string word, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumDeletions = function(word, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumDeletions(word: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumDeletions($word, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumDeletions(_ word: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumDeletions(word: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumDeletions(String word, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumDeletions(word string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_deletions(word, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumDeletions(word: String, k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_deletions(word: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-deletions word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_deletions(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_deletions(Word, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_deletions(word :: String.t, k :: integer) :: integer\n  def minimum_deletions(word, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>We consider <code>word</code> to be <strong>k-special</strong> if <code>|freq(word[i]) - freq(word[j])| &lt;= k</code> for all indices <code>i</code> and <code>j</code> in the string.</p>\n\n<p>Here, <code>freq(x)</code> denotes the <span data-keyword=\"frequency-letter\">frequency</span> of the character <code>x</code> in <code>word</code>, and <code>|y|</code> denotes the absolute value of <code>y</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of characters you need to delete to make</em> <code>word</code> <strong><em>k-special</em></strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">word = &quot;aabcaba&quot;, k = 0</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">3</span></p>\n\n<p><strong>Explanation:</strong> We can make <code>word</code> <code>0</code>-special by deleting <code>2</code> occurrences of <code>&quot;a&quot;</code> and <code>1</code> occurrence of <code>&quot;c&quot;</code>. Therefore, <code>word</code> becomes equal to <code>&quot;baba&quot;</code> where <code>freq(&#39;a&#39;) == freq(&#39;b&#39;) == 2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">word = &quot;dabdcbdcdcd&quot;, k = 2</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">2</span></p>\n\n<p><strong>Explanation:</strong> We can make <code>word</code> <code>2</code>-special by deleting <code>1</code> occurrence of <code>&quot;a&quot;</code> and <code>1</code> occurrence of <code>&quot;d&quot;</code>. Therefore, <code>word</code> becomes equal to &quot;bdcbdcdcd&quot; where <code>freq(&#39;b&#39;) == 2</code>, <code>freq(&#39;c&#39;) == 3</code>, and <code>freq(&#39;d&#39;) == 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">word = &quot;aaabaaa&quot;, k = 2</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">1</span></p>\n\n<p><strong>Explanation:</strong> We can make <code>word</code> <code>2</code>-special by deleting <code>1</code> occurrence of <code>&quot;b&quot;</code>. Therefore, <code>word</code> becomes equal to <code>&quot;aaaaaa&quot;</code> where each letter&#39;s frequency is now uniformly <code>6</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aabcaba\"\n0\n\"dabdcbdcdcd\"\n2\n\"aaabaaa\"\n2",
        "formTitle": "[3085]Minimum Deletions to Make String K-Special",
        "frequency": 0.0,
        "frontendQuestionId": "3085",
        "hints": [
            "Count the frequency of each letter.",
            "Suppose we select several characters as the final answer, and let <code>x</code> be the character with the smallest frequency in the answer. It can be shown that out of the selected characters, the optimal solution will never delete an occurrence of character <code>x</code> to obtain the answer.",
            "We will fix a character <code>c</code> and assume that it will be the character with the smallest frequency in the answer. Suppose its frequency is <code>x</code>.",
            "Then, for every other character, we will count the number of occurrences that will be deleted. Suppose that the current character has <code>y</code> occurrences. <ol> <li>If y < x, we need to delete all of them.</li> <li> if y > x + k, we should delete y - x - k of such character.</li> <li> Otherwise we don’t need to delete it.</li></ol>"
        ],
        "level": 2,
        "metaData": {
            "name": "minimumDeletions",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3360",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"aabcaba\"\n0",
        "title": "Minimum Deletions to Make String K-Special",
        "titleSlug": "minimum-deletions-to-make-string-k-special",
        "infer_hints": [
            "The string is made k-special if for every pair of different characters, the frequency of one character is at most k more than the frequency of the other character.",
            "For each character in the string, count the number of deletions to make it k-special.",
            "Use a prefix sum array and sort it.",
            "Sort the frequencies.",
            "Do a sliding window on the characters in the string.",
            "The problem is asking for the smallest number of letters to remove to make every two letters equal.",
            "Can we perform a single pass through the string?",
            "Can you sort the frequencies?",
            "Keep track of the number of characters that we need to delete to make each substring k-special.",
            "Can we perform dynamic programming on the string?",
            "Use prefix sums to keep track of the frequency of each character.",
            "You can use a priority queue to keep track of the frequency of the characters in the string.",
            "Use a sliding window.",
            "Create an array of frequencies for each character in the string.",
            "For each character, keep track of the range of its frequency it can have.",
            "Use dynamic programming.",
            "Try using a sliding window approach.",
            "What if you keep track of the count of the smallest frequency you've seen so far?",
            "Use a priority queue to store the frequency of each character in the string.",
            "For each character, calculate the frequency of that character in the string."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    string findLatestTime(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public String findLatestTime(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findLatestTime(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findLatestTime(self, s: str) -> str:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "char* findLatestTime(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public string FindLatestTime(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar findLatestTime = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findLatestTime(s: string): string {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function findLatestTime($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findLatestTime(_ s: String) -> String {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findLatestTime(s: String): String {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  String findLatestTime(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findLatestTime(s string) string {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {String}\ndef find_latest_time(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findLatestTime(s: String): String = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_latest_time(s: String) -> String {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-latest-time s)\n  (-> string? string?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_latest_time(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfind_latest_time(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_latest_time(s :: String.t) :: String.t\n  def find_latest_time(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code> representing a 12-hour format time where some of the digits (possibly none) are replaced with a <code>&quot;?&quot;</code>.</p>\n\n<p>12-hour times are formatted as <code>&quot;HH:MM&quot;</code>, where <code>HH</code> is between <code>00</code> and <code>11</code>, and <code>MM</code> is between <code>00</code> and <code>59</code>. The earliest 12-hour time is <code>00:00</code>, and the latest is <code>11:59</code>.</p>\n\n<p>You have to replace <strong>all</strong> the <code>&quot;?&quot;</code> characters in <code>s</code> with digits such that the time we obtain by the resulting string is a <strong>valid</strong> 12-hour format time and is the <strong>latest</strong> possible.</p>\n\n<p>Return <em>the resulting string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;1?:?4&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;11:54&quot;</span></p>\n\n<p><strong>Explanation:</strong> The latest 12-hour format time we can achieve by replacing <code>&quot;?&quot;</code> characters is <code>&quot;11:54&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;0?:5?&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;09:59&quot;</span></p>\n\n<p><strong>Explanation:</strong> The latest 12-hour format time we can achieve by replacing <code>&quot;?&quot;</code> characters is <code>&quot;09:59&quot;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s.length == 5</code></li>\n\t<li><code>s[2]</code> is equal to the character <code>&quot;:&quot;</code>.</li>\n\t<li>All characters except <code>s[2]</code> are digits or <code>&quot;?&quot;</code> characters.</li>\n\t<li>The input is generated such that there is <strong>at least</strong> one time between <code>&quot;00:00&quot;</code> and <code>&quot;11:59&quot;</code> that you can obtain after replacing the <code>&quot;?&quot;</code> characters.</li>\n</ul>\n",
        "exampleTestcases": "\"1?:?4\"\n\"0?:5?\"",
        "formTitle": "[3114]Latest Time You Can Obtain After Replacing Characters",
        "frequency": 0.0,
        "frontendQuestionId": "3114",
        "hints": [
            "Try using a brute force approach.",
            "Iterate over all possible times that can be generated from the string and find the latest one."
        ],
        "level": 1,
        "metaData": {
            "name": "findLatestTime",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3361",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"1?:?4\"",
        "title": "Latest Time You Can Obtain After Replacing Characters",
        "titleSlug": "latest-time-you-can-obtain-after-replacing-characters",
        "infer_hints": [
            "If the hours part is already determined, what can we do to maximize the minutes part?",
            "Replace one '?' by '0', and the other '?' by '9'.",
            "Try to brute force all possibilities and check if it is valid.",
            "The maximum number for the first 2 characters can be 23.",
            "The only two digits that matter are the first two and the last two.  What are the maximum values for each?",
            "Can you generate all possible 24-hour times?",
            "Try all possible combinations.",
            "You can replace each \"?\" with either \"0\" or \"1\" and then sort the string in lexicographical order.",
            "The first 2 characters of the time can be anything. Can you find a way to find the latest possible 2-digit minute and hour values?",
            "If the hour is 24, then we need to set it to 0.",
            "If the first digit is 2, then we can replace the first '?' with 2, and the second '?' with any digit.  Now, we only have 2 choices for the first digit, so we multiply the number of possibilities by 2.  Do the same for the rest of the string.",
            "Let's say the input string is \"1?:?4\". The possible maximum is \"19:59\", and the possible minimum is \"10:00\".  What should be the first digit if the next digit is '4'?",
            "The highest bit of the hour can be 2 if the remaining 4 bits are not 0.",
            "Try to replace the characters one by one.  If we cannot replace the character, it means we should leave it as it is.",
            "Can you make a brute force solution work? Can you optimize it?",
            "Try replacing all '?'s with the largest possible digit.",
            "Try to maximize the hours and then the minutes.",
            "If the first digit is 2, you can only have the next digit be 0-3.  You can either take 2 or 1.",
            "The highest digit in HH can be 2 only if there is a digit 3 or 4 in the string.",
            "If the hour is 24, set it to 0."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int medianOfUniquenessArray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int medianOfUniquenessArray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def medianOfUniquenessArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def medianOfUniquenessArray(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int medianOfUniquenessArray(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MedianOfUniquenessArray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar medianOfUniquenessArray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function medianOfUniquenessArray(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function medianOfUniquenessArray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func medianOfUniquenessArray(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun medianOfUniquenessArray(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int medianOfUniquenessArray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func medianOfUniquenessArray(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef median_of_uniqueness_array(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def medianOfUniquenessArray(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn median_of_uniqueness_array(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (median-of-uniqueness-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec median_of_uniqueness_array(Nums :: [integer()]) -> integer().\nmedian_of_uniqueness_array(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec median_of_uniqueness_array(nums :: [integer]) :: integer\n  def median_of_uniqueness_array(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code>. The <strong>uniqueness array</strong> of <code>nums</code> is the sorted array that contains the number of distinct elements of all the <span data-keyword=\"subarray-nonempty\">subarrays</span> of <code>nums</code>. In other words, it is a sorted array consisting of <code>distinct(nums[i..j])</code>, for all <code>0 &lt;= i &lt;= j &lt; nums.length</code>.</p>\n\n<p>Here, <code>distinct(nums[i..j])</code> denotes the number of distinct elements in the subarray that starts at index <code>i</code> and ends at index <code>j</code>.</p>\n\n<p>Return the <strong>median</strong> of the <strong>uniqueness array</strong> of <code>nums</code>.</p>\n\n<p><strong>Note</strong> that the <strong>median</strong> of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the <strong>smaller</strong> of the two values is taken.<!-- notionvc: 7e0f5178-4273-4a82-95ce-3395297921dc --></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The uniqueness array of <code>nums</code> is <code>[distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]), distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])]</code> which is equal to <code>[1, 1, 1, 2, 2, 3]</code>. The uniqueness array has a median of 1. Therefore, the answer is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,4,3,4,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The uniqueness array of <code>nums</code> is <code>[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]</code>. The uniqueness array has a median of 2. Therefore, the answer is 2.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,5,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The uniqueness array of <code>nums</code> is <code>[1, 1, 1, 1, 2, 2, 2, 3, 3, 3]</code>. The uniqueness array has a median of 2. Therefore, the answer is 2.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n[3,4,3,4,5]\n[4,3,5,4]",
        "formTitle": "[3134]Find the Median of the Uniqueness Array",
        "frequency": 0.0,
        "frontendQuestionId": "3134",
        "hints": [
            "Binary search over the answer.",
            "For a given <code>x</code>, you need to check if <code>x</code> is the median, to the left of the median, or to the right of the media. You can do that by counting the number of sub-arrays <code>nums[i…j]</code> such that <code>distinct(num[i…j]) <= x</code>.",
            "Use the sliding window to solve the counting problem in the hint above."
        ],
        "level": 3,
        "metaData": {
            "name": "medianOfUniquenessArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3362",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3]",
        "title": "Find the Median of the Uniqueness Array",
        "titleSlug": "find-the-median-of-the-uniqueness-array",
        "infer_hints": [
            "Sort the array and return the middle value.",
            "What does the number of distinct elements in a subarray say about the uniqueness of the subarray?",
            "Use a binary search to find the answer.",
            "The median of an array is the middle element when the array is sorted.",
            "Think about the median of the uniqueness array in a sorted manner.",
            "We can use a set to store the distinct numbers of each subarray.",
            "We can use binary search to find the answer.",
            "Try to use the concept of prefix sum array and then use it to solve this problem.",
            "Can you solve the problem for the case when the number of unique numbers is less than or equal to 2?",
            "Sort the uniqueness array.",
            "Find the number of distinct elements in the subarray that ends at index `i`.",
            "The uniqueness array is sorted.  What does this mean?",
            "Can you do it in O(n log n) time?",
            "Consider using a data structure that supports adding and removing elements in logarithmic time.",
            "Can we solve this problem in O(n) time complexity?",
            "Try to solve it in O(n log n) time complexity.",
            "Use binary search to find the answer.",
            "If we sort the array in increasing order, how many elements can we remove from the start of the array to keep it sorted?",
            "You can use a multiset to count the number of distinct elements in each subarray.",
            "Can you use a binary search to solve this problem?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<long long> mostFrequentIDs(vector<int>& nums, vector<int>& freq) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long[] mostFrequentIDs(int[] nums, int[] freq) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def mostFrequentIDs(self, nums, freq):\n        \"\"\"\n        :type nums: List[int]\n        :type freq: List[int]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def mostFrequentIDs(self, nums: List[int], freq: List[int]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* mostFrequentIDs(int* nums, int numsSize, int* freq, int freqSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long[] MostFrequentIDs(int[] nums, int[] freq) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} freq\n * @return {number[]}\n */\nvar mostFrequentIDs = function(nums, freq) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function mostFrequentIDs(nums: number[], freq: number[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $freq\n     * @return Integer[]\n     */\n    function mostFrequentIDs($nums, $freq) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func mostFrequentIDs(_ nums: [Int], _ freq: [Int]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun mostFrequentIDs(nums: IntArray, freq: IntArray): LongArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> mostFrequentIDs(List<int> nums, List<int> freq) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func mostFrequentIDs(nums []int, freq []int) []int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} freq\n# @return {Integer[]}\ndef most_frequent_i_ds(nums, freq)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def mostFrequentIDs(nums: Array[Int], freq: Array[Int]): Array[Long] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn most_frequent_i_ds(nums: Vec<i32>, freq: Vec<i32>) -> Vec<i64> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (most-frequent-i-ds nums freq)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec most_frequent_i_ds(Nums :: [integer()], Freq :: [integer()]) -> [integer()].\nmost_frequent_i_ds(Nums, Freq) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec most_frequent_i_ds(nums :: [integer], freq :: [integer]) :: [integer]\n  def most_frequent_i_ds(nums, freq) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, <code>nums</code> and <code>freq</code>, of equal length <code>n</code>. Each element in <code>nums</code> represents an ID, and the corresponding element in <code>freq</code> indicates how many times that ID should be added to or removed from the collection at each step.</p>\n\n<ul>\n\t<li><strong>Addition of IDs:</strong> If <code>freq[i]</code> is positive, it means <code>freq[i]</code> IDs with the value <code>nums[i]</code> are added to the collection at step <code>i</code>.</li>\n\t<li><strong>Removal of IDs:</strong> If <code>freq[i]</code> is negative, it means <code>-freq[i]</code> IDs with the value <code>nums[i]</code> are removed from the collection at step <code>i</code>.</li>\n</ul>\n\n<p>Return an array <code>ans</code> of length <code>n</code>, where <code>ans[i]</code> represents the <strong>count</strong> of the <em>most frequent ID</em> in the collection after the <code>i<sup>th</sup></code>&nbsp;step. If the collection is empty at any step, <code>ans[i]</code> should be 0 for that step.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,2,1], freq = [3,2,-3,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,3,2,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After step 0, we have 3 IDs with the value of 2. So <code>ans[0] = 3</code>.<br />\nAfter step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So <code>ans[1] = 3</code>.<br />\nAfter step 2, we have 2 IDs with the value of 3. So <code>ans[2] = 2</code>.<br />\nAfter step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So <code>ans[3] = 2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [5,5,3], freq = [2,-2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,0,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After step 0, we have 2 IDs with the value of 5. So <code>ans[0] = 2</code>.<br />\nAfter step 1, there are no IDs. So <code>ans[1] = 0</code>.<br />\nAfter step 2, we have 1 ID with the value of 3. So <code>ans[2] = 1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length == freq.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= freq[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>freq[i] != 0</code></li>\n\t<li>The input is generated<!-- notionvc: a136b55a-f319-4fa6-9247-11be9f3b1db8 --> such that the occurrences of an ID will not be negative in any step.</li>\n</ul>\n",
        "exampleTestcases": "[2,3,2,1]\n[3,2,-3,1]\n[5,5,3]\n[2,-2,1]",
        "formTitle": "[3092]Most Frequent IDs",
        "frequency": 0.0,
        "frontendQuestionId": "3092",
        "hints": [
            "Use an ordered set for maintaining the occurrences of each ID.",
            "After step <code>i</code> find the occurrences of <code>nums[i]</code>.",
            "Change the occurrences of <code>nums[i]</code> in the ordered set."
        ],
        "level": 2,
        "metaData": {
            "name": "mostFrequentIDs",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "freq",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3363",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,3,2,1]\n[3,2,-3,1]",
        "title": "Most Frequent IDs",
        "titleSlug": "most-frequent-ids",
        "infer_hints": [
            "Do you need to sort the IDs by their count in each step?",
            "For each ID, maintain its count. \r\nHow about using a hash map (unordered_map) to store the count of each ID?",
            "How can we maintain the frequency of each ID at each step?",
            "How can we keep track of the most frequent IDs in the current step?",
            "We can use a priority queue to track the IDs that have the maximum count so far.",
            "Use a priority queue to keep track of the most frequent IDs.",
            "Do we need to maintain a count of the number of times each ID appears in the array?",
            "Keep track of the current frequency of each ID as you go through the steps.",
            "If you maintain a list of IDs in the order of their first appearance, you can always remove the ID that was in the list the longest time ago.",
            "Use a priority queue to keep track of the most frequent IDs.",
            "We can use a priority queue to store the IDs and their counts.",
            "Use a priority queue to keep track of the most frequent IDs.",
            "Do you have a data structure that allows you to get the most frequent IDs in constant time?",
            "Sort the changes in the frequency of the IDs by their values.",
            "Can we use a hashmap to keep track of the frequency of IDs?",
            "What data structure can be used to keep track of the frequency of IDs at each step?",
            "Try to keep track of the most frequent IDs in a priority queue.",
            "We need to find the most frequent ID at each step.  We can maintain a count of each ID and update the most frequent ID at each step.",
            "The frequency of each ID can be stored in a map.",
            "Use a priority queue to keep track of the IDs that have the most occurrences."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumValueSum(vector<int>& nums, vector<int>& andValues) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumValueSum(int[] nums, int[] andValues) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumValueSum(self, nums, andValues):\n        \"\"\"\n        :type nums: List[int]\n        :type andValues: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumValueSum(self, nums: List[int], andValues: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumValueSum(int* nums, int numsSize, int* andValues, int andValuesSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumValueSum(int[] nums, int[] andValues) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number[]} andValues\n * @return {number}\n */\nvar minimumValueSum = function(nums, andValues) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumValueSum(nums: number[], andValues: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $andValues\n     * @return Integer\n     */\n    function minimumValueSum($nums, $andValues) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumValueSum(_ nums: [Int], _ andValues: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumValueSum(nums: IntArray, andValues: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumValueSum(List<int> nums, List<int> andValues) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumValueSum(nums []int, andValues []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer[]} and_values\n# @return {Integer}\ndef minimum_value_sum(nums, and_values)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumValueSum(nums: Array[Int], andValues: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_value_sum(nums: Vec<i32>, and_values: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-value-sum nums andValues)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_value_sum(Nums :: [integer()], AndValues :: [integer()]) -> integer().\nminimum_value_sum(Nums, AndValues) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_value_sum(nums :: [integer], and_values :: [integer]) :: integer\n  def minimum_value_sum(nums, and_values) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two arrays <code>nums</code> and <code>andValues</code> of length <code>n</code> and <code>m</code> respectively.</p>\n\n<p>The <strong>value</strong> of an array is equal to the <strong>last</strong> element of that array.</p>\n\n<p>You have to divide <code>nums</code> into <code>m</code> <strong>disjoint contiguous</strong> <span data-keyword=\"subarray-nonempty\">subarrays</span> such that for the <code>i<sup>th</sup></code> subarray <code>[l<sub>i</sub>, r<sub>i</sub>]</code>, the bitwise <code>AND</code> of the subarray elements is equal to <code>andValues[i]</code>, in other words, <code>nums[l<sub>i</sub>] &amp; nums[l<sub>i</sub> + 1] &amp; ... &amp; nums[r<sub>i</sub>] == andValues[i]</code> for all <code>1 &lt;= i &lt;= m</code>, where <code>&amp;</code> represents the bitwise <code>AND</code> operator.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible sum of the <strong>values</strong> of the </em><code>m</code><em> subarrays </em><code>nums</code><em> is divided into</em>. <em>If it is not possible to divide </em><code>nums</code><em> into </em><code>m</code><em> subarrays satisfying these conditions, return</em> <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,3,3,2], andValues = [0,3,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible way to divide <code>nums</code> is:</p>\n\n<ol>\n\t<li><code>[1,4]</code> as <code>1 &amp; 4 == 0</code>.</li>\n\t<li><code>[3]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n\t<li><code>[3]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n\t<li><code>[2]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n</ol>\n\n<p>The sum of the values for these subarrays is <code>4 + 3 + 3 + 2 = 12</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,5,7,7,7,5], andValues = [0,7,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">17</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are three ways to divide <code>nums</code>:</p>\n\n<ol>\n\t<li><code>[[2,3,5],[7,7,7],[5]]</code> with the sum of the values <code>5 + 7 + 5 == 17</code>.</li>\n\t<li><code>[[2,3,5,7],[7,7],[5]]</code> with the sum of the values <code>7 + 7 + 5 == 19</code>.</li>\n\t<li><code>[[2,3,5,7,7],[7],[5]]</code> with the sum of the values <code>7 + 7 + 5 == 19</code>.</li>\n</ol>\n\n<p>The minimum possible sum of the values is <code>17</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4], andValues = [2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The bitwise <code>AND</code> of the entire array <code>nums</code> is <code>0</code>. As there is no possible way to divide <code>nums</code> into a single subarray to have the bitwise <code>AND</code> of elements <code>2</code>, return <code>-1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m == andValues.length &lt;= min(n, 10)</code></li>\n\t<li><code>1 &lt;= nums[i] &lt; 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= andValues[j] &lt; 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,4,3,3,2]\n[0,3,3,2]\n[2,3,5,7,7,7,5]\n[0,7,5]\n[1,2,3,4]\n[2]",
        "formTitle": "[3117]Minimum Sum of Values by Dividing Array",
        "frequency": 0.0,
        "frontendQuestionId": "3117",
        "hints": [
            "Let <code>dp[i][j]</code> be the optimal answer to split  <code>nums[0..(i - 1)]</code> into the first <code>j</code> andValues.",
            "<code>dp[i][j] = min(dp[(i - z)][j - 1]) + nums[i - 1]</code> over all <code>x <= z <= y</code> and <code>dp[0][0] = 0</code>, where <code>x</code> and <code>y</code> are the longest and shortest subarrays ending with <code>nums[i - 1]</code> and the bitwise-and of all the values in it is <code>andValues[j - 1]</code>.",
            "The answer is <code>dp[n][m]</code>.",
            "To calculate <code>x</code> and <code>y</code>, we can use binary search (or sliding window). Note that the more values we have, the smaller the <code>AND</code> value is.",
            "To calculate the result, we need to support RMQ (range minimum query). Segment tree is one way to do it in <code>O(log(n))</code>. But we can use Monotonic Queue since the ranges are indeed “sliding to right” which can be reduced to the classical minimum value in sliding window problem, for a <code>O(n)</code> solution."
        ],
        "level": 3,
        "metaData": {
            "name": "minimumValueSum",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "andValues",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3364",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,4,3,3,2]\n[0,3,3,2]",
        "title": "Minimum Sum of Values by Dividing Array",
        "titleSlug": "minimum-sum-of-values-by-dividing-array",
        "infer_hints": [
            "Use bitwise AND operation to get the minimum possible sum.",
            "How many subarrays can you get if you divide the array at index i?",
            "For each possible bitwise AND value, try to divide the array into subarrays such that their bitwise ANDs equal to that value.",
            "Can you divide the array into disjoint intervals?",
            "Use a prefix-sum array to get the bitwise AND of a range in O(1) time.",
            "Can we calculate the sum of the values for all possible ways to divide the array?",
            "We can use a dynamic programming approach.  We should store the smallest possible sum of values that can be achieved by dividing the array into <code>i</code> parts such that the bitwise AND of all elements in the part is <code>j</code>.",
            "If you can find the smallest number that all prefixes can be divided by, then you can use that number to divide the array into disjoint intervals.",
            "Try all possible combinations of splitting the array into <code>m</code> parts.",
            "Try all possible divisions of the array into subarrays and calculate the sum of the values for each division.",
            "The problem is essentially about dynamic programming and bitwise operations.",
            "You can consider every subarray ending at position i to be a separate problem to solve.",
            "You can use a bitwise trie to solve this problem.",
            "Can we try to divide the array into multiple subarrays such that each subarray's AND operation equals to a given value?",
            "Consider each number as a node in a graph, and draw an edge between two nodes if they have the same last digit.",
            "Can you do it in O(n log(n)) time complexity?",
            "You can try to divide the array into disjoint intervals such that for each interval, the bitwise AND operation gives the same result.",
            "Use a sliding window technique.  We can use a sliding window to find all subarrays that can be formed such that the bitwise AND of the subarray elements equals to the given andValues[i].",
            "Create an array <code>dp[i]</code> where <code>dp[i]</code> is the smallest possible sum of the values of the <code>i</code> subarrays.",
            "Try to use a priority queue."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int sumOfEncryptedInt(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int sumOfEncryptedInt(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def sumOfEncryptedInt(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def sumOfEncryptedInt(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int sumOfEncryptedInt(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int SumOfEncryptedInt(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfEncryptedInt = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function sumOfEncryptedInt(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfEncryptedInt($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func sumOfEncryptedInt(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun sumOfEncryptedInt(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int sumOfEncryptedInt(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func sumOfEncryptedInt(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_encrypted_int(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def sumOfEncryptedInt(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn sum_of_encrypted_int(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (sum-of-encrypted-int nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec sum_of_encrypted_int(Nums :: [integer()]) -> integer().\nsum_of_encrypted_int(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec sum_of_encrypted_int(nums :: [integer]) :: integer\n  def sum_of_encrypted_int(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> containing <strong>positive</strong> integers. We define a function <code>encrypt</code> such that <code>encrypt(x)</code> replaces <strong>every</strong> digit in <code>x</code> with the <strong>largest</strong> digit in <code>x</code>. For example, <code>encrypt(523) = 555</code> and <code>encrypt(213) = 333</code>.</p>\n\n<p>Return <em>the <strong>sum </strong>of encrypted elements</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,2,3]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">6</span></p>\n\n<p><strong>Explanation:</strong> The encrypted elements are&nbsp;<code>[1,2,3]</code>. The sum of encrypted elements is <code>1 + 2 + 3 == 6</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [10,21,31]</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">66</span></p>\n\n<p><strong>Explanation:</strong> The encrypted elements are <code>[11,22,33]</code>. The sum of encrypted elements is <code>11 + 22 + 33 == 66</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n[10,21,31]",
        "formTitle": "[3079]Find the Sum of Encrypted Integers",
        "frequency": 0.0,
        "frontendQuestionId": "3079",
        "hints": [
            "Encrypted numbers are of the form <code>11…1 * maxDigit</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "sumOfEncryptedInt",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3367",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3]",
        "title": "Find the Sum of Encrypted Integers",
        "titleSlug": "find-the-sum-of-encrypted-integers",
        "infer_hints": [
            "How to calculate the encrypted integer?",
            "Find the maximum digit in the given array.",
            "Find the largest digit in the integer.",
            "Find the maximum digit in nums.",
            "We can simulate the encryption process.",
            "How can you solve this problem using recursion?",
            "Can we use dynamic programming to solve this problem?",
            "Use recursion to solve the problem.",
            "Convert each number to a string and use the built-in function max().",
            "Use a recursive function to replace every digit with the maximum digit.",
            "Find the maximum digit in the number.",
            "Use recursion to solve this problem.",
            "Convert the integer to a string to be able to access each digit.",
            "What is the maximum digit in an integer?",
            "If you know the encrypted version of a number, how do you find the original number?",
            "Convert each integer into a string and find the maximum digit.",
            "For each number, you need to replace each digit with the maximum digit.",
            "How to find the maximum digit of a number?",
            "Find the maximum digit in the number.",
            "Use recursion."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int sumOfTheDigitsOfHarshadNumber(int x) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int sumOfTheDigitsOfHarshadNumber(int x) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def sumOfTheDigitsOfHarshadNumber(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def sumOfTheDigitsOfHarshadNumber(self, x: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int sumOfTheDigitsOfHarshadNumber(int x) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int SumOfTheDigitsOfHarshadNumber(int x) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar sumOfTheDigitsOfHarshadNumber = function(x) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function sumOfTheDigitsOfHarshadNumber(x: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function sumOfTheDigitsOfHarshadNumber($x) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func sumOfTheDigitsOfHarshadNumber(_ x: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun sumOfTheDigitsOfHarshadNumber(x: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int sumOfTheDigitsOfHarshadNumber(int x) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func sumOfTheDigitsOfHarshadNumber(x int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} x\n# @return {Integer}\ndef sum_of_the_digits_of_harshad_number(x)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def sumOfTheDigitsOfHarshadNumber(x: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn sum_of_the_digits_of_harshad_number(x: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (sum-of-the-digits-of-harshad-number x)\n  (-> exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec sum_of_the_digits_of_harshad_number(X :: integer()) -> integer().\nsum_of_the_digits_of_harshad_number(X) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec sum_of_the_digits_of_harshad_number(x :: integer) :: integer\n  def sum_of_the_digits_of_harshad_number(x) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>An integer divisible by the <strong>sum</strong> of its digits is said to be a <strong>Harshad</strong> number. You are given an integer <code>x</code>. Return<em> the sum of the digits </em>of<em> </em><code>x</code><em> </em>if<em> </em><code>x</code><em> </em>is a <strong>Harshad</strong> number, otherwise, return<em> </em><code>-1</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">x = 18</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">9</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The sum of digits of <code>x</code> is <code>9</code>. <code>18</code> is divisible by <code>9</code>. So <code>18</code> is a Harshad number and the answer is <code>9</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">x = 23</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The sum of digits of <code>x</code> is <code>5</code>. <code>23</code> is not divisible by <code>5</code>. So <code>23</code> is not a Harshad number and the answer is <code>-1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 100</code></li>\n</ul>\n",
        "exampleTestcases": "18\n23",
        "formTitle": "[3099]Harshad Number",
        "frequency": 0.0,
        "frontendQuestionId": "3099",
        "hints": [
            "Use a while loop and divide <code>x</code> to <code>10</code> to find the sum of the digits of <code>x</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "sumOfTheDigitsOfHarshadNumber",
            "params": [
                {
                    "name": "x",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3371",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "18",
        "title": "Harshad Number",
        "titleSlug": "harshad-number",
        "infer_hints": [
            "Use the modulo operation to find the sum of the digits.",
            "Find the sum of digits.",
            "Find the sum of digits of the given number.",
            "The sum of digits of a number can be found by modulo 10 and then division by 10.",
            "You can find the sum of the digits by repeatedly dividing the number by 10 and adding the remainder to a running sum.",
            "Use the modulo operator to get the last digit of the number.",
            "The easiest way to solve this problem is to check the divisibility by the sum of the digits.",
            "Try to generate all the numbers with the same number of digits as x and check which ones are divisible by their sum of digits.",
            "If the sum of the digits of a number is a multiple of 10, then the number is a multiple of 10.",
            "A number is a Harshad number if it is divisible by the sum of its digits.",
            "To find the sum of digits of a number, you can use the following formula:<p>digit_sum = digit_sum + n%10<p>To find if a number is divisible by the sum of its digits, you can use the following formula:<p>is_divisible = number%digit_sum == 0",
            "How to check if a number is a Harshad number?",
            "Convert the number to string, iterate through it, and add up the digits.",
            "Take the number, divide it by the sum of its digits, and check if the result is an integer.",
            "Take the number modulo 10 to get the last digit.",
            "You may run a loop to get each digit.",
            "The number is a Harshad number if it is divisible by the sum of its digits.",
            "What is the sum of the digits of a number?",
            "You need to find the sum of the digits.",
            "To find the sum of the digits of a number, you can use the modulo operation. For example, if you have the number 123, you can find the sum of the digits by 123 % 10 (which gives you 3) and then 123 / 10 (which gives you 12)."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int longestMonotonicSubarray(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int longestMonotonicSubarray(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def longestMonotonicSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def longestMonotonicSubarray(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int longestMonotonicSubarray(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int LongestMonotonicSubarray(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestMonotonicSubarray = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function longestMonotonicSubarray(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestMonotonicSubarray($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func longestMonotonicSubarray(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun longestMonotonicSubarray(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int longestMonotonicSubarray(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func longestMonotonicSubarray(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef longest_monotonic_subarray(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def longestMonotonicSubarray(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn longest_monotonic_subarray(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (longest-monotonic-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec longest_monotonic_subarray(Nums :: [integer()]) -> integer().\nlongest_monotonic_subarray(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec longest_monotonic_subarray(nums :: [integer]) :: integer\n  def longest_monotonic_subarray(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of integers <code>nums</code>. Return <em>the length of the <strong>longest</strong> <span data-keyword=\"subarray-nonempty\">subarray</span> of </em><code>nums</code><em> which is either <strong><span data-keyword=\"strictly-increasing-array\">strictly increasing</span></strong> or <strong><span data-keyword=\"strictly-decreasing-array\">strictly decreasing</span></strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,3,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strictly increasing subarrays of <code>nums</code> are <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>, <code>[4]</code>, and <code>[1,4]</code>.</p>\n\n<p>The strictly decreasing subarrays of <code>nums</code> are <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>, <code>[4]</code>, <code>[3,2]</code>, and <code>[4,3]</code>.</p>\n\n<p>Hence, we return <code>2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,3,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strictly increasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and <code>[3]</code>.</p>\n\n<p>The strictly decreasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and <code>[3]</code>.</p>\n\n<p>Hence, we return <code>1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strictly increasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[2]</code>, and <code>[1]</code>.</p>\n\n<p>The strictly decreasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[2]</code>, <code>[1]</code>, <code>[3,2]</code>, <code>[2,1]</code>, and <code>[3,2,1]</code>.</p>\n\n<p>Hence, we return <code>3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
        "exampleTestcases": "[1,4,3,3,2]\n[3,3,3,3]\n[3,2,1]",
        "formTitle": "[3105]Longest Strictly Increasing or Strictly Decreasing Subarray",
        "frequency": 0.0,
        "frontendQuestionId": "3105",
        "hints": [],
        "level": 1,
        "metaData": {
            "name": "longestMonotonicSubarray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3372",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,4,3,3,2]",
        "title": "Longest Strictly Increasing or Strictly Decreasing Subarray",
        "titleSlug": "longest-strictly-increasing-or-strictly-decreasing-subarray",
        "infer_hints": [
            "If you have an array <code>a</code> of length <code>n</code>, you can use a dynamic programming approach to solve this problem in O(n^2) time.",
            "How can we keep track of the length of the longest subarray that ends at the current position?",
            "You can use dynamic programming.",
            "Create two arrays dp1[i] and dp2[i] where dp1[i] is the length of the longest subarray ending at position i and strictly increasing, and dp2[i] is the length of the longest subarray ending at position i and strictly decreasing.",
            "For each element in the array, we need to know its longest increasing and decreasing subarray.",
            "The idea is to calculate the longest strictly increasing and decreasing subarray for each index.",
            "Try to find the longest strictly increasing and decreasing subarray separately.",
            "What is the longest strictly increasing subarray?  (Think dynamic programming).",
            "How to find the length of the longest strictly increasing subarray?  Try dynamic programming.",
            "Use dynamic programming.  How can you use dynamic programming to solve this problem?",
            "Consider two variables to keep track of the longest strictly increasing and strictly decreasing subarray.",
            "You can use a stack to store the length of each increasing subarray.",
            "Can you use dynamic programming to solve this problem?  We can use two arrays, increasing and decreasing, to store the length of the longest subarray which ends with nums[i] being strictly increasing or decreasing.",
            "The longest subarray of strictly increasing or strictly decreasing numbers is either the longest strictly increasing subarray or the longest strictly decreasing subarray.",
            "The key is to split the array into subarrays where every element is larger or smaller than its neighbors.",
            "We can use dynamic programming to solve this problem.",
            "For each index i, how can we find the length of the longest subarray ending at index i that is strictly increasing or strictly decreasing?",
            "We can use a two-pointer sliding window approach.",
            "Try to use the sliding window technique.",
            "How can we calculate the length of the longest strictly increasing subarray ending at position i?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int maximumPrimeDifference(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int maximumPrimeDifference(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def maximumPrimeDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def maximumPrimeDifference(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int maximumPrimeDifference(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MaximumPrimeDifference(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumPrimeDifference = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function maximumPrimeDifference(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumPrimeDifference($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func maximumPrimeDifference(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun maximumPrimeDifference(nums: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int maximumPrimeDifference(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func maximumPrimeDifference(nums []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_prime_difference(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def maximumPrimeDifference(nums: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn maximum_prime_difference(nums: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (maximum-prime-difference nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec maximum_prime_difference(Nums :: [integer()]) -> integer().\nmaximum_prime_difference(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec maximum_prime_difference(nums :: [integer]) :: integer\n  def maximum_prime_difference(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code>.</p>\n\n<p>Return an integer that is the <strong>maximum</strong> distance between the <strong>indices</strong> of two (not necessarily different) prime numbers in <code>nums</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,2,9,5,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong> <code>nums[1]</code>, <code>nums[3]</code>, and <code>nums[4]</code> are prime. So the answer is <code>|4 - 1| = 3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,8,2,8]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong> <code>nums[2]</code> is prime. Because there is just one prime number, the answer is <code>|2 - 2| = 0</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li>The input is generated such that the number of prime numbers in the <code>nums</code> is at least one.</li>\n</ul>\n",
        "exampleTestcases": "[4,2,9,5,3]\n[4,8,2,8]",
        "formTitle": "[3115]Maximum Prime Difference",
        "frequency": 0.0,
        "frontendQuestionId": "3115",
        "hints": [
            "Find all prime numbers in the <code>nums</code>.",
            "Find the first and the last prime number in the <code>nums</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "maximumPrimeDifference",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3373",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[4,2,9,5,3]",
        "title": "Maximum Prime Difference",
        "titleSlug": "maximum-prime-difference",
        "infer_hints": [
            "For each number, we can check if it is prime.",
            "If you know the maximum distance between two prime numbers in an array, you can calculate the distance between all other pairs of prime numbers.",
            "Find the indices of the prime numbers and then try to find the maximum difference between two of them.",
            "If there are multiple prime numbers in nums, how do we know which two to take?",
            "You can precompute all primes up to 100.",
            "Create a list of all primes less than or equal to 100.",
            "The largest prime number that is less than or equal to 100 is 97.",
            "Can we precalculate all primes up to 100?",
            "Generate a sieve of size 100.",
            "For every index i, we can find the smallest prime index before it and the largest prime index after it.",
            "Check every number to see if it's prime.",
            "Check every pair of prime indices in increasing order.",
            "For each number, calculate the maximum and minimum prime index.",
            "How many primes are there in the range [1, 100]?",
            "Can you use a Sieve of Eratosthenes to generate all primes up to 100?",
            "Can we use Sieve of Eratosthenes to find all prime numbers in the array?",
            "Do you know the prime numbers less than or equal to 100?",
            "Generate a list of primes up to 100.  Now, use a prefix sum array and binary search to find the maximum distance between two primes.",
            "Use prefix and suffix array to store the smallest and largest prime number index.",
            "Do you know the maximum and minimum prime number in the given range?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long countAlternatingSubarrays(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long countAlternatingSubarrays(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def countAlternatingSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def countAlternatingSubarrays(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long countAlternatingSubarrays(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long CountAlternatingSubarrays(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countAlternatingSubarrays = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function countAlternatingSubarrays(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countAlternatingSubarrays($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func countAlternatingSubarrays(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun countAlternatingSubarrays(nums: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int countAlternatingSubarrays(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func countAlternatingSubarrays(nums []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_alternating_subarrays(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def countAlternatingSubarrays(nums: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn count_alternating_subarrays(nums: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (count-alternating-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec count_alternating_subarrays(Nums :: [integer()]) -> integer().\ncount_alternating_subarrays(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec count_alternating_subarrays(nums :: [integer]) :: integer\n  def count_alternating_subarrays(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a <span data-keyword=\"binary-array\">binary array</span> <code>nums</code>.</p>\n\n<p>We call a <span data-keyword=\"subarray-nonempty\">subarray</span> <strong>alternating</strong> if <strong>no</strong> two <strong>adjacent</strong> elements in the subarray have the <strong>same</strong> value.</p>\n\n<p>Return <em>the number of alternating subarrays in </em><code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following subarrays are alternating: <code>[0]</code>, <code>[1]</code>, <code>[1]</code>, <code>[1]</code>, and <code>[0,1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,0,1,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Every subarray of the array is alternating. There are 10 possible subarrays that we can choose.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "exampleTestcases": "[0,1,1,1]\n[1,0,1,0]",
        "formTitle": "[3101]Count Alternating Subarrays",
        "frequency": 0.0,
        "frontendQuestionId": "3101",
        "hints": [
            "Try using dynamic programming.",
            "Let <code>dp[i]</code> be the number of alternating subarrays ending at index <code>i</code>.",
            "The final answer is the sum of <code>dp[i]</code> over all  indices <code>i</code> from <code>0</code> to <code>n - 1</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "countAlternatingSubarrays",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3374",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[0,1,1,1]",
        "title": "Count Alternating Subarrays",
        "titleSlug": "count-alternating-subarrays",
        "infer_hints": [
            "Can you solve this in O(n) time?  What data structure should you use?",
            "Use prefix sum and dynamic programming.",
            "Can you solve it using a prefix sum?",
            "For every number, how many subarrays it can be the last element of?",
            "Use a dynamic programming to count the alternating subarrays.",
            "Try to use dynamic programming.",
            "Consider the array [0,1,1,1,0,0,1,0].",
            "For every number, count the number of subarrays that start with it.",
            "You can use dynamic programming.",
            "Think about a subarray ending at position i.",
            "Can you solve it with a prefix sum array?",
            "We can use dynamic programming.  For every index, we can keep the number of subarrays that end at this index and have an odd length and the number of subarrays that end at this index and have an even length.",
            "Consider a subarray that ends at index i.  How many different ways can we end it?",
            "If you iterate over the array and for each element, you calculate the count of alternating subarrays ending at that element, how would you store that information?",
            "If we want to count all subarrays, how can we do that?",
            "If the subarray starts with 0, how many alternating subarrays can it end with?  There are 2^N possible subarrays of length N.",
            "Try to count all subarrays that end at position <code>i</code>.",
            "Create an array dp where dp[i][0] and dp[i][1] are the number of alternating subarrays ending at index i with last two elements being 0 and 1 respectively.",
            "Try to use a prefix sum to solve this problem.",
            "Can we solve this problem in O(N) time complexity?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long findKthSmallest(vector<int>& coins, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long findKthSmallest(int[] coins, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findKthSmallest(self, coins, k):\n        \"\"\"\n        :type coins: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findKthSmallest(self, coins: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long findKthSmallest(int* coins, int coinsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long FindKthSmallest(int[] coins, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} coins\n * @param {number} k\n * @return {number}\n */\nvar findKthSmallest = function(coins, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findKthSmallest(coins: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthSmallest($coins, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findKthSmallest(_ coins: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findKthSmallest(coins: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int findKthSmallest(List<int> coins, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findKthSmallest(coins []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} coins\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_smallest(coins, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findKthSmallest(coins: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_kth_smallest(coins: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-kth-smallest coins k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_kth_smallest(Coins :: [integer()], K :: integer()) -> integer().\nfind_kth_smallest(Coins, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_kth_smallest(coins :: [integer], k :: integer) :: integer\n  def find_kth_smallest(coins, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>k</code>.</p>\n\n<p>You have an infinite number of coins of each denomination. However, you are <strong>not allowed</strong> to combine coins of different denominations.</p>\n\n<p>Return the <code>k<sup>th</sup></code> <strong>smallest</strong> amount that can be made using these coins.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">coins = [3,6,9], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 9</span></p>\n\n<p><strong>Explanation:</strong> The given coins can make the following amounts:<br />\nCoin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.<br />\nCoin 6 produces multiples of 6: 6, 12, 18, 24, etc.<br />\nCoin 9 produces multiples of 9: 9, 18, 27, 36, etc.<br />\nAll of the coins combined produce: 3, 6, <u><strong>9</strong></u>, 12, 15, etc.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> coins = [5,2], k = 7</span></p>\n\n<p><strong>Output:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 12 </span></p>\n\n<p><strong>Explanation:</strong> The given coins can make the following amounts:<br />\nCoin 5 produces multiples of 5: 5, 10, 15, 20, etc.<br />\nCoin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.<br />\nAll of the coins combined produce: 2, 4, 5, 6, 8, 10, <u><strong>12</strong></u>, 14, 15, etc.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= coins.length &lt;= 15</code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= 25</code></li>\n\t<li><code>1 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>\n\t<li><code>coins</code> contains pairwise distinct integers.</li>\n</ul>\n",
        "exampleTestcases": "[3,6,9]\n3\n[5,2]\n7",
        "formTitle": "[3116]Kth Smallest Amount With Single Denomination Combination",
        "frequency": 0.0,
        "frontendQuestionId": "3116",
        "hints": [
            "Binary search the answer <code>x</code>.",
            "Use the inclusion-exclusion principle to count the number of distinct amounts that can be made up to <code>x</code>."
        ],
        "level": 3,
        "metaData": {
            "name": "findKthSmallest",
            "params": [
                {
                    "name": "coins",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3375",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[3,6,9]\n3",
        "title": "Kth Smallest Amount With Single Denomination Combination",
        "titleSlug": "kth-smallest-amount-with-single-denomination-combination",
        "infer_hints": [
            "Use a priority queue and do a BFS.",
            "Think of each denomination as a tree.",
            "How many ways can you make up the same amount with 1 coin?",
            "We can use a min heap to keep track of the smallest unseen combination.",
            "Use priority_queue and use greedy algorithm.",
            "The idea is to keep a list of all the amounts we can make.",
            "We can use a heap and BFS for this problem.",
            "Use a queue to store the amounts.",
            "You can use the priority_queue and sort the array.",
            "Try to use a priority queue or a heap.",
            "How can you calculate the total number of combinations that use each coin?",
            "For each possible sum, you can check if it can be formed by using a single denomination or not.",
            "If the coins were sorted in increasing order, then the k-th smallest amount would be coins[k].",
            "If we sort all the combinations, what would the position of the 1st coin be?",
            "For every coin, add it multiple times to all possible sums.",
            "You can solve this problem with dynamic programming.",
            "You can do a binary search on the answer.",
            "The smallest amount that can be made is 1.  How many ways can you make 1?",
            "Think of each coin as a separate denomination.",
            "What if we sort all the numbers and just pick the kth one?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> stringIndices(vector<string>& wordsContainer, vector<string>& wordsQuery) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] stringIndices(String[] wordsContainer, String[] wordsQuery) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def stringIndices(self, wordsContainer, wordsQuery):\n        \"\"\"\n        :type wordsContainer: List[str]\n        :type wordsQuery: List[str]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def stringIndices(self, wordsContainer: List[str], wordsQuery: List[str]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* stringIndices(char** wordsContainer, int wordsContainerSize, char** wordsQuery, int wordsQuerySize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] StringIndices(string[] wordsContainer, string[] wordsQuery) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string[]} wordsContainer\n * @param {string[]} wordsQuery\n * @return {number[]}\n */\nvar stringIndices = function(wordsContainer, wordsQuery) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function stringIndices(wordsContainer: string[], wordsQuery: string[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[] $wordsContainer\n     * @param String[] $wordsQuery\n     * @return Integer[]\n     */\n    function stringIndices($wordsContainer, $wordsQuery) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func stringIndices(_ wordsContainer: [String], _ wordsQuery: [String]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun stringIndices(wordsContainer: Array<String>, wordsQuery: Array<String>): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> stringIndices(List<String> wordsContainer, List<String> wordsQuery) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func stringIndices(wordsContainer []string, wordsQuery []string) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String[]} words_container\n# @param {String[]} words_query\n# @return {Integer[]}\ndef string_indices(words_container, words_query)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def stringIndices(wordsContainer: Array[String], wordsQuery: Array[String]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn string_indices(words_container: Vec<String>, words_query: Vec<String>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (string-indices wordsContainer wordsQuery)\n  (-> (listof string?) (listof string?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec string_indices(WordsContainer :: [unicode:unicode_binary()], WordsQuery :: [unicode:unicode_binary()]) -> [integer()].\nstring_indices(WordsContainer, WordsQuery) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec string_indices(words_container :: [String.t], words_query :: [String.t]) :: [integer]\n  def string_indices(words_container, words_query) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two arrays of strings <code>wordsContainer</code> and <code>wordsQuery</code>.</p>\n\n<p>For each <code>wordsQuery[i]</code>, you need to find a string from <code>wordsContainer</code> that has the <strong>longest common suffix</strong> with <code>wordsQuery[i]</code>. If there are two or more strings in <code>wordsContainer</code> that share the longest common suffix, find the string that is the <strong>smallest</strong> in length. If there are two or more such strings that have the <strong>same</strong> smallest length, find the one that occurred <strong>earlier</strong> in <code>wordsContainer</code>.</p>\n\n<p>Return <em>an array of integers </em><code>ans</code><em>, where </em><code>ans[i]</code><em> is the index of the string in </em><code>wordsContainer</code><em> that has the <strong>longest common suffix</strong> with </em><code>wordsQuery[i]</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">wordsContainer = [&quot;abcd&quot;,&quot;bcd&quot;,&quot;xbcd&quot;], wordsQuery = [&quot;cd&quot;,&quot;bcd&quot;,&quot;xyz&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at each <code>wordsQuery[i]</code> separately:</p>\n\n<ul>\n\t<li>For <code>wordsQuery[0] = &quot;cd&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;cd&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.</li>\n\t<li>For <code>wordsQuery[1] = &quot;bcd&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;bcd&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.</li>\n\t<li>For <code>wordsQuery[2] = &quot;xyz&quot;</code>, there is no string from <code>wordsContainer</code> that shares a common suffix. Hence the longest common suffix is <code>&quot;&quot;</code>, that is shared with strings at index 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">wordsContainer = [&quot;abcdefgh&quot;,&quot;poiuygh&quot;,&quot;ghghgh&quot;], wordsQuery = [&quot;gh&quot;,&quot;acbfgh&quot;,&quot;acbfegh&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,0,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Let&#39;s look at each <code>wordsQuery[i]</code> separately:</p>\n\n<ul>\n\t<li>For <code>wordsQuery[0] = &quot;gh&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;gh&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.</li>\n\t<li>For <code>wordsQuery[1] = &quot;acbfgh&quot;</code>, only the string at index 0 shares the longest common suffix <code>&quot;fgh&quot;</code>. Hence it is the answer, even though the string at index 2 is shorter.</li>\n\t<li>For <code>wordsQuery[2] = &quot;acbfegh&quot;</code>, strings from <code>wordsContainer</code> that share the longest common suffix <code>&quot;gh&quot;</code> are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= wordsContainer.length, wordsQuery.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= wordsContainer[i].length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= wordsQuery[i].length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>wordsContainer[i]</code> consists only of lowercase English letters.</li>\n\t<li><code>wordsQuery[i]</code> consists only of lowercase English letters.</li>\n\t<li>Sum of <code>wordsContainer[i].length</code> is at most <code>5 * 10<sup>5</sup></code>.</li>\n\t<li>Sum of <code>wordsQuery[i].length</code> is at most <code>5 * 10<sup>5</sup></code>.</li>\n</ul>\n",
        "exampleTestcases": "[\"abcd\",\"bcd\",\"xbcd\"]\n[\"cd\",\"bcd\",\"xyz\"]\n[\"abcdefgh\",\"poiuygh\",\"ghghgh\"]\n[\"gh\",\"acbfgh\",\"acbfegh\"]",
        "formTitle": "[3093]Longest Common Suffix Queries",
        "frequency": 0.0,
        "frontendQuestionId": "3093",
        "hints": [
            "If we reverse the strings, the problem changes to finding the longest common prefix.",
            "Build a Trie, each node is a letter and only saves the best word’s index in each node, based on the criteria."
        ],
        "level": 3,
        "metaData": {
            "name": "stringIndices",
            "params": [
                {
                    "name": "wordsContainer",
                    "type": "string[]"
                },
                {
                    "name": "wordsQuery",
                    "type": "string[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3376",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[\"abcd\",\"bcd\",\"xbcd\"]\n[\"cd\",\"bcd\",\"xyz\"]",
        "title": "Longest Common Suffix Queries",
        "titleSlug": "longest-common-suffix-queries",
        "infer_hints": [
            "The longest common suffix of two strings a and b is the largest string c that is a suffix of both a and b.",
            "Do we need to store the reverse of each string in wordsContainer?",
            "For each query, you need to find the string from the array that shares the longest common suffix with the query.",
            "For each word, try to find the longest common suffix with every other word.",
            "You can store all the reversed strings in a trie and for each query you can find the maximum length of a suffix in O(log(length of string)) time.",
            "Use a trie data structure.",
            "For each query, try to find a match in all the strings.",
            "We can store the reversed words in a trie.  Try to add each word and then check if it exists in the trie.",
            "If you know how to find the longest common prefix of two strings, you can find the longest common suffix of two strings by reversing both strings and then finding the longest common prefix of the reversed strings.",
            "Think of the problem as a suffix tree.",
            "Build an array of the reversed words in wordsContainer.",
            "Create an array of all suffixes of each string in wordsContainer.",
            "Use a trie data structure.",
            "You can solve this problem with a Trie (also known as a prefix tree).",
            "Build a data structure that will allow you to answer the queries in logarithmic time.",
            "How can we solve this problem for each query separately?",
            "For each query, find the longest common suffix of it with each word in wordsContainer.",
            "We can precompute the longest common suffix for all pairs of strings.",
            "If we sort the array <code>wordsContainer</code> by length, what do you think will be the suffix of the shortest string?",
            "Use a trie to store all the words in the container."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int scoreOfString(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int scoreOfString(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def scoreOfString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def scoreOfString(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int scoreOfString(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int ScoreOfString(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar scoreOfString = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function scoreOfString(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function scoreOfString($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func scoreOfString(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun scoreOfString(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int scoreOfString(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func scoreOfString(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef score_of_string(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def scoreOfString(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn score_of_string(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (score-of-string s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec score_of_string(S :: unicode:unicode_binary()) -> integer().\nscore_of_string(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec score_of_string(s :: String.t) :: integer\n  def score_of_string(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>. The <strong>score</strong> of a string is defined as the sum of the absolute difference between the <strong>ASCII</strong> values of adjacent characters.</p>\n\n<p>Return the <strong>score</strong> of<em> </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;hello&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">13</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The <strong>ASCII</strong> values of the characters in <code>s</code> are: <code>&#39;h&#39; = 104</code>, <code>&#39;e&#39; = 101</code>, <code>&#39;l&#39; = 108</code>, <code>&#39;o&#39; = 111</code>. So, the score of <code>s</code> would be <code>|104 - 101| + |101 - 108| + |108 - 108| + |108 - 111| = 3 + 7 + 0 + 3 = 13</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;zaz&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">50</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The <strong>ASCII</strong> values of the characters in <code>s</code> are: <code>&#39;z&#39; = 122</code>, <code>&#39;a&#39; = 97</code>. So, the score of <code>s</code> would be <code>|122 - 97| + |97 - 122| = 25 + 25 = 50</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"hello\"\n\"zaz\"",
        "formTitle": "[3110]Score of a String",
        "frequency": 0.0,
        "frontendQuestionId": "3110",
        "hints": [
            "Sum the difference between all the adjacent characters by just taking the absolute difference of their ASCII values."
        ],
        "level": 1,
        "metaData": {
            "name": "scoreOfString",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3379",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"hello\"",
        "title": "Score of a String",
        "titleSlug": "score-of-a-string",
        "infer_hints": [
            "Calculate the ASCII value of each character.",
            "Use dynamic programming.",
            "For each letter, find the distance between it and the next letter in the alphabet.",
            "Calculate the difference of the ASCII values of each pair of adjacent characters in the string.",
            "For each letter, calculate the sum of the absolute differences between all possible next characters.",
            "Try to compute the score of a string by iterating over the string and accumulating the difference of ASCII values of adjacent characters.",
            "Can we use prefix sums to solve this?",
            "You can calculate the score for each prefix of the string and then sum up the scores.",
            "Can you try brute-forcing the solution?",
            "How to find the ASCII value of a character in python.",
            "Can we compute the score for all prefixes of the string?",
            "For each character in the string, compute the difference between the ASCII values of the character and the next character.",
            "For each character in the string, find the difference between the ASCII values of the previous character and the next character.",
            "The score of a string is the sum of the absolute differences between adjacent characters.",
            "Use prefix sums to store the cumulative score.",
            "Think of the string as a sequence of two characters.  How many ways are there to split the string?",
            "Think about the pattern of the ASCII values.",
            "What if we compute the sum of the differences in the array?",
            "Use dynamic programming.  How will you fill up the dp array?",
            "How many operations are there to find the score of a string?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumSubarrayLength(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumSubarrayLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumSubarrayLength(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumSubarrayLength = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumSubarrayLength(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumSubarrayLength($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumSubarrayLength(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumSubarrayLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumSubarrayLength(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumSubarrayLength(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_subarray_length(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumSubarrayLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_subarray_length(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-subarray-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_subarray_length(Nums :: [integer()], K :: integer()) -> integer().\nminimum_subarray_length(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_subarray_length(nums :: [integer], k :: integer) :: integer\n  def minimum_subarray_length(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> of <strong>non-negative</strong> integers and an integer <code>k</code>.</p>\n\n<p>An array is called <strong>special</strong> if the bitwise <code>OR</code> of all of its elements is <strong>at least</strong> <code>k</code>.</p>\n\n<p>Return <em>the length of the <strong>shortest</strong> <strong>special</strong> <strong>non-empty</strong> <span data-keyword=\"subarray-nonempty\">subarray</span> of</em> <code>nums</code>, <em>or return</em> <code>-1</code> <em>if no special subarray exists</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[3]</code> has <code>OR</code> value of <code>3</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,8], k = 10</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[2,1,8]</code> has <code>OR</code> value of <code>11</code>. Hence, we return <code>3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2], k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[1]</code> has <code>OR</code> value of <code>1</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n2\n[2,1,8]\n10\n[1,2]\n0",
        "formTitle": "[3097]Shortest Subarray With OR at Least K II",
        "frequency": 0.0,
        "frontendQuestionId": "3097",
        "hints": [
            "For each <code>nums[i]</code>, we can maintain each subarray’s bitwise <code>OR</code> result ending with it.",
            "The property of bitwise <code>OR</code> is that it never unsets any bits and only sets new bits",
            "So the number of different results for each <code>nums[i]</code> is at most the number of bits 32."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumSubarrayLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3380",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3]\n2",
        "title": "Shortest Subarray With OR at Least K II",
        "titleSlug": "shortest-subarray-with-or-at-least-k-ii",
        "infer_hints": [
            "Use the bitwise or to get the maximum value in the subarray.",
            "What does OR of a number mean?",
            "For each prefix, we should maintain the maximum OR value we've seen.",
            "Use prefix OR and binary search.",
            "For each position, try to find the shortest subarray ending at this position.",
            "We need to find the shortest subarray that has OR at least K.  Or, if we can find the shortest subarray that has OR less than K, we can subtract that from the length of the array.",
            "The bitwise OR operation can be represented as a stack of max and min values.",
            "How many subarrays does this subarray have?",
            "Use a sliding window and use a priority queue to keep track of the maximum OR in the window.",
            "Can you use the bitwise-OR operation in the subarray to check if it is possible to make it at least K?",
            "For each number in the array, you want to know what the maximum length of a subarray that ends with that number is.",
            "How can you maintain the minimum OR value?",
            "Can you solve this using prefix ORs and binary search?",
            "For each number, what is the smallest subarray ending at that number that has OR greater than or equal to K?",
            "The answer is the smallest length of a subarray with OR greater than or equal to K.",
            "Consider each prefix of A and compute the maximum value of OR so far.",
            "Can we use a bitwise operation to find the shortest subarray with OR at least K?",
            "Consider each prefix of the array and use a set to store the maximum OR value we've seen so far.",
            "We can use prefix OR and binary search to solve this problem.",
            "What about if we keep the prefix OR of the array?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumSubarrayLength(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumSubarrayLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumSubarrayLength(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumSubarrayLength(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumSubarrayLength = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumSubarrayLength(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumSubarrayLength($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumSubarrayLength(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumSubarrayLength(nums: IntArray, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumSubarrayLength(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumSubarrayLength(nums []int, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_subarray_length(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumSubarrayLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_subarray_length(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-subarray-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_subarray_length(Nums :: [integer()], K :: integer()) -> integer().\nminimum_subarray_length(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_subarray_length(nums :: [integer], k :: integer) :: integer\n  def minimum_subarray_length(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array <code>nums</code> of <strong>non-negative</strong> integers and an integer <code>k</code>.</p>\n\n<p>An array is called <strong>special</strong> if the bitwise <code>OR</code> of all of its elements is <strong>at least</strong> <code>k</code>.</p>\n\n<p>Return <em>the length of the <strong>shortest</strong> <strong>special</strong> <strong>non-empty</strong> <span data-keyword=\"subarray-nonempty\">subarray</span> of</em> <code>nums</code>, <em>or return</em> <code>-1</code> <em>if no special subarray exists</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[3]</code> has <code>OR</code> value of <code>3</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,8], k = 10</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[2,1,8]</code> has <code>OR</code> value of <code>11</code>. Hence, we return <code>3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2], k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[1]</code> has <code>OR</code> value of <code>1</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>0 &lt;= k &lt; 64</code></li>\n</ul>\n",
        "exampleTestcases": "[1,2,3]\n2\n[2,1,8]\n10\n[1,2]\n0",
        "formTitle": "[3095]Shortest Subarray With OR at Least K I",
        "frequency": 0.0,
        "frontendQuestionId": "3095",
        "hints": [
            "The constraints are small. Brute force checking all the subarrays."
        ],
        "level": 1,
        "metaData": {
            "name": "minimumSubarrayLength",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3381",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,2,3]\n2",
        "title": "Shortest Subarray With OR at Least K I",
        "titleSlug": "shortest-subarray-with-or-at-least-k-i",
        "infer_hints": [
            "Try to solve it using a prefix OR array.",
            "Can we find a subarray such that OR is equal to k?",
            "For each <code>x</code> in <code>nums</code>, we want to know the smallest y in <code>nums</code> such that <code>x | y &gt;= k</code>.",
            "You can use the bitwise or property to find the answer.",
            "For each position, we need to calculate the max OR value of any subarray ending at this position.",
            "Can you use a bitwise OR operation to solve this problem?",
            "Use a sliding window.",
            "How many different bitwise OR operations are there?  Do you know the maximum possible result of bitwise OR on two numbers?",
            "The bitwise OR of all elements in the subarray can be calculated in O(1) time.",
            "Use binary search and prefix sum to solve this problem.",
            "Use a stack to store the starting indices of the subarrays.",
            "For every right index, we want to find the left index.",
            "Try all subarrays and check if the OR is greater than or equal to k.",
            "What if you have the prefix OR of all the numbers?",
            "We can use a queue to store all the prefix ORs.  Now, for each prefix OR in the queue, we can check whether it's possible to make the AND equal to K.",
            "Try all subarrays and check their OR.",
            "Try all subarrays.  How to optimise this?",
            "The prefix OR of a subarray is the bitwise OR of all elements in that subarray.",
            "Can we use prefix OR?",
            "How many 1's are in the binary representation of the number?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long numberOfSubarrays(vector<int>& nums) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long numberOfSubarrays(int[] nums) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfSubarrays(self, nums: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long numberOfSubarrays(int* nums, int numsSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long NumberOfSubarrays(int[] nums) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numberOfSubarrays = function(nums) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfSubarrays(nums: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function numberOfSubarrays($nums) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfSubarrays(_ nums: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfSubarrays(nums: IntArray): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfSubarrays(List<int> nums) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfSubarrays(nums []int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef number_of_subarrays(nums)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfSubarrays(nums: Array[Int]): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_subarrays(nums: Vec<i32>) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_subarrays(Nums :: [integer()]) -> integer().\nnumber_of_subarrays(Nums) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_subarrays(nums :: [integer]) :: integer\n  def number_of_subarrays(nums) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an array of <strong>positive</strong> integers <code>nums</code>.</p>\n\n<p>Return the number of <span data-keyword=\"subarray-nonempty\">subarrays</span> of <code>nums</code>, where the <strong>first</strong> and the <strong>last</strong> elements of the subarray are <em>equal</em> to the <strong>largest</strong> element in the subarray.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,3,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:</p>\n\n<ul>\n\t<li>subarray <code>[<strong><u>1</u></strong>,4,3,3,2]</code>, with its largest element 1. The first element is 1 and the last element is also 1.</li>\n\t<li>subarray <code>[1,<u><strong>4</strong></u>,3,3,2]</code>, with its largest element 4. The first element is 4 and the last element is also 4.</li>\n\t<li>subarray <code>[1,4,<u><strong>3</strong></u>,3,2]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[1,4,3,<u><strong>3</strong></u>,2]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[1,4,3,3,<u><strong>2</strong></u>]</code>, with its largest element 2. The first element is 2 and the last element is also 2.</li>\n\t<li>subarray <code>[1,4,<u><strong>3,3</strong></u>,2]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n</ul>\n\n<p>Hence, we return 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:</p>\n\n<ul>\n\t<li>subarray <code>[<u><strong>3</strong></u>,3,3]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[3,<strong><u>3</u></strong>,3]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[3,3,<u><strong>3</strong></u>]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[<strong><u>3,3</u></strong>,3]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[3,<u><strong>3,3</strong></u>]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n\t<li>subarray <code>[<u><strong>3,3,3</strong></u>]</code>, with its largest element 3. The first element is 3 and the last element is also 3.</li>\n</ul>\n\n<p>Hence, we return 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is a single subarray of <code>nums</code> which is <code>[<strong><u>1</u></strong>]</code>, with its largest element 1. The first element is 1 and the last element is also 1.</p>\n\n<p>Hence, we return 1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[1,4,3,3,2]\n[3,3,3]\n[1]",
        "formTitle": "[3113]Find the Number of Subarrays Where Boundary Elements Are Maximum",
        "frequency": 0.0,
        "frontendQuestionId": "3113",
        "hints": [
            "For each element <code>nums[i]</code>, we can count the number of valid subarrays ending with it.",
            "For each index <code>i</code>, find the nearest index <code>j</code> on its left <code>(j < i)</code> such that <code>nums[j] < nums[i]</code>. This can be done via a monotonic stack.",
            "For each index <code>i</code>, find the number of indices <code>k</code> in the window <code>[j + 1, i]</code> such that <code>nums[k] == nums[i]</code>, this is the number of the valid subarrays ending with <code>nums[i]</code>. This can be done by sliding window.",
            "Sum the answer of all the indices <code>i</code> to get the final result.",
            "Is it possible to use DSU as an alternate solution?"
        ],
        "level": 3,
        "metaData": {
            "name": "numberOfSubarrays",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3382",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[1,4,3,3,2]",
        "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
        "titleSlug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum",
        "infer_hints": [
            "Find the count of subarrays where the first element is the maximum.",
            "For each element, find out how many elements are smaller than it.",
            "We can find the left and right boundaries of the maximum element.",
            "Use a prefix sum array and an array to store the maximum value up to the current index.",
            "We can use prefix sum and suffix sum to find the number of subarrays.",
            "We can find the number of subarrays where the first and last elements are maximum by calculating the number of subarrays where the first element is maximum, the last element is maximum, and both elements are maximum.",
            "The first element of the subarray must be equal to the maximum element of the subarray.",
            "For each number, find the number of subarrays that end at that number.",
            "Consider the first element <code>a[0]</code>. How many subarrays are ending at <code>a[0]</code>?",
            "If we can find the number of subarrays that can be divided by the maximum number, we can then subtract the subarrays that can be divided by the second largest number from it.",
            "If you find the number of subarrays where the maximum element is at the boundary, you can subtract the number of subarrays where the maximum element is not at the boundary from it.",
            "If we know the number of subarrays where the maximum element is on the right side of the current position, and the maximum element is on the left side, how can we use this information to find the number of subarrays where the maximum element is on the current position?",
            "Can we use prefix and suffix arrays?",
            "Use prefix and suffix array to find the number of subarrays with the maximum element in the middle.",
            "You can use a sliding window technique to solve this problem.",
            "We need to find all the subarrays where the maximum element is the first or the last element.",
            "Use the prefix and suffix maximums to find the answer.",
            "How many subarrays does a subarray have at the left boundary?  How many subarrays does a subarray have at the right boundary?",
            "Try to use a two-pointer approach.",
            "Try to use the approach from the previous problem and use prefix and suffix array to get the answer."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumOperationsToMakeKPeriodic(string word, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumOperationsToMakeKPeriodic(String word, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumOperationsToMakeKPeriodic(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumOperationsToMakeKPeriodic(char* word, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumOperationsToMakeKPeriodic(string word, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumOperationsToMakeKPeriodic = function(word, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumOperationsToMakeKPeriodic(word: string, k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumOperationsToMakeKPeriodic($word, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumOperationsToMakeKPeriodic(_ word: String, _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumOperationsToMakeKPeriodic(word: String, k: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumOperationsToMakeKPeriodic(String word, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumOperationsToMakeKPeriodic(word string, k int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_operations_to_make_k_periodic(word, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumOperationsToMakeKPeriodic(word: String, k: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_operations_to_make_k_periodic(word: String, k: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-operations-to-make-k-periodic word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_operations_to_make_k_periodic(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_operations_to_make_k_periodic(Word, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_operations_to_make_k_periodic(word :: String.t, k :: integer) :: integer\n  def minimum_operations_to_make_k_periodic(word, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code> of size <code>n</code>, and an integer <code>k</code> such that <code>k</code> divides <code>n</code>.</p>\n\n<p>In one operation, you can pick any two indices <code>i</code> and <code>j</code>, that are divisible by <code>k</code>, then replace the <span data-keyword=\"substring\">substring</span> of length <code>k</code> starting at <code>i</code> with the substring of length <code>k</code> starting at <code>j</code>. That is, replace the substring <code>word[i..i + k - 1]</code> with the substring <code>word[j..j + k - 1]</code>.<!-- notionvc: 49ac84f7-0724-452a-ab43-0c5e53f1db33 --></p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations required to make</em> <code>word</code> <em><strong>k-periodic</strong></em>.</p>\n\n<p>We say that <code>word</code> is <strong>k-periodic</strong> if there is some string <code>s</code> of length <code>k</code> such that <code>word</code> can be obtained by concatenating <code>s</code> an arbitrary number of times. For example, if <code>word == &ldquo;ababab&rdquo;</code>, then <code>word</code> is 2-periodic for <code>s = &quot;ab&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">word = &quot;leetcodeleet&quot;, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\nfont-family: Menlo,sans-serif;\nfont-size: 0.85rem;\n\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to &quot;leetleetleet&quot;.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">word = &quot;</span>leetcoleet<span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a 2-periodic string by applying the operations in the table below.</p>\n\n<table border=\"1\" bordercolor=\"#ccc\" cellpadding=\"5\" cellspacing=\"0\" height=\"146\" style=\"border-collapse:collapse; text-align: center; vertical-align: middle;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>i</th>\n\t\t\t<th>j</th>\n\t\t\t<th>word</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">2</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetcoleet</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">4</td>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetetleet</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">6</td>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetetetet</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<div id=\"gtx-trans\" style=\"position: absolute; left: 107px; top: 238.5px;\">\n<div class=\"gtx-trans-icon\">&nbsp;</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>k</code> divides <code>word.length</code>.</li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"leetcodeleet\"\n4\n\"leetcoleet\"\n2",
        "formTitle": "[3137]Minimum Number of Operations to Make Word K-Periodic",
        "frequency": 0.0,
        "frontendQuestionId": "3137",
        "hints": [
            "Calculate the frequency of each substring of length <code>k</code> that starts at an index that is divisible by <code>k</code>.",
            "The period of the final string will be the substring with the highest frequency."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumOperationsToMakeKPeriodic",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3384",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"leetcodeleet\"\n4",
        "title": "Minimum Number of Operations to Make Word K-Periodic",
        "titleSlug": "minimum-number-of-operations-to-make-word-k-periodic",
        "infer_hints": [
            "If word[i:i+k] == word[j:j+k], you don't need to change it.",
            "Use dynamic programming to store the minimum operations for the substring.",
            "How many operations do you need to change the first segment of the word to the last segment?",
            "The smallest period of the word is the gcd of n and k.",
            "Can you think of a way to count the number of operations required to make the string K-periodic?",
            "What if we start from each position and try to find the shortest period that we can extend to it?",
            "What if we consider each substring of length k?",
            "If you can find a string <code>s</code> that is a rotation of <code>word</code>, then <code>word</code> is k-periodic.",
            "What does it mean for a string to be k-periodic?",
            "We can do a dynamic programming to solve this problem.",
            "How many operations are required to replace word[0..k-1] with word[k..2k-1]?",
            "For each prefix of the word, try to find the minimum period that can be obtained by appending the prefix to itself.",
            "Think of the problem as a graph, where the nodes are the prefixes of the word, and there is an edge between two nodes if they are equal modulo k.",
            "If the word is periodic, then it's also k-periodic.",
            "How many different substrings of length k exist in word?",
            "Use the Manacher's algorithm to pre-process the string to get the length of the longest palindromic substring for each prefix.",
            "Try to use a sliding window to compare the substrings in a cyclic manner.",
            "Can we find the minimum distance between two identical sub-strings?",
            "Use dynamic programming.",
            "Try all possible indices i and j, and keep track of the minimum cost."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<bool> findAnswer(int n, vector<vector<int>>& edges) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean[] findAnswer(int n, int[][] edges) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def findAnswer(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def findAnswer(self, n: int, edges: List[List[int]]) -> List[bool]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* findAnswer(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool[] FindAnswer(int n, int[][] edges) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {boolean[]}\n */\nvar findAnswer = function(n, edges) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function findAnswer(n: number, edges: number[][]): boolean[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Boolean[]\n     */\n    function findAnswer($n, $edges) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func findAnswer(_ n: Int, _ edges: [[Int]]) -> [Bool] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun findAnswer(n: Int, edges: Array<IntArray>): BooleanArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<bool> findAnswer(int n, List<List<int>> edges) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func findAnswer(n int, edges [][]int) []bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Boolean[]}\ndef find_answer(n, edges)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def findAnswer(n: Int, edges: Array[Array[Int]]): Array[Boolean] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn find_answer(n: i32, edges: Vec<Vec<i32>>) -> Vec<bool> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (find-answer n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof boolean?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec find_answer(N :: integer(), Edges :: [[integer()]]) -> [boolean()].\nfind_answer(N, Edges) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec find_answer(n :: integer, edges :: [[integer]]) :: [boolean]\n  def find_answer(n, edges) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an undirected weighted graph of <code>n</code> nodes numbered from 0 to <code>n - 1</code>. The graph consists of <code>m</code> edges represented by a 2D array <code>edges</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> with weight <code>w<sub>i</sub></code>.</p>\n\n<p>Consider all the shortest paths from node 0 to node <code>n - 1</code> in the graph. You need to find a <strong>boolean</strong> array <code>answer</code> where <code>answer[i]</code> is <code>true</code> if the edge <code>edges[i]</code> is part of <strong>at least</strong> one shortest path. Otherwise, <code>answer[i]</code> is <code>false</code>.</p>\n\n<p>Return the array <code>answer</code>.</p>\n\n<p><strong>Note</strong> that the graph may not be connected.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/05/graph35drawio-1.png\" style=\"height: 129px; width: 250px;\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 6, edges = [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[true,true,true,false,true,true,true,false]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following are <strong>all</strong> the shortest paths between nodes 0 and 5:</p>\n\n<ul>\n\t<li>The path <code>0 -&gt; 1 -&gt; 5</code>: The sum of weights is <code>4 + 1 = 5</code>.</li>\n\t<li>The path <code>0 -&gt; 2 -&gt; 3 -&gt; 5</code>: The sum of weights is <code>1 + 1 + 3 = 5</code>.</li>\n\t<li>The path <code>0 -&gt; 2 -&gt; 3 -&gt; 1 -&gt; 5</code>: The sum of weights is <code>1 + 1 + 2 + 1 = 5</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/05/graphhhh.png\" style=\"width: 185px; height: 136px;\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[true,false,false,true]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is one shortest path between nodes 0 and 3, which is the path <code>0 -&gt; 2 -&gt; 3</code> with the sum of weights <code>1 + 2 = 3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>m == edges.length</code></li>\n\t<li><code>1 &lt;= m &lt;= min(5 * 10<sup>4</sup>, n * (n - 1) / 2)</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>1 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li>There are no repeated edges.</li>\n</ul>\n",
        "exampleTestcases": "6\n[[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]\n4\n[[2,0,1],[0,1,1],[0,3,4],[3,2,2]]",
        "formTitle": "[3123]Find Edges in Shortest Paths",
        "frequency": 0.0,
        "frontendQuestionId": "3123",
        "hints": [
            "Find all the shortest paths starting from nodes 0 and <code>n - 1</code> to all other nodes.",
            "How to use the above calculated shortest paths to check if an edge is part of at least one shortest path from 0 to <code>n - 1</code>?"
        ],
        "level": 3,
        "metaData": {
            "name": "findAnswer",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "edges",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3386",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "6\n[[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]",
        "title": "Find Edges in Shortest Paths",
        "titleSlug": "find-edges-in-shortest-paths",
        "infer_hints": [
            "Use a priority queue and dijkstra's algorithm.",
            "Use Dijkstra's algorithm to find the shortest path from node 0 to all other nodes.",
            "Can you use a modified version of Dijkstra's algorithm to solve this problem?",
            "You can use Dijkstra's algorithm to solve this problem.",
            "What if we remove all the edges from node 0 to other nodes and then add them back one by one?",
            "If we use Dijkstra's algorithm, can we find the shortest paths from 0 to every other node?",
            "If we have found the shortest path from node 0 to node i, can we determine if the edge [u,v] is part of the shortest path?",
            "Use a Union-Find data structure to find which nodes are connected.",
            "Can you find a shortest path from node 0 to node <code>n - 1</code>?",
            "How can we know that an edge is in a shortest path?",
            "You can use the Bellman-Ford algorithm to solve this problem.",
            "For each edge, you can check whether it is part of the shortest path from node 0 to node N-1 by checking whether you can reach node N-1 from node 0 using only the edges of the shortest path.",
            "Use Dijkstra's algorithm to find the shortest path.",
            "Can you use Dijkstra's algorithm?",
            "Can you solve this using the Bellman-Ford algorithm?",
            "For each edge, check if it's in a shortest path.",
            "Can we use Dijkstra's algorithm?",
            "Use a union-find data structure.",
            "Do a Dijkstra's algorithm for every node as a source.",
            "Use the Bellman-Ford algorithm."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minOperationsToMakeMedianK(vector<int>& nums, int k) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minOperationsToMakeMedianK(int[] nums, int k) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minOperationsToMakeMedianK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minOperationsToMakeMedianK(self, nums: List[int], k: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minOperationsToMakeMedianK(int* nums, int numsSize, int k) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinOperationsToMakeMedianK(int[] nums, int k) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minOperationsToMakeMedianK = function(nums, k) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minOperationsToMakeMedianK(nums: number[], k: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperationsToMakeMedianK($nums, $k) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minOperationsToMakeMedianK(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minOperationsToMakeMedianK(nums: IntArray, k: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minOperationsToMakeMedianK(List<int> nums, int k) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minOperationsToMakeMedianK(nums []int, k int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations_to_make_median_k(nums, k)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minOperationsToMakeMedianK(nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_operations_to_make_median_k(nums: Vec<i32>, k: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-operations-to-make-median-k nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_operations_to_make_median_k(Nums :: [integer()], K :: integer()) -> integer().\nmin_operations_to_make_median_k(Nums, K) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_operations_to_make_median_k(nums :: [integer], k :: integer) :: integer\n  def min_operations_to_make_median_k(nums, k) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> and a <strong>non-negative</strong> integer <code>k</code>. In one operation, you can increase or decrease any element by 1.</p>\n\n<p>Return the <strong>minimum</strong> number of operations needed to make the <strong>median</strong> of <code>nums</code> <em>equal</em> to <code>k</code>.</p>\n\n<p>The median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the larger of the two values is taken.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,5,6,8,5], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can subtract one from <code>nums[1]</code> and <code>nums[4]</code> to obtain <code>[2, 4, 6, 8, 4]</code>. The median of the resulting array is equal to <code>k</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,5,6,8,5], k = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can add one to <code>nums[1]</code> twice and add one to <code>nums[2]</code> once to obtain <code>[2, 7, 7, 8, 5]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5,6], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The median of the array is already equal to <code>k</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[2,5,6,8,5]\n4\n[2,5,6,8,5]\n7\n[1,2,3,4,5,6]\n4",
        "formTitle": "[3107]Minimum Operations to Make Median of Array Equal to K",
        "frequency": 0.0,
        "frontendQuestionId": "3107",
        "hints": [
            "Sort <code>nums</code> in non-descending order.",
            "For all the smaller values on the left side of the median, change them to <code>k</code> if they are larger than <code>k</code>.",
            "For all the larger values on the right side of the median, change them to <code>k</code> if they are smaller than <code>k</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minOperationsToMakeMedianK",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "k",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3387",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,5,6,8,5]\n4",
        "title": "Minimum Operations to Make Median of Array Equal to K",
        "titleSlug": "minimum-operations-to-make-median-of-array-equal-to-k",
        "infer_hints": [
            "For each value x in the array, we can calculate the difference between the median and x. We can also calculate the difference between the median and k.",
            "What is the definition of median?",
            "For each number, what is the minimum number of operations needed to make it equal to k?",
            "Sort the array.  Then, we can use binary search to find the smallest operations.",
            "For each value in the array, try to make it equal to k by increasing or decreasing it.",
            "Use a heap.",
            "Sort the array and find the median.",
            "How to calculate the median?",
            "You need to make all elements in the array equal to the median.",
            "Sort the array.",
            "Do you know the median of a sorted array?",
            "Sort the array and find the median.",
            "Try to transform the problem into a prefix-sum problem.",
            "The median of an array is the middle value in a sorted array.",
            "Use prefix sums to speed up your calculations.",
            "Can you use a bucket sort?",
            "How can we calculate the median of the array?",
            "Use prefix sum and binary search to calculate the minimum number of operations for each prefix.",
            "How can we find the median in O(n) time?",
            "How can we handle each element in the array?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int[] minimumTime(int n, int[][] edges, int[] disappear) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumTime(self, n, edges, disappear):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type disappear: List[int]\n        :rtype: List[int]\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumTime(self, n: int, edges: List[List[int]], disappear: List[int]) -> List[int]:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minimumTime(int n, int** edges, int edgesSize, int* edgesColSize, int* disappear, int disappearSize, int* returnSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int[] MinimumTime(int n, int[][] edges, int[] disappear) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[]} disappear\n * @return {number[]}\n */\nvar minimumTime = function(n, edges, disappear) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumTime(n: number, edges: number[][], disappear: number[]): number[] {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer[] $disappear\n     * @return Integer[]\n     */\n    function minimumTime($n, $edges, $disappear) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumTime(_ n: Int, _ edges: [[Int]], _ disappear: [Int]) -> [Int] {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumTime(n: Int, edges: Array<IntArray>, disappear: IntArray): IntArray {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  List<int> minimumTime(int n, List<List<int>> edges, List<int> disappear) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumTime(n int, edges [][]int, disappear []int) []int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer[]} disappear\n# @return {Integer[]}\ndef minimum_time(n, edges, disappear)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumTime(n: Int, edges: Array[Array[Int]], disappear: Array[Int]): Array[Int] = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_time(n: i32, edges: Vec<Vec<i32>>, disappear: Vec<i32>) -> Vec<i32> {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-time n edges disappear)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?) (listof exact-integer?))\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_time(N :: integer(), Edges :: [[integer()]], Disappear :: [integer()]) -> [integer()].\nminimum_time(N, Edges, Disappear) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_time(n :: integer, edges :: [[integer]], disappear :: [integer]) :: [integer]\n  def minimum_time(n, edges, disappear) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>There is an undirected graph of <code>n</code> nodes. You are given a 2D array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]</code> describes an edge between node <code>u<sub>i</sub></code> and node <code>v<sub>i</sub></code> with a traversal time of <code>length<sub>i</sub></code> units.</p>\n\n<p>Additionally, you are given an array <code>disappear</code>, where <code>disappear[i]</code> denotes the time when the node <code>i</code> disappears from the graph and you won&#39;t be able to visit it.</p>\n\n<p><strong>Notice</strong> that the graph might be disconnected and might contain multiple edges.</p>\n\n<p>Return the array <code>answer</code>, with <code>answer[i]</code> denoting the <strong>minimum</strong> units of time required to reach node <code>i</code> from node 0. If node <code>i</code> is <strong>unreachable</strong> from node 0 then <code>answer[i]</code> is <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img 10px=\"\" alt=\"\" padding:=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/09/example1.png\" style=\"width: 350px; height: 210px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\"> n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,1,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\"> [0,-1,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.</p>\n\n<ul>\n\t<li>For node 0, we don&#39;t need any time as it is our starting point.</li>\n\t<li>For node 1, we need at least 2 units of time to traverse <code>edges[0]</code>. Unfortunately, it disappears at that moment, so we won&#39;t be able to visit it.</li>\n\t<li>For node 2, we need at least 4 units of time to traverse <code>edges[2]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img 10px=\"\" alt=\"\" padding:=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/09/example2.png\" style=\"width: 350px; height: 210px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\"> n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,3,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\"> [0,2,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.</p>\n\n<ul>\n\t<li>For node 0, we don&#39;t need any time as it is the starting point.</li>\n\t<li>For node 1, we need at least 2 units of time to traverse <code>edges[0]</code>.</li>\n\t<li>For node 2, we need at least 3 units of time to traverse <code>edges[0]</code> and <code>edges[1]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, edges = [[0,1,1]], disappear = [1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Exactly when we reach node 1, it disappears.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges[i] == [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= length<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>disappear.length == n</code></li>\n\t<li><code>1 &lt;= disappear[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "exampleTestcases": "3\n[[0,1,2],[1,2,1],[0,2,4]]\n[1,1,5]\n3\n[[0,1,2],[1,2,1],[0,2,4]]\n[1,3,5]\n2\n[[0,1,1]]\n[1,1]",
        "formTitle": "[3112]Minimum Time to Visit Disappearing Nodes",
        "frequency": 0.0,
        "frontendQuestionId": "3112",
        "hints": [
            "Use Dijkstra’s algorithm, but only visit nodes if you can reach them before disappearance."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumTime",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "edges",
                    "type": "integer[][]"
                },
                {
                    "name": "disappear",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3389",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "3\n[[0,1,2],[1,2,1],[0,2,4]]\n[1,1,5]",
        "title": "Minimum Time to Visit Disappearing Nodes",
        "titleSlug": "minimum-time-to-visit-disappearing-nodes",
        "infer_hints": [
            "Try to use a shortest path algorithm to solve this problem.",
            "Consider each disappearing node as a new source node.",
            "If we want to reach a node `u`, we can try to reach its children nodes `v` with a time of `length[u] + dp[v]`.",
            "Use BFS to find the shortest distance to each node.",
            "Think about the graph as a weighted graph, where the weight of an edge is the time required to traverse it.",
            "Use a modified version of Dijkstra's algorithm.",
            "We can use Dijkstra's algorithm to solve this problem.",
            "Use Dijkstra's algorithm.",
            "Can you solve this using a Dijkstra algorithm?",
            "Consider each node as a point in a graph.",
            "Can you solve the problem in a similar way as the previous problem?",
            "We can use Dijkstra's algorithm to solve this problem.",
            "If you try to perform a BFS on the graph, you will run into TLE because there are multiple edges between the same nodes.",
            "We can use a modified version of Dijkstra's algorithm.",
            "Use Dijkstra's algorithm.",
            "How many edges can we remove?",
            "We can use Dijkstra's algorithm.",
            "Do a breadth-first search (BFS) from node 0.",
            "Do you think you can use a priority queue?",
            "Use Dijkstra's algorithm."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minRectanglesToCoverPoints(vector<vector<int>>& points, int w) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minRectanglesToCoverPoints(int[][] points, int w) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minRectanglesToCoverPoints(self, points, w):\n        \"\"\"\n        :type points: List[List[int]]\n        :type w: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minRectanglesToCoverPoints(self, points: List[List[int]], w: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minRectanglesToCoverPoints(int** points, int pointsSize, int* pointsColSize, int w) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinRectanglesToCoverPoints(int[][] points, int w) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} points\n * @param {number} w\n * @return {number}\n */\nvar minRectanglesToCoverPoints = function(points, w) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minRectanglesToCoverPoints(points: number[][], w: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @param Integer $w\n     * @return Integer\n     */\n    function minRectanglesToCoverPoints($points, $w) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minRectanglesToCoverPoints(_ points: [[Int]], _ w: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minRectanglesToCoverPoints(points: Array<IntArray>, w: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minRectanglesToCoverPoints(List<List<int>> points, int w) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minRectanglesToCoverPoints(points [][]int, w int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} points\n# @param {Integer} w\n# @return {Integer}\ndef min_rectangles_to_cover_points(points, w)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minRectanglesToCoverPoints(points: Array[Array[Int]], w: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_rectangles_to_cover_points(points: Vec<Vec<i32>>, w: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-rectangles-to-cover-points points w)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_rectangles_to_cover_points(Points :: [[integer()]], W :: integer()) -> integer().\nmin_rectangles_to_cover_points(Points, W) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_rectangles_to_cover_points(points :: [[integer]], w :: integer) :: integer\n  def min_rectangles_to_cover_points(points, w) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D integer array <code>points</code>, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. You are also given an integer <code>w</code>. Your task is to <strong>cover</strong> <strong>all</strong> the given points with rectangles.</p>\n\n<p>Each rectangle has its lower end at some point <code>(x<sub>1</sub>, 0)</code> and its upper end at some point <code>(x<sub>2</sub>, y<sub>2</sub>)</code>, where <code>x<sub>1</sub> &lt;= x<sub>2</sub></code>, <code>y<sub>2</sub> &gt;= 0</code>, and the condition <code>x<sub>2</sub> - x<sub>1</sub> &lt;= w</code> <strong>must</strong> be satisfied for each rectangle.</p>\n\n<p>A point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.</p>\n\n<p>Return an integer denoting the <strong>minimum</strong> number of rectangles needed so that each point is covered by <strong>at least one</strong> rectangle<em>.</em></p>\n\n<p><strong>Note:</strong> A point may be covered by more than one rectangle.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-33-05.png\" style=\"width: 205px; height: 300px;\" /></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">points = [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">2</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The image above shows one possible placement of rectangles to cover the points:</p>\n\n<ul>\n\t<li>A rectangle with a lower end at <code>(1, 0)</code> and its upper end at <code>(2, 8)</code></li>\n\t<li>A rectangle with a lower end at <code>(3, 0)</code> and its upper end at <code>(4, 8)</code></li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-18-59-12.png\" style=\"width: 260px; height: 250px;\" /></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">3</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The image above shows one possible placement of rectangles to cover the points:</p>\n\n<ul>\n\t<li>A rectangle with a lower end at <code>(0, 0)</code> and its upper end at <code>(2, 2)</code></li>\n\t<li>A rectangle with a lower end at <code>(3, 0)</code> and its upper end at <code>(5, 5)</code></li>\n\t<li>A rectangle with a lower end at <code>(6, 0)</code> and its upper end at <code>(6, 6)</code></li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-24-03.png\" style=\"height: 150px; width: 127px;\" /></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">points = [[2,3],[1,2]], w = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">2</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The image above shows one possible placement of rectangles to cover the points:</p>\n\n<ul>\n\t<li>A rectangle with a lower end at <code>(1, 0)</code> and its upper end at <code>(1, 2)</code></li>\n\t<li>A rectangle with a lower end at <code>(2, 0)</code> and its upper end at <code>(2, 3)</code></li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub> == points[i][0] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= y<sub>i</sub> == points[i][1] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= w &lt;= 10<sup>9</sup></code></li>\n\t<li>All pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are distinct.</li>\n</ul>\n",
        "exampleTestcases": "[[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]]\n1\n[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]\n2\n[[2,3],[1,2]]\n0",
        "formTitle": "[3111]Minimum Rectangles to Cover Points",
        "frequency": 0.0,
        "frontendQuestionId": "3111",
        "hints": [
            "The <code>y</code> values don't matter; only the <code>x</code> values matter.",
            "Sort all the points by <code>x<sub>i</sub></code>.",
            "Each time, select the smallest <code>x</code> value, <code>x<sub>0</sub></code>, from the unselected points, and then select all the points with <code>x</code> values not larger than <code>x<sub>0</sub> + w</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minRectanglesToCoverPoints",
            "params": [
                {
                    "name": "points",
                    "type": "integer[][]"
                },
                {
                    "name": "w",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3390",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]]\n1",
        "title": "Minimum Rectangles to Cover Points",
        "titleSlug": "minimum-rectangles-to-cover-points",
        "infer_hints": [
            "Sort the points in ascending order of x-coordinates.",
            "Use Sweep Line or Binary Indexed Tree.",
            "If we sort the points by their x-coordinate, how many rectangles will be needed for the point with the smallest x-coordinate?",
            "For each point, what is the maximum y-coordinate that we can reach with a rectangle of width w?",
            "How to find the upper bound of each x-coordinate?",
            "Use a Sorted Set.",
            "Sort the points by their x-coordinates.",
            "Sort the points by x-coordinate and for each x, use a sorted list of y-coordinates to calculate the maximum area.",
            "We can maintain the leftmost x-coordinate and the maximum y-coordinate of all points for each x-coordinate.",
            "How many rectangles are there in the grid?",
            "You can use a data structure that allows you to find the maximum y-coordinate for a given x-coordinate in O(logn) time.",
            "How many rectangles do we need to cover a single point?",
            "Use a sweep line and use a priority queue.",
            "How can we find out if a point is covered by a rectangle?",
            "Use a priority queue.",
            "Sort the points by their x-coordinate and then by their y-coordinate.",
            "For each rectangle, the width can be as small as 1 and the height can be as large as the maximum vertical distance between any two points.",
            "Sort the points by their x-coordinates.",
            "Can you sort the points based on the y-coordinate and then check if there is any rectangle possible?",
            "You can use a Sorted Set or a TreeSet for each y-coordinate."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    long long minEnd(int n, int x) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public long minEnd(int n, int x) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minEnd(self, n, x):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minEnd(self, n: int, x: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "long long minEnd(int n, int x) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public long MinEnd(int n, int x) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} n\n * @param {number} x\n * @return {number}\n */\nvar minEnd = function(n, x) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minEnd(n: number, x: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @return Integer\n     */\n    function minEnd($n, $x) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minEnd(_ n: Int, _ x: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minEnd(n: Int, x: Int): Long {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minEnd(int n, int x) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minEnd(n int, x int) int64 {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} n\n# @param {Integer} x\n# @return {Integer}\ndef min_end(n, x)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minEnd(n: Int, x: Int): Long = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_end(n: i32, x: i32) -> i64 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-end n x)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_end(N :: integer(), X :: integer()) -> integer().\nmin_end(N, X) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_end(n :: integer, x :: integer) :: integer\n  def min_end(n, x) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two integers <code>n</code> and <code>x</code>. You have to construct an array of <strong>positive</strong> integers <code>nums</code> of size <code>n</code> where for every <code>0 &lt;= i &lt; n - 1</code>, <code>nums[i + 1]</code> is <strong>greater than</strong> <code>nums[i]</code>, and the result of the bitwise <code>AND</code> operation between all elements of <code>nums</code> is <code>x</code>.</p>\n\n<p>Return the <strong>minimum</strong> possible value of <code>nums[n - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, x = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>nums</code> can be <code>[4,5,6]</code> and its last element is 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, x = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>nums</code> can be <code>[7,15]</code> and its last element is 15.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, x &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "exampleTestcases": "3\n4\n2\n7",
        "formTitle": "[3133]Minimum Array End",
        "frequency": 0.0,
        "frontendQuestionId": "3133",
        "hints": [
            "Each element of the array should be obtained by “merging” <code>x</code> and <code>v</code> where <code>v = 0, 1, 2, …(n - 1)</code>.",
            "To merge <code>x</code> with another number <code>v</code>, keep the set bits of <code>x</code> untouched, for all the other bits, fill the set bits of <code>v</code> from right to left in order one by one.",
            "So the final answer is the “merge” of <code>x</code> and <code>n - 1</code>."
        ],
        "level": 2,
        "metaData": {
            "name": "minEnd",
            "params": [
                {
                    "name": "n",
                    "type": "integer"
                },
                {
                    "name": "x",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3394",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "3\n4",
        "title": "Minimum Array End",
        "titleSlug": "minimum-array-end",
        "infer_hints": [
            "Find the bitwise AND of all numbers in the array.",
            "Try to make the last element as small as possible.",
            "Can we binary search for the answer?",
            "You can generate all the possible sequences of <code>n</code> numbers and check if the last number in the sequence is valid.",
            "The answer is always either 1 or 0.",
            "What if you start with 1?",
            "What if the numbers are 1 and 2?  Will the bitwise AND result in 1?",
            "Think of each bit of x.",
            "If you start from the smallest possible number, how can you increase it?",
            "Try all possible numbers in the array.",
            "For every number a, we can construct a number b = a XOR x.  Can we find an answer for a if we know the answer for b?",
            "The answer will be a power of 2.",
            "Find the smallest power of 2 that is larger than n.",
            "We can solve this problem in O(1) time by bitwise operations.",
            "For each i, we have to find the minimum a[i] that meets the conditions.",
            "Think of the binary representation of the integer.",
            "Try to construct the array in a sorted manner.",
            "If the last number of the array is 1, then the bitwise AND operation result will always be 0.",
            "Try to build the array in ascending order.  What is the next number we should put in the array?",
            "We can use a binary search to find the answer.  We can start from <code>1</code> and keep doubling it until it exceeds <code>x</code>."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minAnagramLength(string s) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minAnagramLength(String s) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minAnagramLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minAnagramLength(self, s: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minAnagramLength(char* s) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinAnagramLength(string s) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minAnagramLength = function(s) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minAnagramLength(s: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minAnagramLength($s) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minAnagramLength(_ s: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minAnagramLength(s: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minAnagramLength(String s) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minAnagramLength(s string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} s\n# @return {Integer}\ndef min_anagram_length(s)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minAnagramLength(s: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_anagram_length(s: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-anagram-length s)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_anagram_length(S :: unicode:unicode_binary()) -> integer().\nmin_anagram_length(S) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_anagram_length(s :: String.t) :: integer\n  def min_anagram_length(s) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>s</code>, which is known to be a concatenation of <strong>anagrams</strong> of some string <code>t</code>.</p>\n\n<p>Return the <strong>minimum</strong> possible length of the string <code>t</code>.</p>\n\n<p>An <strong>anagram</strong> is formed by rearranging the letters of a string. For example, &quot;aab&quot;, &quot;aba&quot;, and, &quot;baa&quot; are anagrams of &quot;aab&quot;.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abba&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>One possible string <code>t</code> could be <code>&quot;ba&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;cdef&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>One possible string <code>t</code> could be <code>&quot;cdef&quot;</code>, notice that <code>t</code> can be equal to <code>s</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consist only of lowercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"abba\"\n\"cdef\"",
        "formTitle": "[3138]Minimum Length of Anagram Concatenation",
        "frequency": 0.0,
        "frontendQuestionId": "3138",
        "hints": [
            "The answer should be a divisor of <code>s.length</code>.",
            "Check each candidate naively."
        ],
        "level": 2,
        "metaData": {
            "name": "minAnagramLength",
            "params": [
                {
                    "name": "s",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3395",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"abba\"",
        "title": "Minimum Length of Anagram Concatenation",
        "titleSlug": "minimum-length-of-anagram-concatenation",
        "infer_hints": [
            "The string <code>s</code> is a concatenation of anagram of the string <code>t</code>.",
            "For each index in the string, record the minimum number of substrings in s that are anagrams of p.",
            "Consider the smallest character in the string.  The answer must be at least as long as this string.",
            "We only need to know how many characters are still in the sliding window.",
            "Use the concept of Prefix-Suffix for strings.",
            "Use a sliding window with two pointers.  What data structure is good for this?",
            "How many anagrams of t can be made from the concatenation of two strings s?",
            "You can solve this problem with two pointers and sliding window.",
            "How many anagrams are there in a string?",
            "We can use a sliding window to find the smallest string that contains all the characters.",
            "Find the length of the smallest anagram.",
            "For each string <code>s[i]</code>, compute all of its possible anagrams and put them in a hashmap.",
            "We can use the concept of subarray.  We can try to find the length of the subarray that has the same frequency of each character.",
            "How many times is a substring of length k repeated in a string of length n?",
            "We know the length of <code>t</code> is at least 1, and the sum of the lengths of <code>t</code> and <code>s</code> is at most 10^5.  We can try to minimize the length of <code>t</code> by finding the smallest string <code>t</code> such that <code>t + s</code> is an anagram of <code>s</code>.",
            "Think about the relationship between the length of the anagram and the frequency of the characters in the anagram.",
            "We can solve this problem by using a sliding window.",
            "What are the smallest possible lengths of the strings <code>t</code> that could possibly be a concatenation of anagrams of <code>s</code>?",
            "You can find the frequency of each character in the string.",
            "If there is a string t, it can be obtained by concatenating any number of strings of the same string t."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool isValid(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean isValid(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def isValid(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def isValid(self, word: str) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool isValid(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool IsValid(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {boolean}\n */\nvar isValid = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function isValid(word: string): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function isValid($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func isValid(_ word: String) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun isValid(word: String): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool isValid(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func isValid(word string) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Boolean}\ndef is_valid(word)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def isValid(word: String): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn is_valid(word: String) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (is-valid word)\n  (-> string? boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec is_valid(Word :: unicode:unicode_binary()) -> boolean().\nis_valid(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec is_valid(word :: String.t) :: boolean\n  def is_valid(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>A word is considered <strong>valid</strong> if:</p>\n\n<ul>\n\t<li>It contains a <strong>minimum</strong> of 3 characters.</li>\n\t<li>It contains only digits (0-9), and English letters (uppercase and lowercase).</li>\n\t<li>It includes <strong>at least</strong> one <strong>vowel</strong>.</li>\n\t<li>It includes <strong>at least</strong> one <strong>consonant</strong>.</li>\n</ul>\n\n<p>You are given a string <code>word</code>.</p>\n\n<p>Return <code>true</code> if <code>word</code> is valid, otherwise, return <code>false</code>.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li><code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>, and their uppercases are <strong>vowels</strong>.</li>\n\t<li>A <strong>consonant</strong> is an English letter that is not a vowel.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;234Adas&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>This word satisfies the conditions.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;b3&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The length of this word is fewer than 3, and does not have a vowel.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;a3$e&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>This word contains a <code>&#39;$&#39;</code> character and does not have a consonant.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 20</code></li>\n\t<li><code>word</code> consists of English uppercase and lowercase letters, digits, <code>&#39;@&#39;</code>, <code>&#39;#&#39;</code>, and <code>&#39;$&#39;</code>.</li>\n</ul>\n",
        "exampleTestcases": "\"234Adas\"\n\"b3\"\n\"a3$e\"",
        "formTitle": "[3136]Valid Word",
        "frequency": 0.0,
        "frontendQuestionId": "3136",
        "hints": [
            "Use if-else to check all the conditions."
        ],
        "level": 1,
        "metaData": {
            "name": "isValid",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3396",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"234Adas\"",
        "title": "Valid Word",
        "titleSlug": "valid-word",
        "infer_hints": [
            "How can we check the conditions of a valid word?",
            "Iterate through the string, checking that each character is a digit or an English letter.",
            "For each character, check whether it is a vowel, a consonant, or something else.",
            "Check if the word contains only the characters of the alphabet.",
            "Count the number of vowels and consonants.",
            "If a word contains at least one vowel, it should contain at least one vowel twice in the same string.",
            "Create a set of vowels and consonants.  Try to check the conditions of a valid word.",
            "For each character, check if it's a letter and if it's a vowel.",
            "Use a stack to keep track of the current character.",
            "You can use a stack to store the character of the word.",
            "Check the conditions for each part of the word.",
            "How to check if a character is a vowel?",
            "We can check the conditions one by one.",
            "Check the length of the word. If it's less than 3, return false.",
            "Check if the word contains at least one vowel and one consonant.",
            "Check if the word has at least 3 characters.",
            "Check if the string length is greater than 2.",
            "Use regular expression to match the word.",
            "We need to make sure the word has at least 3 characters, and that it only contains English letters and digits.",
            "The word must contain at least 1 vowel and 1 consonant."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int addedInteger(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int addedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def addedInteger(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def addedInteger(self, nums1: List[int], nums2: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int addedInteger(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int AddedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar addedInteger = function(nums1, nums2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function addedInteger(nums1: number[], nums2: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function addedInteger($nums1, $nums2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func addedInteger(_ nums1: [Int], _ nums2: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun addedInteger(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int addedInteger(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func addedInteger(nums1 []int, nums2 []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef added_integer(nums1, nums2)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def addedInteger(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn added_integer(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (added-integer nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec added_integer(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nadded_integer(Nums1, Nums2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec added_integer(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def added_integer(nums1, nums2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two arrays of equal length, <code>nums1</code> and <code>nums2</code>.</p>\n\n<p>Each element in <code>nums1</code> has been increased (or decreased in the case of negative) by an integer, represented by the variable <code>x</code>.</p>\n\n<p>As a result, <code>nums1</code> becomes <strong>equal</strong> to <code>nums2</code>. Two arrays are considered <strong>equal</strong> when they contain the same integers with the same frequencies.</p>\n\n<p>Return the integer <code>x</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [2,6,4], nums2 = [9,7,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The integer added to each element of <code>nums1</code> is 3.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [10], nums2 = [5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">-5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The integer added to each element of <code>nums1</code> is -5.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [1,1,1,1], nums2 = [1,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The integer added to each element of <code>nums1</code> is 0.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length == nums2.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n\t<li>The test cases are generated in a way that there is an integer <code>x</code> such that <code>nums1</code> can become equal to <code>nums2</code> by adding <code>x</code> to each element of <code>nums1</code>.</li>\n</ul>\n",
        "exampleTestcases": "[2,6,4]\n[9,7,5]\n[10]\n[5]\n[1,1,1,1]\n[1,1,1,1]",
        "formTitle": "[3131]Find the Integer Added to Array I",
        "frequency": 0.0,
        "frontendQuestionId": "3131",
        "hints": [
            "Notice that, after sorting both arrays, there should be a one-to-one correspondence between every element.",
            "Thus <code>x = min(nums2) - min(nums1)</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "addedInteger",
            "params": [
                {
                    "name": "nums1",
                    "type": "integer[]"
                },
                {
                    "name": "nums2",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3397",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[2,6,4]\n[9,7,5]",
        "title": "Find the Integer Added to Array I",
        "titleSlug": "find-the-integer-added-to-array-i",
        "infer_hints": [
            "How can we find the sum of all elements in both arrays?",
            "The sum of all the numbers in the two arrays should be equal.",
            "Use a map to keep track of the difference between the two arrays.",
            "Find the sum of the two arrays.",
            "If you subtract the two arrays, what are the remaining numbers?",
            "Use a hash map to count the number of elements in both arrays.",
            "Can you find the difference between the sum of both arrays?",
            "The difference between the sums of two arrays is equal to the sum of the differences of the corresponding elements.",
            "We can find the integer by adding all the elements in the array.",
            "You can find the difference between the sums of the two arrays.",
            "Subtract each element of nums2 from each element of nums1 and sum them up.",
            "Do a prefix sum of the two arrays and then use a map to store the frequency of the prefix sums.",
            "We can use the property of difference between two equal arrays to solve this problem.",
            "How do we find the integer added to the array?",
            "Do we need to sort the arrays?",
            "Do you know how to find the difference between two arrays?",
            "For each index, subtract the elements in <code>nums1</code> from the elements in <code>nums2</code>.",
            "For each index, what value does the array have to have for it to become equal to the other array?",
            "How to check if two arrays are equal or not?",
            "If the two arrays are equal, the result is 0."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    bool canMakeSquare(vector<vector<char>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public boolean canMakeSquare(char[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def canMakeSquare(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: bool\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def canMakeSquare(self, grid: List[List[str]]) -> bool:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "bool canMakeSquare(char** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public bool CanMakeSquare(char[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {character[][]} grid\n * @return {boolean}\n */\nvar canMakeSquare = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function canMakeSquare(grid: string[][]): boolean {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Boolean\n     */\n    function canMakeSquare($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func canMakeSquare(_ grid: [[Character]]) -> Bool {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun canMakeSquare(grid: Array<CharArray>): Boolean {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  bool canMakeSquare(List<List<String>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func canMakeSquare(grid [][]byte) bool {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Character[][]} grid\n# @return {Boolean}\ndef can_make_square(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def canMakeSquare(grid: Array[Array[Char]]): Boolean = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn can_make_square(grid: Vec<Vec<char>>) -> bool {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (can-make-square grid)\n  (-> (listof (listof char?)) boolean?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec can_make_square(Grid :: [[char()]]) -> boolean().\ncan_make_square(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec can_make_square(grid :: [[char]]) :: boolean\n  def can_make_square(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D matrix <code>grid</code> of size <code>3 x 3</code> consisting only of characters <code>&#39;B&#39;</code> and <code>&#39;W&#39;</code>. Character <code>&#39;W&#39;</code> represents the white color<!-- notionvc: 06a49cc0-a296-4bd2-9bfe-c8818edeb53a -->, and character <code>&#39;B&#39;</code> represents the black color<!-- notionvc: 06a49cc0-a296-4bd2-9bfe-c8818edeb53a -->.</p>\n\n<p>Your task is to change the color of <strong>at most one</strong> cell<!-- notionvc: c04cb478-8dd5-49b1-80bb-727c6b1e0232 --> so that the matrix has a <code>2 x 2</code> square where all cells are of the same color.<!-- notionvc: adf957e1-fa0f-40e5-9a2e-933b95e276a7 --></p>\n\n<p>Return <code>true</code> if it is possible to create a <code>2 x 2</code> square of the same color, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<style type=\"text/css\">.grid-container {\n  display: grid;\n  grid-template-columns: 30px 30px 30px;\n  padding: 10px;\n}\n.grid-item {\n  background-color: black;\n  border: 1px solid gray;\n  height: 30px;\n  font-size: 30px;\n  text-align: center;\n}\n.grid-item-white {\n  background-color: white;\n}\n</style>\n<style class=\"darkreader darkreader--sync\" media=\"screen\" type=\"text/css\">\n</style>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"grid-container\">\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;W&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It can be done by changing the color of the <code>grid[0][2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"grid-container\">\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;W&quot;,&quot;B&quot;,&quot;W&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It cannot be done by changing at most one cell.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"grid-container\">\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;W&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;W&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The <code>grid</code> already contains a <code>2 x 2</code> square of the same color.<!-- notionvc: 9a8b2d3d-1e73-457a-abe0-c16af51ad5c2 --></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>grid.length == 3</code></li>\n\t<li><code>grid[i].length == 3</code></li>\n\t<li><code>grid[i][j]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>.</li>\n</ul>\n",
        "exampleTestcases": "[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]\n[[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]]\n[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]]",
        "formTitle": "[3127]Make a Square with the Same Color",
        "frequency": 0.0,
        "frontendQuestionId": "3127",
        "hints": [
            "It is impossible to create <code>2 x 2</code> square with the same color by changing the color of at most one cell when the number of <code>‘W'</code> or <code>'B’</code> in all squares is 2."
        ],
        "level": 1,
        "metaData": {
            "name": "canMakeSquare",
            "params": [
                {
                    "name": "grid",
                    "type": "character[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3398",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]",
        "title": "Make a Square with the Same Color",
        "titleSlug": "make-a-square-with-the-same-color",
        "infer_hints": [
            "Try to find a <code>2 x 2</code> square that has all the same color.",
            "Can you make a square with a black cell in the center and four white cells around it?",
            "If you want to make a 2x2 square with the same color, then there must be 2 black cells or 2 white cells.",
            "Use the fact that you can flip the color of the cell (either white to black or black to white).",
            "Try all 4 directions (up, down, left, right) to see if you can form a 2x2 square with the same color.",
            "The cell colors must be the same. Otherwise, we cannot create a square with the same color.",
            "How to change the color of a cell?",
            "If the grid already contains a 2x2 square of the same color, return true.",
            "Can we change the color of one cell and make a 2x2 square?",
            "The problem is a graph problem.  What is the graph node?",
            "How many different 2x2 grids can we have?",
            "How to check if a 2 x 2 square is the same color?",
            "You can change the color of at most one cell.",
            "Use the idea of prefix sum to quickly calculate the number of black and white cells in a 2x2 square.",
            "Can you use a hashmap to count the number of black cells in the 2x2 subgrid?",
            "For each of the four cells in the top-left 2x2 square, check if the other three cells are the same color.",
            "Can you flip the colors in the first 2 rows and first 2 columns so that they all have the same color?",
            "Count the number of white cells in the grid.",
            "Use the following 4 cells to create a 2x2 square with the same color.",
            "Can we try all 4 corners of the 2x2 square and see if we can color the rest with the same color?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumAddedInteger(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumAddedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumAddedInteger(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumAddedInteger(self, nums1: List[int], nums2: List[int]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumAddedInteger(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumAddedInteger(int[] nums1, int[] nums2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minimumAddedInteger = function(nums1, nums2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumAddedInteger(nums1: number[], nums2: number[]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minimumAddedInteger($nums1, $nums2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumAddedInteger(_ nums1: [Int], _ nums2: [Int]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumAddedInteger(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumAddedInteger(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumAddedInteger(nums1 []int, nums2 []int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef minimum_added_integer(nums1, nums2)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumAddedInteger(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_added_integer(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-added-integer nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_added_integer(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nminimum_added_integer(Nums1, Nums2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_added_integer(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def minimum_added_integer(nums1, nums2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>.</p>\n\n<p>From <code>nums1</code> two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable <code>x</code>.</p>\n\n<p>As a result, <code>nums1</code> becomes <strong>equal</strong> to <code>nums2</code>. Two arrays are considered <strong>equal</strong> when they contain the same integers with the same frequencies.</p>\n\n<p>Return the <strong>minimum</strong> possible integer<em> </em><code>x</code><em> </em>that achieves this equivalence.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [4,20,16,12,8], nums2 = [14,18,10]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">-2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After removing elements at indices <code>[0,4]</code> and adding -2, <code>nums1</code> becomes <code>[18,14,10]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">nums1 = [3,5,5,3], nums2 = [7,7]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After removing elements at indices <code>[0,3]</code> and adding 2, <code>nums1</code> becomes <code>[7,7]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums1.length &lt;= 200</code></li>\n\t<li><code>nums2.length == nums1.length - 2</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n\t<li>The test cases are generated in a way that there is an integer <code>x</code> such that <code>nums1</code> can become equal to <code>nums2</code> by removing two elements and adding <code>x</code> to each element of <code>nums1</code>.</li>\n</ul>\n",
        "exampleTestcases": "[4,20,16,12,8]\n[14,18,10]\n[3,5,5,3]\n[7,7]",
        "formTitle": "[3132]Find the Integer Added to Array II",
        "frequency": 0.0,
        "frontendQuestionId": "3132",
        "hints": [
            "Try all possibilities to remove 2 elements from <code>nums1</code>.",
            "<code>x</code> should be equal to <code>min(nums2) - min(nums1)</code>, check it naively."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumAddedInteger",
            "params": [
                {
                    "name": "nums1",
                    "type": "integer[]"
                },
                {
                    "name": "nums2",
                    "type": "integer[]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3399",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[4,20,16,12,8]\n[14,18,10]",
        "title": "Find the Integer Added to Array II",
        "titleSlug": "find-the-integer-added-to-array-ii",
        "infer_hints": [
            "Can you find the difference of the two sums?",
            "Use a frequency counter to keep track of the frequencies of each number in both arrays.",
            "How can we know that the number to be added is between 1 and 1000?",
            "The integer <code>x</code> must be the sum of differences between elements of <code>nums1</code> and <code>nums2</code>.",
            "Can we use a map or a set to solve this?",
            "What is the difference between the two arrays?",
            "Can you use a map to store the counts of the numbers in both arrays?",
            "You can use a hashmap to count the frequencies of all elements in nums1.",
            "If the sums of the two arrays are the same, then the integers added to both arrays must be the same.",
            "If we sort both arrays, we can iterate over the sorted arrays and add the differences to the sum.",
            "Try to compare the sorted arrays.",
            "We need to count the frequency of all numbers in both arrays.",
            "If we subtract the difference of the two arrays from the sum of the two arrays, we get the difference between the two numbers, which is the integer we are looking for.",
            "Use a hashmap to count the number of each integer in both arrays.",
            "Can you sort both arrays and find the missing number?",
            "The sum of nums1 is greater than the sum of nums2. The number of times we need to add an integer to nums1 to make it equal to nums2 is equal to the difference between the sums divided by the difference between the counts of each integer in nums1 and nums2.",
            "We need to count the frequency of each element in both arrays and then find the element with the highest difference.",
            "Think about what happens when you add x to each element in nums1.",
            "If you subtract the sum of the two arrays from the sum of nums2 and nums1, you'll get the value of x.",
            "Try to find the difference between the sums of the arrays."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minCostToEqualizeArray(vector<int>& nums, int cost1, int cost2) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minCostToEqualizeArray(self, nums, cost1, cost2):\n        \"\"\"\n        :type nums: List[int]\n        :type cost1: int\n        :type cost2: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minCostToEqualizeArray(self, nums: List[int], cost1: int, cost2: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minCostToEqualizeArray(int* nums, int numsSize, int cost1, int cost2) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[]} nums\n * @param {number} cost1\n * @param {number} cost2\n * @return {number}\n */\nvar minCostToEqualizeArray = function(nums, cost1, cost2) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minCostToEqualizeArray(nums: number[], cost1: number, cost2: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $cost1\n     * @param Integer $cost2\n     * @return Integer\n     */\n    function minCostToEqualizeArray($nums, $cost1, $cost2) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minCostToEqualizeArray(_ nums: [Int], _ cost1: Int, _ cost2: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minCostToEqualizeArray(nums: IntArray, cost1: Int, cost2: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minCostToEqualizeArray(List<int> nums, int cost1, int cost2) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minCostToEqualizeArray(nums []int, cost1 int, cost2 int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[]} nums\n# @param {Integer} cost1\n# @param {Integer} cost2\n# @return {Integer}\ndef min_cost_to_equalize_array(nums, cost1, cost2)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minCostToEqualizeArray(nums: Array[Int], cost1: Int, cost2: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn min_cost_to_equalize_array(nums: Vec<i32>, cost1: i32, cost2: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (min-cost-to-equalize-array nums cost1 cost2)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec min_cost_to_equalize_array(Nums :: [integer()], Cost1 :: integer(), Cost2 :: integer()) -> integer().\nmin_cost_to_equalize_array(Nums, Cost1, Cost2) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec min_cost_to_equalize_array(nums :: [integer], cost1 :: integer, cost2 :: integer) :: integer\n  def min_cost_to_equalize_array(nums, cost1, cost2) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given an integer array <code>nums</code> and two integers <code>cost1</code> and <code>cost2</code>. You are allowed to perform <strong>either</strong> of the following operations <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> from <code>nums</code> and <strong>increase</strong> <code>nums[i]</code> by <code>1</code> for a cost of <code>cost1</code>.</li>\n\t<li>Choose two <strong>different</strong> indices <code>i</code>, <code>j</code>, from <code>nums</code> and <strong>increase</strong> <code>nums[i]</code> and <code>nums[j]</code> by <code>1</code> for a cost of <code>cost2</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> <strong>cost</strong> required to make all elements in the array <strong>equal</strong><em>. </em></p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,1], cost1 = 5, cost2 = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The following operations can be performed to make the values equal:</p>\n\n<ul>\n\t<li>Increase <code>nums[1]</code> by 1 for a cost of 5. <code>nums</code> becomes <code>[4,2]</code>.</li>\n\t<li>Increase <code>nums[1]</code> by 1 for a cost of 5. <code>nums</code> becomes <code>[4,3]</code>.</li>\n\t<li>Increase <code>nums[1]</code> by 1 for a cost of 5. <code>nums</code> becomes <code>[4,4]</code>.</li>\n</ul>\n\n<p>The total cost is 15.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,3,3,5], cost1 = 2, cost2 = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The following operations can be performed to make the values equal:</p>\n\n<ul>\n\t<li>Increase <code>nums[0]</code> and <code>nums[1]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[3,4,3,3,5]</code>.</li>\n\t<li>Increase <code>nums[0]</code> and <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[4,4,4,3,5]</code>.</li>\n\t<li>Increase <code>nums[0]</code> and <code>nums[3]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,4,4,4,5]</code>.</li>\n\t<li>Increase <code>nums[1]</code> and <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,5,4,5]</code>.</li>\n\t<li>Increase <code>nums[3]</code> by 1 for a cost of 2. <code>nums</code> becomes <code>[5,5,5,5,5]</code>.</li>\n</ul>\n\n<p>The total cost is 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,5,3], cost1 = 1, cost2 = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following operations can be performed to make the values equal:</p>\n\n<ul>\n\t<li>Increase <code>nums[0]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[4,5,3]</code>.</li>\n\t<li>Increase <code>nums[0]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,3]</code>.</li>\n\t<li>Increase <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,4]</code>.</li>\n\t<li>Increase <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,5]</code>.</li>\n</ul>\n\n<p>The total cost is 4.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= cost1 &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= cost2 &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "exampleTestcases": "[4,1]\n5\n2\n[2,3,3,3,5]\n2\n1\n[3,5,3]\n1\n3",
        "formTitle": "[3139]Minimum Cost to Equalize Array",
        "frequency": 0.0,
        "frontendQuestionId": "3139",
        "hints": [
            "How can you determine the minimum cost if you know the maximum value in the array once all values are made equal?",
            "If <code>cost2 > cost1 * 2</code>, we should just use <code>cost1</code> to change all the values to the maximum one.",
            "Otherwise, it's optimal to choose the smallest two values and use <code>cost2</code> to increase both of them.",
            "Since the maximum value is known, calculate the required increases to equalize all values, instead of naively simulating the operations.",
            "There are not a lot of candidates for the maximum; we can try all of them and choose which uses the minimum number of operations."
        ],
        "level": 3,
        "metaData": {
            "name": "minCostToEqualizeArray",
            "params": [
                {
                    "name": "nums",
                    "type": "integer[]"
                },
                {
                    "name": "cost1",
                    "type": "integer"
                },
                {
                    "name": "cost2",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3402",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[4,1]\n5\n2",
        "title": "Minimum Cost to Equalize Array",
        "titleSlug": "minimum-cost-to-equalize-array",
        "infer_hints": [
            "For each position, consider increasing all numbers to the number in the left or the right for the minimum cost.",
            "The minimum cost is always achieved by making all numbers equal to the median.",
            "How can we calculate the cost of making all elements equal to a specific value?",
            "Use prefix sums to calculate the cost to make all numbers equal to a certain number.",
            "Use prefix sums to calculate the cost of making the elements equal to a certain value.",
            "The minimum cost to make the elements equal is either making all elements equal to the median or to the average of the median and the next bigger element.",
            "If you increase the value of some element by 1, then all the other elements in the array become equal.  This gives you a total cost of `n`, where `n` is the number of elements in the array.",
            "For each value, compute the cost of making all elements equal to it.",
            "What if you make all the elements in nums[i] the same?",
            "Use prefix sum array.",
            "Calculate the total cost if you increase all elements to the minimum possible element.",
            "If you can increase one element, how many operations are needed to make all elements equal?",
            "Try to calculate the sum of operations required for each possible value of the array.",
            "Think about what the costs are.",
            "For each value in the array, what is the total cost if we change every other element to it?",
            "For each number x, we can choose to change it to any number from 1 to max(nums).",
            "Calculate the prefix and suffix sum of the cost array.",
            "How can we calculate the cost of making all elements equal to some number X?",
            "The key observation here is that, after making a move, the median is guaranteed to be the best possible answer.",
            "Use prefix sum and binary search."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int minimumOperations(vector<vector<int>>& grid) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int minimumOperations(int[][] grid) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def minimumOperations(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def minimumOperations(self, grid: List[List[int]]) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int minimumOperations(int** grid, int gridSize, int* gridColSize) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int MinimumOperations(int[][] grid) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumOperations = function(grid) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function minimumOperations(grid: number[][]): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumOperations($grid) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func minimumOperations(_ grid: [[Int]]) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun minimumOperations(grid: Array<IntArray>): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int minimumOperations(List<List<int>> grid) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func minimumOperations(grid [][]int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_operations(grid)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def minimumOperations(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn minimum_operations(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (minimum-operations grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec minimum_operations(Grid :: [[integer()]]) -> integer().\nminimum_operations(Grid) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec minimum_operations(grid :: [[integer]]) :: integer\n  def minimum_operations(grid) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a 2D matrix <code>grid</code> of size <code>m x n</code>. In one <strong>operation</strong>, you can change the value of <strong>any</strong> cell to <strong>any</strong> non-negative number. You need to perform some <strong>operations</strong> such that each cell <code>grid[i][j]</code> is:</p>\n\n<ul>\n\t<li>Equal to the cell below it, i.e. <code>grid[i][j] == grid[i + 1][j]</code> (if it exists).</li>\n\t<li>Different from the cell to its right, i.e. <code>grid[i][j] != grid[i][j + 1]</code> (if it exists).</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> number of operations needed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,2],[1,0,2]]</span></p>\n\n<p><strong>Output:</strong> 0</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>All the cells in the matrix already satisfy the properties.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,1,1],[0,0,0]]</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/27/example21.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>The matrix becomes <code>[[1,0,1],[1,0,1]]</code> which satisfies the properties, by doing these 3 operations:</p>\n\n<ul>\n\t<li>Change <code>grid[1][0]</code> to 1.</li>\n\t<li>Change <code>grid[0][1]</code> to 0.</li>\n\t<li>Change <code>grid[1][2]</code> to 1.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1],[2],[3]]</span></p>\n\n<p><strong>Output:</strong> 2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/31/changed.png\" style=\"width: 86px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p>There is a single column. We can change the value to 1 in each cell using 2 operations.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 9</code></li>\n</ul>\n",
        "exampleTestcases": "[[1,0,2],[1,0,2]]\n[[1,1,1],[0,0,0]]\n[[1],[2],[3]]",
        "formTitle": "[3122]Minimum Number of Operations to Satisfy Conditions",
        "frequency": 0.0,
        "frontendQuestionId": "3122",
        "hints": [
            "Use Hashing to store for each frequency of candies, how many times it occurs in each box.",
            "We can use dynamic programming."
        ],
        "level": 2,
        "metaData": {
            "name": "minimumOperations",
            "params": [
                {
                    "name": "grid",
                    "type": "integer[][]"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3404",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "[[1,0,2],[1,0,2]]",
        "title": "Minimum Number of Operations to Satisfy Conditions",
        "titleSlug": "minimum-number-of-operations-to-satisfy-conditions",
        "infer_hints": [
            "Consider a row as a state.  You can go from state u to state v by changing the cell (i, j) to any number between 0 and 9.  What is the cost of changing (i, j) to a specific number x?",
            "Try to convert the problem to a DP problem.  This is because you need to find the minimum operations to satisfy all conditions.",
            "If two cells have the same color, the operation is unnecessary. If they have different colors, you need to change one of them to the other color.",
            "Try to minimize the value of each cell.",
            "The main challenge is to find the minimum number of operations. You can observe that the operation changes the values of cells horizontally or vertically.",
            "If we can choose the value of a cell arbitrarily, then we need to ensure that all cells with the same value have the same color.",
            "What if we change the value of a cell to the value of its top-left neighbor?",
            "What if you can change the grid to satisfy one condition at a time?",
            "You can try to simulate the process, and for each operation, you can check if it's possible to satisfy the conditions.",
            "We can maintain two arrays dp1 and dp2 for each cell.  dp1[i][j] is the minimum operations to satisfy the condition from cell (i, j) to the bottom cell.  dp2[i][j] is the minimum operations to satisfy the condition from cell (i, j) to the right cell.",
            "We can solve this problem in a dynamic programming way.",
            "You can use dynamic programming.  How can you use dynamic programming?",
            "Use dynamic programming.  For each cell, we have two options: 1) change it to the value below it, or 2) change it to the value to its right.  The minimum cost is the minimum of these two choices.",
            "Can we try all possible values of grid[i][j]?  Try all possible values of grid[i][j] for each cell and keep track of the minimum number of operations.",
            "You can do each operation on one row at a time.",
            "For each cell, we can only choose a value from the cells below and to the right.",
            "Do you have any idea how to use the given conditions to solve this problem?",
            "Can you use Dynamic Programming to solve this?",
            "How many operations do you need to change all the cells to the same value?",
            "Can you find a way to count the number of operations for each cell?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfSpecialChars(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfSpecialChars(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfSpecialChars(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfSpecialChars(self, word: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfSpecialChars(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfSpecialChars(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar numberOfSpecialChars = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfSpecialChars(word: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function numberOfSpecialChars($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfSpecialChars(_ word: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfSpecialChars(word: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfSpecialChars(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfSpecialChars(word string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Integer}\ndef number_of_special_chars(word)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfSpecialChars(word: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_special_chars(word: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-special-chars word)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_special_chars(Word :: unicode:unicode_binary()) -> integer().\nnumber_of_special_chars(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_special_chars(word :: String.t) :: integer\n  def number_of_special_chars(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code>. A letter&nbsp;<code>c</code> is called <strong>special</strong> if it appears <strong>both</strong> in lowercase and uppercase in <code>word</code>, and <strong>every</strong> lowercase occurrence of <code>c</code> appears before the <strong>first</strong> uppercase occurrence of <code>c</code>.</p>\n\n<p>Return the number of<em> </em><strong>special</strong> letters<em> </em>in<em> </em><code>word</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;aaAbcBC&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The special characters are <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no special characters in <code>word</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;AbBCab&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no special characters in <code>word</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists of only lowercase and uppercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aaAbcBC\"\n\"abc\"\n\"AbBCab\"",
        "formTitle": "[3121]Count the Number of Special Characters II",
        "frequency": 0.0,
        "frontendQuestionId": "3121",
        "hints": [
            "For each character <code>c</code>, store the first occurrence of its uppercase and the last occurrence of its lowercase."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfSpecialChars",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3405",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"aaAbcBC\"",
        "title": "Count the Number of Special Characters II",
        "titleSlug": "count-the-number-of-special-characters-ii",
        "infer_hints": [
            "The number of special characters can be computed by comparing the sorted version of the string with the original one.",
            "Think of the alphabet as a directed graph.  Can you find a character that can only appear at the start of a word?",
            "What if we sort the positions of each letter in the string?",
            "Try to find a solution using only the given data.",
            "Use a hashset to store the letters we have seen in the string.",
            "The problem is asking for the number of special characters.  The special characters are the ones that appear in both the lowercase and uppercase versions of the same character.",
            "How many special characters are there in a string?",
            "Keep track of the smallest index where a character appears.  This way, you know that if a character repeats, you can skip to the next index where that character repeats.",
            "Use an array of 26 lowercase and uppercase letters to count the frequency of each letter.",
            "The characters can be in any order.  What is the maximum number of special characters in a string of length n?",
            "Keep track of the first occurrence of each letter in the string.",
            "How many special characters are there?",
            "We can maintain a set of all special characters and a set of all letters.",
            "Count the number of special characters in the prefix of the string.",
            "Can you use a prefix sum array to solve this problem?",
            "If the first occurrence of character c is at position i, then it will be special if and only if the last occurrence of c is at least i + 2.",
            "Think about the special characters as a group of elements that must be checked for each character.",
            "You can use a Trie to solve this problem.",
            "For each character, check if it is lowercase or uppercase.",
            "The special characters are only the characters that appear in both lowercase and uppercase."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfStableArrays(self, zero, one, limit):\n        \"\"\"\n        :type zero: int\n        :type one: int\n        :type limit: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfStableArrays(int zero, int one, int limit) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} zero\n * @param {number} one\n * @param {number} limit\n * @return {number}\n */\nvar numberOfStableArrays = function(zero, one, limit) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfStableArrays(zero: number, one: number, limit: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $zero\n     * @param Integer $one\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numberOfStableArrays($zero, $one, $limit) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfStableArrays(_ zero: Int, _ one: Int, _ limit: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfStableArrays(zero: Int, one: Int, limit: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfStableArrays(int zero, int one, int limit) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfStableArrays(zero int, one int, limit int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} zero\n# @param {Integer} one\n# @param {Integer} limit\n# @return {Integer}\ndef number_of_stable_arrays(zero, one, limit)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfStableArrays(zero: Int, one: Int, limit: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_stable_arrays(zero: i32, one: i32, limit: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-stable-arrays zero one limit)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_stable_arrays(Zero :: integer(), One :: integer(), Limit :: integer()) -> integer().\nnumber_of_stable_arrays(Zero, One, Limit) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_stable_arrays(zero :: integer, one :: integer, limit :: integer) :: integer\n  def number_of_stable_arrays(zero, one, limit) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given 3 positive integers <code>zero</code>, <code>one</code>, and <code>limit</code>.</p>\n\n<p>A <span data-keyword=\"binary-array\">binary array</span> <code>arr</code> is called <strong>stable</strong> if:</p>\n\n<ul>\n\t<li>The number of occurrences of 0 in <code>arr</code> is <strong>exactly </strong><code>zero</code>.</li>\n\t<li>The number of occurrences of 1 in <code>arr</code> is <strong>exactly</strong> <code>one</code>.</li>\n\t<li>Each <span data-keyword=\"subarray-nonempty\">subarray</span> of <code>arr</code> with a size greater than <code>limit</code> must contain <strong>both </strong>0 and 1.</li>\n</ul>\n\n<p>Return the <em>total</em> number of <strong>stable</strong> binary arrays.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 1, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two possible stable binary arrays are <code>[1,0]</code> and <code>[0,1]</code>, as both arrays have a single 0 and a single 1, and no subarray has a length greater than 2.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 2, limit = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible stable binary array is <code>[1,0,1]</code>.</p>\n\n<p>Note that the binary arrays <code>[1,1,0]</code> and <code>[0,1,1]</code> have subarrays of length 2 with identical elements, hence, they are not stable.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 3, one = 3, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">14</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All the possible stable binary arrays are <code>[0,0,1,0,1,1]</code>, <code>[0,0,1,1,0,1]</code>, <code>[0,1,0,0,1,1]</code>, <code>[0,1,0,1,0,1]</code>, <code>[0,1,0,1,1,0]</code>, <code>[0,1,1,0,0,1]</code>, <code>[0,1,1,0,1,0]</code>, <code>[1,0,0,1,0,1]</code>, <code>[1,0,0,1,1,0]</code>, <code>[1,0,1,0,0,1]</code>, <code>[1,0,1,0,1,0]</code>, <code>[1,0,1,1,0,0]</code>, <code>[1,1,0,0,1,0]</code>, and <code>[1,1,0,1,0,0]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= zero, one, limit &lt;= 200</code></li>\n</ul>\n",
        "exampleTestcases": "1\n1\n2\n1\n2\n1\n3\n3\n2",
        "formTitle": "[3129]Find All Possible Stable Binary Arrays I",
        "frequency": 0.0,
        "frontendQuestionId": "3129",
        "hints": [
            "Let <code>dp[a][b][c = 0/1][d]</code> be the number of stable arrays with exactly <code>a</code> 0s, <code>b</code> 1s and consecutive <code>d</code> value of <code>c</code>’s at the end.",
            "Try each case by appending a 0/1 at last to get the inductions."
        ],
        "level": 2,
        "metaData": {
            "name": "numberOfStableArrays",
            "params": [
                {
                    "name": "zero",
                    "type": "integer"
                },
                {
                    "name": "one",
                    "type": "integer"
                },
                {
                    "name": "limit",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3406",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "1\n1\n2",
        "title": "Find All Possible Stable Binary Arrays I",
        "titleSlug": "find-all-possible-stable-binary-arrays-i",
        "infer_hints": [
            "Let's consider the possible lengths of the binary arrays.",
            "Try to find a pattern.",
            "How many binary arrays of length 2*limit have at most 1 zero and 1 one?",
            "If the limit is 1, there is only one possible array.",
            "Try to represent the count of binary arrays with 0 and 1 as dp[i][j] where dp[i][j] = number of binary arrays of length i with j 1's.",
            "The number of stable binary arrays with <code>n</code> digits and <code>a</code> ones is the number of ways to choose the ones and then fill in the remaining digits.",
            "How many ways can you choose the 0s and 1s?  How many ways can you choose the length of the binary array?",
            "What if we have the counts of 0 and 1 for all the prefixes of the array?",
            "Think of the dp state as a function of the number of 0s and 1s used so far.",
            "Can we use dynamic programming?",
            "Generate all possible binary arrays.",
            "Use dynamic programming.",
            "Think about how you can generate all possible binary arrays.  There are two types of binary arrays, those that start with 0 and those that start with 1.",
            "Can we use dynamic programming to solve this problem?",
            "Try to calculate the number of stable binary arrays with length of i and end with 0 and end with 1 separately.",
            "We can calculate the number of possible arrays with a given number of 0s and 1s.",
            "Use dynamic programming.",
            "What if the number of 0s and 1s is the same?",
            "Try using a dynamic programming approach.",
            "For every possible length of the binary array, how many 0's and 1's can be placed?"
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfStableArrays(self, zero, one, limit):\n        \"\"\"\n        :type zero: int\n        :type one: int\n        :type limit: int\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfStableArrays(int zero, int one, int limit) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfStableArrays(int zero, int one, int limit) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {number} zero\n * @param {number} one\n * @param {number} limit\n * @return {number}\n */\nvar numberOfStableArrays = function(zero, one, limit) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfStableArrays(zero: number, one: number, limit: number): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param Integer $zero\n     * @param Integer $one\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numberOfStableArrays($zero, $one, $limit) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfStableArrays(_ zero: Int, _ one: Int, _ limit: Int) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfStableArrays(zero: Int, one: Int, limit: Int): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfStableArrays(int zero, int one, int limit) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfStableArrays(zero int, one int, limit int) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {Integer} zero\n# @param {Integer} one\n# @param {Integer} limit\n# @return {Integer}\ndef number_of_stable_arrays(zero, one, limit)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfStableArrays(zero: Int, one: Int, limit: Int): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_stable_arrays(zero: i32, one: i32, limit: i32) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-stable-arrays zero one limit)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_stable_arrays(Zero :: integer(), One :: integer(), Limit :: integer()) -> integer().\nnumber_of_stable_arrays(Zero, One, Limit) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_stable_arrays(zero :: integer, one :: integer, limit :: integer) :: integer\n  def number_of_stable_arrays(zero, one, limit) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given 3 positive integers <code>zero</code>, <code>one</code>, and <code>limit</code>.</p>\n\n<p>A <span data-keyword=\"binary-array\">binary array</span> <code>arr</code> is called <strong>stable</strong> if:</p>\n\n<ul>\n\t<li>The number of occurrences of 0 in <code>arr</code> is <strong>exactly </strong><code>zero</code>.</li>\n\t<li>The number of occurrences of 1 in <code>arr</code> is <strong>exactly</strong> <code>one</code>.</li>\n\t<li>Each <span data-keyword=\"subarray-nonempty\">subarray</span> of <code>arr</code> with a size greater than <code>limit</code> must contain <strong>both </strong>0 and 1.</li>\n</ul>\n\n<p>Return the <em>total</em> number of <strong>stable</strong> binary arrays.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 1, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two possible stable binary arrays are <code>[1,0]</code> and <code>[0,1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 1, one = 2, limit = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible stable binary array is <code>[1,0,1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">zero = 3, one = 3, limit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">14</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All the possible stable binary arrays are <code>[0,0,1,0,1,1]</code>, <code>[0,0,1,1,0,1]</code>, <code>[0,1,0,0,1,1]</code>, <code>[0,1,0,1,0,1]</code>, <code>[0,1,0,1,1,0]</code>, <code>[0,1,1,0,0,1]</code>, <code>[0,1,1,0,1,0]</code>, <code>[1,0,0,1,0,1]</code>, <code>[1,0,0,1,1,0]</code>, <code>[1,0,1,0,0,1]</code>, <code>[1,0,1,0,1,0]</code>, <code>[1,0,1,1,0,0]</code>, <code>[1,1,0,0,1,0]</code>, and <code>[1,1,0,1,0,0]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= zero, one, limit &lt;= 1000</code></li>\n</ul>\n",
        "exampleTestcases": "1\n1\n2\n1\n2\n1\n3\n3\n2",
        "formTitle": "[3130]Find All Possible Stable Binary Arrays II",
        "frequency": 0.0,
        "frontendQuestionId": "3130",
        "hints": [
            "Let <code>dp[x][y][z = 0/1]</code> be the number of stable arrays with exactly <code>x</code> zeros, <code>y</code> ones, and the last element is <code>z</code>. (0 or 1).\r\n<code>dp[x][y][0] + dp[x][y][1]</code> is the answer for given <code>(x, y)</code>.",
            "If we have already placed <code>x</code> 1 and <code>y</code> 0, if we place a group of <code>k</code> 0, the number of ways is <code>dp[x-k][y][1]</code>. We can place a group with size <code>i</code>, where <code>i</code> varies from 1 to <code>min(limit, zero - x)</code>.\r\nSimilarly, we can solve by placing a group of ones.",
            "Speed up the calculation using prefix arrays to store the sum of <code>dp</code> states."
        ],
        "level": 3,
        "metaData": {
            "name": "numberOfStableArrays",
            "params": [
                {
                    "name": "zero",
                    "type": "integer"
                },
                {
                    "name": "one",
                    "type": "integer"
                },
                {
                    "name": "limit",
                    "type": "integer"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3407",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "1\n1\n2",
        "title": "Find All Possible Stable Binary Arrays II",
        "titleSlug": "find-all-possible-stable-binary-arrays-ii",
        "infer_hints": [
            "Think about the dynamic programming state.",
            "The number of stable arrays with <code>k</code> ones and <code>l</code> zeros is equal to the number of stable arrays with <code>k-1</code> ones and <code>l+1</code> zeros plus the number of stable arrays with <code>k</code> ones and <code>l-1</code> zeros.",
            "Consider each element of the array.  How many possible choices are there?",
            "What if we use dynamic programming?",
            "Use dynamic programming to calculate dp[i] as the number of stable binary arrays with length i.",
            "Use dynamic programming to calculate the number of ways to build a binary array of length i.",
            "We need to count all the valid binary arrays with 0s and 1s in a way that all subarrays have both 0s and 1s.",
            "Create a DP table dp[i][j] where dp[i][j] is the number of stable binary arrays of length i that have exactly j 1's.",
            "Try dynamic programming.  For each possible length of the array, keep track of how many ways there are to get it to be stable.",
            "For each possible number of 1s, calculate the number of possible binary arrays that end with 0.  How many ways are there to add 0 to a binary array?",
            "Use a 2D array dp[i][j] to store the number of ways to make a binary array of length i ending with j zeros and 1s.",
            "For every possible length, calculate the number of possible stable binary arrays.",
            "For each length, find the number of arrays with that length.",
            "How many possible binary arrays of length N are there?",
            "We can precompute the number of ways to choose the first 0 and 1, then for each length of the binary array, count the number of ways to append 0 or 1.",
            "Can you use dynamic programming to solve this problem?",
            "Think about how you can solve this problem with dynamic programming.",
            "The number of stable arrays with 0's is at most limit/2 + 1, and with 1's it is at most limit/2 + 1.",
            "Think of the number of stable binary arrays as a sum.",
            "Count the number of stable binary arrays of size n with each of the two elements appearing exactly x times."
        ]
    },
    {
        "acceptance": 0.0,
        "codeSnippets": [
            {
                "code": "class Solution {\npublic:\n    int numberOfSpecialChars(string word) {\n        \n    }\n};",
                "lang": "C++",
                "langSlug": "cpp"
            },
            {
                "code": "class Solution {\n    public int numberOfSpecialChars(String word) {\n\n    }\n}",
                "lang": "Java",
                "langSlug": "java"
            },
            {
                "code": "class Solution(object):\n    def numberOfSpecialChars(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"",
                "lang": "Python",
                "langSlug": "python"
            },
            {
                "code": "class Solution:\n    def numberOfSpecialChars(self, word: str) -> int:",
                "lang": "Python3",
                "langSlug": "python3"
            },
            {
                "code": "int numberOfSpecialChars(char* word) {\n    \n}",
                "lang": "C",
                "langSlug": "c"
            },
            {
                "code": "public class Solution {\n    public int NumberOfSpecialChars(string word) {\n\n    }\n}",
                "lang": "C#",
                "langSlug": "csharp"
            },
            {
                "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar numberOfSpecialChars = function(word) {\n\n};",
                "lang": "JavaScript",
                "langSlug": "javascript"
            },
            {
                "code": "function numberOfSpecialChars(word: string): number {\n    \n};",
                "lang": "TypeScript",
                "langSlug": "typescript"
            },
            {
                "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function numberOfSpecialChars($word) {\n\n    }\n}",
                "lang": "PHP",
                "langSlug": "php"
            },
            {
                "code": "class Solution {\n    func numberOfSpecialChars(_ word: String) -> Int {\n\n    }\n}",
                "lang": "Swift",
                "langSlug": "swift"
            },
            {
                "code": "class Solution {\n    fun numberOfSpecialChars(word: String): Int {\n\n    }\n}",
                "lang": "Kotlin",
                "langSlug": "kotlin"
            },
            {
                "code": "class Solution {\n  int numberOfSpecialChars(String word) {\n    \n  }\n}",
                "lang": "Dart",
                "langSlug": "dart"
            },
            {
                "code": "func numberOfSpecialChars(word string) int {\n\n}",
                "lang": "Go",
                "langSlug": "golang"
            },
            {
                "code": "# @param {String} word\n# @return {Integer}\ndef number_of_special_chars(word)\n\nend",
                "lang": "Ruby",
                "langSlug": "ruby"
            },
            {
                "code": "object Solution {\n    def numberOfSpecialChars(word: String): Int = {\n        \n    }\n}",
                "lang": "Scala",
                "langSlug": "scala"
            },
            {
                "code": "impl Solution {\n    pub fn number_of_special_chars(word: String) -> i32 {\n\n    }\n}",
                "lang": "Rust",
                "langSlug": "rust"
            },
            {
                "code": "(define/contract (number-of-special-chars word)\n  (-> string? exact-integer?)\n  )",
                "lang": "Racket",
                "langSlug": "racket"
            },
            {
                "code": "-spec number_of_special_chars(Word :: unicode:unicode_binary()) -> integer().\nnumber_of_special_chars(Word) ->\n  .",
                "lang": "Erlang",
                "langSlug": "erlang"
            },
            {
                "code": "defmodule Solution do\n  @spec number_of_special_chars(word :: String.t) :: integer\n  def number_of_special_chars(word) do\n    \n  end\nend",
                "lang": "Elixir",
                "langSlug": "elixir"
            }
        ],
        "content": "<p>You are given a string <code>word</code>. A letter is called <strong>special</strong> if it appears <strong>both</strong> in lowercase and uppercase in <code>word</code>.</p>\n\n<p>Return the number of<em> </em><strong>special</strong> letters in<em> </em><code>word</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;aaAbcBC&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The special characters in <code>word</code> are <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>No character in <code>word</code> appears in uppercase.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word = &quot;abBCab&quot;</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only special character in <code>word</code> is <code>&#39;b&#39;</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 50</code></li>\n\t<li><code>word</code> consists of only lowercase and uppercase English letters.</li>\n</ul>\n",
        "exampleTestcases": "\"aaAbcBC\"\n\"abc\"\n\"abBCab\"",
        "formTitle": "[3120]Count the Number of Special Characters I",
        "frequency": 0.0,
        "frontendQuestionId": "3120",
        "hints": [
            "The constraints are small. For all 52 characters, check if they are present in <code>word</code>."
        ],
        "level": 1,
        "metaData": {
            "name": "numberOfSpecialChars",
            "params": [
                {
                    "name": "word",
                    "type": "string"
                }
            ]
        },
        "paidOnly": false,
        "questionId": "3408",
        "similarQuestions": [
            "[]"
        ],
        "statusSign": " ",
        "testCase": "\"aaAbcBC\"",
        "title": "Count the Number of Special Characters I",
        "titleSlug": "count-the-number-of-special-characters-i",
        "infer_hints": [
            "Create a set to store the lowercase and uppercase characters that appear in the word.",
            "You can use the function <code>str.isupper()</code> to check if a letter is uppercase.",
            "Can we count all characters and subtract those that appear in both lowercase and uppercase?",
            "Use a hash set to store the special characters.",
            "Use a set to keep track of the letters that are in both lowercase and uppercase.",
            "Create a list of all the lowercase and uppercase letters.",
            "Create a set of all uppercase letters.",
            "We can count the number of special characters in the string.",
            "Iterate over the string from left to right, maintaining a set of characters which have appeared in the string so far.",
            "Use a set to store all the characters in lowercase.",
            "Convert the string to an array of characters.",
            "Use the properties of the alphabet.",
            "Use a set to keep track of all the uppercase and lowercase characters that appear in the string.",
            "Use a set to store the characters that are present in the string.",
            "Loop through the string and for each character, check if it is uppercase or lowercase.",
            "Count the number of letters in each word.",
            "Use a set to store the uppercase letters that have appeared.",
            "Convert each letter to its ASCII value.",
            "You can use a set to store the special characters.",
            "How many special characters are there in the string?"
        ]
    }
]